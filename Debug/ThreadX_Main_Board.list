
ThreadX_Main_Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca1c  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004e0  0800cc00  0800cc00  0000dc00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d0e0  0800d0e0  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d0e0  0800d0e0  0000e0e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d0e8  0800d0e8  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d0e8  0800d0e8  0000e0e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d0ec  0800d0ec  0000e0ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d0f0  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000276c  200001d8  0800d2c8  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002944  0800d2c8  0000f944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e846  00000000  00000000  0000f208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004ede  00000000  00000000  0002da4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001718  00000000  00000000  00032930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001142  00000000  00000000  00034048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025137  00000000  00000000  0003518a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00021430  00000000  00000000  0005a2c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e36ea  00000000  00000000  0007b6f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0015eddb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e50  00000000  00000000  0015ee20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000e2  00000000  00000000  00165c70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cbe4 	.word	0x0800cbe4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	0800cbe4 	.word	0x0800cbe4

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	491a      	ldr	r1, [pc, #104]	@ (8000290 <__tx_DBGHandler+0x6>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4819      	ldr	r0, [pc, #100]	@ (8000294 <__tx_DBGHandler+0xa>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4918      	ldr	r1, [pc, #96]	@ (8000290 <__tx_DBGHandler+0x6>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4818      	ldr	r0, [pc, #96]	@ (8000298 <__tx_DBGHandler+0xe>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	f643 617f 	movw	r1, #15999	@ 0x3e7f
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000246:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000248:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024c:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024e:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000252:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000256:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 800025a:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025e:	490f      	ldr	r1, [pc, #60]	@ (800029c <__tx_DBGHandler+0x12>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 8000260:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000264:	4770      	bx	lr

08000266 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000266:	f7ff bffe 	b.w	8000266 <__tx_BadHandler>

0800026a <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 800026a:	f7ff bffe 	b.w	800026a <__tx_HardfaultHandler>

0800026e <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026e:	f7ff bffe 	b.w	800026e <__tx_SVCallHandler>

08000272 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000272:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000274:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000278:	4770      	bx	lr

0800027a <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 800027a:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027c:	f000 f890 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000280:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000284:	4770      	bx	lr

08000286 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000286:	f7ff bffe 	b.w	8000286 <__tx_NMIHandler>

0800028a <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 800028a:	f7ff bffe 	b.w	800028a <__tx_DBGHandler>
 800028e:	0000      	.short	0x0000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000290:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000294:	200021ec 	.word	0x200021ec
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000298:	e0001000 	.word	0xe0001000
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	@ (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	@ (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	@ (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	@ (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	20002288 	.word	0x20002288
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	200021f0 	.word	0x200021f0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	200021f4 	.word	0x200021f4
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	200027f4 	.word	0x200027f4

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	@ (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	@ (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f007 fcad 	bl	8007d58 <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f007 fbfc 	bl	8007c00 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	@ (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	@ (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	@ (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20002294 	.word	0x20002294
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	200027f4 	.word	0x200027f4
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	20002298 	.word	0x20002298
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	20002324 	.word	0x20002324
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	20002328 	.word	0x20002328
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	20002320 	.word	0x20002320
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	2000231c 	.word	0x2000231c
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	20002288 	.word	0x20002288
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	200021f0 	.word	0x200021f0
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	200021f4 	.word	0x200021f4
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04
	...

08000460 <memchr>:
 8000460:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000464:	2a10      	cmp	r2, #16
 8000466:	db2b      	blt.n	80004c0 <memchr+0x60>
 8000468:	f010 0f07 	tst.w	r0, #7
 800046c:	d008      	beq.n	8000480 <memchr+0x20>
 800046e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000472:	3a01      	subs	r2, #1
 8000474:	428b      	cmp	r3, r1
 8000476:	d02d      	beq.n	80004d4 <memchr+0x74>
 8000478:	f010 0f07 	tst.w	r0, #7
 800047c:	b342      	cbz	r2, 80004d0 <memchr+0x70>
 800047e:	d1f6      	bne.n	800046e <memchr+0xe>
 8000480:	b4f0      	push	{r4, r5, r6, r7}
 8000482:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000486:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800048a:	f022 0407 	bic.w	r4, r2, #7
 800048e:	f07f 0700 	mvns.w	r7, #0
 8000492:	2300      	movs	r3, #0
 8000494:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000498:	3c08      	subs	r4, #8
 800049a:	ea85 0501 	eor.w	r5, r5, r1
 800049e:	ea86 0601 	eor.w	r6, r6, r1
 80004a2:	fa85 f547 	uadd8	r5, r5, r7
 80004a6:	faa3 f587 	sel	r5, r3, r7
 80004aa:	fa86 f647 	uadd8	r6, r6, r7
 80004ae:	faa5 f687 	sel	r6, r5, r7
 80004b2:	b98e      	cbnz	r6, 80004d8 <memchr+0x78>
 80004b4:	d1ee      	bne.n	8000494 <memchr+0x34>
 80004b6:	bcf0      	pop	{r4, r5, r6, r7}
 80004b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80004bc:	f002 0207 	and.w	r2, r2, #7
 80004c0:	b132      	cbz	r2, 80004d0 <memchr+0x70>
 80004c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004c6:	3a01      	subs	r2, #1
 80004c8:	ea83 0301 	eor.w	r3, r3, r1
 80004cc:	b113      	cbz	r3, 80004d4 <memchr+0x74>
 80004ce:	d1f8      	bne.n	80004c2 <memchr+0x62>
 80004d0:	2000      	movs	r0, #0
 80004d2:	4770      	bx	lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4770      	bx	lr
 80004d8:	2d00      	cmp	r5, #0
 80004da:	bf06      	itte	eq
 80004dc:	4635      	moveq	r5, r6
 80004de:	3803      	subeq	r0, #3
 80004e0:	3807      	subne	r0, #7
 80004e2:	f015 0f01 	tst.w	r5, #1
 80004e6:	d107      	bne.n	80004f8 <memchr+0x98>
 80004e8:	3001      	adds	r0, #1
 80004ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80004ee:	bf02      	ittt	eq
 80004f0:	3001      	addeq	r0, #1
 80004f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80004f6:	3001      	addeq	r0, #1
 80004f8:	bcf0      	pop	{r4, r5, r6, r7}
 80004fa:	3801      	subs	r0, #1
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <strlen>:
 8000500:	4603      	mov	r3, r0
 8000502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000506:	2a00      	cmp	r2, #0
 8000508:	d1fb      	bne.n	8000502 <strlen+0x2>
 800050a:	1a18      	subs	r0, r3, r0
 800050c:	3801      	subs	r0, #1
 800050e:	4770      	bx	lr

08000510 <__aeabi_drsub>:
 8000510:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000514:	e002      	b.n	800051c <__adddf3>
 8000516:	bf00      	nop

08000518 <__aeabi_dsub>:
 8000518:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800051c <__adddf3>:
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000522:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	bf1f      	itttt	ne
 8000532:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000536:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800053e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000542:	f000 80e2 	beq.w	800070a <__adddf3+0x1ee>
 8000546:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800054e:	bfb8      	it	lt
 8000550:	426d      	neglt	r5, r5
 8000552:	dd0c      	ble.n	800056e <__adddf3+0x52>
 8000554:	442c      	add	r4, r5
 8000556:	ea80 0202 	eor.w	r2, r0, r2
 800055a:	ea81 0303 	eor.w	r3, r1, r3
 800055e:	ea82 0000 	eor.w	r0, r2, r0
 8000562:	ea83 0101 	eor.w	r1, r3, r1
 8000566:	ea80 0202 	eor.w	r2, r0, r2
 800056a:	ea81 0303 	eor.w	r3, r1, r3
 800056e:	2d36      	cmp	r5, #54	@ 0x36
 8000570:	bf88      	it	hi
 8000572:	bd30      	pophi	{r4, r5, pc}
 8000574:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000578:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800057c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000580:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000584:	d002      	beq.n	800058c <__adddf3+0x70>
 8000586:	4240      	negs	r0, r0
 8000588:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800058c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000590:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000594:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x84>
 800059a:	4252      	negs	r2, r2
 800059c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a0:	ea94 0f05 	teq	r4, r5
 80005a4:	f000 80a7 	beq.w	80006f6 <__adddf3+0x1da>
 80005a8:	f1a4 0401 	sub.w	r4, r4, #1
 80005ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b0:	db0d      	blt.n	80005ce <__adddf3+0xb2>
 80005b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005b6:	fa22 f205 	lsr.w	r2, r2, r5
 80005ba:	1880      	adds	r0, r0, r2
 80005bc:	f141 0100 	adc.w	r1, r1, #0
 80005c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c4:	1880      	adds	r0, r0, r2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	4159      	adcs	r1, r3
 80005cc:	e00e      	b.n	80005ec <__adddf3+0xd0>
 80005ce:	f1a5 0520 	sub.w	r5, r5, #32
 80005d2:	f10e 0e20 	add.w	lr, lr, #32
 80005d6:	2a01      	cmp	r2, #1
 80005d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005dc:	bf28      	it	cs
 80005de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e2:	fa43 f305 	asr.w	r3, r3, r5
 80005e6:	18c0      	adds	r0, r0, r3
 80005e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	d507      	bpl.n	8000602 <__adddf3+0xe6>
 80005f2:	f04f 0e00 	mov.w	lr, #0
 80005f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000602:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000606:	d31b      	bcc.n	8000640 <__adddf3+0x124>
 8000608:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800060c:	d30c      	bcc.n	8000628 <__adddf3+0x10c>
 800060e:	0849      	lsrs	r1, r1, #1
 8000610:	ea5f 0030 	movs.w	r0, r0, rrx
 8000614:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000618:	f104 0401 	add.w	r4, r4, #1
 800061c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000620:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000624:	f080 809a 	bcs.w	800075c <__adddf3+0x240>
 8000628:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	ea41 0105 	orr.w	r1, r1, r5
 800063e:	bd30      	pop	{r4, r5, pc}
 8000640:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000644:	4140      	adcs	r0, r0
 8000646:	eb41 0101 	adc.w	r1, r1, r1
 800064a:	3c01      	subs	r4, #1
 800064c:	bf28      	it	cs
 800064e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000652:	d2e9      	bcs.n	8000628 <__adddf3+0x10c>
 8000654:	f091 0f00 	teq	r1, #0
 8000658:	bf04      	itt	eq
 800065a:	4601      	moveq	r1, r0
 800065c:	2000      	moveq	r0, #0
 800065e:	fab1 f381 	clz	r3, r1
 8000662:	bf08      	it	eq
 8000664:	3320      	addeq	r3, #32
 8000666:	f1a3 030b 	sub.w	r3, r3, #11
 800066a:	f1b3 0220 	subs.w	r2, r3, #32
 800066e:	da0c      	bge.n	800068a <__adddf3+0x16e>
 8000670:	320c      	adds	r2, #12
 8000672:	dd08      	ble.n	8000686 <__adddf3+0x16a>
 8000674:	f102 0c14 	add.w	ip, r2, #20
 8000678:	f1c2 020c 	rsb	r2, r2, #12
 800067c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000680:	fa21 f102 	lsr.w	r1, r1, r2
 8000684:	e00c      	b.n	80006a0 <__adddf3+0x184>
 8000686:	f102 0214 	add.w	r2, r2, #20
 800068a:	bfd8      	it	le
 800068c:	f1c2 0c20 	rsble	ip, r2, #32
 8000690:	fa01 f102 	lsl.w	r1, r1, r2
 8000694:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000698:	bfdc      	itt	le
 800069a:	ea41 010c 	orrle.w	r1, r1, ip
 800069e:	4090      	lslle	r0, r2
 80006a0:	1ae4      	subs	r4, r4, r3
 80006a2:	bfa2      	ittt	ge
 80006a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a8:	4329      	orrge	r1, r5
 80006aa:	bd30      	popge	{r4, r5, pc}
 80006ac:	ea6f 0404 	mvn.w	r4, r4
 80006b0:	3c1f      	subs	r4, #31
 80006b2:	da1c      	bge.n	80006ee <__adddf3+0x1d2>
 80006b4:	340c      	adds	r4, #12
 80006b6:	dc0e      	bgt.n	80006d6 <__adddf3+0x1ba>
 80006b8:	f104 0414 	add.w	r4, r4, #20
 80006bc:	f1c4 0220 	rsb	r2, r4, #32
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f302 	lsl.w	r3, r1, r2
 80006c8:	ea40 0003 	orr.w	r0, r0, r3
 80006cc:	fa21 f304 	lsr.w	r3, r1, r4
 80006d0:	ea45 0103 	orr.w	r1, r5, r3
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	f1c4 040c 	rsb	r4, r4, #12
 80006da:	f1c4 0220 	rsb	r2, r4, #32
 80006de:	fa20 f002 	lsr.w	r0, r0, r2
 80006e2:	fa01 f304 	lsl.w	r3, r1, r4
 80006e6:	ea40 0003 	orr.w	r0, r0, r3
 80006ea:	4629      	mov	r1, r5
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	fa21 f004 	lsr.w	r0, r1, r4
 80006f2:	4629      	mov	r1, r5
 80006f4:	bd30      	pop	{r4, r5, pc}
 80006f6:	f094 0f00 	teq	r4, #0
 80006fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006fe:	bf06      	itte	eq
 8000700:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000704:	3401      	addeq	r4, #1
 8000706:	3d01      	subne	r5, #1
 8000708:	e74e      	b.n	80005a8 <__adddf3+0x8c>
 800070a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070e:	bf18      	it	ne
 8000710:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000714:	d029      	beq.n	800076a <__adddf3+0x24e>
 8000716:	ea94 0f05 	teq	r4, r5
 800071a:	bf08      	it	eq
 800071c:	ea90 0f02 	teqeq	r0, r2
 8000720:	d005      	beq.n	800072e <__adddf3+0x212>
 8000722:	ea54 0c00 	orrs.w	ip, r4, r0
 8000726:	bf04      	itt	eq
 8000728:	4619      	moveq	r1, r3
 800072a:	4610      	moveq	r0, r2
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea91 0f03 	teq	r1, r3
 8000732:	bf1e      	ittt	ne
 8000734:	2100      	movne	r1, #0
 8000736:	2000      	movne	r0, #0
 8000738:	bd30      	popne	{r4, r5, pc}
 800073a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800073e:	d105      	bne.n	800074c <__adddf3+0x230>
 8000740:	0040      	lsls	r0, r0, #1
 8000742:	4149      	adcs	r1, r1
 8000744:	bf28      	it	cs
 8000746:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074a:	bd30      	pop	{r4, r5, pc}
 800074c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000750:	bf3c      	itt	cc
 8000752:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000756:	bd30      	popcc	{r4, r5, pc}
 8000758:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800075c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000760:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd30      	pop	{r4, r5, pc}
 800076a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800076e:	bf1a      	itte	ne
 8000770:	4619      	movne	r1, r3
 8000772:	4610      	movne	r0, r2
 8000774:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000778:	bf1c      	itt	ne
 800077a:	460b      	movne	r3, r1
 800077c:	4602      	movne	r2, r0
 800077e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000782:	bf06      	itte	eq
 8000784:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000788:	ea91 0f03 	teqeq	r1, r3
 800078c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000790:	bd30      	pop	{r4, r5, pc}
 8000792:	bf00      	nop

08000794 <__aeabi_ui2d>:
 8000794:	f090 0f00 	teq	r0, #0
 8000798:	bf04      	itt	eq
 800079a:	2100      	moveq	r1, #0
 800079c:	4770      	bxeq	lr
 800079e:	b530      	push	{r4, r5, lr}
 80007a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a8:	f04f 0500 	mov.w	r5, #0
 80007ac:	f04f 0100 	mov.w	r1, #0
 80007b0:	e750      	b.n	8000654 <__adddf3+0x138>
 80007b2:	bf00      	nop

080007b4 <__aeabi_i2d>:
 80007b4:	f090 0f00 	teq	r0, #0
 80007b8:	bf04      	itt	eq
 80007ba:	2100      	moveq	r1, #0
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007cc:	bf48      	it	mi
 80007ce:	4240      	negmi	r0, r0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	e73e      	b.n	8000654 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_f2d>:
 80007d8:	0042      	lsls	r2, r0, #1
 80007da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007de:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007e6:	bf1f      	itttt	ne
 80007e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f4:	4770      	bxne	lr
 80007f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fa:	bf08      	it	eq
 80007fc:	4770      	bxeq	lr
 80007fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000802:	bf04      	itt	eq
 8000804:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000808:	4770      	bxeq	lr
 800080a:	b530      	push	{r4, r5, lr}
 800080c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000810:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000814:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	e71c      	b.n	8000654 <__adddf3+0x138>
 800081a:	bf00      	nop

0800081c <__aeabi_ul2d>:
 800081c:	ea50 0201 	orrs.w	r2, r0, r1
 8000820:	bf08      	it	eq
 8000822:	4770      	bxeq	lr
 8000824:	b530      	push	{r4, r5, lr}
 8000826:	f04f 0500 	mov.w	r5, #0
 800082a:	e00a      	b.n	8000842 <__aeabi_l2d+0x16>

0800082c <__aeabi_l2d>:
 800082c:	ea50 0201 	orrs.w	r2, r0, r1
 8000830:	bf08      	it	eq
 8000832:	4770      	bxeq	lr
 8000834:	b530      	push	{r4, r5, lr}
 8000836:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083a:	d502      	bpl.n	8000842 <__aeabi_l2d+0x16>
 800083c:	4240      	negs	r0, r0
 800083e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000842:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000846:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800084e:	f43f aed8 	beq.w	8000602 <__adddf3+0xe6>
 8000852:	f04f 0203 	mov.w	r2, #3
 8000856:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085a:	bf18      	it	ne
 800085c:	3203      	addne	r2, #3
 800085e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000862:	bf18      	it	ne
 8000864:	3203      	addne	r2, #3
 8000866:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086a:	f1c2 0320 	rsb	r3, r2, #32
 800086e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000872:	fa20 f002 	lsr.w	r0, r0, r2
 8000876:	fa01 fe03 	lsl.w	lr, r1, r3
 800087a:	ea40 000e 	orr.w	r0, r0, lr
 800087e:	fa21 f102 	lsr.w	r1, r1, r2
 8000882:	4414      	add	r4, r2
 8000884:	e6bd      	b.n	8000602 <__adddf3+0xe6>
 8000886:	bf00      	nop

08000888 <__aeabi_dmul>:
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000892:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000896:	bf1d      	ittte	ne
 8000898:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800089c:	ea94 0f0c 	teqne	r4, ip
 80008a0:	ea95 0f0c 	teqne	r5, ip
 80008a4:	f000 f8de 	bleq	8000a64 <__aeabi_dmul+0x1dc>
 80008a8:	442c      	add	r4, r5
 80008aa:	ea81 0603 	eor.w	r6, r1, r3
 80008ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008ba:	bf18      	it	ne
 80008bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80008c8:	d038      	beq.n	800093c <__aeabi_dmul+0xb4>
 80008ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80008ce:	f04f 0500 	mov.w	r5, #0
 80008d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80008da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008de:	f04f 0600 	mov.w	r6, #0
 80008e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008e6:	f09c 0f00 	teq	ip, #0
 80008ea:	bf18      	it	ne
 80008ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80008f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80008f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80008f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80008fc:	d204      	bcs.n	8000908 <__aeabi_dmul+0x80>
 80008fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000902:	416d      	adcs	r5, r5
 8000904:	eb46 0606 	adc.w	r6, r6, r6
 8000908:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800090c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000910:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000914:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000918:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800091c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000920:	bf88      	it	hi
 8000922:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000926:	d81e      	bhi.n	8000966 <__aeabi_dmul+0xde>
 8000928:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800092c:	bf08      	it	eq
 800092e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000932:	f150 0000 	adcs.w	r0, r0, #0
 8000936:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093a:	bd70      	pop	{r4, r5, r6, pc}
 800093c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000940:	ea46 0101 	orr.w	r1, r6, r1
 8000944:	ea40 0002 	orr.w	r0, r0, r2
 8000948:	ea81 0103 	eor.w	r1, r1, r3
 800094c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000950:	bfc2      	ittt	gt
 8000952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095a:	bd70      	popgt	{r4, r5, r6, pc}
 800095c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000960:	f04f 0e00 	mov.w	lr, #0
 8000964:	3c01      	subs	r4, #1
 8000966:	f300 80ab 	bgt.w	8000ac0 <__aeabi_dmul+0x238>
 800096a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800096e:	bfde      	ittt	le
 8000970:	2000      	movle	r0, #0
 8000972:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000976:	bd70      	pople	{r4, r5, r6, pc}
 8000978:	f1c4 0400 	rsb	r4, r4, #0
 800097c:	3c20      	subs	r4, #32
 800097e:	da35      	bge.n	80009ec <__aeabi_dmul+0x164>
 8000980:	340c      	adds	r4, #12
 8000982:	dc1b      	bgt.n	80009bc <__aeabi_dmul+0x134>
 8000984:	f104 0414 	add.w	r4, r4, #20
 8000988:	f1c4 0520 	rsb	r5, r4, #32
 800098c:	fa00 f305 	lsl.w	r3, r0, r5
 8000990:	fa20 f004 	lsr.w	r0, r0, r4
 8000994:	fa01 f205 	lsl.w	r2, r1, r5
 8000998:	ea40 0002 	orr.w	r0, r0, r2
 800099c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80009a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80009a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009a8:	fa21 f604 	lsr.w	r6, r1, r4
 80009ac:	eb42 0106 	adc.w	r1, r2, r6
 80009b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009b4:	bf08      	it	eq
 80009b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	f1c4 040c 	rsb	r4, r4, #12
 80009c0:	f1c4 0520 	rsb	r5, r4, #32
 80009c4:	fa00 f304 	lsl.w	r3, r0, r4
 80009c8:	fa20 f005 	lsr.w	r0, r0, r5
 80009cc:	fa01 f204 	lsl.w	r2, r1, r4
 80009d0:	ea40 0002 	orr.w	r0, r0, r2
 80009d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80009d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009dc:	f141 0100 	adc.w	r1, r1, #0
 80009e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009e4:	bf08      	it	eq
 80009e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f1c4 0520 	rsb	r5, r4, #32
 80009f0:	fa00 f205 	lsl.w	r2, r0, r5
 80009f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80009f8:	fa20 f304 	lsr.w	r3, r0, r4
 80009fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000a00:	ea43 0302 	orr.w	r3, r3, r2
 8000a04:	fa21 f004 	lsr.w	r0, r1, r4
 8000a08:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000a0c:	fa21 f204 	lsr.w	r2, r1, r4
 8000a10:	ea20 0002 	bic.w	r0, r0, r2
 8000a14:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a1c:	bf08      	it	eq
 8000a1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a22:	bd70      	pop	{r4, r5, r6, pc}
 8000a24:	f094 0f00 	teq	r4, #0
 8000a28:	d10f      	bne.n	8000a4a <__aeabi_dmul+0x1c2>
 8000a2a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000a2e:	0040      	lsls	r0, r0, #1
 8000a30:	eb41 0101 	adc.w	r1, r1, r1
 8000a34:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a38:	bf08      	it	eq
 8000a3a:	3c01      	subeq	r4, #1
 8000a3c:	d0f7      	beq.n	8000a2e <__aeabi_dmul+0x1a6>
 8000a3e:	ea41 0106 	orr.w	r1, r1, r6
 8000a42:	f095 0f00 	teq	r5, #0
 8000a46:	bf18      	it	ne
 8000a48:	4770      	bxne	lr
 8000a4a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000a4e:	0052      	lsls	r2, r2, #1
 8000a50:	eb43 0303 	adc.w	r3, r3, r3
 8000a54:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000a58:	bf08      	it	eq
 8000a5a:	3d01      	subeq	r5, #1
 8000a5c:	d0f7      	beq.n	8000a4e <__aeabi_dmul+0x1c6>
 8000a5e:	ea43 0306 	orr.w	r3, r3, r6
 8000a62:	4770      	bx	lr
 8000a64:	ea94 0f0c 	teq	r4, ip
 8000a68:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6c:	bf18      	it	ne
 8000a6e:	ea95 0f0c 	teqne	r5, ip
 8000a72:	d00c      	beq.n	8000a8e <__aeabi_dmul+0x206>
 8000a74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a7e:	d1d1      	bne.n	8000a24 <__aeabi_dmul+0x19c>
 8000a80:	ea81 0103 	eor.w	r1, r1, r3
 8000a84:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
 8000a8e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a92:	bf06      	itte	eq
 8000a94:	4610      	moveq	r0, r2
 8000a96:	4619      	moveq	r1, r3
 8000a98:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a9c:	d019      	beq.n	8000ad2 <__aeabi_dmul+0x24a>
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dmul+0x222>
 8000aa4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000aa8:	d113      	bne.n	8000ad2 <__aeabi_dmul+0x24a>
 8000aaa:	ea95 0f0c 	teq	r5, ip
 8000aae:	d105      	bne.n	8000abc <__aeabi_dmul+0x234>
 8000ab0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000ab4:	bf1c      	itt	ne
 8000ab6:	4610      	movne	r0, r2
 8000ab8:	4619      	movne	r1, r3
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dmul+0x24a>
 8000abc:	ea81 0103 	eor.w	r1, r1, r3
 8000ac0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000ac4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000ac8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	bd70      	pop	{r4, r5, r6, pc}
 8000ad2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000ad6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000ada:	bd70      	pop	{r4, r5, r6, pc}

08000adc <__aeabi_ddiv>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ae2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000ae6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000aea:	bf1d      	ittte	ne
 8000aec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000af0:	ea94 0f0c 	teqne	r4, ip
 8000af4:	ea95 0f0c 	teqne	r5, ip
 8000af8:	f000 f8a7 	bleq	8000c4a <__aeabi_ddiv+0x16e>
 8000afc:	eba4 0405 	sub.w	r4, r4, r5
 8000b00:	ea81 0e03 	eor.w	lr, r1, r3
 8000b04:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b08:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b0c:	f000 8088 	beq.w	8000c20 <__aeabi_ddiv+0x144>
 8000b10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b14:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000b18:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b20:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b24:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b28:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b2c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b30:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000b34:	429d      	cmp	r5, r3
 8000b36:	bf08      	it	eq
 8000b38:	4296      	cmpeq	r6, r2
 8000b3a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000b3e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000b42:	d202      	bcs.n	8000b4a <__aeabi_ddiv+0x6e>
 8000b44:	085b      	lsrs	r3, r3, #1
 8000b46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b4a:	1ab6      	subs	r6, r6, r2
 8000b4c:	eb65 0503 	sbc.w	r5, r5, r3
 8000b50:	085b      	lsrs	r3, r3, #1
 8000b52:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b56:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000b5a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000b5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b66:	bf22      	ittt	cs
 8000b68:	1ab6      	subcs	r6, r6, r2
 8000b6a:	4675      	movcs	r5, lr
 8000b6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b7e:	bf22      	ittt	cs
 8000b80:	1ab6      	subcs	r6, r6, r2
 8000b82:	4675      	movcs	r5, lr
 8000b84:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b88:	085b      	lsrs	r3, r3, #1
 8000b8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b96:	bf22      	ittt	cs
 8000b98:	1ab6      	subcs	r6, r6, r2
 8000b9a:	4675      	movcs	r5, lr
 8000b9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ba0:	085b      	lsrs	r3, r3, #1
 8000ba2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000ba6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000baa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bae:	bf22      	ittt	cs
 8000bb0:	1ab6      	subcs	r6, r6, r2
 8000bb2:	4675      	movcs	r5, lr
 8000bb4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bb8:	ea55 0e06 	orrs.w	lr, r5, r6
 8000bbc:	d018      	beq.n	8000bf0 <__aeabi_ddiv+0x114>
 8000bbe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000bc2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000bc6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000bca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000bd2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bd6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bda:	d1c0      	bne.n	8000b5e <__aeabi_ddiv+0x82>
 8000bdc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000be0:	d10b      	bne.n	8000bfa <__aeabi_ddiv+0x11e>
 8000be2:	ea41 0100 	orr.w	r1, r1, r0
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000bee:	e7b6      	b.n	8000b5e <__aeabi_ddiv+0x82>
 8000bf0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000bf4:	bf04      	itt	eq
 8000bf6:	4301      	orreq	r1, r0
 8000bf8:	2000      	moveq	r0, #0
 8000bfa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000bfe:	bf88      	it	hi
 8000c00:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000c04:	f63f aeaf 	bhi.w	8000966 <__aeabi_dmul+0xde>
 8000c08:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c0c:	bf04      	itt	eq
 8000c0e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c16:	f150 0000 	adcs.w	r0, r0, #0
 8000c1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c1e:	bd70      	pop	{r4, r5, r6, pc}
 8000c20:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000c24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c2c:	bfc2      	ittt	gt
 8000c2e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c36:	bd70      	popgt	{r4, r5, r6, pc}
 8000c38:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3c:	f04f 0e00 	mov.w	lr, #0
 8000c40:	3c01      	subs	r4, #1
 8000c42:	e690      	b.n	8000966 <__aeabi_dmul+0xde>
 8000c44:	ea45 0e06 	orr.w	lr, r5, r6
 8000c48:	e68d      	b.n	8000966 <__aeabi_dmul+0xde>
 8000c4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c4e:	ea94 0f0c 	teq	r4, ip
 8000c52:	bf08      	it	eq
 8000c54:	ea95 0f0c 	teqeq	r5, ip
 8000c58:	f43f af3b 	beq.w	8000ad2 <__aeabi_dmul+0x24a>
 8000c5c:	ea94 0f0c 	teq	r4, ip
 8000c60:	d10a      	bne.n	8000c78 <__aeabi_ddiv+0x19c>
 8000c62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c66:	f47f af34 	bne.w	8000ad2 <__aeabi_dmul+0x24a>
 8000c6a:	ea95 0f0c 	teq	r5, ip
 8000c6e:	f47f af25 	bne.w	8000abc <__aeabi_dmul+0x234>
 8000c72:	4610      	mov	r0, r2
 8000c74:	4619      	mov	r1, r3
 8000c76:	e72c      	b.n	8000ad2 <__aeabi_dmul+0x24a>
 8000c78:	ea95 0f0c 	teq	r5, ip
 8000c7c:	d106      	bne.n	8000c8c <__aeabi_ddiv+0x1b0>
 8000c7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c82:	f43f aefd 	beq.w	8000a80 <__aeabi_dmul+0x1f8>
 8000c86:	4610      	mov	r0, r2
 8000c88:	4619      	mov	r1, r3
 8000c8a:	e722      	b.n	8000ad2 <__aeabi_dmul+0x24a>
 8000c8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c90:	bf18      	it	ne
 8000c92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c96:	f47f aec5 	bne.w	8000a24 <__aeabi_dmul+0x19c>
 8000c9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c9e:	f47f af0d 	bne.w	8000abc <__aeabi_dmul+0x234>
 8000ca2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ca6:	f47f aeeb 	bne.w	8000a80 <__aeabi_dmul+0x1f8>
 8000caa:	e712      	b.n	8000ad2 <__aeabi_dmul+0x24a>

08000cac <__gedf2>:
 8000cac:	f04f 3cff 	mov.w	ip, #4294967295
 8000cb0:	e006      	b.n	8000cc0 <__cmpdf2+0x4>
 8000cb2:	bf00      	nop

08000cb4 <__ledf2>:
 8000cb4:	f04f 0c01 	mov.w	ip, #1
 8000cb8:	e002      	b.n	8000cc0 <__cmpdf2+0x4>
 8000cba:	bf00      	nop

08000cbc <__cmpdf2>:
 8000cbc:	f04f 0c01 	mov.w	ip, #1
 8000cc0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ccc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cd6:	d01b      	beq.n	8000d10 <__cmpdf2+0x54>
 8000cd8:	b001      	add	sp, #4
 8000cda:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cde:	bf0c      	ite	eq
 8000ce0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ce4:	ea91 0f03 	teqne	r1, r3
 8000ce8:	bf02      	ittt	eq
 8000cea:	ea90 0f02 	teqeq	r0, r2
 8000cee:	2000      	moveq	r0, #0
 8000cf0:	4770      	bxeq	lr
 8000cf2:	f110 0f00 	cmn.w	r0, #0
 8000cf6:	ea91 0f03 	teq	r1, r3
 8000cfa:	bf58      	it	pl
 8000cfc:	4299      	cmppl	r1, r3
 8000cfe:	bf08      	it	eq
 8000d00:	4290      	cmpeq	r0, r2
 8000d02:	bf2c      	ite	cs
 8000d04:	17d8      	asrcs	r0, r3, #31
 8000d06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d0a:	f040 0001 	orr.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d18:	d102      	bne.n	8000d20 <__cmpdf2+0x64>
 8000d1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d1e:	d107      	bne.n	8000d30 <__cmpdf2+0x74>
 8000d20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d28:	d1d6      	bne.n	8000cd8 <__cmpdf2+0x1c>
 8000d2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d2e:	d0d3      	beq.n	8000cd8 <__cmpdf2+0x1c>
 8000d30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <__aeabi_cdrcmple>:
 8000d38:	4684      	mov	ip, r0
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	4662      	mov	r2, ip
 8000d3e:	468c      	mov	ip, r1
 8000d40:	4619      	mov	r1, r3
 8000d42:	4663      	mov	r3, ip
 8000d44:	e000      	b.n	8000d48 <__aeabi_cdcmpeq>
 8000d46:	bf00      	nop

08000d48 <__aeabi_cdcmpeq>:
 8000d48:	b501      	push	{r0, lr}
 8000d4a:	f7ff ffb7 	bl	8000cbc <__cmpdf2>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	bf48      	it	mi
 8000d52:	f110 0f00 	cmnmi.w	r0, #0
 8000d56:	bd01      	pop	{r0, pc}

08000d58 <__aeabi_dcmpeq>:
 8000d58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d5c:	f7ff fff4 	bl	8000d48 <__aeabi_cdcmpeq>
 8000d60:	bf0c      	ite	eq
 8000d62:	2001      	moveq	r0, #1
 8000d64:	2000      	movne	r0, #0
 8000d66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6a:	bf00      	nop

08000d6c <__aeabi_dcmplt>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff ffea 	bl	8000d48 <__aeabi_cdcmpeq>
 8000d74:	bf34      	ite	cc
 8000d76:	2001      	movcc	r0, #1
 8000d78:	2000      	movcs	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_dcmple>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffe0 	bl	8000d48 <__aeabi_cdcmpeq>
 8000d88:	bf94      	ite	ls
 8000d8a:	2001      	movls	r0, #1
 8000d8c:	2000      	movhi	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_dcmpge>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffce 	bl	8000d38 <__aeabi_cdrcmple>
 8000d9c:	bf94      	ite	ls
 8000d9e:	2001      	movls	r0, #1
 8000da0:	2000      	movhi	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_dcmpgt>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffc4 	bl	8000d38 <__aeabi_cdrcmple>
 8000db0:	bf34      	ite	cc
 8000db2:	2001      	movcc	r0, #1
 8000db4:	2000      	movcs	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_dcmpun>:
 8000dbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000dc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dc4:	d102      	bne.n	8000dcc <__aeabi_dcmpun+0x10>
 8000dc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dca:	d10a      	bne.n	8000de2 <__aeabi_dcmpun+0x26>
 8000dcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000dd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dd4:	d102      	bne.n	8000ddc <__aeabi_dcmpun+0x20>
 8000dd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dda:	d102      	bne.n	8000de2 <__aeabi_dcmpun+0x26>
 8000ddc:	f04f 0000 	mov.w	r0, #0
 8000de0:	4770      	bx	lr
 8000de2:	f04f 0001 	mov.w	r0, #1
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_d2iz>:
 8000de8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000dec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000df0:	d215      	bcs.n	8000e1e <__aeabi_d2iz+0x36>
 8000df2:	d511      	bpl.n	8000e18 <__aeabi_d2iz+0x30>
 8000df4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000df8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dfc:	d912      	bls.n	8000e24 <__aeabi_d2iz+0x3c>
 8000dfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e0a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000e0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000e12:	bf18      	it	ne
 8000e14:	4240      	negne	r0, r0
 8000e16:	4770      	bx	lr
 8000e18:	f04f 0000 	mov.w	r0, #0
 8000e1c:	4770      	bx	lr
 8000e1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e22:	d105      	bne.n	8000e30 <__aeabi_d2iz+0x48>
 8000e24:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000e28:	bf08      	it	eq
 8000e2a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e2e:	4770      	bx	lr
 8000e30:	f04f 0000 	mov.w	r0, #0
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <__aeabi_d2uiz>:
 8000e38:	004a      	lsls	r2, r1, #1
 8000e3a:	d211      	bcs.n	8000e60 <__aeabi_d2uiz+0x28>
 8000e3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000e40:	d211      	bcs.n	8000e66 <__aeabi_d2uiz+0x2e>
 8000e42:	d50d      	bpl.n	8000e60 <__aeabi_d2uiz+0x28>
 8000e44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000e48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000e4c:	d40e      	bmi.n	8000e6c <__aeabi_d2uiz+0x34>
 8000e4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e5a:	fa23 f002 	lsr.w	r0, r3, r2
 8000e5e:	4770      	bx	lr
 8000e60:	f04f 0000 	mov.w	r0, #0
 8000e64:	4770      	bx	lr
 8000e66:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e6a:	d102      	bne.n	8000e72 <__aeabi_d2uiz+0x3a>
 8000e6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e70:	4770      	bx	lr
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	4770      	bx	lr

08000e78 <__aeabi_d2f>:
 8000e78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000e7c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000e80:	bf24      	itt	cs
 8000e82:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000e86:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000e8a:	d90d      	bls.n	8000ea8 <__aeabi_d2f+0x30>
 8000e8c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e90:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000e94:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000e98:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000e9c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ea0:	bf08      	it	eq
 8000ea2:	f020 0001 	biceq.w	r0, r0, #1
 8000ea6:	4770      	bx	lr
 8000ea8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000eac:	d121      	bne.n	8000ef2 <__aeabi_d2f+0x7a>
 8000eae:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000eb2:	bfbc      	itt	lt
 8000eb4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000eb8:	4770      	bxlt	lr
 8000eba:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ebe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ec2:	f1c2 0218 	rsb	r2, r2, #24
 8000ec6:	f1c2 0c20 	rsb	ip, r2, #32
 8000eca:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ece:	fa20 f002 	lsr.w	r0, r0, r2
 8000ed2:	bf18      	it	ne
 8000ed4:	f040 0001 	orrne.w	r0, r0, #1
 8000ed8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000edc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ee0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ee4:	ea40 000c 	orr.w	r0, r0, ip
 8000ee8:	fa23 f302 	lsr.w	r3, r3, r2
 8000eec:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ef0:	e7cc      	b.n	8000e8c <__aeabi_d2f+0x14>
 8000ef2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ef6:	d107      	bne.n	8000f08 <__aeabi_d2f+0x90>
 8000ef8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000efc:	bf1e      	ittt	ne
 8000efe:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000f02:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000f06:	4770      	bxne	lr
 8000f08:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000f0c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000f10:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop

08000f18 <__aeabi_uldivmod>:
 8000f18:	b953      	cbnz	r3, 8000f30 <__aeabi_uldivmod+0x18>
 8000f1a:	b94a      	cbnz	r2, 8000f30 <__aeabi_uldivmod+0x18>
 8000f1c:	2900      	cmp	r1, #0
 8000f1e:	bf08      	it	eq
 8000f20:	2800      	cmpeq	r0, #0
 8000f22:	bf1c      	itt	ne
 8000f24:	f04f 31ff 	movne.w	r1, #4294967295
 8000f28:	f04f 30ff 	movne.w	r0, #4294967295
 8000f2c:	f000 b9a0 	b.w	8001270 <__aeabi_idiv0>
 8000f30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f38:	f000 f83c 	bl	8000fb4 <__udivmoddi4>
 8000f3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f44:	b004      	add	sp, #16
 8000f46:	4770      	bx	lr

08000f48 <__aeabi_d2lz>:
 8000f48:	b538      	push	{r3, r4, r5, lr}
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	4604      	mov	r4, r0
 8000f50:	460d      	mov	r5, r1
 8000f52:	f7ff ff0b 	bl	8000d6c <__aeabi_dcmplt>
 8000f56:	b928      	cbnz	r0, 8000f64 <__aeabi_d2lz+0x1c>
 8000f58:	4620      	mov	r0, r4
 8000f5a:	4629      	mov	r1, r5
 8000f5c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000f60:	f000 b80a 	b.w	8000f78 <__aeabi_d2ulz>
 8000f64:	4620      	mov	r0, r4
 8000f66:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000f6a:	f000 f805 	bl	8000f78 <__aeabi_d2ulz>
 8000f6e:	4240      	negs	r0, r0
 8000f70:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000f74:	bd38      	pop	{r3, r4, r5, pc}
 8000f76:	bf00      	nop

08000f78 <__aeabi_d2ulz>:
 8000f78:	b5d0      	push	{r4, r6, r7, lr}
 8000f7a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fac <__aeabi_d2ulz+0x34>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	4606      	mov	r6, r0
 8000f80:	460f      	mov	r7, r1
 8000f82:	f7ff fc81 	bl	8000888 <__aeabi_dmul>
 8000f86:	f7ff ff57 	bl	8000e38 <__aeabi_d2uiz>
 8000f8a:	4604      	mov	r4, r0
 8000f8c:	f7ff fc02 	bl	8000794 <__aeabi_ui2d>
 8000f90:	4b07      	ldr	r3, [pc, #28]	@ (8000fb0 <__aeabi_d2ulz+0x38>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	f7ff fc78 	bl	8000888 <__aeabi_dmul>
 8000f98:	4602      	mov	r2, r0
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	4630      	mov	r0, r6
 8000f9e:	4639      	mov	r1, r7
 8000fa0:	f7ff faba 	bl	8000518 <__aeabi_dsub>
 8000fa4:	f7ff ff48 	bl	8000e38 <__aeabi_d2uiz>
 8000fa8:	4621      	mov	r1, r4
 8000faa:	bdd0      	pop	{r4, r6, r7, pc}
 8000fac:	3df00000 	.word	0x3df00000
 8000fb0:	41f00000 	.word	0x41f00000

08000fb4 <__udivmoddi4>:
 8000fb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000fb8:	9d08      	ldr	r5, [sp, #32]
 8000fba:	460c      	mov	r4, r1
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d14e      	bne.n	800105e <__udivmoddi4+0xaa>
 8000fc0:	4694      	mov	ip, r2
 8000fc2:	458c      	cmp	ip, r1
 8000fc4:	4686      	mov	lr, r0
 8000fc6:	fab2 f282 	clz	r2, r2
 8000fca:	d962      	bls.n	8001092 <__udivmoddi4+0xde>
 8000fcc:	b14a      	cbz	r2, 8000fe2 <__udivmoddi4+0x2e>
 8000fce:	f1c2 0320 	rsb	r3, r2, #32
 8000fd2:	4091      	lsls	r1, r2
 8000fd4:	fa20 f303 	lsr.w	r3, r0, r3
 8000fd8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fdc:	4319      	orrs	r1, r3
 8000fde:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fe2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fe6:	fa1f f68c 	uxth.w	r6, ip
 8000fea:	fbb1 f4f7 	udiv	r4, r1, r7
 8000fee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ff2:	fb07 1114 	mls	r1, r7, r4, r1
 8000ff6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ffa:	fb04 f106 	mul.w	r1, r4, r6
 8000ffe:	4299      	cmp	r1, r3
 8001000:	d90a      	bls.n	8001018 <__udivmoddi4+0x64>
 8001002:	eb1c 0303 	adds.w	r3, ip, r3
 8001006:	f104 30ff 	add.w	r0, r4, #4294967295
 800100a:	f080 8112 	bcs.w	8001232 <__udivmoddi4+0x27e>
 800100e:	4299      	cmp	r1, r3
 8001010:	f240 810f 	bls.w	8001232 <__udivmoddi4+0x27e>
 8001014:	3c02      	subs	r4, #2
 8001016:	4463      	add	r3, ip
 8001018:	1a59      	subs	r1, r3, r1
 800101a:	fa1f f38e 	uxth.w	r3, lr
 800101e:	fbb1 f0f7 	udiv	r0, r1, r7
 8001022:	fb07 1110 	mls	r1, r7, r0, r1
 8001026:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800102a:	fb00 f606 	mul.w	r6, r0, r6
 800102e:	429e      	cmp	r6, r3
 8001030:	d90a      	bls.n	8001048 <__udivmoddi4+0x94>
 8001032:	eb1c 0303 	adds.w	r3, ip, r3
 8001036:	f100 31ff 	add.w	r1, r0, #4294967295
 800103a:	f080 80fc 	bcs.w	8001236 <__udivmoddi4+0x282>
 800103e:	429e      	cmp	r6, r3
 8001040:	f240 80f9 	bls.w	8001236 <__udivmoddi4+0x282>
 8001044:	4463      	add	r3, ip
 8001046:	3802      	subs	r0, #2
 8001048:	1b9b      	subs	r3, r3, r6
 800104a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800104e:	2100      	movs	r1, #0
 8001050:	b11d      	cbz	r5, 800105a <__udivmoddi4+0xa6>
 8001052:	40d3      	lsrs	r3, r2
 8001054:	2200      	movs	r2, #0
 8001056:	e9c5 3200 	strd	r3, r2, [r5]
 800105a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800105e:	428b      	cmp	r3, r1
 8001060:	d905      	bls.n	800106e <__udivmoddi4+0xba>
 8001062:	b10d      	cbz	r5, 8001068 <__udivmoddi4+0xb4>
 8001064:	e9c5 0100 	strd	r0, r1, [r5]
 8001068:	2100      	movs	r1, #0
 800106a:	4608      	mov	r0, r1
 800106c:	e7f5      	b.n	800105a <__udivmoddi4+0xa6>
 800106e:	fab3 f183 	clz	r1, r3
 8001072:	2900      	cmp	r1, #0
 8001074:	d146      	bne.n	8001104 <__udivmoddi4+0x150>
 8001076:	42a3      	cmp	r3, r4
 8001078:	d302      	bcc.n	8001080 <__udivmoddi4+0xcc>
 800107a:	4290      	cmp	r0, r2
 800107c:	f0c0 80f0 	bcc.w	8001260 <__udivmoddi4+0x2ac>
 8001080:	1a86      	subs	r6, r0, r2
 8001082:	eb64 0303 	sbc.w	r3, r4, r3
 8001086:	2001      	movs	r0, #1
 8001088:	2d00      	cmp	r5, #0
 800108a:	d0e6      	beq.n	800105a <__udivmoddi4+0xa6>
 800108c:	e9c5 6300 	strd	r6, r3, [r5]
 8001090:	e7e3      	b.n	800105a <__udivmoddi4+0xa6>
 8001092:	2a00      	cmp	r2, #0
 8001094:	f040 8090 	bne.w	80011b8 <__udivmoddi4+0x204>
 8001098:	eba1 040c 	sub.w	r4, r1, ip
 800109c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010a0:	fa1f f78c 	uxth.w	r7, ip
 80010a4:	2101      	movs	r1, #1
 80010a6:	fbb4 f6f8 	udiv	r6, r4, r8
 80010aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80010ae:	fb08 4416 	mls	r4, r8, r6, r4
 80010b2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010b6:	fb07 f006 	mul.w	r0, r7, r6
 80010ba:	4298      	cmp	r0, r3
 80010bc:	d908      	bls.n	80010d0 <__udivmoddi4+0x11c>
 80010be:	eb1c 0303 	adds.w	r3, ip, r3
 80010c2:	f106 34ff 	add.w	r4, r6, #4294967295
 80010c6:	d202      	bcs.n	80010ce <__udivmoddi4+0x11a>
 80010c8:	4298      	cmp	r0, r3
 80010ca:	f200 80cd 	bhi.w	8001268 <__udivmoddi4+0x2b4>
 80010ce:	4626      	mov	r6, r4
 80010d0:	1a1c      	subs	r4, r3, r0
 80010d2:	fa1f f38e 	uxth.w	r3, lr
 80010d6:	fbb4 f0f8 	udiv	r0, r4, r8
 80010da:	fb08 4410 	mls	r4, r8, r0, r4
 80010de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80010e2:	fb00 f707 	mul.w	r7, r0, r7
 80010e6:	429f      	cmp	r7, r3
 80010e8:	d908      	bls.n	80010fc <__udivmoddi4+0x148>
 80010ea:	eb1c 0303 	adds.w	r3, ip, r3
 80010ee:	f100 34ff 	add.w	r4, r0, #4294967295
 80010f2:	d202      	bcs.n	80010fa <__udivmoddi4+0x146>
 80010f4:	429f      	cmp	r7, r3
 80010f6:	f200 80b0 	bhi.w	800125a <__udivmoddi4+0x2a6>
 80010fa:	4620      	mov	r0, r4
 80010fc:	1bdb      	subs	r3, r3, r7
 80010fe:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8001102:	e7a5      	b.n	8001050 <__udivmoddi4+0x9c>
 8001104:	f1c1 0620 	rsb	r6, r1, #32
 8001108:	408b      	lsls	r3, r1
 800110a:	fa22 f706 	lsr.w	r7, r2, r6
 800110e:	431f      	orrs	r7, r3
 8001110:	fa20 fc06 	lsr.w	ip, r0, r6
 8001114:	fa04 f301 	lsl.w	r3, r4, r1
 8001118:	ea43 030c 	orr.w	r3, r3, ip
 800111c:	40f4      	lsrs	r4, r6
 800111e:	fa00 f801 	lsl.w	r8, r0, r1
 8001122:	0c38      	lsrs	r0, r7, #16
 8001124:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001128:	fbb4 fef0 	udiv	lr, r4, r0
 800112c:	fa1f fc87 	uxth.w	ip, r7
 8001130:	fb00 441e 	mls	r4, r0, lr, r4
 8001134:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001138:	fb0e f90c 	mul.w	r9, lr, ip
 800113c:	45a1      	cmp	r9, r4
 800113e:	fa02 f201 	lsl.w	r2, r2, r1
 8001142:	d90a      	bls.n	800115a <__udivmoddi4+0x1a6>
 8001144:	193c      	adds	r4, r7, r4
 8001146:	f10e 3aff 	add.w	sl, lr, #4294967295
 800114a:	f080 8084 	bcs.w	8001256 <__udivmoddi4+0x2a2>
 800114e:	45a1      	cmp	r9, r4
 8001150:	f240 8081 	bls.w	8001256 <__udivmoddi4+0x2a2>
 8001154:	f1ae 0e02 	sub.w	lr, lr, #2
 8001158:	443c      	add	r4, r7
 800115a:	eba4 0409 	sub.w	r4, r4, r9
 800115e:	fa1f f983 	uxth.w	r9, r3
 8001162:	fbb4 f3f0 	udiv	r3, r4, r0
 8001166:	fb00 4413 	mls	r4, r0, r3, r4
 800116a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800116e:	fb03 fc0c 	mul.w	ip, r3, ip
 8001172:	45a4      	cmp	ip, r4
 8001174:	d907      	bls.n	8001186 <__udivmoddi4+0x1d2>
 8001176:	193c      	adds	r4, r7, r4
 8001178:	f103 30ff 	add.w	r0, r3, #4294967295
 800117c:	d267      	bcs.n	800124e <__udivmoddi4+0x29a>
 800117e:	45a4      	cmp	ip, r4
 8001180:	d965      	bls.n	800124e <__udivmoddi4+0x29a>
 8001182:	3b02      	subs	r3, #2
 8001184:	443c      	add	r4, r7
 8001186:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800118a:	fba0 9302 	umull	r9, r3, r0, r2
 800118e:	eba4 040c 	sub.w	r4, r4, ip
 8001192:	429c      	cmp	r4, r3
 8001194:	46ce      	mov	lr, r9
 8001196:	469c      	mov	ip, r3
 8001198:	d351      	bcc.n	800123e <__udivmoddi4+0x28a>
 800119a:	d04e      	beq.n	800123a <__udivmoddi4+0x286>
 800119c:	b155      	cbz	r5, 80011b4 <__udivmoddi4+0x200>
 800119e:	ebb8 030e 	subs.w	r3, r8, lr
 80011a2:	eb64 040c 	sbc.w	r4, r4, ip
 80011a6:	fa04 f606 	lsl.w	r6, r4, r6
 80011aa:	40cb      	lsrs	r3, r1
 80011ac:	431e      	orrs	r6, r3
 80011ae:	40cc      	lsrs	r4, r1
 80011b0:	e9c5 6400 	strd	r6, r4, [r5]
 80011b4:	2100      	movs	r1, #0
 80011b6:	e750      	b.n	800105a <__udivmoddi4+0xa6>
 80011b8:	f1c2 0320 	rsb	r3, r2, #32
 80011bc:	fa20 f103 	lsr.w	r1, r0, r3
 80011c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80011c4:	fa24 f303 	lsr.w	r3, r4, r3
 80011c8:	4094      	lsls	r4, r2
 80011ca:	430c      	orrs	r4, r1
 80011cc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80011d0:	fa00 fe02 	lsl.w	lr, r0, r2
 80011d4:	fa1f f78c 	uxth.w	r7, ip
 80011d8:	fbb3 f0f8 	udiv	r0, r3, r8
 80011dc:	fb08 3110 	mls	r1, r8, r0, r3
 80011e0:	0c23      	lsrs	r3, r4, #16
 80011e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80011e6:	fb00 f107 	mul.w	r1, r0, r7
 80011ea:	4299      	cmp	r1, r3
 80011ec:	d908      	bls.n	8001200 <__udivmoddi4+0x24c>
 80011ee:	eb1c 0303 	adds.w	r3, ip, r3
 80011f2:	f100 36ff 	add.w	r6, r0, #4294967295
 80011f6:	d22c      	bcs.n	8001252 <__udivmoddi4+0x29e>
 80011f8:	4299      	cmp	r1, r3
 80011fa:	d92a      	bls.n	8001252 <__udivmoddi4+0x29e>
 80011fc:	3802      	subs	r0, #2
 80011fe:	4463      	add	r3, ip
 8001200:	1a5b      	subs	r3, r3, r1
 8001202:	b2a4      	uxth	r4, r4
 8001204:	fbb3 f1f8 	udiv	r1, r3, r8
 8001208:	fb08 3311 	mls	r3, r8, r1, r3
 800120c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001210:	fb01 f307 	mul.w	r3, r1, r7
 8001214:	42a3      	cmp	r3, r4
 8001216:	d908      	bls.n	800122a <__udivmoddi4+0x276>
 8001218:	eb1c 0404 	adds.w	r4, ip, r4
 800121c:	f101 36ff 	add.w	r6, r1, #4294967295
 8001220:	d213      	bcs.n	800124a <__udivmoddi4+0x296>
 8001222:	42a3      	cmp	r3, r4
 8001224:	d911      	bls.n	800124a <__udivmoddi4+0x296>
 8001226:	3902      	subs	r1, #2
 8001228:	4464      	add	r4, ip
 800122a:	1ae4      	subs	r4, r4, r3
 800122c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001230:	e739      	b.n	80010a6 <__udivmoddi4+0xf2>
 8001232:	4604      	mov	r4, r0
 8001234:	e6f0      	b.n	8001018 <__udivmoddi4+0x64>
 8001236:	4608      	mov	r0, r1
 8001238:	e706      	b.n	8001048 <__udivmoddi4+0x94>
 800123a:	45c8      	cmp	r8, r9
 800123c:	d2ae      	bcs.n	800119c <__udivmoddi4+0x1e8>
 800123e:	ebb9 0e02 	subs.w	lr, r9, r2
 8001242:	eb63 0c07 	sbc.w	ip, r3, r7
 8001246:	3801      	subs	r0, #1
 8001248:	e7a8      	b.n	800119c <__udivmoddi4+0x1e8>
 800124a:	4631      	mov	r1, r6
 800124c:	e7ed      	b.n	800122a <__udivmoddi4+0x276>
 800124e:	4603      	mov	r3, r0
 8001250:	e799      	b.n	8001186 <__udivmoddi4+0x1d2>
 8001252:	4630      	mov	r0, r6
 8001254:	e7d4      	b.n	8001200 <__udivmoddi4+0x24c>
 8001256:	46d6      	mov	lr, sl
 8001258:	e77f      	b.n	800115a <__udivmoddi4+0x1a6>
 800125a:	4463      	add	r3, ip
 800125c:	3802      	subs	r0, #2
 800125e:	e74d      	b.n	80010fc <__udivmoddi4+0x148>
 8001260:	4606      	mov	r6, r0
 8001262:	4623      	mov	r3, r4
 8001264:	4608      	mov	r0, r1
 8001266:	e70f      	b.n	8001088 <__udivmoddi4+0xd4>
 8001268:	3e02      	subs	r6, #2
 800126a:	4463      	add	r3, ip
 800126c:	e730      	b.n	80010d0 <__udivmoddi4+0x11c>
 800126e:	bf00      	nop

08001270 <__aeabi_idiv0>:
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af02      	add	r7, sp, #8
 800127a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 800127c:	2300      	movs	r3, #0
 800127e:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001280:	2334      	movs	r3, #52	@ 0x34
 8001282:	9300      	str	r3, [sp, #0]
 8001284:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001288:	4a0b      	ldr	r2, [pc, #44]	@ (80012b8 <tx_application_define+0x44>)
 800128a:	490c      	ldr	r1, [pc, #48]	@ (80012bc <tx_application_define+0x48>)
 800128c:	480c      	ldr	r0, [pc, #48]	@ (80012c0 <tx_application_define+0x4c>)
 800128e:	f006 ff99 	bl	80081c4 <_txe_byte_pool_create>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d10a      	bne.n	80012ae <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8001298:	4b09      	ldr	r3, [pc, #36]	@ (80012c0 <tx_application_define+0x4c>)
 800129a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800129c:	68b8      	ldr	r0, [r7, #8]
 800129e:	f000 f811 	bl	80012c4 <App_ThreadX_Init>
 80012a2:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d001      	beq.n	80012ae <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 80012aa:	bf00      	nop
 80012ac:	e7fd      	b.n	80012aa <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200001f4 	.word	0x200001f4
 80012bc:	0800cc00 	.word	0x0800cc00
 80012c0:	200005f4 	.word	0x200005f4

080012c4 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b08c      	sub	sp, #48	@ 0x30
 80012c8:	af08      	add	r7, sp, #32
 80012ca:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
	TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	60bb      	str	r3, [r7, #8]
	(void)byte_pool;
  /* USER CODE END App_ThreadX_MEM_POOL */

  /* USER CODE BEGIN App_ThreadX_Init */
	tx_thread_create(&ReceiverUART, "Receiver", UART_Receiver, 0, thread_Receiver, THREAD_STACK_SIZE, 14, 14, 1, TX_AUTO_START);
 80012d4:	23b0      	movs	r3, #176	@ 0xb0
 80012d6:	9306      	str	r3, [sp, #24]
 80012d8:	2301      	movs	r3, #1
 80012da:	9305      	str	r3, [sp, #20]
 80012dc:	2301      	movs	r3, #1
 80012de:	9304      	str	r3, [sp, #16]
 80012e0:	230e      	movs	r3, #14
 80012e2:	9303      	str	r3, [sp, #12]
 80012e4:	230e      	movs	r3, #14
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	4b30      	ldr	r3, [pc, #192]	@ (80013b0 <App_ThreadX_Init+0xec>)
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	2300      	movs	r3, #0
 80012f4:	4a2f      	ldr	r2, [pc, #188]	@ (80013b4 <App_ThreadX_Init+0xf0>)
 80012f6:	4930      	ldr	r1, [pc, #192]	@ (80013b8 <App_ThreadX_Init+0xf4>)
 80012f8:	4830      	ldr	r0, [pc, #192]	@ (80013bc <App_ThreadX_Init+0xf8>)
 80012fa:	f007 f803 	bl	8008304 <_txe_thread_create>
	tx_thread_create(&TransmiteUART, "TranSmite", UART_Transmit, 0, thread_Transmite, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 80012fe:	23b0      	movs	r3, #176	@ 0xb0
 8001300:	9306      	str	r3, [sp, #24]
 8001302:	2301      	movs	r3, #1
 8001304:	9305      	str	r3, [sp, #20]
 8001306:	2301      	movs	r3, #1
 8001308:	9304      	str	r3, [sp, #16]
 800130a:	230f      	movs	r3, #15
 800130c:	9303      	str	r3, [sp, #12]
 800130e:	230f      	movs	r3, #15
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	4b29      	ldr	r3, [pc, #164]	@ (80013c0 <App_ThreadX_Init+0xfc>)
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2300      	movs	r3, #0
 800131e:	4a29      	ldr	r2, [pc, #164]	@ (80013c4 <App_ThreadX_Init+0x100>)
 8001320:	4929      	ldr	r1, [pc, #164]	@ (80013c8 <App_ThreadX_Init+0x104>)
 8001322:	482a      	ldr	r0, [pc, #168]	@ (80013cc <App_ThreadX_Init+0x108>)
 8001324:	f006 ffee 	bl	8008304 <_txe_thread_create>
	tx_thread_create(&LED_1_ptr, "LED_TASK", LD1_thread_entry, 0, thread_LED_1, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 8001328:	23b0      	movs	r3, #176	@ 0xb0
 800132a:	9306      	str	r3, [sp, #24]
 800132c:	2301      	movs	r3, #1
 800132e:	9305      	str	r3, [sp, #20]
 8001330:	2301      	movs	r3, #1
 8001332:	9304      	str	r3, [sp, #16]
 8001334:	230f      	movs	r3, #15
 8001336:	9303      	str	r3, [sp, #12]
 8001338:	230f      	movs	r3, #15
 800133a:	9302      	str	r3, [sp, #8]
 800133c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001340:	9301      	str	r3, [sp, #4]
 8001342:	4b23      	ldr	r3, [pc, #140]	@ (80013d0 <App_ThreadX_Init+0x10c>)
 8001344:	9300      	str	r3, [sp, #0]
 8001346:	2300      	movs	r3, #0
 8001348:	4a22      	ldr	r2, [pc, #136]	@ (80013d4 <App_ThreadX_Init+0x110>)
 800134a:	4923      	ldr	r1, [pc, #140]	@ (80013d8 <App_ThreadX_Init+0x114>)
 800134c:	4823      	ldr	r0, [pc, #140]	@ (80013dc <App_ThreadX_Init+0x118>)
 800134e:	f006 ffd9 	bl	8008304 <_txe_thread_create>
	tx_thread_create(&ROTARY, "ROTARY_TASK", ROTARY_thread, 0, thread_ROTARY, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 8001352:	23b0      	movs	r3, #176	@ 0xb0
 8001354:	9306      	str	r3, [sp, #24]
 8001356:	2301      	movs	r3, #1
 8001358:	9305      	str	r3, [sp, #20]
 800135a:	2301      	movs	r3, #1
 800135c:	9304      	str	r3, [sp, #16]
 800135e:	230f      	movs	r3, #15
 8001360:	9303      	str	r3, [sp, #12]
 8001362:	230f      	movs	r3, #15
 8001364:	9302      	str	r3, [sp, #8]
 8001366:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800136a:	9301      	str	r3, [sp, #4]
 800136c:	4b1c      	ldr	r3, [pc, #112]	@ (80013e0 <App_ThreadX_Init+0x11c>)
 800136e:	9300      	str	r3, [sp, #0]
 8001370:	2300      	movs	r3, #0
 8001372:	4a1c      	ldr	r2, [pc, #112]	@ (80013e4 <App_ThreadX_Init+0x120>)
 8001374:	491c      	ldr	r1, [pc, #112]	@ (80013e8 <App_ThreadX_Init+0x124>)
 8001376:	481d      	ldr	r0, [pc, #116]	@ (80013ec <App_ThreadX_Init+0x128>)
 8001378:	f006 ffc4 	bl	8008304 <_txe_thread_create>
	tx_thread_create(&setone, "Set", Set_satu, 0, thread_Set, THREAD_STACK_SIZE, 14, 14, 1, TX_AUTO_START);
 800137c:	23b0      	movs	r3, #176	@ 0xb0
 800137e:	9306      	str	r3, [sp, #24]
 8001380:	2301      	movs	r3, #1
 8001382:	9305      	str	r3, [sp, #20]
 8001384:	2301      	movs	r3, #1
 8001386:	9304      	str	r3, [sp, #16]
 8001388:	230e      	movs	r3, #14
 800138a:	9303      	str	r3, [sp, #12]
 800138c:	230e      	movs	r3, #14
 800138e:	9302      	str	r3, [sp, #8]
 8001390:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	4b16      	ldr	r3, [pc, #88]	@ (80013f0 <App_ThreadX_Init+0x12c>)
 8001398:	9300      	str	r3, [sp, #0]
 800139a:	2300      	movs	r3, #0
 800139c:	4a15      	ldr	r2, [pc, #84]	@ (80013f4 <App_ThreadX_Init+0x130>)
 800139e:	4916      	ldr	r1, [pc, #88]	@ (80013f8 <App_ThreadX_Init+0x134>)
 80013a0:	4816      	ldr	r0, [pc, #88]	@ (80013fc <App_ThreadX_Init+0x138>)
 80013a2:	f006 ffaf 	bl	8008304 <_txe_thread_create>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80013a6:	68fb      	ldr	r3, [r7, #12]
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3710      	adds	r7, #16
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000644 	.word	0x20000644
 80013b4:	080015c1 	.word	0x080015c1
 80013b8:	0800cc14 	.word	0x0800cc14
 80013bc:	20001a44 	.word	0x20001a44
 80013c0:	20000a44 	.word	0x20000a44
 80013c4:	08001745 	.word	0x08001745
 80013c8:	0800cc20 	.word	0x0800cc20
 80013cc:	20001af4 	.word	0x20001af4
 80013d0:	20000e44 	.word	0x20000e44
 80013d4:	080017c9 	.word	0x080017c9
 80013d8:	0800cc2c 	.word	0x0800cc2c
 80013dc:	20001ba4 	.word	0x20001ba4
 80013e0:	20001244 	.word	0x20001244
 80013e4:	080017d5 	.word	0x080017d5
 80013e8:	0800cc38 	.word	0x0800cc38
 80013ec:	20001c54 	.word	0x20001c54
 80013f0:	20001644 	.word	0x20001644
 80013f4:	080017e1 	.word	0x080017e1
 80013f8:	0800cc44 	.word	0x0800cc44
 80013fc:	20001d04 	.word	0x20001d04

08001400 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */
  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8001404:	f005 ff82 	bl	800730c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */
  /* USER CODE END  Kernel_Start_Error */
}
 8001408:	bf00      	nop
 800140a:	bd80      	pop	{r7, pc}

0800140c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 1 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800140c:	b580      	push	{r7, lr}
 800140e:	b082      	sub	sp, #8
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
	// Handle received data
	if (huart == &huart5) {
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	4a07      	ldr	r2, [pc, #28]	@ (8001434 <HAL_UART_RxCpltCallback+0x28>)
 8001418:	4293      	cmp	r3, r2
 800141a:	d107      	bne.n	800142c <HAL_UART_RxCpltCallback+0x20>
		// Set flag that data is received
		uart_data_received = 1;
 800141c:	4b06      	ldr	r3, [pc, #24]	@ (8001438 <HAL_UART_RxCpltCallback+0x2c>)
 800141e:	2201      	movs	r2, #1
 8001420:	701a      	strb	r2, [r3, #0]
		// Prepare for the next reception
		HAL_UART_Receive_DMA(&huart5, &uart_rx_data, 1);
 8001422:	2201      	movs	r2, #1
 8001424:	4905      	ldr	r1, [pc, #20]	@ (800143c <HAL_UART_RxCpltCallback+0x30>)
 8001426:	4803      	ldr	r0, [pc, #12]	@ (8001434 <HAL_UART_RxCpltCallback+0x28>)
 8001428:	f004 fe2e 	bl	8006088 <HAL_UART_Receive_DMA>
	}
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	20001f48 	.word	0x20001f48
 8001438:	20000629 	.word	0x20000629
 800143c:	20000628 	.word	0x20000628

08001440 <SetMotorSpeed>:

void SetMotorSpeed(uint32_t channel, uint16_t speed){
 8001440:	b480      	push	{r7}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	807b      	strh	r3, [r7, #2]
	if (speed > 255) speed = 255;
 800144c:	887b      	ldrh	r3, [r7, #2]
 800144e:	2bff      	cmp	r3, #255	@ 0xff
 8001450:	d901      	bls.n	8001456 <SetMotorSpeed+0x16>
 8001452:	23ff      	movs	r3, #255	@ 0xff
 8001454:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d104      	bne.n	8001466 <SetMotorSpeed+0x26>
 800145c:	4b17      	ldr	r3, [pc, #92]	@ (80014bc <SetMotorSpeed+0x7c>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	887a      	ldrh	r2, [r7, #2]
 8001462:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001464:	e023      	b.n	80014ae <SetMotorSpeed+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2b04      	cmp	r3, #4
 800146a:	d104      	bne.n	8001476 <SetMotorSpeed+0x36>
 800146c:	4b13      	ldr	r3, [pc, #76]	@ (80014bc <SetMotorSpeed+0x7c>)
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	887b      	ldrh	r3, [r7, #2]
 8001472:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001474:	e01b      	b.n	80014ae <SetMotorSpeed+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b08      	cmp	r3, #8
 800147a:	d104      	bne.n	8001486 <SetMotorSpeed+0x46>
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <SetMotorSpeed+0x7c>)
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	887b      	ldrh	r3, [r7, #2]
 8001482:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001484:	e013      	b.n	80014ae <SetMotorSpeed+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2b0c      	cmp	r3, #12
 800148a:	d104      	bne.n	8001496 <SetMotorSpeed+0x56>
 800148c:	4b0b      	ldr	r3, [pc, #44]	@ (80014bc <SetMotorSpeed+0x7c>)
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	887b      	ldrh	r3, [r7, #2]
 8001492:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001494:	e00b      	b.n	80014ae <SetMotorSpeed+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b10      	cmp	r3, #16
 800149a:	d104      	bne.n	80014a6 <SetMotorSpeed+0x66>
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <SetMotorSpeed+0x7c>)
 800149e:	681a      	ldr	r2, [r3, #0]
 80014a0:	887b      	ldrh	r3, [r7, #2]
 80014a2:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80014a4:	e003      	b.n	80014ae <SetMotorSpeed+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 80014a6:	4b05      	ldr	r3, [pc, #20]	@ (80014bc <SetMotorSpeed+0x7c>)
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	887b      	ldrh	r3, [r7, #2]
 80014ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80014ae:	bf00      	nop
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	20001e18 	.word	0x20001e18

080014c0 <SetRotaryMotor>:

void SetRotaryMotor(uint32_t channel, uint16_t speed){
 80014c0:	b480      	push	{r7}
 80014c2:	b083      	sub	sp, #12
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	460b      	mov	r3, r1
 80014ca:	807b      	strh	r3, [r7, #2]
	if (speed > 255) speed = 255;
 80014cc:	887b      	ldrh	r3, [r7, #2]
 80014ce:	2bff      	cmp	r3, #255	@ 0xff
 80014d0:	d901      	bls.n	80014d6 <SetRotaryMotor+0x16>
 80014d2:	23ff      	movs	r3, #255	@ 0xff
 80014d4:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d104      	bne.n	80014e6 <SetRotaryMotor+0x26>
 80014dc:	4b17      	ldr	r3, [pc, #92]	@ (800153c <SetRotaryMotor+0x7c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	887a      	ldrh	r2, [r7, #2]
 80014e2:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80014e4:	e023      	b.n	800152e <SetRotaryMotor+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	2b04      	cmp	r3, #4
 80014ea:	d104      	bne.n	80014f6 <SetRotaryMotor+0x36>
 80014ec:	4b13      	ldr	r3, [pc, #76]	@ (800153c <SetRotaryMotor+0x7c>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	887b      	ldrh	r3, [r7, #2]
 80014f2:	6393      	str	r3, [r2, #56]	@ 0x38
}
 80014f4:	e01b      	b.n	800152e <SetRotaryMotor+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2b08      	cmp	r3, #8
 80014fa:	d104      	bne.n	8001506 <SetRotaryMotor+0x46>
 80014fc:	4b0f      	ldr	r3, [pc, #60]	@ (800153c <SetRotaryMotor+0x7c>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	887b      	ldrh	r3, [r7, #2]
 8001502:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001504:	e013      	b.n	800152e <SetRotaryMotor+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2b0c      	cmp	r3, #12
 800150a:	d104      	bne.n	8001516 <SetRotaryMotor+0x56>
 800150c:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <SetRotaryMotor+0x7c>)
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	887b      	ldrh	r3, [r7, #2]
 8001512:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001514:	e00b      	b.n	800152e <SetRotaryMotor+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b10      	cmp	r3, #16
 800151a:	d104      	bne.n	8001526 <SetRotaryMotor+0x66>
 800151c:	4b07      	ldr	r3, [pc, #28]	@ (800153c <SetRotaryMotor+0x7c>)
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	887b      	ldrh	r3, [r7, #2]
 8001522:	6493      	str	r3, [r2, #72]	@ 0x48
}
 8001524:	e003      	b.n	800152e <SetRotaryMotor+0x6e>
	__HAL_TIM_SET_COMPARE(&htim1, channel, speed);
 8001526:	4b05      	ldr	r3, [pc, #20]	@ (800153c <SetRotaryMotor+0x7c>)
 8001528:	681a      	ldr	r2, [r3, #0]
 800152a:	887b      	ldrh	r3, [r7, #2]
 800152c:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	20001e18 	.word	0x20001e18

08001540 <SetMotorPump>:

void SetMotorPump(uint32_t channel, uint16_t speed){
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	460b      	mov	r3, r1
 800154a:	807b      	strh	r3, [r7, #2]
	if (speed > 255) speed = 255;
 800154c:	887b      	ldrh	r3, [r7, #2]
 800154e:	2bff      	cmp	r3, #255	@ 0xff
 8001550:	d901      	bls.n	8001556 <SetMotorPump+0x16>
 8001552:	23ff      	movs	r3, #255	@ 0xff
 8001554:	807b      	strh	r3, [r7, #2]
	__HAL_TIM_SET_COMPARE(&htim3, channel, speed);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2b00      	cmp	r3, #0
 800155a:	d104      	bne.n	8001566 <SetMotorPump+0x26>
 800155c:	4b17      	ldr	r3, [pc, #92]	@ (80015bc <SetMotorPump+0x7c>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	887a      	ldrh	r2, [r7, #2]
 8001562:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001564:	e023      	b.n	80015ae <SetMotorPump+0x6e>
	__HAL_TIM_SET_COMPARE(&htim3, channel, speed);
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b04      	cmp	r3, #4
 800156a:	d104      	bne.n	8001576 <SetMotorPump+0x36>
 800156c:	4b13      	ldr	r3, [pc, #76]	@ (80015bc <SetMotorPump+0x7c>)
 800156e:	681a      	ldr	r2, [r3, #0]
 8001570:	887b      	ldrh	r3, [r7, #2]
 8001572:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001574:	e01b      	b.n	80015ae <SetMotorPump+0x6e>
	__HAL_TIM_SET_COMPARE(&htim3, channel, speed);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2b08      	cmp	r3, #8
 800157a:	d104      	bne.n	8001586 <SetMotorPump+0x46>
 800157c:	4b0f      	ldr	r3, [pc, #60]	@ (80015bc <SetMotorPump+0x7c>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	887b      	ldrh	r3, [r7, #2]
 8001582:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001584:	e013      	b.n	80015ae <SetMotorPump+0x6e>
	__HAL_TIM_SET_COMPARE(&htim3, channel, speed);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b0c      	cmp	r3, #12
 800158a:	d104      	bne.n	8001596 <SetMotorPump+0x56>
 800158c:	4b0b      	ldr	r3, [pc, #44]	@ (80015bc <SetMotorPump+0x7c>)
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	887b      	ldrh	r3, [r7, #2]
 8001592:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001594:	e00b      	b.n	80015ae <SetMotorPump+0x6e>
	__HAL_TIM_SET_COMPARE(&htim3, channel, speed);
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2b10      	cmp	r3, #16
 800159a:	d104      	bne.n	80015a6 <SetMotorPump+0x66>
 800159c:	4b07      	ldr	r3, [pc, #28]	@ (80015bc <SetMotorPump+0x7c>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	887b      	ldrh	r3, [r7, #2]
 80015a2:	6493      	str	r3, [r2, #72]	@ 0x48
}
 80015a4:	e003      	b.n	80015ae <SetMotorPump+0x6e>
	__HAL_TIM_SET_COMPARE(&htim3, channel, speed);
 80015a6:	4b05      	ldr	r3, [pc, #20]	@ (80015bc <SetMotorPump+0x7c>)
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	887b      	ldrh	r3, [r7, #2]
 80015ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	20001eb0 	.word	0x20001eb0

080015c0 <UART_Receiver>:
void UART_Receiver (ULONG initial_input) {
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
	// Enable UART DMA reception
	HAL_UART_Receive_DMA(&huart5, &uart_rx_data, 1);
 80015c8:	2201      	movs	r2, #1
 80015ca:	4958      	ldr	r1, [pc, #352]	@ (800172c <UART_Receiver+0x16c>)
 80015cc:	4858      	ldr	r0, [pc, #352]	@ (8001730 <UART_Receiver+0x170>)
 80015ce:	f004 fd5b 	bl	8006088 <HAL_UART_Receive_DMA>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Start PWM on PC0 = HIN A
 80015d2:	2100      	movs	r1, #0
 80015d4:	4857      	ldr	r0, [pc, #348]	@ (8001734 <UART_Receiver+0x174>)
 80015d6:	f003 f9bf 	bl	8004958 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // Start PWM on PC2 = HIN B
 80015da:	2108      	movs	r1, #8
 80015dc:	4855      	ldr	r0, [pc, #340]	@ (8001734 <UART_Receiver+0x174>)
 80015de:	f003 f9bb 	bl	8004958 <HAL_TIM_PWM_Start>

	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
	//HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);

	for (;;) {
		if (uart_data_received) {
 80015e2:	4b55      	ldr	r3, [pc, #340]	@ (8001738 <UART_Receiver+0x178>)
 80015e4:	781b      	ldrb	r3, [r3, #0]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d0fa      	beq.n	80015e2 <UART_Receiver+0x22>
			uart_data_received = 0;
 80015ec:	4b52      	ldr	r3, [pc, #328]	@ (8001738 <UART_Receiver+0x178>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	701a      	strb	r2, [r3, #0]
			switch (uart_rx_data) {
 80015f2:	4b4e      	ldr	r3, [pc, #312]	@ (800172c <UART_Receiver+0x16c>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	2b09      	cmp	r3, #9
 80015f8:	f200 8090 	bhi.w	800171c <UART_Receiver+0x15c>
 80015fc:	a201      	add	r2, pc, #4	@ (adr r2, 8001604 <UART_Receiver+0x44>)
 80015fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001602:	bf00      	nop
 8001604:	0800162d 	.word	0x0800162d
 8001608:	08001663 	.word	0x08001663
 800160c:	0800167d 	.word	0x0800167d
 8001610:	0800169f 	.word	0x0800169f
 8001614:	080016b9 	.word	0x080016b9
 8001618:	080016cf 	.word	0x080016cf
 800161c:	080016e9 	.word	0x080016e9
 8001620:	08001703 	.word	0x08001703
 8001624:	0800171d 	.word	0x0800171d
 8001628:	0800171d 	.word	0x0800171d
			case 0x00:
				Selenoid_STOP();
 800162c:	f000 f926 	bl	800187c <Selenoid_STOP>
				//SetRotaryMotor(TIM_CHANNEL_3, 0);
				//SetMotorPump(TIM_CHANNEL_4, 0);
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2104      	movs	r1, #4
 8001634:	4841      	ldr	r0, [pc, #260]	@ (800173c <UART_Receiver+0x17c>)
 8001636:	f001 ff43 	bl	80034c0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 0); //motor pump
 800163a:	2200      	movs	r2, #0
 800163c:	2102      	movs	r1, #2
 800163e:	483f      	ldr	r0, [pc, #252]	@ (800173c <UART_Receiver+0x17c>)
 8001640:	f001 ff3e 	bl	80034c0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0); //rotary
 8001644:	2200      	movs	r2, #0
 8001646:	2101      	movs	r1, #1
 8001648:	483c      	ldr	r0, [pc, #240]	@ (800173c <UART_Receiver+0x17c>)
 800164a:	f001 ff39 	bl	80034c0 <HAL_GPIO_WritePin>
				if (target > 0){
 800164e:	4b3c      	ldr	r3, [pc, #240]	@ (8001740 <UART_Receiver+0x180>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2b00      	cmp	r3, #0
 8001654:	dd64      	ble.n	8001720 <UART_Receiver+0x160>
					target = 0;
 8001656:	4b3a      	ldr	r3, [pc, #232]	@ (8001740 <UART_Receiver+0x180>)
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
					set();
 800165c:	f000 f8d8 	bl	8001810 <set>
				}
				break;
 8001660:	e05e      	b.n	8001720 <UART_Receiver+0x160>

			case 0x01:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8001662:	2201      	movs	r2, #1
 8001664:	2104      	movs	r1, #4
 8001666:	4835      	ldr	r0, [pc, #212]	@ (800173c <UART_Receiver+0x17c>)
 8001668:	f001 ff2a 	bl	80034c0 <HAL_GPIO_WritePin>
				target = 1;
 800166c:	4b34      	ldr	r3, [pc, #208]	@ (8001740 <UART_Receiver+0x180>)
 800166e:	2201      	movs	r2, #1
 8001670:	601a      	str	r2, [r3, #0]
				set();
 8001672:	f000 f8cd 	bl	8001810 <set>
				Selenoid_UP();
 8001676:	f000 f919 	bl	80018ac <Selenoid_UP>
				//printf("ROLL_UP\n");
				break;
 800167a:	e052      	b.n	8001722 <UART_Receiver+0x162>

			case 0x02:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800167c:	2201      	movs	r2, #1
 800167e:	2104      	movs	r1, #4
 8001680:	482e      	ldr	r0, [pc, #184]	@ (800173c <UART_Receiver+0x17c>)
 8001682:	f001 ff1d 	bl	80034c0 <HAL_GPIO_WritePin>
				target = 2;
 8001686:	4b2e      	ldr	r3, [pc, #184]	@ (8001740 <UART_Receiver+0x180>)
 8001688:	2202      	movs	r2, #2
 800168a:	601a      	str	r2, [r3, #0]
				set();
 800168c:	f000 f8c0 	bl	8001810 <set>
				SetMotorPump(TIM_CHANNEL_4, 127);
 8001690:	217f      	movs	r1, #127	@ 0x7f
 8001692:	200c      	movs	r0, #12
 8001694:	f7ff ff54 	bl	8001540 <SetMotorPump>
				Selenoid_UP();
 8001698:	f000 f908 	bl	80018ac <Selenoid_UP>
				//printf("PITCH_UP\n");
				break;
 800169c:	e041      	b.n	8001722 <UART_Receiver+0x162>

			case 0x03:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 800169e:	2201      	movs	r2, #1
 80016a0:	2104      	movs	r1, #4
 80016a2:	4826      	ldr	r0, [pc, #152]	@ (800173c <UART_Receiver+0x17c>)
 80016a4:	f001 ff0c 	bl	80034c0 <HAL_GPIO_WritePin>
				target = 3;
 80016a8:	4b25      	ldr	r3, [pc, #148]	@ (8001740 <UART_Receiver+0x180>)
 80016aa:	2203      	movs	r2, #3
 80016ac:	601a      	str	r2, [r3, #0]
				set();
 80016ae:	f000 f8af 	bl	8001810 <set>
				Selenoid_UP();
 80016b2:	f000 f8fb 	bl	80018ac <Selenoid_UP>
				//printf("LIFT_UP\n");
				break;
 80016b6:	e034      	b.n	8001722 <UART_Receiver+0x162>

			case 0x04:
				//CASE UNTUK TES (TOMBOL A)
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80016b8:	2201      	movs	r2, #1
 80016ba:	2104      	movs	r1, #4
 80016bc:	481f      	ldr	r0, [pc, #124]	@ (800173c <UART_Receiver+0x17c>)
 80016be:	f001 feff 	bl	80034c0 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, 1); //motor pump
 80016c2:	2201      	movs	r2, #1
 80016c4:	2102      	movs	r1, #2
 80016c6:	481d      	ldr	r0, [pc, #116]	@ (800173c <UART_Receiver+0x17c>)
 80016c8:	f001 fefa 	bl	80034c0 <HAL_GPIO_WritePin>
				//Selenoid_DOWN();
				//SetRotaryMotor(TIM_CHANNEL_3, 100);
				//SetMotorPump(TIM_CHANNEL_4, 127);
				//SetMotorSpeed(TIM_CHANNEL_1, 0);
				//HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
				break;
 80016cc:	e029      	b.n	8001722 <UART_Receiver+0x162>

			case 0x05:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80016ce:	2201      	movs	r2, #1
 80016d0:	2104      	movs	r1, #4
 80016d2:	481a      	ldr	r0, [pc, #104]	@ (800173c <UART_Receiver+0x17c>)
 80016d4:	f001 fef4 	bl	80034c0 <HAL_GPIO_WritePin>
				target = 3;
 80016d8:	4b19      	ldr	r3, [pc, #100]	@ (8001740 <UART_Receiver+0x180>)
 80016da:	2203      	movs	r2, #3
 80016dc:	601a      	str	r2, [r3, #0]
				set();
 80016de:	f000 f897 	bl	8001810 <set>
				Selenoid_DOWN();
 80016e2:	f000 f8fb 	bl	80018dc <Selenoid_DOWN>
				//printf("ROLL_DOWN\n");
				break;
 80016e6:	e01c      	b.n	8001722 <UART_Receiver+0x162>

			case 0x06:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80016e8:	2201      	movs	r2, #1
 80016ea:	2104      	movs	r1, #4
 80016ec:	4813      	ldr	r0, [pc, #76]	@ (800173c <UART_Receiver+0x17c>)
 80016ee:	f001 fee7 	bl	80034c0 <HAL_GPIO_WritePin>
				target = 2;
 80016f2:	4b13      	ldr	r3, [pc, #76]	@ (8001740 <UART_Receiver+0x180>)
 80016f4:	2202      	movs	r2, #2
 80016f6:	601a      	str	r2, [r3, #0]
				set();
 80016f8:	f000 f88a 	bl	8001810 <set>
				Selenoid_DOWN();
 80016fc:	f000 f8ee 	bl	80018dc <Selenoid_DOWN>
				//printf("PITCH_DOWN\n");
				break;
 8001700:	e00f      	b.n	8001722 <UART_Receiver+0x162>

			case 0x07:
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 8001702:	2201      	movs	r2, #1
 8001704:	2104      	movs	r1, #4
 8001706:	480d      	ldr	r0, [pc, #52]	@ (800173c <UART_Receiver+0x17c>)
 8001708:	f001 feda 	bl	80034c0 <HAL_GPIO_WritePin>
				target = 1;
 800170c:	4b0c      	ldr	r3, [pc, #48]	@ (8001740 <UART_Receiver+0x180>)
 800170e:	2201      	movs	r2, #1
 8001710:	601a      	str	r2, [r3, #0]
				set();
 8001712:	f000 f87d 	bl	8001810 <set>
				Selenoid_DOWN();
 8001716:	f000 f8e1 	bl	80018dc <Selenoid_DOWN>
				//printf("LIFT_DOWN\n");
				break;
 800171a:	e002      	b.n	8001722 <UART_Receiver+0x162>
			case 0xA:


			default:

				break;
 800171c:	bf00      	nop
 800171e:	e000      	b.n	8001722 <UART_Receiver+0x162>
				break;
 8001720:	bf00      	nop
			}
			tx_thread_sleep(50);
 8001722:	2032      	movs	r0, #50	@ 0x32
 8001724:	f005 ff9a 	bl	800765c <_tx_thread_sleep>
		if (uart_data_received) {
 8001728:	e75b      	b.n	80015e2 <UART_Receiver+0x22>
 800172a:	bf00      	nop
 800172c:	20000628 	.word	0x20000628
 8001730:	20001f48 	.word	0x20001f48
 8001734:	20001e18 	.word	0x20001e18
 8001738:	20000629 	.word	0x20000629
 800173c:	48000400 	.word	0x48000400
 8001740:	2000063c 	.word	0x2000063c

08001744 <UART_Transmit>:
		}
	}
}

void UART_Transmit(ULONG initial_input){
 8001744:	b580      	push	{r7, lr}
 8001746:	b092      	sub	sp, #72	@ 0x48
 8001748:	af02      	add	r7, sp, #8
 800174a:	6078      	str	r0, [r7, #4]
	char message[37];
	int counter1 = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	int counter2 = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	63bb      	str	r3, [r7, #56]	@ 0x38
	int counter3 = 0;
 8001754:	2300      	movs	r3, #0
 8001756:	637b      	str	r3, [r7, #52]	@ 0x34
	while (1){
		counter1++;
 8001758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800175a:	3301      	adds	r3, #1
 800175c:	63fb      	str	r3, [r7, #60]	@ 0x3c
		counter2++;
 800175e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001760:	3301      	adds	r3, #1
 8001762:	63bb      	str	r3, [r7, #56]	@ 0x38
		counter3++;
 8001764:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001766:	3301      	adds	r3, #1
 8001768:	637b      	str	r3, [r7, #52]	@ 0x34
		if (counter1 > 10 || counter2 > 10 || counter3 > 10) {
 800176a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800176c:	2b0a      	cmp	r3, #10
 800176e:	dc05      	bgt.n	800177c <UART_Transmit+0x38>
 8001770:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001772:	2b0a      	cmp	r3, #10
 8001774:	dc02      	bgt.n	800177c <UART_Transmit+0x38>
 8001776:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001778:	2b0a      	cmp	r3, #10
 800177a:	dd05      	ble.n	8001788 <UART_Transmit+0x44>

			counter1 = 0;
 800177c:	2300      	movs	r3, #0
 800177e:	63fb      	str	r3, [r7, #60]	@ 0x3c
			counter2 = 0;
 8001780:	2300      	movs	r3, #0
 8001782:	63bb      	str	r3, [r7, #56]	@ 0x38
			counter3 = 0;
 8001784:	2300      	movs	r3, #0
 8001786:	637b      	str	r3, [r7, #52]	@ 0x34
		}
		sprintf(message, "%d,%d,%d\n", counter1, counter2, counter3);
 8001788:	f107 000c 	add.w	r0, r7, #12
 800178c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800178e:	9300      	str	r3, [sp, #0]
 8001790:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001792:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001794:	490a      	ldr	r1, [pc, #40]	@ (80017c0 <UART_Transmit+0x7c>)
 8001796:	f007 fde7 	bl	8009368 <siprintf>
		HAL_UART_Transmit(&huart3, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe feae 	bl	8000500 <strlen>
 80017a4:	4603      	mov	r3, r0
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	f107 010c 	add.w	r1, r7, #12
 80017ac:	f04f 33ff 	mov.w	r3, #4294967295
 80017b0:	4804      	ldr	r0, [pc, #16]	@ (80017c4 <UART_Transmit+0x80>)
 80017b2:	f004 fbdb 	bl	8005f6c <HAL_UART_Transmit>
		tx_thread_sleep(100);
 80017b6:	2064      	movs	r0, #100	@ 0x64
 80017b8:	f005 ff50 	bl	800765c <_tx_thread_sleep>
		counter1++;
 80017bc:	e7cc      	b.n	8001758 <UART_Transmit+0x14>
 80017be:	bf00      	nop
 80017c0:	0800cc48 	.word	0x0800cc48
 80017c4:	20002070 	.word	0x20002070

080017c8 <LD1_thread_entry>:
	}
}


void LD1_thread_entry (ULONG initial_input){
 80017c8:	b480      	push	{r7}
 80017ca:	b083      	sub	sp, #12
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	while(1){
 80017d0:	bf00      	nop
 80017d2:	e7fd      	b.n	80017d0 <LD1_thread_entry+0x8>

080017d4 <ROTARY_thread>:
		//tx_thread_sleep(50);
	}
}

void ROTARY_thread (ULONG initial_input){
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
	while(1){
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <ROTARY_thread+0x8>

080017e0 <Set_satu>:
		//tx_thread_sleep(100);
	}
}

void Set_satu(ULONG initial_input){
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	6078      	str	r0, [r7, #4]
	target = 4;
 80017e8:	4b07      	ldr	r3, [pc, #28]	@ (8001808 <Set_satu+0x28>)
 80017ea:	2204      	movs	r2, #4
 80017ec:	601a      	str	r2, [r3, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2, 1);
 80017ee:	2201      	movs	r2, #1
 80017f0:	2104      	movs	r1, #4
 80017f2:	4806      	ldr	r0, [pc, #24]	@ (800180c <Set_satu+0x2c>)
 80017f4:	f001 fe64 	bl	80034c0 <HAL_GPIO_WritePin>
	Selenoid_UP();
 80017f8:	f000 f858 	bl	80018ac <Selenoid_UP>
//	set();
	while(1){
		tx_thread_sleep(TX_WAIT_FOREVER);
 80017fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001800:	f005 ff2c 	bl	800765c <_tx_thread_sleep>
 8001804:	e7fa      	b.n	80017fc <Set_satu+0x1c>
 8001806:	bf00      	nop
 8001808:	2000063c 	.word	0x2000063c
 800180c:	48000400 	.word	0x48000400

08001810 <set>:
	}
}

void set(void){
 8001810:	b580      	push	{r7, lr}
 8001812:	af00      	add	r7, sp, #0
	running = 1;
 8001814:	4b15      	ldr	r3, [pc, #84]	@ (800186c <set+0x5c>)
 8001816:	2201      	movs	r2, #1
 8001818:	601a      	str	r2, [r3, #0]
	while(pulse != target){
 800181a:	e012      	b.n	8001842 <set+0x32>
		SetRotaryMotor(TIM_CHANNEL_1, 153);
 800181c:	2199      	movs	r1, #153	@ 0x99
 800181e:	2000      	movs	r0, #0
 8001820:	f7ff fe4e 	bl	80014c0 <SetRotaryMotor>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 1);
 8001824:	2201      	movs	r2, #1
 8001826:	2110      	movs	r1, #16
 8001828:	4811      	ldr	r0, [pc, #68]	@ (8001870 <set+0x60>)
 800182a:	f001 fe49 	bl	80034c0 <HAL_GPIO_WritePin>
		//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 1);
		if (pulse == target) {
 800182e:	4b11      	ldr	r3, [pc, #68]	@ (8001874 <set+0x64>)
 8001830:	681a      	ldr	r2, [r3, #0]
 8001832:	4b11      	ldr	r3, [pc, #68]	@ (8001878 <set+0x68>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	429a      	cmp	r2, r3
 8001838:	d103      	bne.n	8001842 <set+0x32>
			running = 0;
 800183a:	4b0c      	ldr	r3, [pc, #48]	@ (800186c <set+0x5c>)
 800183c:	2200      	movs	r2, #0
 800183e:	601a      	str	r2, [r3, #0]
			break;
 8001840:	e005      	b.n	800184e <set+0x3e>
	while(pulse != target){
 8001842:	4b0c      	ldr	r3, [pc, #48]	@ (8001874 <set+0x64>)
 8001844:	681a      	ldr	r2, [r3, #0]
 8001846:	4b0c      	ldr	r3, [pc, #48]	@ (8001878 <set+0x68>)
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	429a      	cmp	r2, r3
 800184c:	d1e6      	bne.n	800181c <set+0xc>
		}
	}
	SetRotaryMotor(TIM_CHANNEL_1, 0);
 800184e:	2100      	movs	r1, #0
 8001850:	2000      	movs	r0, #0
 8001852:	f7ff fe35 	bl	80014c0 <SetRotaryMotor>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2110      	movs	r1, #16
 800185a:	4805      	ldr	r0, [pc, #20]	@ (8001870 <set+0x60>)
 800185c:	f001 fe30 	bl	80034c0 <HAL_GPIO_WritePin>
	//HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, 0);
	tx_thread_sleep(200);
 8001860:	20c8      	movs	r0, #200	@ 0xc8
 8001862:	f005 fefb 	bl	800765c <_tx_thread_sleep>
}
 8001866:	bf00      	nop
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000638 	.word	0x20000638
 8001870:	48000400 	.word	0x48000400
 8001874:	20000640 	.word	0x20000640
 8001878:	2000063c 	.word	0x2000063c

0800187c <Selenoid_STOP>:

void Selenoid_STOP(void){
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
	SetMotorSpeed(TIM_CHANNEL_1, 0);
 8001880:	2100      	movs	r1, #0
 8001882:	2000      	movs	r0, #0
 8001884:	f7ff fddc 	bl	8001440 <SetMotorSpeed>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 8001888:	2201      	movs	r2, #1
 800188a:	2102      	movs	r1, #2
 800188c:	4806      	ldr	r0, [pc, #24]	@ (80018a8 <Selenoid_STOP+0x2c>)
 800188e:	f001 fe17 	bl	80034c0 <HAL_GPIO_WritePin>
	SetMotorSpeed(TIM_CHANNEL_3, 0);
 8001892:	2100      	movs	r1, #0
 8001894:	2008      	movs	r0, #8
 8001896:	f7ff fdd3 	bl	8001440 <SetMotorSpeed>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 800189a:	2201      	movs	r2, #1
 800189c:	2108      	movs	r1, #8
 800189e:	4802      	ldr	r0, [pc, #8]	@ (80018a8 <Selenoid_STOP+0x2c>)
 80018a0:	f001 fe0e 	bl	80034c0 <HAL_GPIO_WritePin>
}
 80018a4:	bf00      	nop
 80018a6:	bd80      	pop	{r7, pc}
 80018a8:	48000800 	.word	0x48000800

080018ac <Selenoid_UP>:

void Selenoid_UP(void){
 80018ac:	b580      	push	{r7, lr}
 80018ae:	af00      	add	r7, sp, #0
	SetMotorSpeed(TIM_CHANNEL_1, 127);
 80018b0:	217f      	movs	r1, #127	@ 0x7f
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff fdc4 	bl	8001440 <SetMotorSpeed>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 0);
 80018b8:	2200      	movs	r2, #0
 80018ba:	2102      	movs	r1, #2
 80018bc:	4806      	ldr	r0, [pc, #24]	@ (80018d8 <Selenoid_UP+0x2c>)
 80018be:	f001 fdff 	bl	80034c0 <HAL_GPIO_WritePin>
	SetMotorSpeed(TIM_CHANNEL_3, 0);
 80018c2:	2100      	movs	r1, #0
 80018c4:	2008      	movs	r0, #8
 80018c6:	f7ff fdbb 	bl	8001440 <SetMotorSpeed>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 1);
 80018ca:	2201      	movs	r2, #1
 80018cc:	2108      	movs	r1, #8
 80018ce:	4802      	ldr	r0, [pc, #8]	@ (80018d8 <Selenoid_UP+0x2c>)
 80018d0:	f001 fdf6 	bl	80034c0 <HAL_GPIO_WritePin>
}
 80018d4:	bf00      	nop
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	48000800 	.word	0x48000800

080018dc <Selenoid_DOWN>:

void Selenoid_DOWN(void){
 80018dc:	b580      	push	{r7, lr}
 80018de:	af00      	add	r7, sp, #0
	SetMotorSpeed(TIM_CHANNEL_1, 0);
 80018e0:	2100      	movs	r1, #0
 80018e2:	2000      	movs	r0, #0
 80018e4:	f7ff fdac 	bl	8001440 <SetMotorSpeed>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, 1);
 80018e8:	2201      	movs	r2, #1
 80018ea:	2102      	movs	r1, #2
 80018ec:	4806      	ldr	r0, [pc, #24]	@ (8001908 <Selenoid_DOWN+0x2c>)
 80018ee:	f001 fde7 	bl	80034c0 <HAL_GPIO_WritePin>
	SetMotorSpeed(TIM_CHANNEL_3, 255);
 80018f2:	21ff      	movs	r1, #255	@ 0xff
 80018f4:	2008      	movs	r0, #8
 80018f6:	f7ff fda3 	bl	8001440 <SetMotorSpeed>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, 0);
 80018fa:	2200      	movs	r2, #0
 80018fc:	2108      	movs	r1, #8
 80018fe:	4802      	ldr	r0, [pc, #8]	@ (8001908 <Selenoid_DOWN+0x2c>)
 8001900:	f001 fdde 	bl	80034c0 <HAL_GPIO_WritePin>
}
 8001904:	bf00      	nop
 8001906:	bd80      	pop	{r7, pc}
 8001908:	48000800 	.word	0x48000800

0800190c <EXTI9_5_IRQHandler>:


void EXTI9_5_IRQHandler(void){
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	if(__HAL_GPIO_EXTI_GET_IT(GPIO_PIN_7) != RESET){
 8001910:	4b1a      	ldr	r3, [pc, #104]	@ (800197c <EXTI9_5_IRQHandler+0x70>)
 8001912:	695b      	ldr	r3, [r3, #20]
 8001914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001918:	2b00      	cmp	r3, #0
 800191a:	d02c      	beq.n	8001976 <EXTI9_5_IRQHandler+0x6a>
		current_Time = tx_time_get();
 800191c:	f006 f9fe 	bl	8007d1c <_tx_time_get>
 8001920:	4603      	mov	r3, r0
 8001922:	4a17      	ldr	r2, [pc, #92]	@ (8001980 <EXTI9_5_IRQHandler+0x74>)
 8001924:	6013      	str	r3, [r2, #0]
		dian = current_Time - last_time;
 8001926:	4b16      	ldr	r3, [pc, #88]	@ (8001980 <EXTI9_5_IRQHandler+0x74>)
 8001928:	681a      	ldr	r2, [r3, #0]
 800192a:	4b16      	ldr	r3, [pc, #88]	@ (8001984 <EXTI9_5_IRQHandler+0x78>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	1ad3      	subs	r3, r2, r3
 8001930:	4a15      	ldr	r2, [pc, #84]	@ (8001988 <EXTI9_5_IRQHandler+0x7c>)
 8001932:	6013      	str	r3, [r2, #0]
		if(dian > 10 && running == 1){
 8001934:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <EXTI9_5_IRQHandler+0x7c>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b0a      	cmp	r3, #10
 800193a:	d90f      	bls.n	800195c <EXTI9_5_IRQHandler+0x50>
 800193c:	4b13      	ldr	r3, [pc, #76]	@ (800198c <EXTI9_5_IRQHandler+0x80>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	2b01      	cmp	r3, #1
 8001942:	d10b      	bne.n	800195c <EXTI9_5_IRQHandler+0x50>
			pulse++;
 8001944:	4b12      	ldr	r3, [pc, #72]	@ (8001990 <EXTI9_5_IRQHandler+0x84>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	3301      	adds	r3, #1
 800194a:	4a11      	ldr	r2, [pc, #68]	@ (8001990 <EXTI9_5_IRQHandler+0x84>)
 800194c:	6013      	str	r3, [r2, #0]
			if (dian < 60){
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <EXTI9_5_IRQHandler+0x7c>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	2b3b      	cmp	r3, #59	@ 0x3b
 8001954:	d802      	bhi.n	800195c <EXTI9_5_IRQHandler+0x50>
				pulse = 0;
 8001956:	4b0e      	ldr	r3, [pc, #56]	@ (8001990 <EXTI9_5_IRQHandler+0x84>)
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
			}
		}
		last_time = current_Time;
 800195c:	4b08      	ldr	r3, [pc, #32]	@ (8001980 <EXTI9_5_IRQHandler+0x74>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a08      	ldr	r2, [pc, #32]	@ (8001984 <EXTI9_5_IRQHandler+0x78>)
 8001962:	6013      	str	r3, [r2, #0]
		//printf("pulse: %d\n", pulse);
		printf("dian: %lu\n", dian);
 8001964:	4b08      	ldr	r3, [pc, #32]	@ (8001988 <EXTI9_5_IRQHandler+0x7c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4619      	mov	r1, r3
 800196a:	480a      	ldr	r0, [pc, #40]	@ (8001994 <EXTI9_5_IRQHandler+0x88>)
 800196c:	f007 fcea 	bl	8009344 <iprintf>
		__HAL_GPIO_EXTI_CLEAR_IT(GPIO_PIN_7);
 8001970:	4b02      	ldr	r3, [pc, #8]	@ (800197c <EXTI9_5_IRQHandler+0x70>)
 8001972:	2280      	movs	r2, #128	@ 0x80
 8001974:	615a      	str	r2, [r3, #20]
	}
}
 8001976:	bf00      	nop
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40010400 	.word	0x40010400
 8001980:	20000630 	.word	0x20000630
 8001984:	2000062c 	.word	0x2000062c
 8001988:	20000634 	.word	0x20000634
 800198c:	20000638 	.word	0x20000638
 8001990:	20000640 	.word	0x20000640
 8001994:	0800cc54 	.word	0x0800cc54

08001998 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void __io_putchar(char ch) {
 8001998:	b580      	push	{r7, lr}
 800199a:	b082      	sub	sp, #8
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 80019a2:	1df9      	adds	r1, r7, #7
 80019a4:	230a      	movs	r3, #10
 80019a6:	2201      	movs	r2, #1
 80019a8:	4803      	ldr	r0, [pc, #12]	@ (80019b8 <__io_putchar+0x20>)
 80019aa:	f004 fadf 	bl	8005f6c <HAL_UART_Transmit>
}
 80019ae:	bf00      	nop
 80019b0:	3708      	adds	r7, #8
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20001fdc 	.word	0x20001fdc

080019bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80019c0:	f001 f873 	bl	8002aaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019c4:	f000 f818 	bl	80019f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80019c8:	f000 fb54 	bl	8002074 <MX_GPIO_Init>
  MX_DMA_Init();
 80019cc:	f000 fb28 	bl	8002020 <MX_DMA_Init>
  MX_SPI2_Init();
 80019d0:	f000 f854 	bl	8001a7c <MX_SPI2_Init>
  MX_USART3_UART_Init();
 80019d4:	f000 fad8 	bl	8001f88 <MX_USART3_UART_Init>
  MX_USART1_UART_Init();
 80019d8:	f000 fa8a 	bl	8001ef0 <MX_USART1_UART_Init>
  MX_UART5_Init();
 80019dc:	f000 fa3c 	bl	8001e58 <MX_UART5_Init>
  MX_TIM1_Init();
 80019e0:	f000 f88a 	bl	8001af8 <MX_TIM1_Init>
  MX_TIM3_Init();
 80019e4:	f000 f99c 	bl	8001d20 <MX_TIM3_Init>
  MX_TIM2_Init();
 80019e8:	f000 f942 	bl	8001c70 <MX_TIM2_Init>
  MX_TIM5_Init();
 80019ec:	f000 f9e6 	bl	8001dbc <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 80019f0:	f7ff fd06 	bl	8001400 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 80019f4:	bf00      	nop
 80019f6:	e7fd      	b.n	80019f4 <main+0x38>

080019f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b094      	sub	sp, #80	@ 0x50
 80019fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019fe:	f107 0318 	add.w	r3, r7, #24
 8001a02:	2238      	movs	r2, #56	@ 0x38
 8001a04:	2100      	movs	r1, #0
 8001a06:	4618      	mov	r0, r3
 8001a08:	f007 fd11 	bl	800942e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a0c:	1d3b      	adds	r3, r7, #4
 8001a0e:	2200      	movs	r2, #0
 8001a10:	601a      	str	r2, [r3, #0]
 8001a12:	605a      	str	r2, [r3, #4]
 8001a14:	609a      	str	r2, [r3, #8]
 8001a16:	60da      	str	r2, [r3, #12]
 8001a18:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a1a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8001a1e:	f001 fd67 	bl	80034f0 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001a22:	2302      	movs	r3, #2
 8001a24:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a26:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a2c:	2340      	movs	r3, #64	@ 0x40
 8001a2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001a30:	2300      	movs	r3, #0
 8001a32:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a34:	f107 0318 	add.w	r3, r7, #24
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f001 fe0d 	bl	8003658 <HAL_RCC_OscConfig>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d001      	beq.n	8001a48 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001a44:	f000 fc0e 	bl	8002264 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a48:	230f      	movs	r3, #15
 8001a4a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a50:	2300      	movs	r3, #0
 8001a52:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a54:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001a58:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001a5e:	1d3b      	adds	r3, r7, #4
 8001a60:	2100      	movs	r1, #0
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 f90a 	bl	8003c7c <HAL_RCC_ClockConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001a6e:	f000 fbf9 	bl	8002264 <Error_Handler>
  }
}
 8001a72:	bf00      	nop
 8001a74:	3750      	adds	r7, #80	@ 0x50
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
	...

08001a7c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001a80:	4b1b      	ldr	r3, [pc, #108]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001a82:	4a1c      	ldr	r2, [pc, #112]	@ (8001af4 <MX_SPI2_Init+0x78>)
 8001a84:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001a86:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001a88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a8c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001a8e:	4b18      	ldr	r3, [pc, #96]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a94:	4b16      	ldr	r3, [pc, #88]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001a96:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001a9a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a9c:	4b14      	ldr	r3, [pc, #80]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001aa2:	4b13      	ldr	r3, [pc, #76]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001aa8:	4b11      	ldr	r3, [pc, #68]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001aaa:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8001aae:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 8001ab0:	4b0f      	ldr	r3, [pc, #60]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001ab2:	2238      	movs	r2, #56	@ 0x38
 8001ab4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001ab8:	2200      	movs	r2, #0
 8001aba:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001abc:	4b0c      	ldr	r3, [pc, #48]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001abe:	2200      	movs	r2, #0
 8001ac0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001aca:	2207      	movs	r2, #7
 8001acc:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001ace:	4b08      	ldr	r3, [pc, #32]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001ad4:	4b06      	ldr	r3, [pc, #24]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001ad6:	2208      	movs	r2, #8
 8001ad8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001ada:	4805      	ldr	r0, [pc, #20]	@ (8001af0 <MX_SPI2_Init+0x74>)
 8001adc:	f002 fd6a 	bl	80045b4 <HAL_SPI_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001ae6:	f000 fbbd 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20001db4 	.word	0x20001db4
 8001af4:	40003800 	.word	0x40003800

08001af8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b09c      	sub	sp, #112	@ 0x70
 8001afc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001afe:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b02:	2200      	movs	r2, #0
 8001b04:	601a      	str	r2, [r3, #0]
 8001b06:	605a      	str	r2, [r3, #4]
 8001b08:	609a      	str	r2, [r3, #8]
 8001b0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b0c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001b10:	2200      	movs	r2, #0
 8001b12:	601a      	str	r2, [r3, #0]
 8001b14:	605a      	str	r2, [r3, #4]
 8001b16:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b18:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	601a      	str	r2, [r3, #0]
 8001b20:	605a      	str	r2, [r3, #4]
 8001b22:	609a      	str	r2, [r3, #8]
 8001b24:	60da      	str	r2, [r3, #12]
 8001b26:	611a      	str	r2, [r3, #16]
 8001b28:	615a      	str	r2, [r3, #20]
 8001b2a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b2c:	1d3b      	adds	r3, r7, #4
 8001b2e:	2234      	movs	r2, #52	@ 0x34
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f007 fc7b 	bl	800942e <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b38:	4b4b      	ldr	r3, [pc, #300]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001b3a:	4a4c      	ldr	r2, [pc, #304]	@ (8001c6c <MX_TIM1_Init+0x174>)
 8001b3c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 7;
 8001b3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001b40:	2207      	movs	r2, #7
 8001b42:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b44:	4b48      	ldr	r3, [pc, #288]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8001b4a:	4b47      	ldr	r3, [pc, #284]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001b4c:	22ff      	movs	r2, #255	@ 0xff
 8001b4e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b50:	4b45      	ldr	r3, [pc, #276]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b56:	4b44      	ldr	r3, [pc, #272]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b5c:	4b42      	ldr	r3, [pc, #264]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b62:	4841      	ldr	r0, [pc, #260]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001b64:	f002 fdd1 	bl	800470a <HAL_TIM_Base_Init>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001b6e:	f000 fb79 	bl	8002264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b76:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b78:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001b7c:	4619      	mov	r1, r3
 8001b7e:	483a      	ldr	r0, [pc, #232]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001b80:	f003 fa60 	bl	8005044 <HAL_TIM_ConfigClockSource>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001b8a:	f000 fb6b 	bl	8002264 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b8e:	4836      	ldr	r0, [pc, #216]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001b90:	f002 fe8a 	bl	80048a8 <HAL_TIM_PWM_Init>
 8001b94:	4603      	mov	r3, r0
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001b9a:	f000 fb63 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001baa:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001bae:	4619      	mov	r1, r3
 8001bb0:	482d      	ldr	r0, [pc, #180]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001bb2:	f004 f81b 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8001bbc:	f000 fb52 	bl	8002264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bc0:	2360      	movs	r3, #96	@ 0x60
 8001bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 8001bc4:	2300      	movs	r3, #0
 8001bc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bcc:	2300      	movs	r3, #0
 8001bce:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bdc:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001be0:	2200      	movs	r2, #0
 8001be2:	4619      	mov	r1, r3
 8001be4:	4820      	ldr	r0, [pc, #128]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001be6:	f003 f919 	bl	8004e1c <HAL_TIM_PWM_ConfigChannel>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8001bf0:	f000 fb38 	bl	8002264 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bf4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001bf8:	2208      	movs	r2, #8
 8001bfa:	4619      	mov	r1, r3
 8001bfc:	481a      	ldr	r0, [pc, #104]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001bfe:	f003 f90d 	bl	8004e1c <HAL_TIM_PWM_ConfigChannel>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d001      	beq.n	8001c0c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8001c08:	f000 fb2c 	bl	8002264 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c14:	2300      	movs	r3, #0
 8001c16:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c24:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c26:	2300      	movs	r3, #0
 8001c28:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c32:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c36:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c44:	1d3b      	adds	r3, r7, #4
 8001c46:	4619      	mov	r1, r3
 8001c48:	4807      	ldr	r0, [pc, #28]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001c4a:	f004 f865 	bl	8005d18 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c4e:	4603      	mov	r3, r0
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d001      	beq.n	8001c58 <MX_TIM1_Init+0x160>
  {
    Error_Handler();
 8001c54:	f000 fb06 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c58:	4803      	ldr	r0, [pc, #12]	@ (8001c68 <MX_TIM1_Init+0x170>)
 8001c5a:	f000 fbd7 	bl	800240c <HAL_TIM_MspPostInit>

}
 8001c5e:	bf00      	nop
 8001c60:	3770      	adds	r7, #112	@ 0x70
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}
 8001c66:	bf00      	nop
 8001c68:	20001e18 	.word	0x20001e18
 8001c6c:	40012c00 	.word	0x40012c00

08001c70 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b08a      	sub	sp, #40	@ 0x28
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c76:	f107 031c 	add.w	r3, r7, #28
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	605a      	str	r2, [r3, #4]
 8001c80:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c82:	463b      	mov	r3, r7
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	605a      	str	r2, [r3, #4]
 8001c8a:	609a      	str	r2, [r3, #8]
 8001c8c:	60da      	str	r2, [r3, #12]
 8001c8e:	611a      	str	r2, [r3, #16]
 8001c90:	615a      	str	r2, [r3, #20]
 8001c92:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001c94:	4b21      	ldr	r3, [pc, #132]	@ (8001d1c <MX_TIM2_Init+0xac>)
 8001c96:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001c9a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001c9c:	4b1f      	ldr	r3, [pc, #124]	@ (8001d1c <MX_TIM2_Init+0xac>)
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca2:	4b1e      	ldr	r3, [pc, #120]	@ (8001d1c <MX_TIM2_Init+0xac>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	@ (8001d1c <MX_TIM2_Init+0xac>)
 8001caa:	22ff      	movs	r2, #255	@ 0xff
 8001cac:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cae:	4b1b      	ldr	r3, [pc, #108]	@ (8001d1c <MX_TIM2_Init+0xac>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb4:	4b19      	ldr	r3, [pc, #100]	@ (8001d1c <MX_TIM2_Init+0xac>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001cba:	4818      	ldr	r0, [pc, #96]	@ (8001d1c <MX_TIM2_Init+0xac>)
 8001cbc:	f002 fdf4 	bl	80048a8 <HAL_TIM_PWM_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8001cc6:	f000 facd 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4810      	ldr	r0, [pc, #64]	@ (8001d1c <MX_TIM2_Init+0xac>)
 8001cda:	f003 ff87 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8001ce4:	f000 fabe 	bl	8002264 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce8:	2360      	movs	r3, #96	@ 0x60
 8001cea:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cf8:	463b      	mov	r3, r7
 8001cfa:	2204      	movs	r2, #4
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4807      	ldr	r0, [pc, #28]	@ (8001d1c <MX_TIM2_Init+0xac>)
 8001d00:	f003 f88c 	bl	8004e1c <HAL_TIM_PWM_ConfigChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 8001d0a:	f000 faab 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d0e:	4803      	ldr	r0, [pc, #12]	@ (8001d1c <MX_TIM2_Init+0xac>)
 8001d10:	f000 fb7c 	bl	800240c <HAL_TIM_MspPostInit>

}
 8001d14:	bf00      	nop
 8001d16:	3728      	adds	r7, #40	@ 0x28
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	20001e64 	.word	0x20001e64

08001d20 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001d20:	b580      	push	{r7, lr}
 8001d22:	b088      	sub	sp, #32
 8001d24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d26:	f107 0310 	add.w	r3, r7, #16
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	605a      	str	r2, [r3, #4]
 8001d30:	609a      	str	r2, [r3, #8]
 8001d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d34:	1d3b      	adds	r3, r7, #4
 8001d36:	2200      	movs	r2, #0
 8001d38:	601a      	str	r2, [r3, #0]
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	@ (8001db4 <MX_TIM3_Init+0x94>)
 8001d40:	4a1d      	ldr	r2, [pc, #116]	@ (8001db8 <MX_TIM3_Init+0x98>)
 8001d42:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d44:	4b1b      	ldr	r3, [pc, #108]	@ (8001db4 <MX_TIM3_Init+0x94>)
 8001d46:	2200      	movs	r2, #0
 8001d48:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	@ (8001db4 <MX_TIM3_Init+0x94>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 255;
 8001d50:	4b18      	ldr	r3, [pc, #96]	@ (8001db4 <MX_TIM3_Init+0x94>)
 8001d52:	22ff      	movs	r2, #255	@ 0xff
 8001d54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d56:	4b17      	ldr	r3, [pc, #92]	@ (8001db4 <MX_TIM3_Init+0x94>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d5c:	4b15      	ldr	r3, [pc, #84]	@ (8001db4 <MX_TIM3_Init+0x94>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001d62:	4814      	ldr	r0, [pc, #80]	@ (8001db4 <MX_TIM3_Init+0x94>)
 8001d64:	f002 fcd1 	bl	800470a <HAL_TIM_Base_Init>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8001d6e:	f000 fa79 	bl	8002264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d72:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001d76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001d78:	f107 0310 	add.w	r3, r7, #16
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480d      	ldr	r0, [pc, #52]	@ (8001db4 <MX_TIM3_Init+0x94>)
 8001d80:	f003 f960 	bl	8005044 <HAL_TIM_ConfigClockSource>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8001d8a:	f000 fa6b 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d92:	2300      	movs	r3, #0
 8001d94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001d96:	1d3b      	adds	r3, r7, #4
 8001d98:	4619      	mov	r1, r3
 8001d9a:	4806      	ldr	r0, [pc, #24]	@ (8001db4 <MX_TIM3_Init+0x94>)
 8001d9c:	f003 ff26 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001da6:	f000 fa5d 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001daa:	bf00      	nop
 8001dac:	3720      	adds	r7, #32
 8001dae:	46bd      	mov	sp, r7
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20001eb0 	.word	0x20001eb0
 8001db8:	40000400 	.word	0x40000400

08001dbc <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b088      	sub	sp, #32
 8001dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	601a      	str	r2, [r3, #0]
 8001dca:	605a      	str	r2, [r3, #4]
 8001dcc:	609a      	str	r2, [r3, #8]
 8001dce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dd0:	1d3b      	adds	r3, r7, #4
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
 8001dd6:	605a      	str	r2, [r3, #4]
 8001dd8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dda:	4b1d      	ldr	r3, [pc, #116]	@ (8001e50 <MX_TIM5_Init+0x94>)
 8001ddc:	4a1d      	ldr	r2, [pc, #116]	@ (8001e54 <MX_TIM5_Init+0x98>)
 8001dde:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001de0:	4b1b      	ldr	r3, [pc, #108]	@ (8001e50 <MX_TIM5_Init+0x94>)
 8001de2:	2200      	movs	r2, #0
 8001de4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001de6:	4b1a      	ldr	r3, [pc, #104]	@ (8001e50 <MX_TIM5_Init+0x94>)
 8001de8:	2200      	movs	r2, #0
 8001dea:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 255;
 8001dec:	4b18      	ldr	r3, [pc, #96]	@ (8001e50 <MX_TIM5_Init+0x94>)
 8001dee:	22ff      	movs	r2, #255	@ 0xff
 8001df0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001df2:	4b17      	ldr	r3, [pc, #92]	@ (8001e50 <MX_TIM5_Init+0x94>)
 8001df4:	2200      	movs	r2, #0
 8001df6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001df8:	4b15      	ldr	r3, [pc, #84]	@ (8001e50 <MX_TIM5_Init+0x94>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001dfe:	4814      	ldr	r0, [pc, #80]	@ (8001e50 <MX_TIM5_Init+0x94>)
 8001e00:	f002 fc83 	bl	800470a <HAL_TIM_Base_Init>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001e0a:	f000 fa2b 	bl	8002264 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e0e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001e12:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e14:	f107 0310 	add.w	r3, r7, #16
 8001e18:	4619      	mov	r1, r3
 8001e1a:	480d      	ldr	r0, [pc, #52]	@ (8001e50 <MX_TIM5_Init+0x94>)
 8001e1c:	f003 f912 	bl	8005044 <HAL_TIM_ConfigClockSource>
 8001e20:	4603      	mov	r3, r0
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d001      	beq.n	8001e2a <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001e26:	f000 fa1d 	bl	8002264 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e32:	1d3b      	adds	r3, r7, #4
 8001e34:	4619      	mov	r1, r3
 8001e36:	4806      	ldr	r0, [pc, #24]	@ (8001e50 <MX_TIM5_Init+0x94>)
 8001e38:	f003 fed8 	bl	8005bec <HAL_TIMEx_MasterConfigSynchronization>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8001e42:	f000 fa0f 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e46:	bf00      	nop
 8001e48:	3720      	adds	r7, #32
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	20001efc 	.word	0x20001efc
 8001e54:	40000c00 	.word	0x40000c00

08001e58 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001e5c:	4b22      	ldr	r3, [pc, #136]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001e5e:	4a23      	ldr	r2, [pc, #140]	@ (8001eec <MX_UART5_Init+0x94>)
 8001e60:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001e62:	4b21      	ldr	r3, [pc, #132]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001e64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001e68:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001e6a:	4b1f      	ldr	r3, [pc, #124]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001e70:	4b1d      	ldr	r3, [pc, #116]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001e76:	4b1c      	ldr	r3, [pc, #112]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001e7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001e7e:	220c      	movs	r2, #12
 8001e80:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e82:	4b19      	ldr	r3, [pc, #100]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e88:	4b17      	ldr	r3, [pc, #92]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e8e:	4b16      	ldr	r3, [pc, #88]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001e90:	2200      	movs	r2, #0
 8001e92:	621a      	str	r2, [r3, #32]
  huart5.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001e94:	4b14      	ldr	r3, [pc, #80]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001e96:	2200      	movs	r2, #0
 8001e98:	625a      	str	r2, [r3, #36]	@ 0x24
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e9a:	4b13      	ldr	r3, [pc, #76]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001e9c:	2200      	movs	r2, #0
 8001e9e:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ea0:	4811      	ldr	r0, [pc, #68]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001ea2:	f004 f813 	bl	8005ecc <HAL_UART_Init>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d001      	beq.n	8001eb0 <MX_UART5_Init+0x58>
  {
    Error_Handler();
 8001eac:	f000 f9da 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart5, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	480d      	ldr	r0, [pc, #52]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001eb4:	f005 f885 	bl	8006fc2 <HAL_UARTEx_SetTxFifoThreshold>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_UART5_Init+0x6a>
  {
    Error_Handler();
 8001ebe:	f000 f9d1 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart5, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ec2:	2100      	movs	r1, #0
 8001ec4:	4808      	ldr	r0, [pc, #32]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001ec6:	f005 f8ba 	bl	800703e <HAL_UARTEx_SetRxFifoThreshold>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d001      	beq.n	8001ed4 <MX_UART5_Init+0x7c>
  {
    Error_Handler();
 8001ed0:	f000 f9c8 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart5) != HAL_OK)
 8001ed4:	4804      	ldr	r0, [pc, #16]	@ (8001ee8 <MX_UART5_Init+0x90>)
 8001ed6:	f005 f83b 	bl	8006f50 <HAL_UARTEx_DisableFifoMode>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d001      	beq.n	8001ee4 <MX_UART5_Init+0x8c>
  {
    Error_Handler();
 8001ee0:	f000 f9c0 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ee4:	bf00      	nop
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	20001f48 	.word	0x20001f48
 8001eec:	40005000 	.word	0x40005000

08001ef0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ef4:	4b22      	ldr	r3, [pc, #136]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001ef6:	4a23      	ldr	r2, [pc, #140]	@ (8001f84 <MX_USART1_UART_Init+0x94>)
 8001ef8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001efa:	4b21      	ldr	r3, [pc, #132]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001efc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f02:	4b1f      	ldr	r3, [pc, #124]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f08:	4b1d      	ldr	r3, [pc, #116]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f0e:	4b1c      	ldr	r3, [pc, #112]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f14:	4b1a      	ldr	r3, [pc, #104]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001f16:	220c      	movs	r2, #12
 8001f18:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1a:	4b19      	ldr	r3, [pc, #100]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f20:	4b17      	ldr	r3, [pc, #92]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f26:	4b16      	ldr	r3, [pc, #88]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f2c:	4b14      	ldr	r3, [pc, #80]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f32:	4b13      	ldr	r3, [pc, #76]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f38:	4811      	ldr	r0, [pc, #68]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001f3a:	f003 ffc7 	bl	8005ecc <HAL_UART_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001f44:	f000 f98e 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f48:	2100      	movs	r1, #0
 8001f4a:	480d      	ldr	r0, [pc, #52]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001f4c:	f005 f839 	bl	8006fc2 <HAL_UARTEx_SetTxFifoThreshold>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001f56:	f000 f985 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f5a:	2100      	movs	r1, #0
 8001f5c:	4808      	ldr	r0, [pc, #32]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001f5e:	f005 f86e 	bl	800703e <HAL_UARTEx_SetRxFifoThreshold>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001f68:	f000 f97c 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001f6c:	4804      	ldr	r0, [pc, #16]	@ (8001f80 <MX_USART1_UART_Init+0x90>)
 8001f6e:	f004 ffef 	bl	8006f50 <HAL_UARTEx_DisableFifoMode>
 8001f72:	4603      	mov	r3, r0
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d001      	beq.n	8001f7c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001f78:	f000 f974 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f7c:	bf00      	nop
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	20001fdc 	.word	0x20001fdc
 8001f84:	40013800 	.word	0x40013800

08001f88 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f8c:	4b22      	ldr	r3, [pc, #136]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8001f8e:	4a23      	ldr	r2, [pc, #140]	@ (800201c <MX_USART3_UART_Init+0x94>)
 8001f90:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f92:	4b21      	ldr	r3, [pc, #132]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8001f94:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f98:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9a:	4b1f      	ldr	r3, [pc, #124]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fa6:	4b1c      	ldr	r3, [pc, #112]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fac:	4b1a      	ldr	r3, [pc, #104]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8001fae:	220c      	movs	r2, #12
 8001fb0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb2:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb8:	4b17      	ldr	r3, [pc, #92]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8001fba:	2200      	movs	r2, #0
 8001fbc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fbe:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fc4:	4b14      	ldr	r3, [pc, #80]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fca:	4b13      	ldr	r3, [pc, #76]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fd0:	4811      	ldr	r0, [pc, #68]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8001fd2:	f003 ff7b 	bl	8005ecc <HAL_UART_Init>
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d001      	beq.n	8001fe0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001fdc:	f000 f942 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	480d      	ldr	r0, [pc, #52]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8001fe4:	f004 ffed 	bl	8006fc2 <HAL_UARTEx_SetTxFifoThreshold>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001fee:	f000 f939 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	4808      	ldr	r0, [pc, #32]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8001ff6:	f005 f822 	bl	800703e <HAL_UARTEx_SetRxFifoThreshold>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d001      	beq.n	8002004 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002000:	f000 f930 	bl	8002264 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002004:	4804      	ldr	r0, [pc, #16]	@ (8002018 <MX_USART3_UART_Init+0x90>)
 8002006:	f004 ffa3 	bl	8006f50 <HAL_UARTEx_DisableFifoMode>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d001      	beq.n	8002014 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002010:	f000 f928 	bl	8002264 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002014:	bf00      	nop
 8002016:	bd80      	pop	{r7, pc}
 8002018:	20002070 	.word	0x20002070
 800201c:	40004800 	.word	0x40004800

08002020 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b082      	sub	sp, #8
 8002024:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8002026:	4b12      	ldr	r3, [pc, #72]	@ (8002070 <MX_DMA_Init+0x50>)
 8002028:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800202a:	4a11      	ldr	r2, [pc, #68]	@ (8002070 <MX_DMA_Init+0x50>)
 800202c:	f043 0304 	orr.w	r3, r3, #4
 8002030:	6493      	str	r3, [r2, #72]	@ 0x48
 8002032:	4b0f      	ldr	r3, [pc, #60]	@ (8002070 <MX_DMA_Init+0x50>)
 8002034:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002036:	f003 0304 	and.w	r3, r3, #4
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800203e:	4b0c      	ldr	r3, [pc, #48]	@ (8002070 <MX_DMA_Init+0x50>)
 8002040:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002042:	4a0b      	ldr	r2, [pc, #44]	@ (8002070 <MX_DMA_Init+0x50>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6493      	str	r3, [r2, #72]	@ 0x48
 800204a:	4b09      	ldr	r3, [pc, #36]	@ (8002070 <MX_DMA_Init+0x50>)
 800204c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800204e:	f003 0301 	and.w	r3, r3, #1
 8002052:	603b      	str	r3, [r7, #0]
 8002054:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	200b      	movs	r0, #11
 800205c:	f000 fe14 	bl	8002c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002060:	200b      	movs	r0, #11
 8002062:	f000 fe2b 	bl	8002cbc <HAL_NVIC_EnableIRQ>

}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	40021000 	.word	0x40021000

08002074 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b08a      	sub	sp, #40	@ 0x28
 8002078:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	2200      	movs	r2, #0
 8002080:	601a      	str	r2, [r3, #0]
 8002082:	605a      	str	r2, [r3, #4]
 8002084:	609a      	str	r2, [r3, #8]
 8002086:	60da      	str	r2, [r3, #12]
 8002088:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800208a:	4b6a      	ldr	r3, [pc, #424]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 800208c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800208e:	4a69      	ldr	r2, [pc, #420]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 8002090:	f043 0304 	orr.w	r3, r3, #4
 8002094:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002096:	4b67      	ldr	r3, [pc, #412]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 8002098:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800209a:	f003 0304 	and.w	r3, r3, #4
 800209e:	613b      	str	r3, [r7, #16]
 80020a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80020a2:	4b64      	ldr	r3, [pc, #400]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 80020a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020a6:	4a63      	ldr	r2, [pc, #396]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 80020a8:	f043 0320 	orr.w	r3, r3, #32
 80020ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020ae:	4b61      	ldr	r3, [pc, #388]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 80020b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020b2:	f003 0320 	and.w	r3, r3, #32
 80020b6:	60fb      	str	r3, [r7, #12]
 80020b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ba:	4b5e      	ldr	r3, [pc, #376]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 80020bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020be:	4a5d      	ldr	r2, [pc, #372]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 80020c0:	f043 0301 	orr.w	r3, r3, #1
 80020c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020c6:	4b5b      	ldr	r3, [pc, #364]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 80020c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ca:	f003 0301 	and.w	r3, r3, #1
 80020ce:	60bb      	str	r3, [r7, #8]
 80020d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020d2:	4b58      	ldr	r3, [pc, #352]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 80020d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020d6:	4a57      	ldr	r2, [pc, #348]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 80020d8:	f043 0302 	orr.w	r3, r3, #2
 80020dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020de:	4b55      	ldr	r3, [pc, #340]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 80020e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020e2:	f003 0302 	and.w	r3, r3, #2
 80020e6:	607b      	str	r3, [r7, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020ea:	4b52      	ldr	r3, [pc, #328]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 80020ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020ee:	4a51      	ldr	r2, [pc, #324]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 80020f0:	f043 0308 	orr.w	r3, r3, #8
 80020f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80020f6:	4b4f      	ldr	r3, [pc, #316]	@ (8002234 <MX_GPIO_Init+0x1c0>)
 80020f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80020fa:	f003 0308 	and.w	r3, r3, #8
 80020fe:	603b      	str	r3, [r7, #0]
 8002100:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8002102:	2200      	movs	r2, #0
 8002104:	f242 012a 	movw	r1, #8234	@ 0x202a
 8002108:	484b      	ldr	r0, [pc, #300]	@ (8002238 <MX_GPIO_Init+0x1c4>)
 800210a:	f001 f9d9 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_14, GPIO_PIN_RESET);
 800210e:	2200      	movs	r2, #0
 8002110:	f244 0101 	movw	r1, #16385	@ 0x4001
 8002114:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002118:	f001 f9d2 	bl	80034c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800211c:	2200      	movs	r2, #0
 800211e:	215f      	movs	r1, #95	@ 0x5f
 8002120:	4846      	ldr	r0, [pc, #280]	@ (800223c <MX_GPIO_Init+0x1c8>)
 8002122:	f001 f9cd 	bl	80034c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_6, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC13 PC1 PC3 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_5;
 8002126:	f242 032a 	movw	r3, #8234	@ 0x202a
 800212a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212c:	2301      	movs	r3, #1
 800212e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002130:	2300      	movs	r3, #0
 8002132:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002134:	2300      	movs	r3, #0
 8002136:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002138:	f107 0314 	add.w	r3, r7, #20
 800213c:	4619      	mov	r1, r3
 800213e:	483e      	ldr	r0, [pc, #248]	@ (8002238 <MX_GPIO_Init+0x1c4>)
 8002140:	f001 f83c 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_14;
 8002144:	f244 0301 	movw	r3, #16385	@ 0x4001
 8002148:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214a:	2301      	movs	r3, #1
 800214c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214e:	2300      	movs	r3, #0
 8002150:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002152:	2300      	movs	r3, #0
 8002154:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002160:	f001 f82c 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002164:	2310      	movs	r3, #16
 8002166:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002174:	2305      	movs	r3, #5
 8002176:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002178:	f107 0314 	add.w	r3, r7, #20
 800217c:	4619      	mov	r1, r3
 800217e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002182:	f001 f81b 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB4
                           PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_4
 8002186:	2357      	movs	r3, #87	@ 0x57
 8002188:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218a:	2301      	movs	r3, #1
 800218c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002196:	f107 0314 	add.w	r3, r7, #20
 800219a:	4619      	mov	r1, r3
 800219c:	4827      	ldr	r0, [pc, #156]	@ (800223c <MX_GPIO_Init+0x1c8>)
 800219e:	f001 f80d 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80021a2:	2308      	movs	r3, #8
 80021a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a6:	2301      	movs	r3, #1
 80021a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80021aa:	2302      	movs	r3, #2
 80021ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	4820      	ldr	r0, [pc, #128]	@ (800223c <MX_GPIO_Init+0x1c8>)
 80021ba:	f000 ffff 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021be:	2320      	movs	r3, #32
 80021c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021c2:	2302      	movs	r3, #2
 80021c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c6:	2300      	movs	r3, #0
 80021c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ca:	2300      	movs	r3, #0
 80021cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80021ce:	2305      	movs	r3, #5
 80021d0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4619      	mov	r1, r3
 80021d8:	4818      	ldr	r0, [pc, #96]	@ (800223c <MX_GPIO_Init+0x1c8>)
 80021da:	f000 ffef 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021de:	2380      	movs	r3, #128	@ 0x80
 80021e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021e2:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80021e6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e8:	2300      	movs	r3, #0
 80021ea:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ec:	f107 0314 	add.w	r3, r7, #20
 80021f0:	4619      	mov	r1, r3
 80021f2:	4812      	ldr	r0, [pc, #72]	@ (800223c <MX_GPIO_Init+0x1c8>)
 80021f4:	f000 ffe2 	bl	80031bc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021f8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80021fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021fe:	2312      	movs	r3, #18
 8002200:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002202:	2300      	movs	r3, #0
 8002204:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002206:	2300      	movs	r3, #0
 8002208:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800220a:	2304      	movs	r3, #4
 800220c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800220e:	f107 0314 	add.w	r3, r7, #20
 8002212:	4619      	mov	r1, r3
 8002214:	4809      	ldr	r0, [pc, #36]	@ (800223c <MX_GPIO_Init+0x1c8>)
 8002216:	f000 ffd1 	bl	80031bc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800221a:	2200      	movs	r2, #0
 800221c:	2100      	movs	r1, #0
 800221e:	2017      	movs	r0, #23
 8002220:	f000 fd32 	bl	8002c88 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002224:	2017      	movs	r0, #23
 8002226:	f000 fd49 	bl	8002cbc <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800222a:	bf00      	nop
 800222c:	3728      	adds	r7, #40	@ 0x28
 800222e:	46bd      	mov	sp, r7
 8002230:	bd80      	pop	{r7, pc}
 8002232:	bf00      	nop
 8002234:	40021000 	.word	0x40021000
 8002238:	48000800 	.word	0x48000800
 800223c:	48000400 	.word	0x48000400

08002240 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b082      	sub	sp, #8
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a04      	ldr	r2, [pc, #16]	@ (8002260 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d101      	bne.n	8002256 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002252:	f000 fc43 	bl	8002adc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002256:	bf00      	nop
 8002258:	3708      	adds	r7, #8
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	40001000 	.word	0x40001000

08002264 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002264:	b480      	push	{r7}
 8002266:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002268:	b672      	cpsid	i
}
 800226a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800226c:	bf00      	nop
 800226e:	e7fd      	b.n	800226c <Error_Handler+0x8>

08002270 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002276:	4b0f      	ldr	r3, [pc, #60]	@ (80022b4 <HAL_MspInit+0x44>)
 8002278:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800227a:	4a0e      	ldr	r2, [pc, #56]	@ (80022b4 <HAL_MspInit+0x44>)
 800227c:	f043 0301 	orr.w	r3, r3, #1
 8002280:	6613      	str	r3, [r2, #96]	@ 0x60
 8002282:	4b0c      	ldr	r3, [pc, #48]	@ (80022b4 <HAL_MspInit+0x44>)
 8002284:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002286:	f003 0301 	and.w	r3, r3, #1
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228e:	4b09      	ldr	r3, [pc, #36]	@ (80022b4 <HAL_MspInit+0x44>)
 8002290:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002292:	4a08      	ldr	r2, [pc, #32]	@ (80022b4 <HAL_MspInit+0x44>)
 8002294:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002298:	6593      	str	r3, [r2, #88]	@ 0x58
 800229a:	4b06      	ldr	r3, [pc, #24]	@ (80022b4 <HAL_MspInit+0x44>)
 800229c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800229e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a2:	603b      	str	r3, [r7, #0]
 80022a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80022a6:	f001 f9c7 	bl	8003638 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40021000 	.word	0x40021000

080022b8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b08a      	sub	sp, #40	@ 0x28
 80022bc:	af00      	add	r7, sp, #0
 80022be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c0:	f107 0314 	add.w	r3, r7, #20
 80022c4:	2200      	movs	r2, #0
 80022c6:	601a      	str	r2, [r3, #0]
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	609a      	str	r2, [r3, #8]
 80022cc:	60da      	str	r2, [r3, #12]
 80022ce:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a17      	ldr	r2, [pc, #92]	@ (8002334 <HAL_SPI_MspInit+0x7c>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d128      	bne.n	800232c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022da:	4b17      	ldr	r3, [pc, #92]	@ (8002338 <HAL_SPI_MspInit+0x80>)
 80022dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022de:	4a16      	ldr	r2, [pc, #88]	@ (8002338 <HAL_SPI_MspInit+0x80>)
 80022e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80022e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80022e6:	4b14      	ldr	r3, [pc, #80]	@ (8002338 <HAL_SPI_MspInit+0x80>)
 80022e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80022ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80022ee:	613b      	str	r3, [r7, #16]
 80022f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022f2:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <HAL_SPI_MspInit+0x80>)
 80022f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80022f6:	4a10      	ldr	r2, [pc, #64]	@ (8002338 <HAL_SPI_MspInit+0x80>)
 80022f8:	f043 0302 	orr.w	r3, r3, #2
 80022fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80022fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002338 <HAL_SPI_MspInit+0x80>)
 8002300:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	60fb      	str	r3, [r7, #12]
 8002308:	68fb      	ldr	r3, [r7, #12]
    PB12     ------> SPI2_NSS
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800230a:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800230e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002310:	2302      	movs	r3, #2
 8002312:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002314:	2300      	movs	r3, #0
 8002316:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002318:	2300      	movs	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800231c:	2305      	movs	r3, #5
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002320:	f107 0314 	add.w	r3, r7, #20
 8002324:	4619      	mov	r1, r3
 8002326:	4805      	ldr	r0, [pc, #20]	@ (800233c <HAL_SPI_MspInit+0x84>)
 8002328:	f000 ff48 	bl	80031bc <HAL_GPIO_Init>

  /* USER CODE END SPI2_MspInit 1 */

  }

}
 800232c:	bf00      	nop
 800232e:	3728      	adds	r7, #40	@ 0x28
 8002330:	46bd      	mov	sp, r7
 8002332:	bd80      	pop	{r7, pc}
 8002334:	40003800 	.word	0x40003800
 8002338:	40021000 	.word	0x40021000
 800233c:	48000400 	.word	0x48000400

08002340 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002340:	b480      	push	{r7}
 8002342:	b087      	sub	sp, #28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4a1c      	ldr	r2, [pc, #112]	@ (80023c0 <HAL_TIM_Base_MspInit+0x80>)
 800234e:	4293      	cmp	r3, r2
 8002350:	d10c      	bne.n	800236c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002352:	4b1c      	ldr	r3, [pc, #112]	@ (80023c4 <HAL_TIM_Base_MspInit+0x84>)
 8002354:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002356:	4a1b      	ldr	r2, [pc, #108]	@ (80023c4 <HAL_TIM_Base_MspInit+0x84>)
 8002358:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800235c:	6613      	str	r3, [r2, #96]	@ 0x60
 800235e:	4b19      	ldr	r3, [pc, #100]	@ (80023c4 <HAL_TIM_Base_MspInit+0x84>)
 8002360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002362:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002366:	617b      	str	r3, [r7, #20]
 8002368:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800236a:	e022      	b.n	80023b2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM3)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a15      	ldr	r2, [pc, #84]	@ (80023c8 <HAL_TIM_Base_MspInit+0x88>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10c      	bne.n	8002390 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002376:	4b13      	ldr	r3, [pc, #76]	@ (80023c4 <HAL_TIM_Base_MspInit+0x84>)
 8002378:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237a:	4a12      	ldr	r2, [pc, #72]	@ (80023c4 <HAL_TIM_Base_MspInit+0x84>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6593      	str	r3, [r2, #88]	@ 0x58
 8002382:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <HAL_TIM_Base_MspInit+0x84>)
 8002384:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	613b      	str	r3, [r7, #16]
 800238c:	693b      	ldr	r3, [r7, #16]
}
 800238e:	e010      	b.n	80023b2 <HAL_TIM_Base_MspInit+0x72>
  else if(htim_base->Instance==TIM5)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a0d      	ldr	r2, [pc, #52]	@ (80023cc <HAL_TIM_Base_MspInit+0x8c>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10b      	bne.n	80023b2 <HAL_TIM_Base_MspInit+0x72>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800239a:	4b0a      	ldr	r3, [pc, #40]	@ (80023c4 <HAL_TIM_Base_MspInit+0x84>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239e:	4a09      	ldr	r2, [pc, #36]	@ (80023c4 <HAL_TIM_Base_MspInit+0x84>)
 80023a0:	f043 0308 	orr.w	r3, r3, #8
 80023a4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023a6:	4b07      	ldr	r3, [pc, #28]	@ (80023c4 <HAL_TIM_Base_MspInit+0x84>)
 80023a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023aa:	f003 0308 	and.w	r3, r3, #8
 80023ae:	60fb      	str	r3, [r7, #12]
 80023b0:	68fb      	ldr	r3, [r7, #12]
}
 80023b2:	bf00      	nop
 80023b4:	371c      	adds	r7, #28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	40012c00 	.word	0x40012c00
 80023c4:	40021000 	.word	0x40021000
 80023c8:	40000400 	.word	0x40000400
 80023cc:	40000c00 	.word	0x40000c00

080023d0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b085      	sub	sp, #20
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023e0:	d10b      	bne.n	80023fa <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023e2:	4b09      	ldr	r3, [pc, #36]	@ (8002408 <HAL_TIM_PWM_MspInit+0x38>)
 80023e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023e6:	4a08      	ldr	r2, [pc, #32]	@ (8002408 <HAL_TIM_PWM_MspInit+0x38>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6593      	str	r3, [r2, #88]	@ 0x58
 80023ee:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <HAL_TIM_PWM_MspInit+0x38>)
 80023f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023f2:	f003 0301 	and.w	r3, r3, #1
 80023f6:	60fb      	str	r3, [r7, #12]
 80023f8:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 80023fa:	bf00      	nop
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40021000 	.word	0x40021000

0800240c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b08a      	sub	sp, #40	@ 0x28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002414:	f107 0314 	add.w	r3, r7, #20
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
 800241c:	605a      	str	r2, [r3, #4]
 800241e:	609a      	str	r2, [r3, #8]
 8002420:	60da      	str	r2, [r3, #12]
 8002422:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a31      	ldr	r2, [pc, #196]	@ (80024f0 <HAL_TIM_MspPostInit+0xe4>)
 800242a:	4293      	cmp	r3, r2
 800242c:	d13a      	bne.n	80024a4 <HAL_TIM_MspPostInit+0x98>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800242e:	4b31      	ldr	r3, [pc, #196]	@ (80024f4 <HAL_TIM_MspPostInit+0xe8>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002432:	4a30      	ldr	r2, [pc, #192]	@ (80024f4 <HAL_TIM_MspPostInit+0xe8>)
 8002434:	f043 0304 	orr.w	r3, r3, #4
 8002438:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800243a:	4b2e      	ldr	r3, [pc, #184]	@ (80024f4 <HAL_TIM_MspPostInit+0xe8>)
 800243c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800243e:	f003 0304 	and.w	r3, r3, #4
 8002442:	613b      	str	r3, [r7, #16]
 8002444:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002446:	4b2b      	ldr	r3, [pc, #172]	@ (80024f4 <HAL_TIM_MspPostInit+0xe8>)
 8002448:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800244a:	4a2a      	ldr	r2, [pc, #168]	@ (80024f4 <HAL_TIM_MspPostInit+0xe8>)
 800244c:	f043 0301 	orr.w	r3, r3, #1
 8002450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002452:	4b28      	ldr	r3, [pc, #160]	@ (80024f4 <HAL_TIM_MspPostInit+0xe8>)
 8002454:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	60fb      	str	r3, [r7, #12]
 800245c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PC2     ------> TIM1_CH3
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800245e:	2304      	movs	r3, #4
 8002460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002462:	2302      	movs	r3, #2
 8002464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002466:	2300      	movs	r3, #0
 8002468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800246a:	2300      	movs	r3, #0
 800246c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800246e:	2302      	movs	r3, #2
 8002470:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002472:	f107 0314 	add.w	r3, r7, #20
 8002476:	4619      	mov	r1, r3
 8002478:	481f      	ldr	r0, [pc, #124]	@ (80024f8 <HAL_TIM_MspPostInit+0xec>)
 800247a:	f000 fe9f 	bl	80031bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800247e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002484:	2302      	movs	r3, #2
 8002486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002488:	2300      	movs	r3, #0
 800248a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248c:	2300      	movs	r3, #0
 800248e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002490:	2306      	movs	r3, #6
 8002492:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002494:	f107 0314 	add.w	r3, r7, #20
 8002498:	4619      	mov	r1, r3
 800249a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800249e:	f000 fe8d 	bl	80031bc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024a2:	e021      	b.n	80024e8 <HAL_TIM_MspPostInit+0xdc>
  else if(htim->Instance==TIM2)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024ac:	d11c      	bne.n	80024e8 <HAL_TIM_MspPostInit+0xdc>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ae:	4b11      	ldr	r3, [pc, #68]	@ (80024f4 <HAL_TIM_MspPostInit+0xe8>)
 80024b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024b2:	4a10      	ldr	r2, [pc, #64]	@ (80024f4 <HAL_TIM_MspPostInit+0xe8>)
 80024b4:	f043 0301 	orr.w	r3, r3, #1
 80024b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024ba:	4b0e      	ldr	r3, [pc, #56]	@ (80024f4 <HAL_TIM_MspPostInit+0xe8>)
 80024bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024be:	f003 0301 	and.w	r3, r3, #1
 80024c2:	60bb      	str	r3, [r7, #8]
 80024c4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80024c6:	2302      	movs	r3, #2
 80024c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ca:	2302      	movs	r3, #2
 80024cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ce:	2300      	movs	r3, #0
 80024d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d2:	2300      	movs	r3, #0
 80024d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024d6:	2301      	movs	r3, #1
 80024d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024da:	f107 0314 	add.w	r3, r7, #20
 80024de:	4619      	mov	r1, r3
 80024e0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80024e4:	f000 fe6a 	bl	80031bc <HAL_GPIO_Init>
}
 80024e8:	bf00      	nop
 80024ea:	3728      	adds	r7, #40	@ 0x28
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}
 80024f0:	40012c00 	.word	0x40012c00
 80024f4:	40021000 	.word	0x40021000
 80024f8:	48000800 	.word	0x48000800

080024fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b0a4      	sub	sp, #144	@ 0x90
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002504:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002508:	2200      	movs	r2, #0
 800250a:	601a      	str	r2, [r3, #0]
 800250c:	605a      	str	r2, [r3, #4]
 800250e:	609a      	str	r2, [r3, #8]
 8002510:	60da      	str	r2, [r3, #12]
 8002512:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002514:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002518:	2254      	movs	r2, #84	@ 0x54
 800251a:	2100      	movs	r1, #0
 800251c:	4618      	mov	r0, r3
 800251e:	f006 ff86 	bl	800942e <memset>
  if(huart->Instance==UART5)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a88      	ldr	r2, [pc, #544]	@ (8002748 <HAL_UART_MspInit+0x24c>)
 8002528:	4293      	cmp	r3, r2
 800252a:	f040 8086 	bne.w	800263a <HAL_UART_MspInit+0x13e>

  /* USER CODE END UART5_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800252e:	2310      	movs	r3, #16
 8002530:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002532:	2300      	movs	r3, #0
 8002534:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002536:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800253a:	4618      	mov	r0, r3
 800253c:	f001 fdec 	bl	8004118 <HAL_RCCEx_PeriphCLKConfig>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d001      	beq.n	800254a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002546:	f7ff fe8d 	bl	8002264 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800254a:	4b80      	ldr	r3, [pc, #512]	@ (800274c <HAL_UART_MspInit+0x250>)
 800254c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800254e:	4a7f      	ldr	r2, [pc, #508]	@ (800274c <HAL_UART_MspInit+0x250>)
 8002550:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002554:	6593      	str	r3, [r2, #88]	@ 0x58
 8002556:	4b7d      	ldr	r3, [pc, #500]	@ (800274c <HAL_UART_MspInit+0x250>)
 8002558:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800255a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800255e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002560:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002562:	4b7a      	ldr	r3, [pc, #488]	@ (800274c <HAL_UART_MspInit+0x250>)
 8002564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002566:	4a79      	ldr	r2, [pc, #484]	@ (800274c <HAL_UART_MspInit+0x250>)
 8002568:	f043 0304 	orr.w	r3, r3, #4
 800256c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800256e:	4b77      	ldr	r3, [pc, #476]	@ (800274c <HAL_UART_MspInit+0x250>)
 8002570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002572:	f003 0304 	and.w	r3, r3, #4
 8002576:	623b      	str	r3, [r7, #32]
 8002578:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800257a:	4b74      	ldr	r3, [pc, #464]	@ (800274c <HAL_UART_MspInit+0x250>)
 800257c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800257e:	4a73      	ldr	r2, [pc, #460]	@ (800274c <HAL_UART_MspInit+0x250>)
 8002580:	f043 0308 	orr.w	r3, r3, #8
 8002584:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002586:	4b71      	ldr	r3, [pc, #452]	@ (800274c <HAL_UART_MspInit+0x250>)
 8002588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	61fb      	str	r3, [r7, #28]
 8002590:	69fb      	ldr	r3, [r7, #28]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002592:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002596:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002598:	2302      	movs	r3, #2
 800259a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800259e:	2300      	movs	r3, #0
 80025a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80025aa:	2305      	movs	r3, #5
 80025ac:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b0:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025b4:	4619      	mov	r1, r3
 80025b6:	4866      	ldr	r0, [pc, #408]	@ (8002750 <HAL_UART_MspInit+0x254>)
 80025b8:	f000 fe00 	bl	80031bc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80025bc:	2304      	movs	r3, #4
 80025be:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c0:	2302      	movs	r3, #2
 80025c2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF5_UART5;
 80025d2:	2305      	movs	r3, #5
 80025d4:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80025d8:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80025dc:	4619      	mov	r1, r3
 80025de:	485d      	ldr	r0, [pc, #372]	@ (8002754 <HAL_UART_MspInit+0x258>)
 80025e0:	f000 fdec 	bl	80031bc <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Channel1;
 80025e4:	4b5c      	ldr	r3, [pc, #368]	@ (8002758 <HAL_UART_MspInit+0x25c>)
 80025e6:	4a5d      	ldr	r2, [pc, #372]	@ (800275c <HAL_UART_MspInit+0x260>)
 80025e8:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Request = DMA_REQUEST_UART5_RX;
 80025ea:	4b5b      	ldr	r3, [pc, #364]	@ (8002758 <HAL_UART_MspInit+0x25c>)
 80025ec:	2220      	movs	r2, #32
 80025ee:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025f0:	4b59      	ldr	r3, [pc, #356]	@ (8002758 <HAL_UART_MspInit+0x25c>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025f6:	4b58      	ldr	r3, [pc, #352]	@ (8002758 <HAL_UART_MspInit+0x25c>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025fc:	4b56      	ldr	r3, [pc, #344]	@ (8002758 <HAL_UART_MspInit+0x25c>)
 80025fe:	2280      	movs	r2, #128	@ 0x80
 8002600:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002602:	4b55      	ldr	r3, [pc, #340]	@ (8002758 <HAL_UART_MspInit+0x25c>)
 8002604:	2200      	movs	r2, #0
 8002606:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002608:	4b53      	ldr	r3, [pc, #332]	@ (8002758 <HAL_UART_MspInit+0x25c>)
 800260a:	2200      	movs	r2, #0
 800260c:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 800260e:	4b52      	ldr	r3, [pc, #328]	@ (8002758 <HAL_UART_MspInit+0x25c>)
 8002610:	2200      	movs	r2, #0
 8002612:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002614:	4b50      	ldr	r3, [pc, #320]	@ (8002758 <HAL_UART_MspInit+0x25c>)
 8002616:	2200      	movs	r2, #0
 8002618:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800261a:	484f      	ldr	r0, [pc, #316]	@ (8002758 <HAL_UART_MspInit+0x25c>)
 800261c:	f000 fb5c 	bl	8002cd8 <HAL_DMA_Init>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 8002626:	f7ff fe1d 	bl	8002264 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a4a      	ldr	r2, [pc, #296]	@ (8002758 <HAL_UART_MspInit+0x25c>)
 800262e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8002632:	4a49      	ldr	r2, [pc, #292]	@ (8002758 <HAL_UART_MspInit+0x25c>)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6293      	str	r3, [r2, #40]	@ 0x28
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002638:	e081      	b.n	800273e <HAL_UART_MspInit+0x242>
  else if(huart->Instance==USART1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4a48      	ldr	r2, [pc, #288]	@ (8002760 <HAL_UART_MspInit+0x264>)
 8002640:	4293      	cmp	r3, r2
 8002642:	d13c      	bne.n	80026be <HAL_UART_MspInit+0x1c2>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002644:	2301      	movs	r3, #1
 8002646:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002648:	2300      	movs	r3, #0
 800264a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800264c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002650:	4618      	mov	r0, r3
 8002652:	f001 fd61 	bl	8004118 <HAL_RCCEx_PeriphCLKConfig>
 8002656:	4603      	mov	r3, r0
 8002658:	2b00      	cmp	r3, #0
 800265a:	d001      	beq.n	8002660 <HAL_UART_MspInit+0x164>
      Error_Handler();
 800265c:	f7ff fe02 	bl	8002264 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002660:	4b3a      	ldr	r3, [pc, #232]	@ (800274c <HAL_UART_MspInit+0x250>)
 8002662:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002664:	4a39      	ldr	r2, [pc, #228]	@ (800274c <HAL_UART_MspInit+0x250>)
 8002666:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800266a:	6613      	str	r3, [r2, #96]	@ 0x60
 800266c:	4b37      	ldr	r3, [pc, #220]	@ (800274c <HAL_UART_MspInit+0x250>)
 800266e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002670:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002674:	61bb      	str	r3, [r7, #24]
 8002676:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002678:	4b34      	ldr	r3, [pc, #208]	@ (800274c <HAL_UART_MspInit+0x250>)
 800267a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800267c:	4a33      	ldr	r2, [pc, #204]	@ (800274c <HAL_UART_MspInit+0x250>)
 800267e:	f043 0301 	orr.w	r3, r3, #1
 8002682:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002684:	4b31      	ldr	r3, [pc, #196]	@ (800274c <HAL_UART_MspInit+0x250>)
 8002686:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002688:	f003 0301 	and.w	r3, r3, #1
 800268c:	617b      	str	r3, [r7, #20]
 800268e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002690:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8002694:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002696:	2302      	movs	r3, #2
 8002698:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800269c:	2300      	movs	r3, #0
 800269e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026a2:	2300      	movs	r3, #0
 80026a4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026a8:	2307      	movs	r3, #7
 80026aa:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026ae:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 80026b2:	4619      	mov	r1, r3
 80026b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80026b8:	f000 fd80 	bl	80031bc <HAL_GPIO_Init>
}
 80026bc:	e03f      	b.n	800273e <HAL_UART_MspInit+0x242>
  else if(huart->Instance==USART3)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a28      	ldr	r2, [pc, #160]	@ (8002764 <HAL_UART_MspInit+0x268>)
 80026c4:	4293      	cmp	r3, r2
 80026c6:	d13a      	bne.n	800273e <HAL_UART_MspInit+0x242>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80026c8:	2304      	movs	r3, #4
 80026ca:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80026cc:	2300      	movs	r3, #0
 80026ce:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80026d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80026d4:	4618      	mov	r0, r3
 80026d6:	f001 fd1f 	bl	8004118 <HAL_RCCEx_PeriphCLKConfig>
 80026da:	4603      	mov	r3, r0
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d001      	beq.n	80026e4 <HAL_UART_MspInit+0x1e8>
      Error_Handler();
 80026e0:	f7ff fdc0 	bl	8002264 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80026e4:	4b19      	ldr	r3, [pc, #100]	@ (800274c <HAL_UART_MspInit+0x250>)
 80026e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026e8:	4a18      	ldr	r2, [pc, #96]	@ (800274c <HAL_UART_MspInit+0x250>)
 80026ea:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80026ee:	6593      	str	r3, [r2, #88]	@ 0x58
 80026f0:	4b16      	ldr	r3, [pc, #88]	@ (800274c <HAL_UART_MspInit+0x250>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026f8:	613b      	str	r3, [r7, #16]
 80026fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026fc:	4b13      	ldr	r3, [pc, #76]	@ (800274c <HAL_UART_MspInit+0x250>)
 80026fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002700:	4a12      	ldr	r2, [pc, #72]	@ (800274c <HAL_UART_MspInit+0x250>)
 8002702:	f043 0302 	orr.w	r3, r3, #2
 8002706:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002708:	4b10      	ldr	r3, [pc, #64]	@ (800274c <HAL_UART_MspInit+0x250>)
 800270a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800270c:	f003 0302 	and.w	r3, r3, #2
 8002710:	60fb      	str	r3, [r7, #12]
 8002712:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002714:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002718:	67fb      	str	r3, [r7, #124]	@ 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800271a:	2302      	movs	r3, #2
 800271c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002720:	2300      	movs	r3, #0
 8002722:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002726:	2300      	movs	r3, #0
 8002728:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800272c:	2307      	movs	r3, #7
 800272e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002732:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8002736:	4619      	mov	r1, r3
 8002738:	480b      	ldr	r0, [pc, #44]	@ (8002768 <HAL_UART_MspInit+0x26c>)
 800273a:	f000 fd3f 	bl	80031bc <HAL_GPIO_Init>
}
 800273e:	bf00      	nop
 8002740:	3790      	adds	r7, #144	@ 0x90
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40005000 	.word	0x40005000
 800274c:	40021000 	.word	0x40021000
 8002750:	48000800 	.word	0x48000800
 8002754:	48000c00 	.word	0x48000c00
 8002758:	20002104 	.word	0x20002104
 800275c:	40020008 	.word	0x40020008
 8002760:	40013800 	.word	0x40013800
 8002764:	40004800 	.word	0x40004800
 8002768:	48000400 	.word	0x48000400

0800276c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08c      	sub	sp, #48	@ 0x30
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002774:	2300      	movs	r3, #0
 8002776:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8002778:	2300      	movs	r3, #0
 800277a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800277c:	4b2d      	ldr	r3, [pc, #180]	@ (8002834 <HAL_InitTick+0xc8>)
 800277e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002780:	4a2c      	ldr	r2, [pc, #176]	@ (8002834 <HAL_InitTick+0xc8>)
 8002782:	f043 0310 	orr.w	r3, r3, #16
 8002786:	6593      	str	r3, [r2, #88]	@ 0x58
 8002788:	4b2a      	ldr	r3, [pc, #168]	@ (8002834 <HAL_InitTick+0xc8>)
 800278a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800278c:	f003 0310 	and.w	r3, r3, #16
 8002790:	60bb      	str	r3, [r7, #8]
 8002792:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002794:	f107 020c 	add.w	r2, r7, #12
 8002798:	f107 0310 	add.w	r3, r7, #16
 800279c:	4611      	mov	r1, r2
 800279e:	4618      	mov	r0, r3
 80027a0:	f001 fc42 	bl	8004028 <HAL_RCC_GetClockConfig>
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80027a4:	f001 fc14 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 80027a8:	4603      	mov	r3, r0
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80027ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027b0:	4a21      	ldr	r2, [pc, #132]	@ (8002838 <HAL_InitTick+0xcc>)
 80027b2:	fba2 2303 	umull	r2, r3, r2, r3
 80027b6:	0c9b      	lsrs	r3, r3, #18
 80027b8:	3b01      	subs	r3, #1
 80027ba:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80027bc:	4b1f      	ldr	r3, [pc, #124]	@ (800283c <HAL_InitTick+0xd0>)
 80027be:	4a20      	ldr	r2, [pc, #128]	@ (8002840 <HAL_InitTick+0xd4>)
 80027c0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80027c2:	4b1e      	ldr	r3, [pc, #120]	@ (800283c <HAL_InitTick+0xd0>)
 80027c4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80027c8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80027ca:	4a1c      	ldr	r2, [pc, #112]	@ (800283c <HAL_InitTick+0xd0>)
 80027cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ce:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80027d0:	4b1a      	ldr	r3, [pc, #104]	@ (800283c <HAL_InitTick+0xd0>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80027d6:	4b19      	ldr	r3, [pc, #100]	@ (800283c <HAL_InitTick+0xd0>)
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 80027dc:	4817      	ldr	r0, [pc, #92]	@ (800283c <HAL_InitTick+0xd0>)
 80027de:	f001 ff94 	bl	800470a <HAL_TIM_Base_Init>
 80027e2:	4603      	mov	r3, r0
 80027e4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80027e8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11b      	bne.n	8002828 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80027f0:	4812      	ldr	r0, [pc, #72]	@ (800283c <HAL_InitTick+0xd0>)
 80027f2:	f001 ffe1 	bl	80047b8 <HAL_TIM_Base_Start_IT>
 80027f6:	4603      	mov	r3, r0
 80027f8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80027fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002800:	2b00      	cmp	r3, #0
 8002802:	d111      	bne.n	8002828 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002804:	2036      	movs	r0, #54	@ 0x36
 8002806:	f000 fa59 	bl	8002cbc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2b0f      	cmp	r3, #15
 800280e:	d808      	bhi.n	8002822 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8002810:	2200      	movs	r2, #0
 8002812:	6879      	ldr	r1, [r7, #4]
 8002814:	2036      	movs	r0, #54	@ 0x36
 8002816:	f000 fa37 	bl	8002c88 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800281a:	4a0a      	ldr	r2, [pc, #40]	@ (8002844 <HAL_InitTick+0xd8>)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6013      	str	r3, [r2, #0]
 8002820:	e002      	b.n	8002828 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8002822:	2301      	movs	r3, #1
 8002824:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002828:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800282c:	4618      	mov	r0, r3
 800282e:	3730      	adds	r7, #48	@ 0x30
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40021000 	.word	0x40021000
 8002838:	431bde83 	.word	0x431bde83
 800283c:	20002164 	.word	0x20002164
 8002840:	40001000 	.word	0x40001000
 8002844:	20000004 	.word	0x20000004

08002848 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800284c:	bf00      	nop
 800284e:	e7fd      	b.n	800284c <NMI_Handler+0x4>

08002850 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002854:	bf00      	nop
 8002856:	e7fd      	b.n	8002854 <HardFault_Handler+0x4>

08002858 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002858:	b480      	push	{r7}
 800285a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800285c:	bf00      	nop
 800285e:	e7fd      	b.n	800285c <MemManage_Handler+0x4>

08002860 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002860:	b480      	push	{r7}
 8002862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002864:	bf00      	nop
 8002866:	e7fd      	b.n	8002864 <BusFault_Handler+0x4>

08002868 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002868:	b480      	push	{r7}
 800286a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800286c:	bf00      	nop
 800286e:	e7fd      	b.n	800286c <UsageFault_Handler+0x4>

08002870 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002870:	b480      	push	{r7}
 8002872:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002874:	bf00      	nop
 8002876:	46bd      	mov	sp, r7
 8002878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287c:	4770      	bx	lr
	...

08002880 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002884:	4802      	ldr	r0, [pc, #8]	@ (8002890 <DMA1_Channel1_IRQHandler+0x10>)
 8002886:	f000 fb4a 	bl	8002f1e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800288a:	bf00      	nop
 800288c:	bd80      	pop	{r7, pc}
 800288e:	bf00      	nop
 8002890:	20002104 	.word	0x20002104

08002894 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002894:	b580      	push	{r7, lr}
 8002896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002898:	4802      	ldr	r0, [pc, #8]	@ (80028a4 <TIM6_DAC_IRQHandler+0x10>)
 800289a:	f002 f96f 	bl	8004b7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800289e:	bf00      	nop
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20002164 	.word	0x20002164

080028a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80028a8:	b480      	push	{r7}
 80028aa:	af00      	add	r7, sp, #0
  return 1;
 80028ac:	2301      	movs	r3, #1
}
 80028ae:	4618      	mov	r0, r3
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <_kill>:

int _kill(int pid, int sig)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80028c2:	f006 fe07 	bl	80094d4 <__errno>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2216      	movs	r2, #22
 80028ca:	601a      	str	r2, [r3, #0]
  return -1;
 80028cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3708      	adds	r7, #8
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}

080028d8 <_exit>:

void _exit (int status)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80028e0:	f04f 31ff 	mov.w	r1, #4294967295
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff ffe7 	bl	80028b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80028ea:	bf00      	nop
 80028ec:	e7fd      	b.n	80028ea <_exit+0x12>

080028ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80028ee:	b580      	push	{r7, lr}
 80028f0:	b086      	sub	sp, #24
 80028f2:	af00      	add	r7, sp, #0
 80028f4:	60f8      	str	r0, [r7, #12]
 80028f6:	60b9      	str	r1, [r7, #8]
 80028f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80028fa:	2300      	movs	r3, #0
 80028fc:	617b      	str	r3, [r7, #20]
 80028fe:	e00a      	b.n	8002916 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002900:	f3af 8000 	nop.w
 8002904:	4601      	mov	r1, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	60ba      	str	r2, [r7, #8]
 800290c:	b2ca      	uxtb	r2, r1
 800290e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	3301      	adds	r3, #1
 8002914:	617b      	str	r3, [r7, #20]
 8002916:	697a      	ldr	r2, [r7, #20]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	429a      	cmp	r2, r3
 800291c:	dbf0      	blt.n	8002900 <_read+0x12>
  }

  return len;
 800291e:	687b      	ldr	r3, [r7, #4]
}
 8002920:	4618      	mov	r0, r3
 8002922:	3718      	adds	r7, #24
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	60f8      	str	r0, [r7, #12]
 8002930:	60b9      	str	r1, [r7, #8]
 8002932:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002934:	2300      	movs	r3, #0
 8002936:	617b      	str	r3, [r7, #20]
 8002938:	e009      	b.n	800294e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	60ba      	str	r2, [r7, #8]
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7ff f828 	bl	8001998 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	3301      	adds	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
 800294e:	697a      	ldr	r2, [r7, #20]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	429a      	cmp	r2, r3
 8002954:	dbf1      	blt.n	800293a <_write+0x12>
  }
  return len;
 8002956:	687b      	ldr	r3, [r7, #4]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <_close>:

int _close(int file)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800296c:	4618      	mov	r0, r3
 800296e:	370c      	adds	r7, #12
 8002970:	46bd      	mov	sp, r7
 8002972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002976:	4770      	bx	lr

08002978 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002978:	b480      	push	{r7}
 800297a:	b083      	sub	sp, #12
 800297c:	af00      	add	r7, sp, #0
 800297e:	6078      	str	r0, [r7, #4]
 8002980:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002988:	605a      	str	r2, [r3, #4]
  return 0;
 800298a:	2300      	movs	r3, #0
}
 800298c:	4618      	mov	r0, r3
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <_isatty>:

int _isatty(int file)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80029a0:	2301      	movs	r3, #1
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	370c      	adds	r7, #12
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr

080029ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80029ae:	b480      	push	{r7}
 80029b0:	b085      	sub	sp, #20
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	60f8      	str	r0, [r7, #12]
 80029b6:	60b9      	str	r1, [r7, #8]
 80029b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80029ba:	2300      	movs	r3, #0
}
 80029bc:	4618      	mov	r0, r3
 80029be:	3714      	adds	r7, #20
 80029c0:	46bd      	mov	sp, r7
 80029c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c6:	4770      	bx	lr

080029c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b086      	sub	sp, #24
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80029d0:	4a14      	ldr	r2, [pc, #80]	@ (8002a24 <_sbrk+0x5c>)
 80029d2:	4b15      	ldr	r3, [pc, #84]	@ (8002a28 <_sbrk+0x60>)
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80029d8:	697b      	ldr	r3, [r7, #20]
 80029da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80029dc:	4b13      	ldr	r3, [pc, #76]	@ (8002a2c <_sbrk+0x64>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d102      	bne.n	80029ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80029e4:	4b11      	ldr	r3, [pc, #68]	@ (8002a2c <_sbrk+0x64>)
 80029e6:	4a12      	ldr	r2, [pc, #72]	@ (8002a30 <_sbrk+0x68>)
 80029e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80029ea:	4b10      	ldr	r3, [pc, #64]	@ (8002a2c <_sbrk+0x64>)
 80029ec:	681a      	ldr	r2, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	4413      	add	r3, r2
 80029f2:	693a      	ldr	r2, [r7, #16]
 80029f4:	429a      	cmp	r2, r3
 80029f6:	d207      	bcs.n	8002a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80029f8:	f006 fd6c 	bl	80094d4 <__errno>
 80029fc:	4603      	mov	r3, r0
 80029fe:	220c      	movs	r2, #12
 8002a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002a02:	f04f 33ff 	mov.w	r3, #4294967295
 8002a06:	e009      	b.n	8002a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002a08:	4b08      	ldr	r3, [pc, #32]	@ (8002a2c <_sbrk+0x64>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002a0e:	4b07      	ldr	r3, [pc, #28]	@ (8002a2c <_sbrk+0x64>)
 8002a10:	681a      	ldr	r2, [r3, #0]
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	4a05      	ldr	r2, [pc, #20]	@ (8002a2c <_sbrk+0x64>)
 8002a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3718      	adds	r7, #24
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20020000 	.word	0x20020000
 8002a28:	00000400 	.word	0x00000400
 8002a2c:	200021b0 	.word	0x200021b0
 8002a30:	20002948 	.word	0x20002948

08002a34 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002a38:	4b06      	ldr	r3, [pc, #24]	@ (8002a54 <SystemInit+0x20>)
 8002a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a3e:	4a05      	ldr	r2, [pc, #20]	@ (8002a54 <SystemInit+0x20>)
 8002a40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002a44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002a48:	bf00      	nop
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr
 8002a52:	bf00      	nop
 8002a54:	e000ed00 	.word	0xe000ed00

08002a58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002a58:	480d      	ldr	r0, [pc, #52]	@ (8002a90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002a5a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8002a5c:	f7ff ffea 	bl	8002a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002a60:	480c      	ldr	r0, [pc, #48]	@ (8002a94 <LoopForever+0x6>)
  ldr r1, =_edata
 8002a62:	490d      	ldr	r1, [pc, #52]	@ (8002a98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002a64:	4a0d      	ldr	r2, [pc, #52]	@ (8002a9c <LoopForever+0xe>)
  movs r3, #0
 8002a66:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002a68:	e002      	b.n	8002a70 <LoopCopyDataInit>

08002a6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002a6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002a6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002a6e:	3304      	adds	r3, #4

08002a70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002a70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002a72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002a74:	d3f9      	bcc.n	8002a6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002a76:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002a78:	4c0a      	ldr	r4, [pc, #40]	@ (8002aa4 <LoopForever+0x16>)
  movs r3, #0
 8002a7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002a7c:	e001      	b.n	8002a82 <LoopFillZerobss>

08002a7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002a7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002a80:	3204      	adds	r2, #4

08002a82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002a82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002a84:	d3fb      	bcc.n	8002a7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002a86:	f006 fd2b 	bl	80094e0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002a8a:	f7fe ff97 	bl	80019bc <main>

08002a8e <LoopForever>:

LoopForever:
    b LoopForever
 8002a8e:	e7fe      	b.n	8002a8e <LoopForever>
  ldr   r0, =_estack
 8002a90:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002a94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002a98:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002a9c:	0800d0f0 	.word	0x0800d0f0
  ldr r2, =_sbss
 8002aa0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002aa4:	20002944 	.word	0x20002944

08002aa8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002aa8:	e7fe      	b.n	8002aa8 <ADC1_2_IRQHandler>

08002aaa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b082      	sub	sp, #8
 8002aae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ab4:	2003      	movs	r0, #3
 8002ab6:	f000 f8dc 	bl	8002c72 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002aba:	200f      	movs	r0, #15
 8002abc:	f7ff fe56 	bl	800276c <HAL_InitTick>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d002      	beq.n	8002acc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	71fb      	strb	r3, [r7, #7]
 8002aca:	e001      	b.n	8002ad0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002acc:	f7ff fbd0 	bl	8002270 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002ad0:	79fb      	ldrb	r3, [r7, #7]

}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
	...

08002adc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002adc:	b480      	push	{r7}
 8002ade:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ae0:	4b05      	ldr	r3, [pc, #20]	@ (8002af8 <HAL_IncTick+0x1c>)
 8002ae2:	681a      	ldr	r2, [r3, #0]
 8002ae4:	4b05      	ldr	r3, [pc, #20]	@ (8002afc <HAL_IncTick+0x20>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4413      	add	r3, r2
 8002aea:	4a03      	ldr	r2, [pc, #12]	@ (8002af8 <HAL_IncTick+0x1c>)
 8002aec:	6013      	str	r3, [r2, #0]
}
 8002aee:	bf00      	nop
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr
 8002af8:	200021b4 	.word	0x200021b4
 8002afc:	20000008 	.word	0x20000008

08002b00 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return uwTick;
 8002b04:	4b03      	ldr	r3, [pc, #12]	@ (8002b14 <HAL_GetTick+0x14>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	200021b4 	.word	0x200021b4

08002b18 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f003 0307 	and.w	r3, r3, #7
 8002b26:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b28:	4b0c      	ldr	r3, [pc, #48]	@ (8002b5c <__NVIC_SetPriorityGrouping+0x44>)
 8002b2a:	68db      	ldr	r3, [r3, #12]
 8002b2c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b2e:	68ba      	ldr	r2, [r7, #8]
 8002b30:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002b34:	4013      	ands	r3, r2
 8002b36:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b40:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002b44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002b48:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b4a:	4a04      	ldr	r2, [pc, #16]	@ (8002b5c <__NVIC_SetPriorityGrouping+0x44>)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	60d3      	str	r3, [r2, #12]
}
 8002b50:	bf00      	nop
 8002b52:	3714      	adds	r7, #20
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr
 8002b5c:	e000ed00 	.word	0xe000ed00

08002b60 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b60:	b480      	push	{r7}
 8002b62:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b64:	4b04      	ldr	r3, [pc, #16]	@ (8002b78 <__NVIC_GetPriorityGrouping+0x18>)
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	0a1b      	lsrs	r3, r3, #8
 8002b6a:	f003 0307 	and.w	r3, r3, #7
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	e000ed00 	.word	0xe000ed00

08002b7c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	4603      	mov	r3, r0
 8002b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	db0b      	blt.n	8002ba6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b8e:	79fb      	ldrb	r3, [r7, #7]
 8002b90:	f003 021f 	and.w	r2, r3, #31
 8002b94:	4907      	ldr	r1, [pc, #28]	@ (8002bb4 <__NVIC_EnableIRQ+0x38>)
 8002b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b9a:	095b      	lsrs	r3, r3, #5
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8002ba2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	e000e100 	.word	0xe000e100

08002bb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	4603      	mov	r3, r0
 8002bc0:	6039      	str	r1, [r7, #0]
 8002bc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	db0a      	blt.n	8002be2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	b2da      	uxtb	r2, r3
 8002bd0:	490c      	ldr	r1, [pc, #48]	@ (8002c04 <__NVIC_SetPriority+0x4c>)
 8002bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bd6:	0112      	lsls	r2, r2, #4
 8002bd8:	b2d2      	uxtb	r2, r2
 8002bda:	440b      	add	r3, r1
 8002bdc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002be0:	e00a      	b.n	8002bf8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	b2da      	uxtb	r2, r3
 8002be6:	4908      	ldr	r1, [pc, #32]	@ (8002c08 <__NVIC_SetPriority+0x50>)
 8002be8:	79fb      	ldrb	r3, [r7, #7]
 8002bea:	f003 030f 	and.w	r3, r3, #15
 8002bee:	3b04      	subs	r3, #4
 8002bf0:	0112      	lsls	r2, r2, #4
 8002bf2:	b2d2      	uxtb	r2, r2
 8002bf4:	440b      	add	r3, r1
 8002bf6:	761a      	strb	r2, [r3, #24]
}
 8002bf8:	bf00      	nop
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c02:	4770      	bx	lr
 8002c04:	e000e100 	.word	0xe000e100
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	b089      	sub	sp, #36	@ 0x24
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	60f8      	str	r0, [r7, #12]
 8002c14:	60b9      	str	r1, [r7, #8]
 8002c16:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f003 0307 	and.w	r3, r3, #7
 8002c1e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c20:	69fb      	ldr	r3, [r7, #28]
 8002c22:	f1c3 0307 	rsb	r3, r3, #7
 8002c26:	2b04      	cmp	r3, #4
 8002c28:	bf28      	it	cs
 8002c2a:	2304      	movcs	r3, #4
 8002c2c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	3304      	adds	r3, #4
 8002c32:	2b06      	cmp	r3, #6
 8002c34:	d902      	bls.n	8002c3c <NVIC_EncodePriority+0x30>
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	3b03      	subs	r3, #3
 8002c3a:	e000      	b.n	8002c3e <NVIC_EncodePriority+0x32>
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c40:	f04f 32ff 	mov.w	r2, #4294967295
 8002c44:	69bb      	ldr	r3, [r7, #24]
 8002c46:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4a:	43da      	mvns	r2, r3
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	401a      	ands	r2, r3
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c54:	f04f 31ff 	mov.w	r1, #4294967295
 8002c58:	697b      	ldr	r3, [r7, #20]
 8002c5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c5e:	43d9      	mvns	r1, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c64:	4313      	orrs	r3, r2
         );
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3724      	adds	r7, #36	@ 0x24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c72:	b580      	push	{r7, lr}
 8002c74:	b082      	sub	sp, #8
 8002c76:	af00      	add	r7, sp, #0
 8002c78:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c7a:	6878      	ldr	r0, [r7, #4]
 8002c7c:	f7ff ff4c 	bl	8002b18 <__NVIC_SetPriorityGrouping>
}
 8002c80:	bf00      	nop
 8002c82:	3708      	adds	r7, #8
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	4603      	mov	r3, r0
 8002c90:	60b9      	str	r1, [r7, #8]
 8002c92:	607a      	str	r2, [r7, #4]
 8002c94:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c96:	f7ff ff63 	bl	8002b60 <__NVIC_GetPriorityGrouping>
 8002c9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	68b9      	ldr	r1, [r7, #8]
 8002ca0:	6978      	ldr	r0, [r7, #20]
 8002ca2:	f7ff ffb3 	bl	8002c0c <NVIC_EncodePriority>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cac:	4611      	mov	r1, r2
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7ff ff82 	bl	8002bb8 <__NVIC_SetPriority>
}
 8002cb4:	bf00      	nop
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff ff56 	bl	8002b7c <__NVIC_EnableIRQ>
}
 8002cd0:	bf00      	nop
 8002cd2:	3708      	adds	r7, #8
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b084      	sub	sp, #16
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e08d      	b.n	8002e06 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	461a      	mov	r2, r3
 8002cf0:	4b47      	ldr	r3, [pc, #284]	@ (8002e10 <HAL_DMA_Init+0x138>)
 8002cf2:	429a      	cmp	r2, r3
 8002cf4:	d80f      	bhi.n	8002d16 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	461a      	mov	r2, r3
 8002cfc:	4b45      	ldr	r3, [pc, #276]	@ (8002e14 <HAL_DMA_Init+0x13c>)
 8002cfe:	4413      	add	r3, r2
 8002d00:	4a45      	ldr	r2, [pc, #276]	@ (8002e18 <HAL_DMA_Init+0x140>)
 8002d02:	fba2 2303 	umull	r2, r3, r2, r3
 8002d06:	091b      	lsrs	r3, r3, #4
 8002d08:	009a      	lsls	r2, r3, #2
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	4a42      	ldr	r2, [pc, #264]	@ (8002e1c <HAL_DMA_Init+0x144>)
 8002d12:	641a      	str	r2, [r3, #64]	@ 0x40
 8002d14:	e00e      	b.n	8002d34 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	461a      	mov	r2, r3
 8002d1c:	4b40      	ldr	r3, [pc, #256]	@ (8002e20 <HAL_DMA_Init+0x148>)
 8002d1e:	4413      	add	r3, r2
 8002d20:	4a3d      	ldr	r2, [pc, #244]	@ (8002e18 <HAL_DMA_Init+0x140>)
 8002d22:	fba2 2303 	umull	r2, r3, r2, r3
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	009a      	lsls	r2, r3, #2
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a3c      	ldr	r2, [pc, #240]	@ (8002e24 <HAL_DMA_Init+0x14c>)
 8002d32:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2202      	movs	r2, #2
 8002d38:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8002d4a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d4e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8002d58:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d64:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	699b      	ldr	r3, [r3, #24]
 8002d6a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d70:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a1b      	ldr	r3, [r3, #32]
 8002d76:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002d78:	68fa      	ldr	r2, [r7, #12]
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8002d86:	6878      	ldr	r0, [r7, #4]
 8002d88:	f000 f9b6 	bl	80030f8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	689b      	ldr	r3, [r3, #8]
 8002d90:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002d94:	d102      	bne.n	8002d9c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	685a      	ldr	r2, [r3, #4]
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da4:	b2d2      	uxtb	r2, r2
 8002da6:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002db0:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d010      	beq.n	8002ddc <HAL_DMA_Init+0x104>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	2b04      	cmp	r3, #4
 8002dc0:	d80c      	bhi.n	8002ddc <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 f9d6 	bl	8003174 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dd4:	687a      	ldr	r2, [r7, #4]
 8002dd6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002dd8:	605a      	str	r2, [r3, #4]
 8002dda:	e008      	b.n	8002dee <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2200      	movs	r2, #0
 8002de0:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2200      	movs	r2, #0
 8002de6:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2200      	movs	r2, #0
 8002dec:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002e04:	2300      	movs	r3, #0
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3710      	adds	r7, #16
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	40020407 	.word	0x40020407
 8002e14:	bffdfff8 	.word	0xbffdfff8
 8002e18:	cccccccd 	.word	0xcccccccd
 8002e1c:	40020000 	.word	0x40020000
 8002e20:	bffdfbf8 	.word	0xbffdfbf8
 8002e24:	40020400 	.word	0x40020400

08002e28 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
 8002e34:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e36:	2300      	movs	r3, #0
 8002e38:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e40:	2b01      	cmp	r3, #1
 8002e42:	d101      	bne.n	8002e48 <HAL_DMA_Start_IT+0x20>
 8002e44:	2302      	movs	r3, #2
 8002e46:	e066      	b.n	8002f16 <HAL_DMA_Start_IT+0xee>
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2201      	movs	r2, #1
 8002e4c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002e56:	b2db      	uxtb	r3, r3
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d155      	bne.n	8002f08 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	687a      	ldr	r2, [r7, #4]
 8002e7e:	68b9      	ldr	r1, [r7, #8]
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f000 f8fb 	bl	800307c <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d008      	beq.n	8002ea0 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681a      	ldr	r2, [r3, #0]
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f042 020e 	orr.w	r2, r2, #14
 8002e9c:	601a      	str	r2, [r3, #0]
 8002e9e:	e00f      	b.n	8002ec0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f022 0204 	bic.w	r2, r2, #4
 8002eae:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681a      	ldr	r2, [r3, #0]
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f042 020a 	orr.w	r2, r2, #10
 8002ebe:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d007      	beq.n	8002ede <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed2:	681a      	ldr	r2, [r3, #0]
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002ed8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002edc:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002eea:	681a      	ldr	r2, [r3, #0]
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002ef0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002ef4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f042 0201 	orr.w	r2, r2, #1
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	e005      	b.n	8002f14 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8002f10:	2302      	movs	r3, #2
 8002f12:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8002f14:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f16:	4618      	mov	r0, r3
 8002f18:	3718      	adds	r7, #24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd80      	pop	{r7, pc}

08002f1e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002f1e:	b580      	push	{r7, lr}
 8002f20:	b084      	sub	sp, #16
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f003 031f 	and.w	r3, r3, #31
 8002f3e:	2204      	movs	r2, #4
 8002f40:	409a      	lsls	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	4013      	ands	r3, r2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d026      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x7a>
 8002f4a:	68bb      	ldr	r3, [r7, #8]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d021      	beq.n	8002f98 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0320 	and.w	r3, r3, #32
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d107      	bne.n	8002f72 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	681a      	ldr	r2, [r3, #0]
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 0204 	bic.w	r2, r2, #4
 8002f70:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f76:	f003 021f 	and.w	r2, r3, #31
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f7e:	2104      	movs	r1, #4
 8002f80:	fa01 f202 	lsl.w	r2, r1, r2
 8002f84:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d071      	beq.n	8003072 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f96:	e06c      	b.n	8003072 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9c:	f003 031f 	and.w	r3, r3, #31
 8002fa0:	2202      	movs	r2, #2
 8002fa2:	409a      	lsls	r2, r3
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d02e      	beq.n	800300a <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 0302 	and.w	r3, r3, #2
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d029      	beq.n	800300a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f003 0320 	and.w	r3, r3, #32
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d10b      	bne.n	8002fdc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 020a 	bic.w	r2, r2, #10
 8002fd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe0:	f003 021f 	and.w	r2, r3, #31
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	2102      	movs	r1, #2
 8002fea:	fa01 f202 	lsl.w	r2, r1, r2
 8002fee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d038      	beq.n	8003072 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003004:	6878      	ldr	r0, [r7, #4]
 8003006:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003008:	e033      	b.n	8003072 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800300e:	f003 031f 	and.w	r3, r3, #31
 8003012:	2208      	movs	r2, #8
 8003014:	409a      	lsls	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	4013      	ands	r3, r2
 800301a:	2b00      	cmp	r3, #0
 800301c:	d02a      	beq.n	8003074 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800301e:	68bb      	ldr	r3, [r7, #8]
 8003020:	f003 0308 	and.w	r3, r3, #8
 8003024:	2b00      	cmp	r3, #0
 8003026:	d025      	beq.n	8003074 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f022 020e 	bic.w	r2, r2, #14
 8003036:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800303c:	f003 021f 	and.w	r2, r3, #31
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003044:	2101      	movs	r1, #1
 8003046:	fa01 f202 	lsl.w	r2, r1, r2
 800304a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2201      	movs	r2, #1
 8003050:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	2201      	movs	r2, #1
 8003056:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	2200      	movs	r2, #0
 800305e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003066:	2b00      	cmp	r3, #0
 8003068:	d004      	beq.n	8003074 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8003072:	bf00      	nop
 8003074:	bf00      	nop
}
 8003076:	3710      	adds	r7, #16
 8003078:	46bd      	mov	sp, r7
 800307a:	bd80      	pop	{r7, pc}

0800307c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800307c:	b480      	push	{r7}
 800307e:	b085      	sub	sp, #20
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800308e:	68fa      	ldr	r2, [r7, #12]
 8003090:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003092:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003098:	2b00      	cmp	r3, #0
 800309a:	d004      	beq.n	80030a6 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80030a0:	68fa      	ldr	r2, [r7, #12]
 80030a2:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80030a4:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030aa:	f003 021f 	and.w	r2, r3, #31
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030b2:	2101      	movs	r1, #1
 80030b4:	fa01 f202 	lsl.w	r2, r1, r2
 80030b8:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	683a      	ldr	r2, [r7, #0]
 80030c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b10      	cmp	r3, #16
 80030c8:	d108      	bne.n	80030dc <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68ba      	ldr	r2, [r7, #8]
 80030d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80030da:	e007      	b.n	80030ec <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	68ba      	ldr	r2, [r7, #8]
 80030e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	687a      	ldr	r2, [r7, #4]
 80030ea:	60da      	str	r2, [r3, #12]
}
 80030ec:	bf00      	nop
 80030ee:	3714      	adds	r7, #20
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b087      	sub	sp, #28
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	461a      	mov	r2, r3
 8003106:	4b16      	ldr	r3, [pc, #88]	@ (8003160 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003108:	429a      	cmp	r2, r3
 800310a:	d802      	bhi.n	8003112 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 800310c:	4b15      	ldr	r3, [pc, #84]	@ (8003164 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800310e:	617b      	str	r3, [r7, #20]
 8003110:	e001      	b.n	8003116 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8003112:	4b15      	ldr	r3, [pc, #84]	@ (8003168 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003114:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	b2db      	uxtb	r3, r3
 8003120:	3b08      	subs	r3, #8
 8003122:	4a12      	ldr	r2, [pc, #72]	@ (800316c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	091b      	lsrs	r3, r3, #4
 800312a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003130:	089b      	lsrs	r3, r3, #2
 8003132:	009a      	lsls	r2, r3, #2
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	4413      	add	r3, r2
 8003138:	461a      	mov	r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a0b      	ldr	r2, [pc, #44]	@ (8003170 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8003142:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	2201      	movs	r2, #1
 800314c:	409a      	lsls	r2, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8003152:	bf00      	nop
 8003154:	371c      	adds	r7, #28
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	40020407 	.word	0x40020407
 8003164:	40020800 	.word	0x40020800
 8003168:	40020820 	.word	0x40020820
 800316c:	cccccccd 	.word	0xcccccccd
 8003170:	40020880 	.word	0x40020880

08003174 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003174:	b480      	push	{r7}
 8003176:	b085      	sub	sp, #20
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	685b      	ldr	r3, [r3, #4]
 8003180:	b2db      	uxtb	r3, r3
 8003182:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003184:	68fa      	ldr	r2, [r7, #12]
 8003186:	4b0b      	ldr	r3, [pc, #44]	@ (80031b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003188:	4413      	add	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	461a      	mov	r2, r3
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	4a08      	ldr	r2, [pc, #32]	@ (80031b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8003196:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	3b01      	subs	r3, #1
 800319c:	f003 031f 	and.w	r3, r3, #31
 80031a0:	2201      	movs	r2, #1
 80031a2:	409a      	lsls	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 80031a8:	bf00      	nop
 80031aa:	3714      	adds	r7, #20
 80031ac:	46bd      	mov	sp, r7
 80031ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b2:	4770      	bx	lr
 80031b4:	1000823f 	.word	0x1000823f
 80031b8:	40020940 	.word	0x40020940

080031bc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031bc:	b480      	push	{r7}
 80031be:	b087      	sub	sp, #28
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
 80031c4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80031c6:	2300      	movs	r3, #0
 80031c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80031ca:	e15a      	b.n	8003482 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	2101      	movs	r1, #1
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	fa01 f303 	lsl.w	r3, r1, r3
 80031d8:	4013      	ands	r3, r2
 80031da:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	f000 814c 	beq.w	800347c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 0303 	and.w	r3, r3, #3
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d005      	beq.n	80031fc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	685b      	ldr	r3, [r3, #4]
 80031f4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80031f8:	2b02      	cmp	r3, #2
 80031fa:	d130      	bne.n	800325e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003202:	697b      	ldr	r3, [r7, #20]
 8003204:	005b      	lsls	r3, r3, #1
 8003206:	2203      	movs	r2, #3
 8003208:	fa02 f303 	lsl.w	r3, r2, r3
 800320c:	43db      	mvns	r3, r3
 800320e:	693a      	ldr	r2, [r7, #16]
 8003210:	4013      	ands	r3, r2
 8003212:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	68da      	ldr	r2, [r3, #12]
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	005b      	lsls	r3, r3, #1
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	693a      	ldr	r2, [r7, #16]
 8003222:	4313      	orrs	r3, r2
 8003224:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	693a      	ldr	r2, [r7, #16]
 800322a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003232:	2201      	movs	r2, #1
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	fa02 f303 	lsl.w	r3, r2, r3
 800323a:	43db      	mvns	r3, r3
 800323c:	693a      	ldr	r2, [r7, #16]
 800323e:	4013      	ands	r3, r2
 8003240:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	685b      	ldr	r3, [r3, #4]
 8003246:	091b      	lsrs	r3, r3, #4
 8003248:	f003 0201 	and.w	r2, r3, #1
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	fa02 f303 	lsl.w	r3, r2, r3
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	f003 0303 	and.w	r3, r3, #3
 8003266:	2b03      	cmp	r3, #3
 8003268:	d017      	beq.n	800329a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68db      	ldr	r3, [r3, #12]
 800326e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003270:	697b      	ldr	r3, [r7, #20]
 8003272:	005b      	lsls	r3, r3, #1
 8003274:	2203      	movs	r2, #3
 8003276:	fa02 f303 	lsl.w	r3, r2, r3
 800327a:	43db      	mvns	r3, r3
 800327c:	693a      	ldr	r2, [r7, #16]
 800327e:	4013      	ands	r3, r2
 8003280:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	689a      	ldr	r2, [r3, #8]
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	005b      	lsls	r3, r3, #1
 800328a:	fa02 f303 	lsl.w	r3, r2, r3
 800328e:	693a      	ldr	r2, [r7, #16]
 8003290:	4313      	orrs	r3, r2
 8003292:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f003 0303 	and.w	r3, r3, #3
 80032a2:	2b02      	cmp	r3, #2
 80032a4:	d123      	bne.n	80032ee <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	08da      	lsrs	r2, r3, #3
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	3208      	adds	r2, #8
 80032ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f003 0307 	and.w	r3, r3, #7
 80032ba:	009b      	lsls	r3, r3, #2
 80032bc:	220f      	movs	r2, #15
 80032be:	fa02 f303 	lsl.w	r3, r2, r3
 80032c2:	43db      	mvns	r3, r3
 80032c4:	693a      	ldr	r2, [r7, #16]
 80032c6:	4013      	ands	r3, r2
 80032c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	691a      	ldr	r2, [r3, #16]
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f003 0307 	and.w	r3, r3, #7
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	fa02 f303 	lsl.w	r3, r2, r3
 80032da:	693a      	ldr	r2, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	08da      	lsrs	r2, r3, #3
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	3208      	adds	r2, #8
 80032e8:	6939      	ldr	r1, [r7, #16]
 80032ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	2203      	movs	r2, #3
 80032fa:	fa02 f303 	lsl.w	r3, r2, r3
 80032fe:	43db      	mvns	r3, r3
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4013      	ands	r3, r2
 8003304:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685b      	ldr	r3, [r3, #4]
 800330a:	f003 0203 	and.w	r2, r3, #3
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	005b      	lsls	r3, r3, #1
 8003312:	fa02 f303 	lsl.w	r3, r2, r3
 8003316:	693a      	ldr	r2, [r7, #16]
 8003318:	4313      	orrs	r3, r2
 800331a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	693a      	ldr	r2, [r7, #16]
 8003320:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 80a6 	beq.w	800347c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003330:	4b5b      	ldr	r3, [pc, #364]	@ (80034a0 <HAL_GPIO_Init+0x2e4>)
 8003332:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003334:	4a5a      	ldr	r2, [pc, #360]	@ (80034a0 <HAL_GPIO_Init+0x2e4>)
 8003336:	f043 0301 	orr.w	r3, r3, #1
 800333a:	6613      	str	r3, [r2, #96]	@ 0x60
 800333c:	4b58      	ldr	r3, [pc, #352]	@ (80034a0 <HAL_GPIO_Init+0x2e4>)
 800333e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003340:	f003 0301 	and.w	r3, r3, #1
 8003344:	60bb      	str	r3, [r7, #8]
 8003346:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003348:	4a56      	ldr	r2, [pc, #344]	@ (80034a4 <HAL_GPIO_Init+0x2e8>)
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	089b      	lsrs	r3, r3, #2
 800334e:	3302      	adds	r3, #2
 8003350:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003354:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f003 0303 	and.w	r3, r3, #3
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	220f      	movs	r2, #15
 8003360:	fa02 f303 	lsl.w	r3, r2, r3
 8003364:	43db      	mvns	r3, r3
 8003366:	693a      	ldr	r2, [r7, #16]
 8003368:	4013      	ands	r3, r2
 800336a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003372:	d01f      	beq.n	80033b4 <HAL_GPIO_Init+0x1f8>
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	4a4c      	ldr	r2, [pc, #304]	@ (80034a8 <HAL_GPIO_Init+0x2ec>)
 8003378:	4293      	cmp	r3, r2
 800337a:	d019      	beq.n	80033b0 <HAL_GPIO_Init+0x1f4>
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a4b      	ldr	r2, [pc, #300]	@ (80034ac <HAL_GPIO_Init+0x2f0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d013      	beq.n	80033ac <HAL_GPIO_Init+0x1f0>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	4a4a      	ldr	r2, [pc, #296]	@ (80034b0 <HAL_GPIO_Init+0x2f4>)
 8003388:	4293      	cmp	r3, r2
 800338a:	d00d      	beq.n	80033a8 <HAL_GPIO_Init+0x1ec>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	4a49      	ldr	r2, [pc, #292]	@ (80034b4 <HAL_GPIO_Init+0x2f8>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d007      	beq.n	80033a4 <HAL_GPIO_Init+0x1e8>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	4a48      	ldr	r2, [pc, #288]	@ (80034b8 <HAL_GPIO_Init+0x2fc>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d101      	bne.n	80033a0 <HAL_GPIO_Init+0x1e4>
 800339c:	2305      	movs	r3, #5
 800339e:	e00a      	b.n	80033b6 <HAL_GPIO_Init+0x1fa>
 80033a0:	2306      	movs	r3, #6
 80033a2:	e008      	b.n	80033b6 <HAL_GPIO_Init+0x1fa>
 80033a4:	2304      	movs	r3, #4
 80033a6:	e006      	b.n	80033b6 <HAL_GPIO_Init+0x1fa>
 80033a8:	2303      	movs	r3, #3
 80033aa:	e004      	b.n	80033b6 <HAL_GPIO_Init+0x1fa>
 80033ac:	2302      	movs	r3, #2
 80033ae:	e002      	b.n	80033b6 <HAL_GPIO_Init+0x1fa>
 80033b0:	2301      	movs	r3, #1
 80033b2:	e000      	b.n	80033b6 <HAL_GPIO_Init+0x1fa>
 80033b4:	2300      	movs	r3, #0
 80033b6:	697a      	ldr	r2, [r7, #20]
 80033b8:	f002 0203 	and.w	r2, r2, #3
 80033bc:	0092      	lsls	r2, r2, #2
 80033be:	4093      	lsls	r3, r2
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033c6:	4937      	ldr	r1, [pc, #220]	@ (80034a4 <HAL_GPIO_Init+0x2e8>)
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	089b      	lsrs	r3, r3, #2
 80033cc:	3302      	adds	r3, #2
 80033ce:	693a      	ldr	r2, [r7, #16]
 80033d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80033d4:	4b39      	ldr	r3, [pc, #228]	@ (80034bc <HAL_GPIO_Init+0x300>)
 80033d6:	689b      	ldr	r3, [r3, #8]
 80033d8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	43db      	mvns	r3, r3
 80033de:	693a      	ldr	r2, [r7, #16]
 80033e0:	4013      	ands	r3, r2
 80033e2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d003      	beq.n	80033f8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80033f0:	693a      	ldr	r2, [r7, #16]
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80033f8:	4a30      	ldr	r2, [pc, #192]	@ (80034bc <HAL_GPIO_Init+0x300>)
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80033fe:	4b2f      	ldr	r3, [pc, #188]	@ (80034bc <HAL_GPIO_Init+0x300>)
 8003400:	68db      	ldr	r3, [r3, #12]
 8003402:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	43db      	mvns	r3, r3
 8003408:	693a      	ldr	r2, [r7, #16]
 800340a:	4013      	ands	r3, r2
 800340c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d003      	beq.n	8003422 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800341a:	693a      	ldr	r2, [r7, #16]
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	4313      	orrs	r3, r2
 8003420:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003422:	4a26      	ldr	r2, [pc, #152]	@ (80034bc <HAL_GPIO_Init+0x300>)
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003428:	4b24      	ldr	r3, [pc, #144]	@ (80034bc <HAL_GPIO_Init+0x300>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	43db      	mvns	r3, r3
 8003432:	693a      	ldr	r2, [r7, #16]
 8003434:	4013      	ands	r3, r2
 8003436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	685b      	ldr	r3, [r3, #4]
 800343c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003440:	2b00      	cmp	r3, #0
 8003442:	d003      	beq.n	800344c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	4313      	orrs	r3, r2
 800344a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800344c:	4a1b      	ldr	r2, [pc, #108]	@ (80034bc <HAL_GPIO_Init+0x300>)
 800344e:	693b      	ldr	r3, [r7, #16]
 8003450:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003452:	4b1a      	ldr	r3, [pc, #104]	@ (80034bc <HAL_GPIO_Init+0x300>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	43db      	mvns	r3, r3
 800345c:	693a      	ldr	r2, [r7, #16]
 800345e:	4013      	ands	r3, r2
 8003460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d003      	beq.n	8003476 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800346e:	693a      	ldr	r2, [r7, #16]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	4313      	orrs	r3, r2
 8003474:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003476:	4a11      	ldr	r2, [pc, #68]	@ (80034bc <HAL_GPIO_Init+0x300>)
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	3301      	adds	r3, #1
 8003480:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	681a      	ldr	r2, [r3, #0]
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	fa22 f303 	lsr.w	r3, r2, r3
 800348c:	2b00      	cmp	r3, #0
 800348e:	f47f ae9d 	bne.w	80031cc <HAL_GPIO_Init+0x10>
  }
}
 8003492:	bf00      	nop
 8003494:	bf00      	nop
 8003496:	371c      	adds	r7, #28
 8003498:	46bd      	mov	sp, r7
 800349a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349e:	4770      	bx	lr
 80034a0:	40021000 	.word	0x40021000
 80034a4:	40010000 	.word	0x40010000
 80034a8:	48000400 	.word	0x48000400
 80034ac:	48000800 	.word	0x48000800
 80034b0:	48000c00 	.word	0x48000c00
 80034b4:	48001000 	.word	0x48001000
 80034b8:	48001400 	.word	0x48001400
 80034bc:	40010400 	.word	0x40010400

080034c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034c0:	b480      	push	{r7}
 80034c2:	b083      	sub	sp, #12
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
 80034c8:	460b      	mov	r3, r1
 80034ca:	807b      	strh	r3, [r7, #2]
 80034cc:	4613      	mov	r3, r2
 80034ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80034d0:	787b      	ldrb	r3, [r7, #1]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d003      	beq.n	80034de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80034d6:	887a      	ldrh	r2, [r7, #2]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80034dc:	e002      	b.n	80034e4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80034de:	887a      	ldrh	r2, [r7, #2]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80034f0:	b480      	push	{r7}
 80034f2:	b085      	sub	sp, #20
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d141      	bne.n	8003582 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80034fe:	4b4b      	ldr	r3, [pc, #300]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003506:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800350a:	d131      	bne.n	8003570 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800350c:	4b47      	ldr	r3, [pc, #284]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800350e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003512:	4a46      	ldr	r2, [pc, #280]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003514:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003518:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800351c:	4b43      	ldr	r3, [pc, #268]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003524:	4a41      	ldr	r2, [pc, #260]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003526:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800352a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800352c:	4b40      	ldr	r3, [pc, #256]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0x140>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2232      	movs	r2, #50	@ 0x32
 8003532:	fb02 f303 	mul.w	r3, r2, r3
 8003536:	4a3f      	ldr	r2, [pc, #252]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003538:	fba2 2303 	umull	r2, r3, r2, r3
 800353c:	0c9b      	lsrs	r3, r3, #18
 800353e:	3301      	adds	r3, #1
 8003540:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003542:	e002      	b.n	800354a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	3b01      	subs	r3, #1
 8003548:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800354a:	4b38      	ldr	r3, [pc, #224]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800354c:	695b      	ldr	r3, [r3, #20]
 800354e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003552:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003556:	d102      	bne.n	800355e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2b00      	cmp	r3, #0
 800355c:	d1f2      	bne.n	8003544 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800355e:	4b33      	ldr	r3, [pc, #204]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003560:	695b      	ldr	r3, [r3, #20]
 8003562:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003566:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800356a:	d158      	bne.n	800361e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 800356c:	2303      	movs	r3, #3
 800356e:	e057      	b.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003570:	4b2e      	ldr	r3, [pc, #184]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003572:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003576:	4a2d      	ldr	r2, [pc, #180]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003578:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800357c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003580:	e04d      	b.n	800361e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003588:	d141      	bne.n	800360e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800358a:	4b28      	ldr	r3, [pc, #160]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003592:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003596:	d131      	bne.n	80035fc <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003598:	4b24      	ldr	r3, [pc, #144]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800359a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800359e:	4a23      	ldr	r2, [pc, #140]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80035a8:	4b20      	ldr	r3, [pc, #128]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80035b0:	4a1e      	ldr	r2, [pc, #120]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80035b8:	4b1d      	ldr	r3, [pc, #116]	@ (8003630 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	2232      	movs	r2, #50	@ 0x32
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	4a1c      	ldr	r2, [pc, #112]	@ (8003634 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80035c4:	fba2 2303 	umull	r2, r3, r2, r3
 80035c8:	0c9b      	lsrs	r3, r3, #18
 80035ca:	3301      	adds	r3, #1
 80035cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035ce:	e002      	b.n	80035d6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	3b01      	subs	r3, #1
 80035d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035d6:	4b15      	ldr	r3, [pc, #84]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035de:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035e2:	d102      	bne.n	80035ea <HAL_PWREx_ControlVoltageScaling+0xfa>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d1f2      	bne.n	80035d0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035ea:	4b10      	ldr	r3, [pc, #64]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80035f2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80035f6:	d112      	bne.n	800361e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80035f8:	2303      	movs	r3, #3
 80035fa:	e011      	b.n	8003620 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80035fc:	4b0b      	ldr	r3, [pc, #44]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80035fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003602:	4a0a      	ldr	r2, [pc, #40]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003604:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003608:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800360c:	e007      	b.n	800361e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800360e:	4b07      	ldr	r3, [pc, #28]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003616:	4a05      	ldr	r2, [pc, #20]	@ (800362c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003618:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800361c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3714      	adds	r7, #20
 8003624:	46bd      	mov	sp, r7
 8003626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362a:	4770      	bx	lr
 800362c:	40007000 	.word	0x40007000
 8003630:	20000000 	.word	0x20000000
 8003634:	431bde83 	.word	0x431bde83

08003638 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 800363c:	4b05      	ldr	r3, [pc, #20]	@ (8003654 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800363e:	689b      	ldr	r3, [r3, #8]
 8003640:	4a04      	ldr	r2, [pc, #16]	@ (8003654 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003642:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003646:	6093      	str	r3, [r2, #8]
}
 8003648:	bf00      	nop
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
 8003652:	bf00      	nop
 8003654:	40007000 	.word	0x40007000

08003658 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	b088      	sub	sp, #32
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d101      	bne.n	800366a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003666:	2301      	movs	r3, #1
 8003668:	e2fe      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f003 0301 	and.w	r3, r3, #1
 8003672:	2b00      	cmp	r3, #0
 8003674:	d075      	beq.n	8003762 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003676:	4b97      	ldr	r3, [pc, #604]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	f003 030c 	and.w	r3, r3, #12
 800367e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003680:	4b94      	ldr	r3, [pc, #592]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 8003682:	68db      	ldr	r3, [r3, #12]
 8003684:	f003 0303 	and.w	r3, r3, #3
 8003688:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800368a:	69bb      	ldr	r3, [r7, #24]
 800368c:	2b0c      	cmp	r3, #12
 800368e:	d102      	bne.n	8003696 <HAL_RCC_OscConfig+0x3e>
 8003690:	697b      	ldr	r3, [r7, #20]
 8003692:	2b03      	cmp	r3, #3
 8003694:	d002      	beq.n	800369c <HAL_RCC_OscConfig+0x44>
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d10b      	bne.n	80036b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800369c:	4b8d      	ldr	r3, [pc, #564]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d05b      	beq.n	8003760 <HAL_RCC_OscConfig+0x108>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d157      	bne.n	8003760 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e2d9      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80036bc:	d106      	bne.n	80036cc <HAL_RCC_OscConfig+0x74>
 80036be:	4b85      	ldr	r3, [pc, #532]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a84      	ldr	r2, [pc, #528]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80036c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036c8:	6013      	str	r3, [r2, #0]
 80036ca:	e01d      	b.n	8003708 <HAL_RCC_OscConfig+0xb0>
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80036d4:	d10c      	bne.n	80036f0 <HAL_RCC_OscConfig+0x98>
 80036d6:	4b7f      	ldr	r3, [pc, #508]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	4a7e      	ldr	r2, [pc, #504]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80036dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	4b7c      	ldr	r3, [pc, #496]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4a7b      	ldr	r2, [pc, #492]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80036e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80036ec:	6013      	str	r3, [r2, #0]
 80036ee:	e00b      	b.n	8003708 <HAL_RCC_OscConfig+0xb0>
 80036f0:	4b78      	ldr	r3, [pc, #480]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a77      	ldr	r2, [pc, #476]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80036f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036fa:	6013      	str	r3, [r2, #0]
 80036fc:	4b75      	ldr	r3, [pc, #468]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a74      	ldr	r2, [pc, #464]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 8003702:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003706:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	685b      	ldr	r3, [r3, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d013      	beq.n	8003738 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003710:	f7ff f9f6 	bl	8002b00 <HAL_GetTick>
 8003714:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003716:	e008      	b.n	800372a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003718:	f7ff f9f2 	bl	8002b00 <HAL_GetTick>
 800371c:	4602      	mov	r2, r0
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	1ad3      	subs	r3, r2, r3
 8003722:	2b64      	cmp	r3, #100	@ 0x64
 8003724:	d901      	bls.n	800372a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003726:	2303      	movs	r3, #3
 8003728:	e29e      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800372a:	4b6a      	ldr	r3, [pc, #424]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003732:	2b00      	cmp	r3, #0
 8003734:	d0f0      	beq.n	8003718 <HAL_RCC_OscConfig+0xc0>
 8003736:	e014      	b.n	8003762 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003738:	f7ff f9e2 	bl	8002b00 <HAL_GetTick>
 800373c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800373e:	e008      	b.n	8003752 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003740:	f7ff f9de 	bl	8002b00 <HAL_GetTick>
 8003744:	4602      	mov	r2, r0
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	1ad3      	subs	r3, r2, r3
 800374a:	2b64      	cmp	r3, #100	@ 0x64
 800374c:	d901      	bls.n	8003752 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800374e:	2303      	movs	r3, #3
 8003750:	e28a      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003752:	4b60      	ldr	r3, [pc, #384]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1f0      	bne.n	8003740 <HAL_RCC_OscConfig+0xe8>
 800375e:	e000      	b.n	8003762 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d075      	beq.n	800385a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800376e:	4b59      	ldr	r3, [pc, #356]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 030c 	and.w	r3, r3, #12
 8003776:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003778:	4b56      	ldr	r3, [pc, #344]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f003 0303 	and.w	r3, r3, #3
 8003780:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003782:	69bb      	ldr	r3, [r7, #24]
 8003784:	2b0c      	cmp	r3, #12
 8003786:	d102      	bne.n	800378e <HAL_RCC_OscConfig+0x136>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d002      	beq.n	8003794 <HAL_RCC_OscConfig+0x13c>
 800378e:	69bb      	ldr	r3, [r7, #24]
 8003790:	2b04      	cmp	r3, #4
 8003792:	d11f      	bne.n	80037d4 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003794:	4b4f      	ldr	r3, [pc, #316]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800379c:	2b00      	cmp	r3, #0
 800379e:	d005      	beq.n	80037ac <HAL_RCC_OscConfig+0x154>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	68db      	ldr	r3, [r3, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d101      	bne.n	80037ac <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e25d      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037ac:	4b49      	ldr	r3, [pc, #292]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	691b      	ldr	r3, [r3, #16]
 80037b8:	061b      	lsls	r3, r3, #24
 80037ba:	4946      	ldr	r1, [pc, #280]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80037c0:	4b45      	ldr	r3, [pc, #276]	@ (80038d8 <HAL_RCC_OscConfig+0x280>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	4618      	mov	r0, r3
 80037c6:	f7fe ffd1 	bl	800276c <HAL_InitTick>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d043      	beq.n	8003858 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80037d0:	2301      	movs	r3, #1
 80037d2:	e249      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d023      	beq.n	8003824 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80037dc:	4b3d      	ldr	r3, [pc, #244]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	4a3c      	ldr	r2, [pc, #240]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80037e2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037e8:	f7ff f98a 	bl	8002b00 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80037f0:	f7ff f986 	bl	8002b00 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e232      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003802:	4b34      	ldr	r3, [pc, #208]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800380a:	2b00      	cmp	r3, #0
 800380c:	d0f0      	beq.n	80037f0 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800380e:	4b31      	ldr	r3, [pc, #196]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	061b      	lsls	r3, r3, #24
 800381c:	492d      	ldr	r1, [pc, #180]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 800381e:	4313      	orrs	r3, r2
 8003820:	604b      	str	r3, [r1, #4]
 8003822:	e01a      	b.n	800385a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003824:	4b2b      	ldr	r3, [pc, #172]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	4a2a      	ldr	r2, [pc, #168]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 800382a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800382e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003830:	f7ff f966 	bl	8002b00 <HAL_GetTick>
 8003834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003836:	e008      	b.n	800384a <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003838:	f7ff f962 	bl	8002b00 <HAL_GetTick>
 800383c:	4602      	mov	r2, r0
 800383e:	693b      	ldr	r3, [r7, #16]
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	2b02      	cmp	r3, #2
 8003844:	d901      	bls.n	800384a <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003846:	2303      	movs	r3, #3
 8003848:	e20e      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800384a:	4b22      	ldr	r3, [pc, #136]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003852:	2b00      	cmp	r3, #0
 8003854:	d1f0      	bne.n	8003838 <HAL_RCC_OscConfig+0x1e0>
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003858:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0308 	and.w	r3, r3, #8
 8003862:	2b00      	cmp	r3, #0
 8003864:	d041      	beq.n	80038ea <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	695b      	ldr	r3, [r3, #20]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d01c      	beq.n	80038a8 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800386e:	4b19      	ldr	r3, [pc, #100]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 8003870:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003874:	4a17      	ldr	r2, [pc, #92]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 8003876:	f043 0301 	orr.w	r3, r3, #1
 800387a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800387e:	f7ff f93f 	bl	8002b00 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003886:	f7ff f93b 	bl	8002b00 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e1e7      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003898:	4b0e      	ldr	r3, [pc, #56]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 800389a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800389e:	f003 0302 	and.w	r3, r3, #2
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0ef      	beq.n	8003886 <HAL_RCC_OscConfig+0x22e>
 80038a6:	e020      	b.n	80038ea <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038a8:	4b0a      	ldr	r3, [pc, #40]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80038aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038ae:	4a09      	ldr	r2, [pc, #36]	@ (80038d4 <HAL_RCC_OscConfig+0x27c>)
 80038b0:	f023 0301 	bic.w	r3, r3, #1
 80038b4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038b8:	f7ff f922 	bl	8002b00 <HAL_GetTick>
 80038bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038be:	e00d      	b.n	80038dc <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80038c0:	f7ff f91e 	bl	8002b00 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d906      	bls.n	80038dc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e1ca      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
 80038d2:	bf00      	nop
 80038d4:	40021000 	.word	0x40021000
 80038d8:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80038dc:	4b8c      	ldr	r3, [pc, #560]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 80038de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80038e2:	f003 0302 	and.w	r3, r3, #2
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d1ea      	bne.n	80038c0 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0304 	and.w	r3, r3, #4
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	f000 80a6 	beq.w	8003a44 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80038f8:	2300      	movs	r3, #0
 80038fa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80038fc:	4b84      	ldr	r3, [pc, #528]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 80038fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003900:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003904:	2b00      	cmp	r3, #0
 8003906:	d101      	bne.n	800390c <HAL_RCC_OscConfig+0x2b4>
 8003908:	2301      	movs	r3, #1
 800390a:	e000      	b.n	800390e <HAL_RCC_OscConfig+0x2b6>
 800390c:	2300      	movs	r3, #0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d00d      	beq.n	800392e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003912:	4b7f      	ldr	r3, [pc, #508]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003914:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003916:	4a7e      	ldr	r2, [pc, #504]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800391c:	6593      	str	r3, [r2, #88]	@ 0x58
 800391e:	4b7c      	ldr	r3, [pc, #496]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003926:	60fb      	str	r3, [r7, #12]
 8003928:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800392a:	2301      	movs	r3, #1
 800392c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800392e:	4b79      	ldr	r3, [pc, #484]	@ (8003b14 <HAL_RCC_OscConfig+0x4bc>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003936:	2b00      	cmp	r3, #0
 8003938:	d118      	bne.n	800396c <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800393a:	4b76      	ldr	r3, [pc, #472]	@ (8003b14 <HAL_RCC_OscConfig+0x4bc>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a75      	ldr	r2, [pc, #468]	@ (8003b14 <HAL_RCC_OscConfig+0x4bc>)
 8003940:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003944:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003946:	f7ff f8db 	bl	8002b00 <HAL_GetTick>
 800394a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800394c:	e008      	b.n	8003960 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800394e:	f7ff f8d7 	bl	8002b00 <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	693b      	ldr	r3, [r7, #16]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b02      	cmp	r3, #2
 800395a:	d901      	bls.n	8003960 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 800395c:	2303      	movs	r3, #3
 800395e:	e183      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003960:	4b6c      	ldr	r3, [pc, #432]	@ (8003b14 <HAL_RCC_OscConfig+0x4bc>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003968:	2b00      	cmp	r3, #0
 800396a:	d0f0      	beq.n	800394e <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	689b      	ldr	r3, [r3, #8]
 8003970:	2b01      	cmp	r3, #1
 8003972:	d108      	bne.n	8003986 <HAL_RCC_OscConfig+0x32e>
 8003974:	4b66      	ldr	r3, [pc, #408]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800397a:	4a65      	ldr	r2, [pc, #404]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 800397c:	f043 0301 	orr.w	r3, r3, #1
 8003980:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003984:	e024      	b.n	80039d0 <HAL_RCC_OscConfig+0x378>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	689b      	ldr	r3, [r3, #8]
 800398a:	2b05      	cmp	r3, #5
 800398c:	d110      	bne.n	80039b0 <HAL_RCC_OscConfig+0x358>
 800398e:	4b60      	ldr	r3, [pc, #384]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003990:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003994:	4a5e      	ldr	r2, [pc, #376]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003996:	f043 0304 	orr.w	r3, r3, #4
 800399a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800399e:	4b5c      	ldr	r3, [pc, #368]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 80039a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039a4:	4a5a      	ldr	r2, [pc, #360]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 80039a6:	f043 0301 	orr.w	r3, r3, #1
 80039aa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039ae:	e00f      	b.n	80039d0 <HAL_RCC_OscConfig+0x378>
 80039b0:	4b57      	ldr	r3, [pc, #348]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 80039b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039b6:	4a56      	ldr	r2, [pc, #344]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 80039b8:	f023 0301 	bic.w	r3, r3, #1
 80039bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80039c0:	4b53      	ldr	r3, [pc, #332]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 80039c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039c6:	4a52      	ldr	r2, [pc, #328]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 80039c8:	f023 0304 	bic.w	r3, r3, #4
 80039cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d016      	beq.n	8003a06 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80039d8:	f7ff f892 	bl	8002b00 <HAL_GetTick>
 80039dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039de:	e00a      	b.n	80039f6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80039e0:	f7ff f88e 	bl	8002b00 <HAL_GetTick>
 80039e4:	4602      	mov	r2, r0
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e138      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80039f6:	4b46      	ldr	r3, [pc, #280]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80039fc:	f003 0302 	and.w	r3, r3, #2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0ed      	beq.n	80039e0 <HAL_RCC_OscConfig+0x388>
 8003a04:	e015      	b.n	8003a32 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a06:	f7ff f87b 	bl	8002b00 <HAL_GetTick>
 8003a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a0c:	e00a      	b.n	8003a24 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a0e:	f7ff f877 	bl	8002b00 <HAL_GetTick>
 8003a12:	4602      	mov	r2, r0
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d901      	bls.n	8003a24 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003a20:	2303      	movs	r3, #3
 8003a22:	e121      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003a24:	4b3a      	ldr	r3, [pc, #232]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003a2a:	f003 0302 	and.w	r3, r3, #2
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ed      	bne.n	8003a0e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003a32:	7ffb      	ldrb	r3, [r7, #31]
 8003a34:	2b01      	cmp	r3, #1
 8003a36:	d105      	bne.n	8003a44 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003a38:	4b35      	ldr	r3, [pc, #212]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003a3c:	4a34      	ldr	r2, [pc, #208]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003a3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003a42:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0320 	and.w	r3, r3, #32
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d03c      	beq.n	8003aca <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d01c      	beq.n	8003a92 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003a58:	4b2d      	ldr	r3, [pc, #180]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003a5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a5e:	4a2c      	ldr	r2, [pc, #176]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003a68:	f7ff f84a 	bl	8002b00 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a70:	f7ff f846 	bl	8002b00 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b02      	cmp	r3, #2
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e0f2      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003a82:	4b23      	ldr	r3, [pc, #140]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003a84:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a88:	f003 0302 	and.w	r3, r3, #2
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d0ef      	beq.n	8003a70 <HAL_RCC_OscConfig+0x418>
 8003a90:	e01b      	b.n	8003aca <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003a92:	4b1f      	ldr	r3, [pc, #124]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003a94:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003a98:	4a1d      	ldr	r2, [pc, #116]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003a9a:	f023 0301 	bic.w	r3, r3, #1
 8003a9e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003aa2:	f7ff f82d 	bl	8002b00 <HAL_GetTick>
 8003aa6:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003aa8:	e008      	b.n	8003abc <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003aaa:	f7ff f829 	bl	8002b00 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	693b      	ldr	r3, [r7, #16]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	2b02      	cmp	r3, #2
 8003ab6:	d901      	bls.n	8003abc <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8003ab8:	2303      	movs	r3, #3
 8003aba:	e0d5      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003abc:	4b14      	ldr	r3, [pc, #80]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003abe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003ac2:	f003 0302 	and.w	r3, r3, #2
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d1ef      	bne.n	8003aaa <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	f000 80c9 	beq.w	8003c66 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ad4:	4b0e      	ldr	r3, [pc, #56]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b0c      	cmp	r3, #12
 8003ade:	f000 8083 	beq.w	8003be8 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	69db      	ldr	r3, [r3, #28]
 8003ae6:	2b02      	cmp	r3, #2
 8003ae8:	d15e      	bne.n	8003ba8 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003aea:	4b09      	ldr	r3, [pc, #36]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a08      	ldr	r2, [pc, #32]	@ (8003b10 <HAL_RCC_OscConfig+0x4b8>)
 8003af0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003af4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af6:	f7ff f803 	bl	8002b00 <HAL_GetTick>
 8003afa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003afc:	e00c      	b.n	8003b18 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003afe:	f7fe ffff 	bl	8002b00 <HAL_GetTick>
 8003b02:	4602      	mov	r2, r0
 8003b04:	693b      	ldr	r3, [r7, #16]
 8003b06:	1ad3      	subs	r3, r2, r3
 8003b08:	2b02      	cmp	r3, #2
 8003b0a:	d905      	bls.n	8003b18 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	e0ab      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
 8003b10:	40021000 	.word	0x40021000
 8003b14:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003b18:	4b55      	ldr	r3, [pc, #340]	@ (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d1ec      	bne.n	8003afe <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003b24:	4b52      	ldr	r3, [pc, #328]	@ (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	4b52      	ldr	r3, [pc, #328]	@ (8003c74 <HAL_RCC_OscConfig+0x61c>)
 8003b2a:	4013      	ands	r3, r2
 8003b2c:	687a      	ldr	r2, [r7, #4]
 8003b2e:	6a11      	ldr	r1, [r2, #32]
 8003b30:	687a      	ldr	r2, [r7, #4]
 8003b32:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003b34:	3a01      	subs	r2, #1
 8003b36:	0112      	lsls	r2, r2, #4
 8003b38:	4311      	orrs	r1, r2
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8003b3e:	0212      	lsls	r2, r2, #8
 8003b40:	4311      	orrs	r1, r2
 8003b42:	687a      	ldr	r2, [r7, #4]
 8003b44:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8003b46:	0852      	lsrs	r2, r2, #1
 8003b48:	3a01      	subs	r2, #1
 8003b4a:	0552      	lsls	r2, r2, #21
 8003b4c:	4311      	orrs	r1, r2
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8003b52:	0852      	lsrs	r2, r2, #1
 8003b54:	3a01      	subs	r2, #1
 8003b56:	0652      	lsls	r2, r2, #25
 8003b58:	4311      	orrs	r1, r2
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003b5e:	06d2      	lsls	r2, r2, #27
 8003b60:	430a      	orrs	r2, r1
 8003b62:	4943      	ldr	r1, [pc, #268]	@ (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b64:	4313      	orrs	r3, r2
 8003b66:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003b68:	4b41      	ldr	r3, [pc, #260]	@ (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a40      	ldr	r2, [pc, #256]	@ (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b6e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b72:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003b74:	4b3e      	ldr	r3, [pc, #248]	@ (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b76:	68db      	ldr	r3, [r3, #12]
 8003b78:	4a3d      	ldr	r2, [pc, #244]	@ (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b7a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003b7e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b80:	f7fe ffbe 	bl	8002b00 <HAL_GetTick>
 8003b84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b86:	e008      	b.n	8003b9a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003b88:	f7fe ffba 	bl	8002b00 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d901      	bls.n	8003b9a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8003b96:	2303      	movs	r3, #3
 8003b98:	e066      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003b9a:	4b35      	ldr	r3, [pc, #212]	@ (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d0f0      	beq.n	8003b88 <HAL_RCC_OscConfig+0x530>
 8003ba6:	e05e      	b.n	8003c66 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ba8:	4b31      	ldr	r3, [pc, #196]	@ (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a30      	ldr	r2, [pc, #192]	@ (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003bae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003bb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bb4:	f7fe ffa4 	bl	8002b00 <HAL_GetTick>
 8003bb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bba:	e008      	b.n	8003bce <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003bbc:	f7fe ffa0 	bl	8002b00 <HAL_GetTick>
 8003bc0:	4602      	mov	r2, r0
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	1ad3      	subs	r3, r2, r3
 8003bc6:	2b02      	cmp	r3, #2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e04c      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003bce:	4b28      	ldr	r3, [pc, #160]	@ (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d1f0      	bne.n	8003bbc <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8003bda:	4b25      	ldr	r3, [pc, #148]	@ (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003bdc:	68da      	ldr	r2, [r3, #12]
 8003bde:	4924      	ldr	r1, [pc, #144]	@ (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003be0:	4b25      	ldr	r3, [pc, #148]	@ (8003c78 <HAL_RCC_OscConfig+0x620>)
 8003be2:	4013      	ands	r3, r2
 8003be4:	60cb      	str	r3, [r1, #12]
 8003be6:	e03e      	b.n	8003c66 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	69db      	ldr	r3, [r3, #28]
 8003bec:	2b01      	cmp	r3, #1
 8003bee:	d101      	bne.n	8003bf4 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e039      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003bf4:	4b1e      	ldr	r3, [pc, #120]	@ (8003c70 <HAL_RCC_OscConfig+0x618>)
 8003bf6:	68db      	ldr	r3, [r3, #12]
 8003bf8:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f003 0203 	and.w	r2, r3, #3
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a1b      	ldr	r3, [r3, #32]
 8003c04:	429a      	cmp	r2, r3
 8003c06:	d12c      	bne.n	8003c62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c12:	3b01      	subs	r3, #1
 8003c14:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d123      	bne.n	8003c62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c1a:	697b      	ldr	r3, [r7, #20]
 8003c1c:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c24:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d11b      	bne.n	8003c62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c2a:	697b      	ldr	r3, [r7, #20]
 8003c2c:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c34:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d113      	bne.n	8003c62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	085b      	lsrs	r3, r3, #1
 8003c46:	3b01      	subs	r3, #1
 8003c48:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d109      	bne.n	8003c62 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c58:	085b      	lsrs	r3, r3, #1
 8003c5a:	3b01      	subs	r3, #1
 8003c5c:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003c5e:	429a      	cmp	r2, r3
 8003c60:	d001      	beq.n	8003c66 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e000      	b.n	8003c68 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8003c66:	2300      	movs	r3, #0
}
 8003c68:	4618      	mov	r0, r3
 8003c6a:	3720      	adds	r7, #32
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	40021000 	.word	0x40021000
 8003c74:	019f800c 	.word	0x019f800c
 8003c78:	feeefffc 	.word	0xfeeefffc

08003c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b086      	sub	sp, #24
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8003c86:	2300      	movs	r3, #0
 8003c88:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d101      	bne.n	8003c94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e11e      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003c94:	4b91      	ldr	r3, [pc, #580]	@ (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	f003 030f 	and.w	r3, r3, #15
 8003c9c:	683a      	ldr	r2, [r7, #0]
 8003c9e:	429a      	cmp	r2, r3
 8003ca0:	d910      	bls.n	8003cc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ca2:	4b8e      	ldr	r3, [pc, #568]	@ (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f023 020f 	bic.w	r2, r3, #15
 8003caa:	498c      	ldr	r1, [pc, #560]	@ (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003cb2:	4b8a      	ldr	r3, [pc, #552]	@ (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f003 030f 	and.w	r3, r3, #15
 8003cba:	683a      	ldr	r2, [r7, #0]
 8003cbc:	429a      	cmp	r2, r3
 8003cbe:	d001      	beq.n	8003cc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e106      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f003 0301 	and.w	r3, r3, #1
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d073      	beq.n	8003db8 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	685b      	ldr	r3, [r3, #4]
 8003cd4:	2b03      	cmp	r3, #3
 8003cd6:	d129      	bne.n	8003d2c <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003cd8:	4b81      	ldr	r3, [pc, #516]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d101      	bne.n	8003ce8 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	e0f4      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003ce8:	f000 f9d0 	bl	800408c <RCC_GetSysClockFreqFromPLLSource>
 8003cec:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003cee:	693b      	ldr	r3, [r7, #16]
 8003cf0:	4a7c      	ldr	r2, [pc, #496]	@ (8003ee4 <HAL_RCC_ClockConfig+0x268>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d93f      	bls.n	8003d76 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003cf6:	4b7a      	ldr	r3, [pc, #488]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003cf8:	689b      	ldr	r3, [r3, #8]
 8003cfa:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d009      	beq.n	8003d16 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d033      	beq.n	8003d76 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d12f      	bne.n	8003d76 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d16:	4b72      	ldr	r3, [pc, #456]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003d18:	689b      	ldr	r3, [r3, #8]
 8003d1a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d1e:	4a70      	ldr	r2, [pc, #448]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003d20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003d26:	2380      	movs	r3, #128	@ 0x80
 8003d28:	617b      	str	r3, [r7, #20]
 8003d2a:	e024      	b.n	8003d76 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d107      	bne.n	8003d44 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d34:	4b6a      	ldr	r3, [pc, #424]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d109      	bne.n	8003d54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0c6      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003d44:	4b66      	ldr	r3, [pc, #408]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d101      	bne.n	8003d54 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0be      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003d54:	f000 f8ce 	bl	8003ef4 <HAL_RCC_GetSysClockFreq>
 8003d58:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	4a61      	ldr	r2, [pc, #388]	@ (8003ee4 <HAL_RCC_ClockConfig+0x268>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d909      	bls.n	8003d76 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003d62:	4b5f      	ldr	r3, [pc, #380]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003d6a:	4a5d      	ldr	r2, [pc, #372]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003d6c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003d70:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003d72:	2380      	movs	r3, #128	@ 0x80
 8003d74:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003d76:	4b5a      	ldr	r3, [pc, #360]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003d78:	689b      	ldr	r3, [r3, #8]
 8003d7a:	f023 0203 	bic.w	r2, r3, #3
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	4957      	ldr	r1, [pc, #348]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003d84:	4313      	orrs	r3, r2
 8003d86:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d88:	f7fe feba 	bl	8002b00 <HAL_GetTick>
 8003d8c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003d8e:	e00a      	b.n	8003da6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003d90:	f7fe feb6 	bl	8002b00 <HAL_GetTick>
 8003d94:	4602      	mov	r2, r0
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	1ad3      	subs	r3, r2, r3
 8003d9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e095      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003da6:	4b4e      	ldr	r3, [pc, #312]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	f003 020c 	and.w	r2, r3, #12
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	009b      	lsls	r3, r3, #2
 8003db4:	429a      	cmp	r2, r3
 8003db6:	d1eb      	bne.n	8003d90 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d023      	beq.n	8003e0c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0304 	and.w	r3, r3, #4
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d005      	beq.n	8003ddc <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dd0:	4b43      	ldr	r3, [pc, #268]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	4a42      	ldr	r2, [pc, #264]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003dd6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003dda:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 0308 	and.w	r3, r3, #8
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003de8:	4b3d      	ldr	r3, [pc, #244]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003dea:	689b      	ldr	r3, [r3, #8]
 8003dec:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003df0:	4a3b      	ldr	r2, [pc, #236]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003df2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003df6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003df8:	4b39      	ldr	r3, [pc, #228]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003dfa:	689b      	ldr	r3, [r3, #8]
 8003dfc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	689b      	ldr	r3, [r3, #8]
 8003e04:	4936      	ldr	r1, [pc, #216]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003e06:	4313      	orrs	r3, r2
 8003e08:	608b      	str	r3, [r1, #8]
 8003e0a:	e008      	b.n	8003e1e <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b80      	cmp	r3, #128	@ 0x80
 8003e10:	d105      	bne.n	8003e1e <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003e12:	4b33      	ldr	r3, [pc, #204]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	4a32      	ldr	r2, [pc, #200]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003e18:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e1c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e1e:	4b2f      	ldr	r3, [pc, #188]	@ (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f003 030f 	and.w	r3, r3, #15
 8003e26:	683a      	ldr	r2, [r7, #0]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	d21d      	bcs.n	8003e68 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e2c:	4b2b      	ldr	r3, [pc, #172]	@ (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f023 020f 	bic.w	r2, r3, #15
 8003e34:	4929      	ldr	r1, [pc, #164]	@ (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	4313      	orrs	r3, r2
 8003e3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003e3c:	f7fe fe60 	bl	8002b00 <HAL_GetTick>
 8003e40:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e42:	e00a      	b.n	8003e5a <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e44:	f7fe fe5c 	bl	8002b00 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d901      	bls.n	8003e5a <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003e56:	2303      	movs	r3, #3
 8003e58:	e03b      	b.n	8003ed2 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003e5a:	4b20      	ldr	r3, [pc, #128]	@ (8003edc <HAL_RCC_ClockConfig+0x260>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	f003 030f 	and.w	r3, r3, #15
 8003e62:	683a      	ldr	r2, [r7, #0]
 8003e64:	429a      	cmp	r2, r3
 8003e66:	d1ed      	bne.n	8003e44 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f003 0304 	and.w	r3, r3, #4
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003e74:	4b1a      	ldr	r3, [pc, #104]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003e76:	689b      	ldr	r3, [r3, #8]
 8003e78:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	4917      	ldr	r1, [pc, #92]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003e82:	4313      	orrs	r3, r2
 8003e84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f003 0308 	and.w	r3, r3, #8
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d009      	beq.n	8003ea6 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003e92:	4b13      	ldr	r3, [pc, #76]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003e94:	689b      	ldr	r3, [r3, #8]
 8003e96:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	490f      	ldr	r1, [pc, #60]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003ea6:	f000 f825 	bl	8003ef4 <HAL_RCC_GetSysClockFreq>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	4b0c      	ldr	r3, [pc, #48]	@ (8003ee0 <HAL_RCC_ClockConfig+0x264>)
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	091b      	lsrs	r3, r3, #4
 8003eb2:	f003 030f 	and.w	r3, r3, #15
 8003eb6:	490c      	ldr	r1, [pc, #48]	@ (8003ee8 <HAL_RCC_ClockConfig+0x26c>)
 8003eb8:	5ccb      	ldrb	r3, [r1, r3]
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	fa22 f303 	lsr.w	r3, r2, r3
 8003ec2:	4a0a      	ldr	r2, [pc, #40]	@ (8003eec <HAL_RCC_ClockConfig+0x270>)
 8003ec4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003ec6:	4b0a      	ldr	r3, [pc, #40]	@ (8003ef0 <HAL_RCC_ClockConfig+0x274>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f7fe fc4e 	bl	800276c <HAL_InitTick>
 8003ed0:	4603      	mov	r3, r0
}
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	3718      	adds	r7, #24
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bd80      	pop	{r7, pc}
 8003eda:	bf00      	nop
 8003edc:	40022000 	.word	0x40022000
 8003ee0:	40021000 	.word	0x40021000
 8003ee4:	04c4b400 	.word	0x04c4b400
 8003ee8:	0800cc74 	.word	0x0800cc74
 8003eec:	20000000 	.word	0x20000000
 8003ef0:	20000004 	.word	0x20000004

08003ef4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b087      	sub	sp, #28
 8003ef8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003efa:	4b2c      	ldr	r3, [pc, #176]	@ (8003fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f003 030c 	and.w	r3, r3, #12
 8003f02:	2b04      	cmp	r3, #4
 8003f04:	d102      	bne.n	8003f0c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003f06:	4b2a      	ldr	r3, [pc, #168]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f08:	613b      	str	r3, [r7, #16]
 8003f0a:	e047      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003f0c:	4b27      	ldr	r3, [pc, #156]	@ (8003fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f003 030c 	and.w	r3, r3, #12
 8003f14:	2b08      	cmp	r3, #8
 8003f16:	d102      	bne.n	8003f1e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003f18:	4b26      	ldr	r3, [pc, #152]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f1a:	613b      	str	r3, [r7, #16]
 8003f1c:	e03e      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003f1e:	4b23      	ldr	r3, [pc, #140]	@ (8003fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 030c 	and.w	r3, r3, #12
 8003f26:	2b0c      	cmp	r3, #12
 8003f28:	d136      	bne.n	8003f98 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003f2a:	4b20      	ldr	r3, [pc, #128]	@ (8003fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f2c:	68db      	ldr	r3, [r3, #12]
 8003f2e:	f003 0303 	and.w	r3, r3, #3
 8003f32:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003f34:	4b1d      	ldr	r3, [pc, #116]	@ (8003fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	091b      	lsrs	r3, r3, #4
 8003f3a:	f003 030f 	and.w	r3, r3, #15
 8003f3e:	3301      	adds	r3, #1
 8003f40:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2b03      	cmp	r3, #3
 8003f46:	d10c      	bne.n	8003f62 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f48:	4a1a      	ldr	r2, [pc, #104]	@ (8003fb4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003f4a:	68bb      	ldr	r3, [r7, #8]
 8003f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f50:	4a16      	ldr	r2, [pc, #88]	@ (8003fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f52:	68d2      	ldr	r2, [r2, #12]
 8003f54:	0a12      	lsrs	r2, r2, #8
 8003f56:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f5a:	fb02 f303 	mul.w	r3, r2, r3
 8003f5e:	617b      	str	r3, [r7, #20]
      break;
 8003f60:	e00c      	b.n	8003f7c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003f62:	4a13      	ldr	r2, [pc, #76]	@ (8003fb0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f6a:	4a10      	ldr	r2, [pc, #64]	@ (8003fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f6c:	68d2      	ldr	r2, [r2, #12]
 8003f6e:	0a12      	lsrs	r2, r2, #8
 8003f70:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003f74:	fb02 f303 	mul.w	r3, r2, r3
 8003f78:	617b      	str	r3, [r7, #20]
      break;
 8003f7a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003f7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003fac <HAL_RCC_GetSysClockFreq+0xb8>)
 8003f7e:	68db      	ldr	r3, [r3, #12]
 8003f80:	0e5b      	lsrs	r3, r3, #25
 8003f82:	f003 0303 	and.w	r3, r3, #3
 8003f86:	3301      	adds	r3, #1
 8003f88:	005b      	lsls	r3, r3, #1
 8003f8a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003f8c:	697a      	ldr	r2, [r7, #20]
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f94:	613b      	str	r3, [r7, #16]
 8003f96:	e001      	b.n	8003f9c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003f98:	2300      	movs	r3, #0
 8003f9a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003f9c:	693b      	ldr	r3, [r7, #16]
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	371c      	adds	r7, #28
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr
 8003faa:	bf00      	nop
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	00f42400 	.word	0x00f42400
 8003fb4:	007a1200 	.word	0x007a1200

08003fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fbc:	4b03      	ldr	r3, [pc, #12]	@ (8003fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8003fbe:	681b      	ldr	r3, [r3, #0]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr
 8003fca:	bf00      	nop
 8003fcc:	20000000 	.word	0x20000000

08003fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003fd4:	f7ff fff0 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	4b06      	ldr	r3, [pc, #24]	@ (8003ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	0a1b      	lsrs	r3, r3, #8
 8003fe0:	f003 0307 	and.w	r3, r3, #7
 8003fe4:	4904      	ldr	r1, [pc, #16]	@ (8003ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003fe6:	5ccb      	ldrb	r3, [r1, r3]
 8003fe8:	f003 031f 	and.w	r3, r3, #31
 8003fec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	40021000 	.word	0x40021000
 8003ff8:	0800cc84 	.word	0x0800cc84

08003ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004000:	f7ff ffda 	bl	8003fb8 <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b06      	ldr	r3, [pc, #24]	@ (8004020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	0adb      	lsrs	r3, r3, #11
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4904      	ldr	r1, [pc, #16]	@ (8004024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	f003 031f 	and.w	r3, r3, #31
 8004018:	fa22 f303 	lsr.w	r3, r2, r3
}
 800401c:	4618      	mov	r0, r3
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40021000 	.word	0x40021000
 8004024:	0800cc84 	.word	0x0800cc84

08004028 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004028:	b480      	push	{r7}
 800402a:	b083      	sub	sp, #12
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	220f      	movs	r2, #15
 8004036:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004038:	4b12      	ldr	r3, [pc, #72]	@ (8004084 <HAL_RCC_GetClockConfig+0x5c>)
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 0203 	and.w	r2, r3, #3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004044:	4b0f      	ldr	r3, [pc, #60]	@ (8004084 <HAL_RCC_GetClockConfig+0x5c>)
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004050:	4b0c      	ldr	r3, [pc, #48]	@ (8004084 <HAL_RCC_GetClockConfig+0x5c>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800405c:	4b09      	ldr	r3, [pc, #36]	@ (8004084 <HAL_RCC_GetClockConfig+0x5c>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	08db      	lsrs	r3, r3, #3
 8004062:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800406a:	4b07      	ldr	r3, [pc, #28]	@ (8004088 <HAL_RCC_GetClockConfig+0x60>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 020f 	and.w	r2, r3, #15
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	601a      	str	r2, [r3, #0]
}
 8004076:	bf00      	nop
 8004078:	370c      	adds	r7, #12
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40021000 	.word	0x40021000
 8004088:	40022000 	.word	0x40022000

0800408c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800408c:	b480      	push	{r7}
 800408e:	b087      	sub	sp, #28
 8004090:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004092:	4b1e      	ldr	r3, [pc, #120]	@ (800410c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800409c:	4b1b      	ldr	r3, [pc, #108]	@ (800410c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	091b      	lsrs	r3, r3, #4
 80040a2:	f003 030f 	and.w	r3, r3, #15
 80040a6:	3301      	adds	r3, #1
 80040a8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80040aa:	693b      	ldr	r3, [r7, #16]
 80040ac:	2b03      	cmp	r3, #3
 80040ae:	d10c      	bne.n	80040ca <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040b0:	4a17      	ldr	r2, [pc, #92]	@ (8004110 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80040b8:	4a14      	ldr	r2, [pc, #80]	@ (800410c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040ba:	68d2      	ldr	r2, [r2, #12]
 80040bc:	0a12      	lsrs	r2, r2, #8
 80040be:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040c2:	fb02 f303 	mul.w	r3, r2, r3
 80040c6:	617b      	str	r3, [r7, #20]
    break;
 80040c8:	e00c      	b.n	80040e4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80040ca:	4a12      	ldr	r2, [pc, #72]	@ (8004114 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d2:	4a0e      	ldr	r2, [pc, #56]	@ (800410c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040d4:	68d2      	ldr	r2, [r2, #12]
 80040d6:	0a12      	lsrs	r2, r2, #8
 80040d8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80040dc:	fb02 f303 	mul.w	r3, r2, r3
 80040e0:	617b      	str	r3, [r7, #20]
    break;
 80040e2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80040e4:	4b09      	ldr	r3, [pc, #36]	@ (800410c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	0e5b      	lsrs	r3, r3, #25
 80040ea:	f003 0303 	and.w	r3, r3, #3
 80040ee:	3301      	adds	r3, #1
 80040f0:	005b      	lsls	r3, r3, #1
 80040f2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	68bb      	ldr	r3, [r7, #8]
 80040f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040fc:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80040fe:	687b      	ldr	r3, [r7, #4]
}
 8004100:	4618      	mov	r0, r3
 8004102:	371c      	adds	r7, #28
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	40021000 	.word	0x40021000
 8004110:	007a1200 	.word	0x007a1200
 8004114:	00f42400 	.word	0x00f42400

08004118 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b086      	sub	sp, #24
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004120:	2300      	movs	r3, #0
 8004122:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004124:	2300      	movs	r3, #0
 8004126:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004130:	2b00      	cmp	r3, #0
 8004132:	f000 8098 	beq.w	8004266 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004136:	2300      	movs	r3, #0
 8004138:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800413a:	4b43      	ldr	r3, [pc, #268]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800413c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004142:	2b00      	cmp	r3, #0
 8004144:	d10d      	bne.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004146:	4b40      	ldr	r3, [pc, #256]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004148:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800414a:	4a3f      	ldr	r2, [pc, #252]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800414c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004150:	6593      	str	r3, [r2, #88]	@ 0x58
 8004152:	4b3d      	ldr	r3, [pc, #244]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004154:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800415a:	60bb      	str	r3, [r7, #8]
 800415c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800415e:	2301      	movs	r3, #1
 8004160:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004162:	4b3a      	ldr	r3, [pc, #232]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a39      	ldr	r2, [pc, #228]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004168:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800416c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800416e:	f7fe fcc7 	bl	8002b00 <HAL_GetTick>
 8004172:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004174:	e009      	b.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004176:	f7fe fcc3 	bl	8002b00 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d902      	bls.n	800418a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	74fb      	strb	r3, [r7, #19]
        break;
 8004188:	e005      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800418a:	4b30      	ldr	r3, [pc, #192]	@ (800424c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004192:	2b00      	cmp	r3, #0
 8004194:	d0ef      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004196:	7cfb      	ldrb	r3, [r7, #19]
 8004198:	2b00      	cmp	r3, #0
 800419a:	d159      	bne.n	8004250 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800419c:	4b2a      	ldr	r3, [pc, #168]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800419e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80041a6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80041a8:	697b      	ldr	r3, [r7, #20]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d01e      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041b2:	697a      	ldr	r2, [r7, #20]
 80041b4:	429a      	cmp	r2, r3
 80041b6:	d019      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80041b8:	4b23      	ldr	r3, [pc, #140]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041c2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80041c4:	4b20      	ldr	r3, [pc, #128]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ca:	4a1f      	ldr	r2, [pc, #124]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80041d4:	4b1c      	ldr	r3, [pc, #112]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041da:	4a1b      	ldr	r2, [pc, #108]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041dc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80041e4:	4a18      	ldr	r2, [pc, #96]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	f003 0301 	and.w	r3, r3, #1
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d016      	beq.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f6:	f7fe fc83 	bl	8002b00 <HAL_GetTick>
 80041fa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80041fc:	e00b      	b.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80041fe:	f7fe fc7f 	bl	8002b00 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420c:	4293      	cmp	r3, r2
 800420e:	d902      	bls.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004210:	2303      	movs	r3, #3
 8004212:	74fb      	strb	r3, [r7, #19]
            break;
 8004214:	e006      	b.n	8004224 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004216:	4b0c      	ldr	r3, [pc, #48]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004218:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800421c:	f003 0302 	and.w	r3, r3, #2
 8004220:	2b00      	cmp	r3, #0
 8004222:	d0ec      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004224:	7cfb      	ldrb	r3, [r7, #19]
 8004226:	2b00      	cmp	r3, #0
 8004228:	d10b      	bne.n	8004242 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800422a:	4b07      	ldr	r3, [pc, #28]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800422c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004230:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004238:	4903      	ldr	r1, [pc, #12]	@ (8004248 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800423a:	4313      	orrs	r3, r2
 800423c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004240:	e008      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004242:	7cfb      	ldrb	r3, [r7, #19]
 8004244:	74bb      	strb	r3, [r7, #18]
 8004246:	e005      	b.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004248:	40021000 	.word	0x40021000
 800424c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004250:	7cfb      	ldrb	r3, [r7, #19]
 8004252:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004254:	7c7b      	ldrb	r3, [r7, #17]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d105      	bne.n	8004266 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800425a:	4ba7      	ldr	r3, [pc, #668]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800425c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800425e:	4aa6      	ldr	r2, [pc, #664]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004260:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004264:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f003 0301 	and.w	r3, r3, #1
 800426e:	2b00      	cmp	r3, #0
 8004270:	d00a      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004272:	4ba1      	ldr	r3, [pc, #644]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004278:	f023 0203 	bic.w	r2, r3, #3
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	499d      	ldr	r1, [pc, #628]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004282:	4313      	orrs	r3, r2
 8004284:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 0302 	and.w	r3, r3, #2
 8004290:	2b00      	cmp	r3, #0
 8004292:	d00a      	beq.n	80042aa <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004294:	4b98      	ldr	r3, [pc, #608]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800429a:	f023 020c 	bic.w	r2, r3, #12
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	689b      	ldr	r3, [r3, #8]
 80042a2:	4995      	ldr	r1, [pc, #596]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042a4:	4313      	orrs	r3, r2
 80042a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 0304 	and.w	r3, r3, #4
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00a      	beq.n	80042cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80042b6:	4b90      	ldr	r3, [pc, #576]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042bc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	498c      	ldr	r1, [pc, #560]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0308 	and.w	r3, r3, #8
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d00a      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80042d8:	4b87      	ldr	r3, [pc, #540]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042de:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	691b      	ldr	r3, [r3, #16]
 80042e6:	4984      	ldr	r1, [pc, #528]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 0310 	and.w	r3, r3, #16
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d00a      	beq.n	8004310 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80042fa:	4b7f      	ldr	r3, [pc, #508]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004300:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	695b      	ldr	r3, [r3, #20]
 8004308:	497b      	ldr	r1, [pc, #492]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800430a:	4313      	orrs	r3, r2
 800430c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b00      	cmp	r3, #0
 800431a:	d00a      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800431c:	4b76      	ldr	r3, [pc, #472]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004322:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	4973      	ldr	r1, [pc, #460]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800432c:	4313      	orrs	r3, r2
 800432e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00a      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800433e:	4b6e      	ldr	r3, [pc, #440]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004344:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	69db      	ldr	r3, [r3, #28]
 800434c:	496a      	ldr	r1, [pc, #424]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800434e:	4313      	orrs	r3, r2
 8004350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435c:	2b00      	cmp	r3, #0
 800435e:	d00a      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004360:	4b65      	ldr	r3, [pc, #404]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004366:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6a1b      	ldr	r3, [r3, #32]
 800436e:	4962      	ldr	r1, [pc, #392]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004370:	4313      	orrs	r3, r2
 8004372:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800437e:	2b00      	cmp	r3, #0
 8004380:	d00a      	beq.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004382:	4b5d      	ldr	r3, [pc, #372]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004388:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004390:	4959      	ldr	r1, [pc, #356]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* I2C3 */
#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80043a4:	4b54      	ldr	r3, [pc, #336]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043a6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80043aa:	f023 0203 	bic.w	r2, r3, #3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b2:	4951      	ldr	r1, [pc, #324]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043b4:	4313      	orrs	r3, r2
 80043b6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d00a      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80043c6:	4b4c      	ldr	r3, [pc, #304]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043cc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d4:	4948      	ldr	r1, [pc, #288]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043d6:	4313      	orrs	r3, r2
 80043d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d015      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043e8:	4b43      	ldr	r3, [pc, #268]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80043f6:	4940      	ldr	r1, [pc, #256]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80043f8:	4313      	orrs	r3, r2
 80043fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004402:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004406:	d105      	bne.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004408:	4b3b      	ldr	r3, [pc, #236]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	4a3a      	ldr	r2, [pc, #232]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800440e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004412:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800441c:	2b00      	cmp	r3, #0
 800441e:	d015      	beq.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004420:	4b35      	ldr	r3, [pc, #212]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004426:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800442e:	4932      	ldr	r1, [pc, #200]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800443a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800443e:	d105      	bne.n	800444c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004440:	4b2d      	ldr	r3, [pc, #180]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004442:	68db      	ldr	r3, [r3, #12]
 8004444:	4a2c      	ldr	r2, [pc, #176]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004446:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800444a:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004454:	2b00      	cmp	r3, #0
 8004456:	d015      	beq.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004458:	4b27      	ldr	r3, [pc, #156]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800445e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004466:	4924      	ldr	r1, [pc, #144]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004468:	4313      	orrs	r3, r2
 800446a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004472:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004476:	d105      	bne.n	8004484 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004478:	4b1f      	ldr	r3, [pc, #124]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	4a1e      	ldr	r2, [pc, #120]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800447e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004482:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800448c:	2b00      	cmp	r3, #0
 800448e:	d015      	beq.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004490:	4b19      	ldr	r3, [pc, #100]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004492:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004496:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449e:	4916      	ldr	r1, [pc, #88]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044a0:	4313      	orrs	r3, r2
 80044a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044ae:	d105      	bne.n	80044bc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044b0:	4b11      	ldr	r3, [pc, #68]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	4a10      	ldr	r2, [pc, #64]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044ba:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d019      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80044c8:	4b0b      	ldr	r3, [pc, #44]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044ce:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044d6:	4908      	ldr	r1, [pc, #32]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044d8:	4313      	orrs	r3, r2
 80044da:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044e6:	d109      	bne.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80044e8:	4b03      	ldr	r3, [pc, #12]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ea:	68db      	ldr	r3, [r3, #12]
 80044ec:	4a02      	ldr	r2, [pc, #8]	@ (80044f8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80044ee:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80044f2:	60d3      	str	r3, [r2, #12]
 80044f4:	e002      	b.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80044f6:	bf00      	nop
 80044f8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004504:	2b00      	cmp	r3, #0
 8004506:	d015      	beq.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004508:	4b29      	ldr	r3, [pc, #164]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800450a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800450e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004516:	4926      	ldr	r1, [pc, #152]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004518:	4313      	orrs	r3, r2
 800451a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004522:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004526:	d105      	bne.n	8004534 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004528:	4b21      	ldr	r3, [pc, #132]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800452a:	68db      	ldr	r3, [r3, #12]
 800452c:	4a20      	ldr	r2, [pc, #128]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800452e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004532:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800453c:	2b00      	cmp	r3, #0
 800453e:	d015      	beq.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004540:	4b1b      	ldr	r3, [pc, #108]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004542:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004546:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800454e:	4918      	ldr	r1, [pc, #96]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004550:	4313      	orrs	r3, r2
 8004552:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800455a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800455e:	d105      	bne.n	800456c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004560:	4b13      	ldr	r3, [pc, #76]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	4a12      	ldr	r2, [pc, #72]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004566:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800456a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d015      	beq.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004578:	4b0d      	ldr	r3, [pc, #52]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800457a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800457e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004586:	490a      	ldr	r1, [pc, #40]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004588:	4313      	orrs	r3, r2
 800458a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004592:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004596:	d105      	bne.n	80045a4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004598:	4b05      	ldr	r3, [pc, #20]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800459a:	68db      	ldr	r3, [r3, #12]
 800459c:	4a04      	ldr	r2, [pc, #16]	@ (80045b0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800459e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80045a2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80045a4:	7cbb      	ldrb	r3, [r7, #18]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	40021000 	.word	0x40021000

080045b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d101      	bne.n	80045c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e09d      	b.n	8004702 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d108      	bne.n	80045e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80045d6:	d009      	beq.n	80045ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	2200      	movs	r2, #0
 80045dc:	61da      	str	r2, [r3, #28]
 80045de:	e005      	b.n	80045ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	2200      	movs	r2, #0
 80045e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2200      	movs	r2, #0
 80045ea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2200      	movs	r2, #0
 80045f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80045f8:	b2db      	uxtb	r3, r3
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d106      	bne.n	800460c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f7fd fe56 	bl	80022b8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2202      	movs	r2, #2
 8004610:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004622:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68db      	ldr	r3, [r3, #12]
 8004628:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800462c:	d902      	bls.n	8004634 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800462e:	2300      	movs	r3, #0
 8004630:	60fb      	str	r3, [r7, #12]
 8004632:	e002      	b.n	800463a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004634:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8004638:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	68db      	ldr	r3, [r3, #12]
 800463e:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8004642:	d007      	beq.n	8004654 <HAL_SPI_Init+0xa0>
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800464c:	d002      	beq.n	8004654 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004664:	431a      	orrs	r2, r3
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	691b      	ldr	r3, [r3, #16]
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	431a      	orrs	r2, r3
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0301 	and.w	r3, r3, #1
 8004678:	431a      	orrs	r2, r3
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004682:	431a      	orrs	r2, r3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800468c:	431a      	orrs	r2, r3
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6a1b      	ldr	r3, [r3, #32]
 8004692:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004696:	ea42 0103 	orr.w	r1, r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800469e:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	430a      	orrs	r2, r1
 80046a8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	699b      	ldr	r3, [r3, #24]
 80046ae:	0c1b      	lsrs	r3, r3, #16
 80046b0:	f003 0204 	and.w	r2, r3, #4
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046b8:	f003 0310 	and.w	r3, r3, #16
 80046bc:	431a      	orrs	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046c2:	f003 0308 	and.w	r3, r3, #8
 80046c6:	431a      	orrs	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	68db      	ldr	r3, [r3, #12]
 80046cc:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80046d0:	ea42 0103 	orr.w	r1, r2, r3
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	430a      	orrs	r2, r1
 80046e0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	69da      	ldr	r2, [r3, #28]
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80046f0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3710      	adds	r7, #16
 8004706:	46bd      	mov	sp, r7
 8004708:	bd80      	pop	{r7, pc}

0800470a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800470a:	b580      	push	{r7, lr}
 800470c:	b082      	sub	sp, #8
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e049      	b.n	80047b0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004722:	b2db      	uxtb	r3, r3
 8004724:	2b00      	cmp	r3, #0
 8004726:	d106      	bne.n	8004736 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2200      	movs	r2, #0
 800472c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f7fd fe05 	bl	8002340 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	2202      	movs	r2, #2
 800473a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	3304      	adds	r3, #4
 8004746:	4619      	mov	r1, r3
 8004748:	4610      	mov	r0, r2
 800474a:	f000 fdaf 	bl	80052ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2201      	movs	r2, #1
 8004752:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2201      	movs	r2, #1
 800475a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	2201      	movs	r2, #1
 8004772:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2201      	movs	r2, #1
 800477a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2201      	movs	r2, #1
 8004782:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2201      	movs	r2, #1
 800478a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2201      	movs	r2, #1
 8004792:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2201      	movs	r2, #1
 800479a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2201      	movs	r2, #1
 80047aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	3708      	adds	r7, #8
 80047b4:	46bd      	mov	sp, r7
 80047b6:	bd80      	pop	{r7, pc}

080047b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b085      	sub	sp, #20
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d001      	beq.n	80047d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80047cc:	2301      	movs	r3, #1
 80047ce:	e054      	b.n	800487a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2202      	movs	r2, #2
 80047d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f042 0201 	orr.w	r2, r2, #1
 80047e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4a26      	ldr	r2, [pc, #152]	@ (8004888 <HAL_TIM_Base_Start_IT+0xd0>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d022      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x80>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047fa:	d01d      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x80>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a22      	ldr	r2, [pc, #136]	@ (800488c <HAL_TIM_Base_Start_IT+0xd4>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d018      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x80>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a21      	ldr	r2, [pc, #132]	@ (8004890 <HAL_TIM_Base_Start_IT+0xd8>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d013      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x80>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1f      	ldr	r2, [pc, #124]	@ (8004894 <HAL_TIM_Base_Start_IT+0xdc>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d00e      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x80>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	4a1e      	ldr	r2, [pc, #120]	@ (8004898 <HAL_TIM_Base_Start_IT+0xe0>)
 8004820:	4293      	cmp	r3, r2
 8004822:	d009      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x80>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4a1c      	ldr	r2, [pc, #112]	@ (800489c <HAL_TIM_Base_Start_IT+0xe4>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d004      	beq.n	8004838 <HAL_TIM_Base_Start_IT+0x80>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a1b      	ldr	r2, [pc, #108]	@ (80048a0 <HAL_TIM_Base_Start_IT+0xe8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d115      	bne.n	8004864 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	689a      	ldr	r2, [r3, #8]
 800483e:	4b19      	ldr	r3, [pc, #100]	@ (80048a4 <HAL_TIM_Base_Start_IT+0xec>)
 8004840:	4013      	ands	r3, r2
 8004842:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	2b06      	cmp	r3, #6
 8004848:	d015      	beq.n	8004876 <HAL_TIM_Base_Start_IT+0xbe>
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004850:	d011      	beq.n	8004876 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	681a      	ldr	r2, [r3, #0]
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f042 0201 	orr.w	r2, r2, #1
 8004860:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004862:	e008      	b.n	8004876 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f042 0201 	orr.w	r2, r2, #1
 8004872:	601a      	str	r2, [r3, #0]
 8004874:	e000      	b.n	8004878 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004876:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004878:	2300      	movs	r3, #0
}
 800487a:	4618      	mov	r0, r3
 800487c:	3714      	adds	r7, #20
 800487e:	46bd      	mov	sp, r7
 8004880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004884:	4770      	bx	lr
 8004886:	bf00      	nop
 8004888:	40012c00 	.word	0x40012c00
 800488c:	40000400 	.word	0x40000400
 8004890:	40000800 	.word	0x40000800
 8004894:	40000c00 	.word	0x40000c00
 8004898:	40013400 	.word	0x40013400
 800489c:	40014000 	.word	0x40014000
 80048a0:	40015000 	.word	0x40015000
 80048a4:	00010007 	.word	0x00010007

080048a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e049      	b.n	800494e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d106      	bne.n	80048d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7fd fd7e 	bl	80023d0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2202      	movs	r2, #2
 80048d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681a      	ldr	r2, [r3, #0]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f000 fce0 	bl	80052ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2201      	movs	r2, #1
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2201      	movs	r2, #1
 8004908:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	2201      	movs	r2, #1
 8004910:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2201      	movs	r2, #1
 8004918:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2201      	movs	r2, #1
 8004928:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2201      	movs	r2, #1
 8004930:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2201      	movs	r2, #1
 8004938:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	2201      	movs	r2, #1
 8004940:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2201      	movs	r2, #1
 8004948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800494c:	2300      	movs	r3, #0
}
 800494e:	4618      	mov	r0, r3
 8004950:	3708      	adds	r7, #8
 8004952:	46bd      	mov	sp, r7
 8004954:	bd80      	pop	{r7, pc}
	...

08004958 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b084      	sub	sp, #16
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
 8004960:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d109      	bne.n	800497c <HAL_TIM_PWM_Start+0x24>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800496e:	b2db      	uxtb	r3, r3
 8004970:	2b01      	cmp	r3, #1
 8004972:	bf14      	ite	ne
 8004974:	2301      	movne	r3, #1
 8004976:	2300      	moveq	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	e03c      	b.n	80049f6 <HAL_TIM_PWM_Start+0x9e>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	2b04      	cmp	r3, #4
 8004980:	d109      	bne.n	8004996 <HAL_TIM_PWM_Start+0x3e>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b01      	cmp	r3, #1
 800498c:	bf14      	ite	ne
 800498e:	2301      	movne	r3, #1
 8004990:	2300      	moveq	r3, #0
 8004992:	b2db      	uxtb	r3, r3
 8004994:	e02f      	b.n	80049f6 <HAL_TIM_PWM_Start+0x9e>
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	2b08      	cmp	r3, #8
 800499a:	d109      	bne.n	80049b0 <HAL_TIM_PWM_Start+0x58>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80049a2:	b2db      	uxtb	r3, r3
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	bf14      	ite	ne
 80049a8:	2301      	movne	r3, #1
 80049aa:	2300      	moveq	r3, #0
 80049ac:	b2db      	uxtb	r3, r3
 80049ae:	e022      	b.n	80049f6 <HAL_TIM_PWM_Start+0x9e>
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	2b0c      	cmp	r3, #12
 80049b4:	d109      	bne.n	80049ca <HAL_TIM_PWM_Start+0x72>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	2b01      	cmp	r3, #1
 80049c0:	bf14      	ite	ne
 80049c2:	2301      	movne	r3, #1
 80049c4:	2300      	moveq	r3, #0
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	e015      	b.n	80049f6 <HAL_TIM_PWM_Start+0x9e>
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	2b10      	cmp	r3, #16
 80049ce:	d109      	bne.n	80049e4 <HAL_TIM_PWM_Start+0x8c>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049d6:	b2db      	uxtb	r3, r3
 80049d8:	2b01      	cmp	r3, #1
 80049da:	bf14      	ite	ne
 80049dc:	2301      	movne	r3, #1
 80049de:	2300      	moveq	r3, #0
 80049e0:	b2db      	uxtb	r3, r3
 80049e2:	e008      	b.n	80049f6 <HAL_TIM_PWM_Start+0x9e>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80049ea:	b2db      	uxtb	r3, r3
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	bf14      	ite	ne
 80049f0:	2301      	movne	r3, #1
 80049f2:	2300      	moveq	r3, #0
 80049f4:	b2db      	uxtb	r3, r3
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e0a6      	b.n	8004b4c <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d104      	bne.n	8004a0e <HAL_TIM_PWM_Start+0xb6>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2202      	movs	r2, #2
 8004a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a0c:	e023      	b.n	8004a56 <HAL_TIM_PWM_Start+0xfe>
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	2b04      	cmp	r3, #4
 8004a12:	d104      	bne.n	8004a1e <HAL_TIM_PWM_Start+0xc6>
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a1c:	e01b      	b.n	8004a56 <HAL_TIM_PWM_Start+0xfe>
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	2b08      	cmp	r3, #8
 8004a22:	d104      	bne.n	8004a2e <HAL_TIM_PWM_Start+0xd6>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2202      	movs	r2, #2
 8004a28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004a2c:	e013      	b.n	8004a56 <HAL_TIM_PWM_Start+0xfe>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b0c      	cmp	r3, #12
 8004a32:	d104      	bne.n	8004a3e <HAL_TIM_PWM_Start+0xe6>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2202      	movs	r2, #2
 8004a38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004a3c:	e00b      	b.n	8004a56 <HAL_TIM_PWM_Start+0xfe>
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	2b10      	cmp	r3, #16
 8004a42:	d104      	bne.n	8004a4e <HAL_TIM_PWM_Start+0xf6>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2202      	movs	r2, #2
 8004a48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004a4c:	e003      	b.n	8004a56 <HAL_TIM_PWM_Start+0xfe>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2202      	movs	r2, #2
 8004a52:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	6839      	ldr	r1, [r7, #0]
 8004a5e:	4618      	mov	r0, r3
 8004a60:	f001 f89e 	bl	8005ba0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a3a      	ldr	r2, [pc, #232]	@ (8004b54 <HAL_TIM_PWM_Start+0x1fc>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d018      	beq.n	8004aa0 <HAL_TIM_PWM_Start+0x148>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	4a39      	ldr	r2, [pc, #228]	@ (8004b58 <HAL_TIM_PWM_Start+0x200>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d013      	beq.n	8004aa0 <HAL_TIM_PWM_Start+0x148>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	4a37      	ldr	r2, [pc, #220]	@ (8004b5c <HAL_TIM_PWM_Start+0x204>)
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d00e      	beq.n	8004aa0 <HAL_TIM_PWM_Start+0x148>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a36      	ldr	r2, [pc, #216]	@ (8004b60 <HAL_TIM_PWM_Start+0x208>)
 8004a88:	4293      	cmp	r3, r2
 8004a8a:	d009      	beq.n	8004aa0 <HAL_TIM_PWM_Start+0x148>
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	4a34      	ldr	r2, [pc, #208]	@ (8004b64 <HAL_TIM_PWM_Start+0x20c>)
 8004a92:	4293      	cmp	r3, r2
 8004a94:	d004      	beq.n	8004aa0 <HAL_TIM_PWM_Start+0x148>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	4a33      	ldr	r2, [pc, #204]	@ (8004b68 <HAL_TIM_PWM_Start+0x210>)
 8004a9c:	4293      	cmp	r3, r2
 8004a9e:	d101      	bne.n	8004aa4 <HAL_TIM_PWM_Start+0x14c>
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e000      	b.n	8004aa6 <HAL_TIM_PWM_Start+0x14e>
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d007      	beq.n	8004aba <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004ab8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	4a25      	ldr	r2, [pc, #148]	@ (8004b54 <HAL_TIM_PWM_Start+0x1fc>)
 8004ac0:	4293      	cmp	r3, r2
 8004ac2:	d022      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x1b2>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004acc:	d01d      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x1b2>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4a26      	ldr	r2, [pc, #152]	@ (8004b6c <HAL_TIM_PWM_Start+0x214>)
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d018      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x1b2>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a24      	ldr	r2, [pc, #144]	@ (8004b70 <HAL_TIM_PWM_Start+0x218>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d013      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x1b2>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	4a23      	ldr	r2, [pc, #140]	@ (8004b74 <HAL_TIM_PWM_Start+0x21c>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00e      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x1b2>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a19      	ldr	r2, [pc, #100]	@ (8004b58 <HAL_TIM_PWM_Start+0x200>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d009      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x1b2>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a18      	ldr	r2, [pc, #96]	@ (8004b5c <HAL_TIM_PWM_Start+0x204>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d004      	beq.n	8004b0a <HAL_TIM_PWM_Start+0x1b2>
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	4a18      	ldr	r2, [pc, #96]	@ (8004b68 <HAL_TIM_PWM_Start+0x210>)
 8004b06:	4293      	cmp	r3, r2
 8004b08:	d115      	bne.n	8004b36 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	689a      	ldr	r2, [r3, #8]
 8004b10:	4b19      	ldr	r3, [pc, #100]	@ (8004b78 <HAL_TIM_PWM_Start+0x220>)
 8004b12:	4013      	ands	r3, r2
 8004b14:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2b06      	cmp	r3, #6
 8004b1a:	d015      	beq.n	8004b48 <HAL_TIM_PWM_Start+0x1f0>
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b22:	d011      	beq.n	8004b48 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b34:	e008      	b.n	8004b48 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	681a      	ldr	r2, [r3, #0]
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f042 0201 	orr.w	r2, r2, #1
 8004b44:	601a      	str	r2, [r3, #0]
 8004b46:	e000      	b.n	8004b4a <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b48:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004b4a:	2300      	movs	r3, #0
}
 8004b4c:	4618      	mov	r0, r3
 8004b4e:	3710      	adds	r7, #16
 8004b50:	46bd      	mov	sp, r7
 8004b52:	bd80      	pop	{r7, pc}
 8004b54:	40012c00 	.word	0x40012c00
 8004b58:	40013400 	.word	0x40013400
 8004b5c:	40014000 	.word	0x40014000
 8004b60:	40014400 	.word	0x40014400
 8004b64:	40014800 	.word	0x40014800
 8004b68:	40015000 	.word	0x40015000
 8004b6c:	40000400 	.word	0x40000400
 8004b70:	40000800 	.word	0x40000800
 8004b74:	40000c00 	.word	0x40000c00
 8004b78:	00010007 	.word	0x00010007

08004b7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68db      	ldr	r3, [r3, #12]
 8004b8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	691b      	ldr	r3, [r3, #16]
 8004b92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	f003 0302 	and.w	r3, r3, #2
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d020      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d01b      	beq.n	8004be0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	f06f 0202 	mvn.w	r2, #2
 8004bb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f003 0303 	and.w	r3, r3, #3
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d003      	beq.n	8004bce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f000 fb52 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8004bcc:	e005      	b.n	8004bda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fb44 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bd4:	6878      	ldr	r0, [r7, #4]
 8004bd6:	f000 fb55 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2200      	movs	r2, #0
 8004bde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004be0:	68bb      	ldr	r3, [r7, #8]
 8004be2:	f003 0304 	and.w	r3, r3, #4
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d020      	beq.n	8004c2c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01b      	beq.n	8004c2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f06f 0204 	mvn.w	r2, #4
 8004bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2202      	movs	r2, #2
 8004c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	699b      	ldr	r3, [r3, #24]
 8004c0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d003      	beq.n	8004c1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f000 fb2c 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8004c18:	e005      	b.n	8004c26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c1a:	6878      	ldr	r0, [r7, #4]
 8004c1c:	f000 fb1e 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 fb2f 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	2200      	movs	r2, #0
 8004c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	f003 0308 	and.w	r3, r3, #8
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d020      	beq.n	8004c78 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	f003 0308 	and.w	r3, r3, #8
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d01b      	beq.n	8004c78 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f06f 0208 	mvn.w	r2, #8
 8004c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2204      	movs	r2, #4
 8004c4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	69db      	ldr	r3, [r3, #28]
 8004c56:	f003 0303 	and.w	r3, r3, #3
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d003      	beq.n	8004c66 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004c5e:	6878      	ldr	r0, [r7, #4]
 8004c60:	f000 fb06 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8004c64:	e005      	b.n	8004c72 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 faf8 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 fb09 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	f003 0310 	and.w	r3, r3, #16
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d020      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	f003 0310 	and.w	r3, r3, #16
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d01b      	beq.n	8004cc4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f06f 0210 	mvn.w	r2, #16
 8004c94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2208      	movs	r2, #8
 8004c9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	69db      	ldr	r3, [r3, #28]
 8004ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d003      	beq.n	8004cb2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 fae0 	bl	8005270 <HAL_TIM_IC_CaptureCallback>
 8004cb0:	e005      	b.n	8004cbe <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 fad2 	bl	800525c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004cb8:	6878      	ldr	r0, [r7, #4]
 8004cba:	f000 fae3 	bl	8005284 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	2200      	movs	r2, #0
 8004cc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00c      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	f003 0301 	and.w	r3, r3, #1
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d007      	beq.n	8004ce8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	f06f 0201 	mvn.w	r2, #1
 8004ce0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ce2:	6878      	ldr	r0, [r7, #4]
 8004ce4:	f7fd faac 	bl	8002240 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ce8:	68bb      	ldr	r3, [r7, #8]
 8004cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d104      	bne.n	8004cfc <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004cf2:	68bb      	ldr	r3, [r7, #8]
 8004cf4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d00c      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d007      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004d0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004d10:	6878      	ldr	r0, [r7, #4]
 8004d12:	f001 f89f 	bl	8005e54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d00c      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d007      	beq.n	8004d3a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004d32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f001 f897 	bl	8005e68 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d00c      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d007      	beq.n	8004d5e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004d56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004d58:	6878      	ldr	r0, [r7, #4]
 8004d5a:	f000 fa9d 	bl	8005298 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	f003 0320 	and.w	r3, r3, #32
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d00c      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	f003 0320 	and.w	r3, r3, #32
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d007      	beq.n	8004d82 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f06f 0220 	mvn.w	r2, #32
 8004d7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004d7c:	6878      	ldr	r0, [r7, #4]
 8004d7e:	f001 f85f 	bl	8005e40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d00c      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d007      	beq.n	8004da6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8004d9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004da0:	6878      	ldr	r0, [r7, #4]
 8004da2:	f001 f86b 	bl	8005e7c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d00c      	beq.n	8004dca <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d007      	beq.n	8004dca <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8004dc2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f001 f863 	bl	8005e90 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8004dca:	68bb      	ldr	r3, [r7, #8]
 8004dcc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d00c      	beq.n	8004dee <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d007      	beq.n	8004dee <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8004de6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004de8:	6878      	ldr	r0, [r7, #4]
 8004dea:	f001 f85b 	bl	8005ea4 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00c      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d007      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8004e0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f001 f853 	bl	8005eb8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004e12:	bf00      	nop
 8004e14:	3710      	adds	r7, #16
 8004e16:	46bd      	mov	sp, r7
 8004e18:	bd80      	pop	{r7, pc}
	...

08004e1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004e1c:	b580      	push	{r7, lr}
 8004e1e:	b086      	sub	sp, #24
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	60f8      	str	r0, [r7, #12]
 8004e24:	60b9      	str	r1, [r7, #8]
 8004e26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d101      	bne.n	8004e3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004e36:	2302      	movs	r3, #2
 8004e38:	e0ff      	b.n	800503a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	2b14      	cmp	r3, #20
 8004e46:	f200 80f0 	bhi.w	800502a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004e4a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004e4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e50:	08004ea5 	.word	0x08004ea5
 8004e54:	0800502b 	.word	0x0800502b
 8004e58:	0800502b 	.word	0x0800502b
 8004e5c:	0800502b 	.word	0x0800502b
 8004e60:	08004ee5 	.word	0x08004ee5
 8004e64:	0800502b 	.word	0x0800502b
 8004e68:	0800502b 	.word	0x0800502b
 8004e6c:	0800502b 	.word	0x0800502b
 8004e70:	08004f27 	.word	0x08004f27
 8004e74:	0800502b 	.word	0x0800502b
 8004e78:	0800502b 	.word	0x0800502b
 8004e7c:	0800502b 	.word	0x0800502b
 8004e80:	08004f67 	.word	0x08004f67
 8004e84:	0800502b 	.word	0x0800502b
 8004e88:	0800502b 	.word	0x0800502b
 8004e8c:	0800502b 	.word	0x0800502b
 8004e90:	08004fa9 	.word	0x08004fa9
 8004e94:	0800502b 	.word	0x0800502b
 8004e98:	0800502b 	.word	0x0800502b
 8004e9c:	0800502b 	.word	0x0800502b
 8004ea0:	08004fe9 	.word	0x08004fe9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	68b9      	ldr	r1, [r7, #8]
 8004eaa:	4618      	mov	r0, r3
 8004eac:	f000 fab2 	bl	8005414 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	699a      	ldr	r2, [r3, #24]
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f042 0208 	orr.w	r2, r2, #8
 8004ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	699a      	ldr	r2, [r3, #24]
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0204 	bic.w	r2, r2, #4
 8004ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	6999      	ldr	r1, [r3, #24]
 8004ed6:	68bb      	ldr	r3, [r7, #8]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	430a      	orrs	r2, r1
 8004ee0:	619a      	str	r2, [r3, #24]
      break;
 8004ee2:	e0a5      	b.n	8005030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	68b9      	ldr	r1, [r7, #8]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 fb2c 	bl	8005548 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	699a      	ldr	r2, [r3, #24]
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004efe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	699a      	ldr	r2, [r3, #24]
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f0e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	6999      	ldr	r1, [r3, #24]
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	691b      	ldr	r3, [r3, #16]
 8004f1a:	021a      	lsls	r2, r3, #8
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	430a      	orrs	r2, r1
 8004f22:	619a      	str	r2, [r3, #24]
      break;
 8004f24:	e084      	b.n	8005030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68b9      	ldr	r1, [r7, #8]
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f000 fb9f 	bl	8005670 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	69da      	ldr	r2, [r3, #28]
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	f042 0208 	orr.w	r2, r2, #8
 8004f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	69da      	ldr	r2, [r3, #28]
 8004f48:	68fb      	ldr	r3, [r7, #12]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f022 0204 	bic.w	r2, r2, #4
 8004f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	69d9      	ldr	r1, [r3, #28]
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	691a      	ldr	r2, [r3, #16]
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	61da      	str	r2, [r3, #28]
      break;
 8004f64:	e064      	b.n	8005030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	68b9      	ldr	r1, [r7, #8]
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f000 fc11 	bl	8005794 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	69da      	ldr	r2, [r3, #28]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f80:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	69da      	ldr	r2, [r3, #28]
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f90:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	69d9      	ldr	r1, [r3, #28]
 8004f98:	68bb      	ldr	r3, [r7, #8]
 8004f9a:	691b      	ldr	r3, [r3, #16]
 8004f9c:	021a      	lsls	r2, r3, #8
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	430a      	orrs	r2, r1
 8004fa4:	61da      	str	r2, [r3, #28]
      break;
 8004fa6:	e043      	b.n	8005030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	68b9      	ldr	r1, [r7, #8]
 8004fae:	4618      	mov	r0, r3
 8004fb0:	f000 fc84 	bl	80058bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004fb4:	68fb      	ldr	r3, [r7, #12]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f042 0208 	orr.w	r2, r2, #8
 8004fc2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f022 0204 	bic.w	r2, r2, #4
 8004fd2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	691a      	ldr	r2, [r3, #16]
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	430a      	orrs	r2, r1
 8004fe4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8004fe6:	e023      	b.n	8005030 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 fcce 	bl	8005990 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005002:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005012:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	691b      	ldr	r3, [r3, #16]
 800501e:	021a      	lsls	r2, r3, #8
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	430a      	orrs	r2, r1
 8005026:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005028:	e002      	b.n	8005030 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800502a:	2301      	movs	r3, #1
 800502c:	75fb      	strb	r3, [r7, #23]
      break;
 800502e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005038:	7dfb      	ldrb	r3, [r7, #23]
}
 800503a:	4618      	mov	r0, r3
 800503c:	3718      	adds	r7, #24
 800503e:	46bd      	mov	sp, r7
 8005040:	bd80      	pop	{r7, pc}
 8005042:	bf00      	nop

08005044 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800504e:	2300      	movs	r3, #0
 8005050:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005058:	2b01      	cmp	r3, #1
 800505a:	d101      	bne.n	8005060 <HAL_TIM_ConfigClockSource+0x1c>
 800505c:	2302      	movs	r3, #2
 800505e:	e0ee      	b.n	800523e <HAL_TIM_ConfigClockSource+0x1fa>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	2201      	movs	r2, #1
 8005064:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	2202      	movs	r2, #2
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	689b      	ldr	r3, [r3, #8]
 8005076:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800507e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8005082:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800508a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	68ba      	ldr	r2, [r7, #8]
 8005092:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a6b      	ldr	r2, [pc, #428]	@ (8005248 <HAL_TIM_ConfigClockSource+0x204>)
 800509a:	4293      	cmp	r3, r2
 800509c:	f000 80b9 	beq.w	8005212 <HAL_TIM_ConfigClockSource+0x1ce>
 80050a0:	4a69      	ldr	r2, [pc, #420]	@ (8005248 <HAL_TIM_ConfigClockSource+0x204>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	f200 80be 	bhi.w	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 80050a8:	4a68      	ldr	r2, [pc, #416]	@ (800524c <HAL_TIM_ConfigClockSource+0x208>)
 80050aa:	4293      	cmp	r3, r2
 80050ac:	f000 80b1 	beq.w	8005212 <HAL_TIM_ConfigClockSource+0x1ce>
 80050b0:	4a66      	ldr	r2, [pc, #408]	@ (800524c <HAL_TIM_ConfigClockSource+0x208>)
 80050b2:	4293      	cmp	r3, r2
 80050b4:	f200 80b6 	bhi.w	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 80050b8:	4a65      	ldr	r2, [pc, #404]	@ (8005250 <HAL_TIM_ConfigClockSource+0x20c>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	f000 80a9 	beq.w	8005212 <HAL_TIM_ConfigClockSource+0x1ce>
 80050c0:	4a63      	ldr	r2, [pc, #396]	@ (8005250 <HAL_TIM_ConfigClockSource+0x20c>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	f200 80ae 	bhi.w	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 80050c8:	4a62      	ldr	r2, [pc, #392]	@ (8005254 <HAL_TIM_ConfigClockSource+0x210>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	f000 80a1 	beq.w	8005212 <HAL_TIM_ConfigClockSource+0x1ce>
 80050d0:	4a60      	ldr	r2, [pc, #384]	@ (8005254 <HAL_TIM_ConfigClockSource+0x210>)
 80050d2:	4293      	cmp	r3, r2
 80050d4:	f200 80a6 	bhi.w	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 80050d8:	4a5f      	ldr	r2, [pc, #380]	@ (8005258 <HAL_TIM_ConfigClockSource+0x214>)
 80050da:	4293      	cmp	r3, r2
 80050dc:	f000 8099 	beq.w	8005212 <HAL_TIM_ConfigClockSource+0x1ce>
 80050e0:	4a5d      	ldr	r2, [pc, #372]	@ (8005258 <HAL_TIM_ConfigClockSource+0x214>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	f200 809e 	bhi.w	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 80050e8:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80050ec:	f000 8091 	beq.w	8005212 <HAL_TIM_ConfigClockSource+0x1ce>
 80050f0:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80050f4:	f200 8096 	bhi.w	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 80050f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050fc:	f000 8089 	beq.w	8005212 <HAL_TIM_ConfigClockSource+0x1ce>
 8005100:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005104:	f200 808e 	bhi.w	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 8005108:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800510c:	d03e      	beq.n	800518c <HAL_TIM_ConfigClockSource+0x148>
 800510e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005112:	f200 8087 	bhi.w	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 8005116:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800511a:	f000 8086 	beq.w	800522a <HAL_TIM_ConfigClockSource+0x1e6>
 800511e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005122:	d87f      	bhi.n	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 8005124:	2b70      	cmp	r3, #112	@ 0x70
 8005126:	d01a      	beq.n	800515e <HAL_TIM_ConfigClockSource+0x11a>
 8005128:	2b70      	cmp	r3, #112	@ 0x70
 800512a:	d87b      	bhi.n	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 800512c:	2b60      	cmp	r3, #96	@ 0x60
 800512e:	d050      	beq.n	80051d2 <HAL_TIM_ConfigClockSource+0x18e>
 8005130:	2b60      	cmp	r3, #96	@ 0x60
 8005132:	d877      	bhi.n	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 8005134:	2b50      	cmp	r3, #80	@ 0x50
 8005136:	d03c      	beq.n	80051b2 <HAL_TIM_ConfigClockSource+0x16e>
 8005138:	2b50      	cmp	r3, #80	@ 0x50
 800513a:	d873      	bhi.n	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 800513c:	2b40      	cmp	r3, #64	@ 0x40
 800513e:	d058      	beq.n	80051f2 <HAL_TIM_ConfigClockSource+0x1ae>
 8005140:	2b40      	cmp	r3, #64	@ 0x40
 8005142:	d86f      	bhi.n	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 8005144:	2b30      	cmp	r3, #48	@ 0x30
 8005146:	d064      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0x1ce>
 8005148:	2b30      	cmp	r3, #48	@ 0x30
 800514a:	d86b      	bhi.n	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 800514c:	2b20      	cmp	r3, #32
 800514e:	d060      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0x1ce>
 8005150:	2b20      	cmp	r3, #32
 8005152:	d867      	bhi.n	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
 8005154:	2b00      	cmp	r3, #0
 8005156:	d05c      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0x1ce>
 8005158:	2b10      	cmp	r3, #16
 800515a:	d05a      	beq.n	8005212 <HAL_TIM_ConfigClockSource+0x1ce>
 800515c:	e062      	b.n	8005224 <HAL_TIM_ConfigClockSource+0x1e0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800516e:	f000 fcf7 	bl	8005b60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005180:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68ba      	ldr	r2, [r7, #8]
 8005188:	609a      	str	r2, [r3, #8]
      break;
 800518a:	e04f      	b.n	800522c <HAL_TIM_ConfigClockSource+0x1e8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005194:	683b      	ldr	r3, [r7, #0]
 8005196:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800519c:	f000 fce0 	bl	8005b60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	689a      	ldr	r2, [r3, #8]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80051ae:	609a      	str	r2, [r3, #8]
      break;
 80051b0:	e03c      	b.n	800522c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051be:	461a      	mov	r2, r3
 80051c0:	f000 fc52 	bl	8005a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2150      	movs	r1, #80	@ 0x50
 80051ca:	4618      	mov	r0, r3
 80051cc:	f000 fcab 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 80051d0:	e02c      	b.n	800522c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80051de:	461a      	mov	r2, r3
 80051e0:	f000 fc71 	bl	8005ac6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2160      	movs	r1, #96	@ 0x60
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 fc9b 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 80051f0:	e01c      	b.n	800522c <HAL_TIM_ConfigClockSource+0x1e8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80051f6:	683b      	ldr	r3, [r7, #0]
 80051f8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80051fe:	461a      	mov	r2, r3
 8005200:	f000 fc32 	bl	8005a68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2140      	movs	r1, #64	@ 0x40
 800520a:	4618      	mov	r0, r3
 800520c:	f000 fc8b 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 8005210:	e00c      	b.n	800522c <HAL_TIM_ConfigClockSource+0x1e8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	683b      	ldr	r3, [r7, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	4619      	mov	r1, r3
 800521c:	4610      	mov	r0, r2
 800521e:	f000 fc82 	bl	8005b26 <TIM_ITRx_SetConfig>
      break;
 8005222:	e003      	b.n	800522c <HAL_TIM_ConfigClockSource+0x1e8>
    }

    default:
      status = HAL_ERROR;
 8005224:	2301      	movs	r3, #1
 8005226:	73fb      	strb	r3, [r7, #15]
      break;
 8005228:	e000      	b.n	800522c <HAL_TIM_ConfigClockSource+0x1e8>
      break;
 800522a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	2201      	movs	r2, #1
 8005230:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2200      	movs	r2, #0
 8005238:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800523c:	7bfb      	ldrb	r3, [r7, #15]
}
 800523e:	4618      	mov	r0, r3
 8005240:	3710      	adds	r7, #16
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	00100070 	.word	0x00100070
 800524c:	00100050 	.word	0x00100050
 8005250:	00100040 	.word	0x00100040
 8005254:	00100030 	.word	0x00100030
 8005258:	00100020 	.word	0x00100020

0800525c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80052a0:	bf00      	nop
 80052a2:	370c      	adds	r7, #12
 80052a4:	46bd      	mov	sp, r7
 80052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052aa:	4770      	bx	lr

080052ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80052ac:	b480      	push	{r7}
 80052ae:	b085      	sub	sp, #20
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	4a4c      	ldr	r2, [pc, #304]	@ (80053f0 <TIM_Base_SetConfig+0x144>)
 80052c0:	4293      	cmp	r3, r2
 80052c2:	d017      	beq.n	80052f4 <TIM_Base_SetConfig+0x48>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80052ca:	d013      	beq.n	80052f4 <TIM_Base_SetConfig+0x48>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	4a49      	ldr	r2, [pc, #292]	@ (80053f4 <TIM_Base_SetConfig+0x148>)
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00f      	beq.n	80052f4 <TIM_Base_SetConfig+0x48>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	4a48      	ldr	r2, [pc, #288]	@ (80053f8 <TIM_Base_SetConfig+0x14c>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d00b      	beq.n	80052f4 <TIM_Base_SetConfig+0x48>
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	4a47      	ldr	r2, [pc, #284]	@ (80053fc <TIM_Base_SetConfig+0x150>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d007      	beq.n	80052f4 <TIM_Base_SetConfig+0x48>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	4a46      	ldr	r2, [pc, #280]	@ (8005400 <TIM_Base_SetConfig+0x154>)
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d003      	beq.n	80052f4 <TIM_Base_SetConfig+0x48>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	4a45      	ldr	r2, [pc, #276]	@ (8005404 <TIM_Base_SetConfig+0x158>)
 80052f0:	4293      	cmp	r3, r2
 80052f2:	d108      	bne.n	8005306 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80052fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	4313      	orrs	r3, r2
 8005304:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	4a39      	ldr	r2, [pc, #228]	@ (80053f0 <TIM_Base_SetConfig+0x144>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d023      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005314:	d01f      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	4a36      	ldr	r2, [pc, #216]	@ (80053f4 <TIM_Base_SetConfig+0x148>)
 800531a:	4293      	cmp	r3, r2
 800531c:	d01b      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	4a35      	ldr	r2, [pc, #212]	@ (80053f8 <TIM_Base_SetConfig+0x14c>)
 8005322:	4293      	cmp	r3, r2
 8005324:	d017      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	4a34      	ldr	r2, [pc, #208]	@ (80053fc <TIM_Base_SetConfig+0x150>)
 800532a:	4293      	cmp	r3, r2
 800532c:	d013      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a33      	ldr	r2, [pc, #204]	@ (8005400 <TIM_Base_SetConfig+0x154>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00f      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a33      	ldr	r2, [pc, #204]	@ (8005408 <TIM_Base_SetConfig+0x15c>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00b      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a32      	ldr	r2, [pc, #200]	@ (800540c <TIM_Base_SetConfig+0x160>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d007      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a31      	ldr	r2, [pc, #196]	@ (8005410 <TIM_Base_SetConfig+0x164>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d003      	beq.n	8005356 <TIM_Base_SetConfig+0xaa>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a2c      	ldr	r2, [pc, #176]	@ (8005404 <TIM_Base_SetConfig+0x158>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d108      	bne.n	8005368 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800535c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	68db      	ldr	r3, [r3, #12]
 8005362:	68fa      	ldr	r2, [r7, #12]
 8005364:	4313      	orrs	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	695b      	ldr	r3, [r3, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800537c:	683b      	ldr	r3, [r7, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005384:	683b      	ldr	r3, [r7, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a18      	ldr	r2, [pc, #96]	@ (80053f0 <TIM_Base_SetConfig+0x144>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d013      	beq.n	80053bc <TIM_Base_SetConfig+0x110>
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a1a      	ldr	r2, [pc, #104]	@ (8005400 <TIM_Base_SetConfig+0x154>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d00f      	beq.n	80053bc <TIM_Base_SetConfig+0x110>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	4a1a      	ldr	r2, [pc, #104]	@ (8005408 <TIM_Base_SetConfig+0x15c>)
 80053a0:	4293      	cmp	r3, r2
 80053a2:	d00b      	beq.n	80053bc <TIM_Base_SetConfig+0x110>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	4a19      	ldr	r2, [pc, #100]	@ (800540c <TIM_Base_SetConfig+0x160>)
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d007      	beq.n	80053bc <TIM_Base_SetConfig+0x110>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	4a18      	ldr	r2, [pc, #96]	@ (8005410 <TIM_Base_SetConfig+0x164>)
 80053b0:	4293      	cmp	r3, r2
 80053b2:	d003      	beq.n	80053bc <TIM_Base_SetConfig+0x110>
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	4a13      	ldr	r2, [pc, #76]	@ (8005404 <TIM_Base_SetConfig+0x158>)
 80053b8:	4293      	cmp	r3, r2
 80053ba:	d103      	bne.n	80053c4 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	691a      	ldr	r2, [r3, #16]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2201      	movs	r2, #1
 80053c8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	691b      	ldr	r3, [r3, #16]
 80053ce:	f003 0301 	and.w	r3, r3, #1
 80053d2:	2b01      	cmp	r3, #1
 80053d4:	d105      	bne.n	80053e2 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	f023 0201 	bic.w	r2, r3, #1
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	611a      	str	r2, [r3, #16]
  }
}
 80053e2:	bf00      	nop
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr
 80053ee:	bf00      	nop
 80053f0:	40012c00 	.word	0x40012c00
 80053f4:	40000400 	.word	0x40000400
 80053f8:	40000800 	.word	0x40000800
 80053fc:	40000c00 	.word	0x40000c00
 8005400:	40013400 	.word	0x40013400
 8005404:	40015000 	.word	0x40015000
 8005408:	40014000 	.word	0x40014000
 800540c:	40014400 	.word	0x40014400
 8005410:	40014800 	.word	0x40014800

08005414 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f023 0201 	bic.w	r2, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005442:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0303 	bic.w	r3, r3, #3
 800544e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	4313      	orrs	r3, r2
 8005458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f023 0302 	bic.w	r3, r3, #2
 8005460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a30      	ldr	r2, [pc, #192]	@ (8005530 <TIM_OC1_SetConfig+0x11c>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d013      	beq.n	800549c <TIM_OC1_SetConfig+0x88>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a2f      	ldr	r2, [pc, #188]	@ (8005534 <TIM_OC1_SetConfig+0x120>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d00f      	beq.n	800549c <TIM_OC1_SetConfig+0x88>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a2e      	ldr	r2, [pc, #184]	@ (8005538 <TIM_OC1_SetConfig+0x124>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d00b      	beq.n	800549c <TIM_OC1_SetConfig+0x88>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a2d      	ldr	r2, [pc, #180]	@ (800553c <TIM_OC1_SetConfig+0x128>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d007      	beq.n	800549c <TIM_OC1_SetConfig+0x88>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a2c      	ldr	r2, [pc, #176]	@ (8005540 <TIM_OC1_SetConfig+0x12c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d003      	beq.n	800549c <TIM_OC1_SetConfig+0x88>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a2b      	ldr	r2, [pc, #172]	@ (8005544 <TIM_OC1_SetConfig+0x130>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d10c      	bne.n	80054b6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f023 0308 	bic.w	r3, r3, #8
 80054a2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	697a      	ldr	r2, [r7, #20]
 80054aa:	4313      	orrs	r3, r2
 80054ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80054ae:	697b      	ldr	r3, [r7, #20]
 80054b0:	f023 0304 	bic.w	r3, r3, #4
 80054b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	4a1d      	ldr	r2, [pc, #116]	@ (8005530 <TIM_OC1_SetConfig+0x11c>)
 80054ba:	4293      	cmp	r3, r2
 80054bc:	d013      	beq.n	80054e6 <TIM_OC1_SetConfig+0xd2>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a1c      	ldr	r2, [pc, #112]	@ (8005534 <TIM_OC1_SetConfig+0x120>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d00f      	beq.n	80054e6 <TIM_OC1_SetConfig+0xd2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005538 <TIM_OC1_SetConfig+0x124>)
 80054ca:	4293      	cmp	r3, r2
 80054cc:	d00b      	beq.n	80054e6 <TIM_OC1_SetConfig+0xd2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a1a      	ldr	r2, [pc, #104]	@ (800553c <TIM_OC1_SetConfig+0x128>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d007      	beq.n	80054e6 <TIM_OC1_SetConfig+0xd2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a19      	ldr	r2, [pc, #100]	@ (8005540 <TIM_OC1_SetConfig+0x12c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d003      	beq.n	80054e6 <TIM_OC1_SetConfig+0xd2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a18      	ldr	r2, [pc, #96]	@ (8005544 <TIM_OC1_SetConfig+0x130>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d111      	bne.n	800550a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054e6:	693b      	ldr	r3, [r7, #16]
 80054e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054ee:	693b      	ldr	r3, [r7, #16]
 80054f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80054f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054f6:	683b      	ldr	r3, [r7, #0]
 80054f8:	695b      	ldr	r3, [r3, #20]
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	4313      	orrs	r3, r2
 80054fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	699b      	ldr	r3, [r3, #24]
 8005504:	693a      	ldr	r2, [r7, #16]
 8005506:	4313      	orrs	r3, r2
 8005508:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	693a      	ldr	r2, [r7, #16]
 800550e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	68fa      	ldr	r2, [r7, #12]
 8005514:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	697a      	ldr	r2, [r7, #20]
 8005522:	621a      	str	r2, [r3, #32]
}
 8005524:	bf00      	nop
 8005526:	371c      	adds	r7, #28
 8005528:	46bd      	mov	sp, r7
 800552a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552e:	4770      	bx	lr
 8005530:	40012c00 	.word	0x40012c00
 8005534:	40013400 	.word	0x40013400
 8005538:	40014000 	.word	0x40014000
 800553c:	40014400 	.word	0x40014400
 8005540:	40014800 	.word	0x40014800
 8005544:	40015000 	.word	0x40015000

08005548 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005548:	b480      	push	{r7}
 800554a:	b087      	sub	sp, #28
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
 8005550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6a1b      	ldr	r3, [r3, #32]
 8005556:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6a1b      	ldr	r3, [r3, #32]
 800555c:	f023 0210 	bic.w	r2, r3, #16
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	685b      	ldr	r3, [r3, #4]
 8005568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	699b      	ldr	r3, [r3, #24]
 800556e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005576:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800557a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005582:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	021b      	lsls	r3, r3, #8
 800558a:	68fa      	ldr	r2, [r7, #12]
 800558c:	4313      	orrs	r3, r2
 800558e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	f023 0320 	bic.w	r3, r3, #32
 8005596:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005598:	683b      	ldr	r3, [r7, #0]
 800559a:	689b      	ldr	r3, [r3, #8]
 800559c:	011b      	lsls	r3, r3, #4
 800559e:	697a      	ldr	r2, [r7, #20]
 80055a0:	4313      	orrs	r3, r2
 80055a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	4a2c      	ldr	r2, [pc, #176]	@ (8005658 <TIM_OC2_SetConfig+0x110>)
 80055a8:	4293      	cmp	r3, r2
 80055aa:	d007      	beq.n	80055bc <TIM_OC2_SetConfig+0x74>
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	4a2b      	ldr	r2, [pc, #172]	@ (800565c <TIM_OC2_SetConfig+0x114>)
 80055b0:	4293      	cmp	r3, r2
 80055b2:	d003      	beq.n	80055bc <TIM_OC2_SetConfig+0x74>
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	4a2a      	ldr	r2, [pc, #168]	@ (8005660 <TIM_OC2_SetConfig+0x118>)
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d10d      	bne.n	80055d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80055c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80055c4:	683b      	ldr	r3, [r7, #0]
 80055c6:	68db      	ldr	r3, [r3, #12]
 80055c8:	011b      	lsls	r3, r3, #4
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	4313      	orrs	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80055d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	4a1f      	ldr	r2, [pc, #124]	@ (8005658 <TIM_OC2_SetConfig+0x110>)
 80055dc:	4293      	cmp	r3, r2
 80055de:	d013      	beq.n	8005608 <TIM_OC2_SetConfig+0xc0>
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	4a1e      	ldr	r2, [pc, #120]	@ (800565c <TIM_OC2_SetConfig+0x114>)
 80055e4:	4293      	cmp	r3, r2
 80055e6:	d00f      	beq.n	8005608 <TIM_OC2_SetConfig+0xc0>
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a1e      	ldr	r2, [pc, #120]	@ (8005664 <TIM_OC2_SetConfig+0x11c>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00b      	beq.n	8005608 <TIM_OC2_SetConfig+0xc0>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a1d      	ldr	r2, [pc, #116]	@ (8005668 <TIM_OC2_SetConfig+0x120>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d007      	beq.n	8005608 <TIM_OC2_SetConfig+0xc0>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a1c      	ldr	r2, [pc, #112]	@ (800566c <TIM_OC2_SetConfig+0x124>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d003      	beq.n	8005608 <TIM_OC2_SetConfig+0xc0>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a17      	ldr	r2, [pc, #92]	@ (8005660 <TIM_OC2_SetConfig+0x118>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d113      	bne.n	8005630 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800560e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005610:	693b      	ldr	r3, [r7, #16]
 8005612:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005616:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	693a      	ldr	r2, [r7, #16]
 8005620:	4313      	orrs	r3, r2
 8005622:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	699b      	ldr	r3, [r3, #24]
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	4313      	orrs	r3, r2
 800562e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	693a      	ldr	r2, [r7, #16]
 8005634:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	68fa      	ldr	r2, [r7, #12]
 800563a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	685a      	ldr	r2, [r3, #4]
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	621a      	str	r2, [r3, #32]
}
 800564a:	bf00      	nop
 800564c:	371c      	adds	r7, #28
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
 8005656:	bf00      	nop
 8005658:	40012c00 	.word	0x40012c00
 800565c:	40013400 	.word	0x40013400
 8005660:	40015000 	.word	0x40015000
 8005664:	40014000 	.word	0x40014000
 8005668:	40014400 	.word	0x40014400
 800566c:	40014800 	.word	0x40014800

08005670 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005670:	b480      	push	{r7}
 8005672:	b087      	sub	sp, #28
 8005674:	af00      	add	r7, sp, #0
 8005676:	6078      	str	r0, [r7, #4]
 8005678:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6a1b      	ldr	r3, [r3, #32]
 800567e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6a1b      	ldr	r3, [r3, #32]
 8005684:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	69db      	ldr	r3, [r3, #28]
 8005696:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800569e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80056a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f023 0303 	bic.w	r3, r3, #3
 80056aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	4313      	orrs	r3, r2
 80056b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80056bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	021b      	lsls	r3, r3, #8
 80056c4:	697a      	ldr	r2, [r7, #20]
 80056c6:	4313      	orrs	r3, r2
 80056c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a2b      	ldr	r2, [pc, #172]	@ (800577c <TIM_OC3_SetConfig+0x10c>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d007      	beq.n	80056e2 <TIM_OC3_SetConfig+0x72>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2a      	ldr	r2, [pc, #168]	@ (8005780 <TIM_OC3_SetConfig+0x110>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d003      	beq.n	80056e2 <TIM_OC3_SetConfig+0x72>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a29      	ldr	r2, [pc, #164]	@ (8005784 <TIM_OC3_SetConfig+0x114>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d10d      	bne.n	80056fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80056e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	68db      	ldr	r3, [r3, #12]
 80056ee:	021b      	lsls	r3, r3, #8
 80056f0:	697a      	ldr	r2, [r7, #20]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80056f6:	697b      	ldr	r3, [r7, #20]
 80056f8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80056fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a1e      	ldr	r2, [pc, #120]	@ (800577c <TIM_OC3_SetConfig+0x10c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d013      	beq.n	800572e <TIM_OC3_SetConfig+0xbe>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a1d      	ldr	r2, [pc, #116]	@ (8005780 <TIM_OC3_SetConfig+0x110>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00f      	beq.n	800572e <TIM_OC3_SetConfig+0xbe>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a1d      	ldr	r2, [pc, #116]	@ (8005788 <TIM_OC3_SetConfig+0x118>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d00b      	beq.n	800572e <TIM_OC3_SetConfig+0xbe>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a1c      	ldr	r2, [pc, #112]	@ (800578c <TIM_OC3_SetConfig+0x11c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d007      	beq.n	800572e <TIM_OC3_SetConfig+0xbe>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a1b      	ldr	r2, [pc, #108]	@ (8005790 <TIM_OC3_SetConfig+0x120>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d003      	beq.n	800572e <TIM_OC3_SetConfig+0xbe>
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4a16      	ldr	r2, [pc, #88]	@ (8005784 <TIM_OC3_SetConfig+0x114>)
 800572a:	4293      	cmp	r3, r2
 800572c:	d113      	bne.n	8005756 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005736:	693b      	ldr	r3, [r7, #16]
 8005738:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800573c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	693a      	ldr	r2, [r7, #16]
 8005746:	4313      	orrs	r3, r2
 8005748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800574a:	683b      	ldr	r3, [r7, #0]
 800574c:	699b      	ldr	r3, [r3, #24]
 800574e:	011b      	lsls	r3, r3, #4
 8005750:	693a      	ldr	r2, [r7, #16]
 8005752:	4313      	orrs	r3, r2
 8005754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	685a      	ldr	r2, [r3, #4]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	621a      	str	r2, [r3, #32]
}
 8005770:	bf00      	nop
 8005772:	371c      	adds	r7, #28
 8005774:	46bd      	mov	sp, r7
 8005776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800577a:	4770      	bx	lr
 800577c:	40012c00 	.word	0x40012c00
 8005780:	40013400 	.word	0x40013400
 8005784:	40015000 	.word	0x40015000
 8005788:	40014000 	.word	0x40014000
 800578c:	40014400 	.word	0x40014400
 8005790:	40014800 	.word	0x40014800

08005794 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005794:	b480      	push	{r7}
 8005796:	b087      	sub	sp, #28
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	6a1b      	ldr	r3, [r3, #32]
 80057a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a1b      	ldr	r3, [r3, #32]
 80057a8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	69db      	ldr	r3, [r3, #28]
 80057ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80057c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80057c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	021b      	lsls	r3, r3, #8
 80057d6:	68fa      	ldr	r2, [r7, #12]
 80057d8:	4313      	orrs	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80057dc:	697b      	ldr	r3, [r7, #20]
 80057de:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80057e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	689b      	ldr	r3, [r3, #8]
 80057e8:	031b      	lsls	r3, r3, #12
 80057ea:	697a      	ldr	r2, [r7, #20]
 80057ec:	4313      	orrs	r3, r2
 80057ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	4a2c      	ldr	r2, [pc, #176]	@ (80058a4 <TIM_OC4_SetConfig+0x110>)
 80057f4:	4293      	cmp	r3, r2
 80057f6:	d007      	beq.n	8005808 <TIM_OC4_SetConfig+0x74>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	4a2b      	ldr	r2, [pc, #172]	@ (80058a8 <TIM_OC4_SetConfig+0x114>)
 80057fc:	4293      	cmp	r3, r2
 80057fe:	d003      	beq.n	8005808 <TIM_OC4_SetConfig+0x74>
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	4a2a      	ldr	r2, [pc, #168]	@ (80058ac <TIM_OC4_SetConfig+0x118>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d10d      	bne.n	8005824 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005808:	697b      	ldr	r3, [r7, #20]
 800580a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800580e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005810:	683b      	ldr	r3, [r7, #0]
 8005812:	68db      	ldr	r3, [r3, #12]
 8005814:	031b      	lsls	r3, r3, #12
 8005816:	697a      	ldr	r2, [r7, #20]
 8005818:	4313      	orrs	r3, r2
 800581a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800581c:	697b      	ldr	r3, [r7, #20]
 800581e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005822:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a1f      	ldr	r2, [pc, #124]	@ (80058a4 <TIM_OC4_SetConfig+0x110>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d013      	beq.n	8005854 <TIM_OC4_SetConfig+0xc0>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a1e      	ldr	r2, [pc, #120]	@ (80058a8 <TIM_OC4_SetConfig+0x114>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d00f      	beq.n	8005854 <TIM_OC4_SetConfig+0xc0>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a1e      	ldr	r2, [pc, #120]	@ (80058b0 <TIM_OC4_SetConfig+0x11c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00b      	beq.n	8005854 <TIM_OC4_SetConfig+0xc0>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a1d      	ldr	r2, [pc, #116]	@ (80058b4 <TIM_OC4_SetConfig+0x120>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d007      	beq.n	8005854 <TIM_OC4_SetConfig+0xc0>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a1c      	ldr	r2, [pc, #112]	@ (80058b8 <TIM_OC4_SetConfig+0x124>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d003      	beq.n	8005854 <TIM_OC4_SetConfig+0xc0>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a17      	ldr	r2, [pc, #92]	@ (80058ac <TIM_OC4_SetConfig+0x118>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d113      	bne.n	800587c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800585a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005862:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005864:	683b      	ldr	r3, [r7, #0]
 8005866:	695b      	ldr	r3, [r3, #20]
 8005868:	019b      	lsls	r3, r3, #6
 800586a:	693a      	ldr	r2, [r7, #16]
 800586c:	4313      	orrs	r3, r2
 800586e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	699b      	ldr	r3, [r3, #24]
 8005874:	019b      	lsls	r3, r3, #6
 8005876:	693a      	ldr	r2, [r7, #16]
 8005878:	4313      	orrs	r3, r2
 800587a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	693a      	ldr	r2, [r7, #16]
 8005880:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	685a      	ldr	r2, [r3, #4]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	697a      	ldr	r2, [r7, #20]
 8005894:	621a      	str	r2, [r3, #32]
}
 8005896:	bf00      	nop
 8005898:	371c      	adds	r7, #28
 800589a:	46bd      	mov	sp, r7
 800589c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a0:	4770      	bx	lr
 80058a2:	bf00      	nop
 80058a4:	40012c00 	.word	0x40012c00
 80058a8:	40013400 	.word	0x40013400
 80058ac:	40015000 	.word	0x40015000
 80058b0:	40014000 	.word	0x40014000
 80058b4:	40014400 	.word	0x40014400
 80058b8:	40014800 	.word	0x40014800

080058bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80058bc:	b480      	push	{r7}
 80058be:	b087      	sub	sp, #28
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
 80058c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6a1b      	ldr	r3, [r3, #32]
 80058ca:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	6a1b      	ldr	r3, [r3, #32]
 80058d0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80058e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005900:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	041b      	lsls	r3, r3, #16
 8005908:	693a      	ldr	r2, [r7, #16]
 800590a:	4313      	orrs	r3, r2
 800590c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a19      	ldr	r2, [pc, #100]	@ (8005978 <TIM_OC5_SetConfig+0xbc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d013      	beq.n	800593e <TIM_OC5_SetConfig+0x82>
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4a18      	ldr	r2, [pc, #96]	@ (800597c <TIM_OC5_SetConfig+0xc0>)
 800591a:	4293      	cmp	r3, r2
 800591c:	d00f      	beq.n	800593e <TIM_OC5_SetConfig+0x82>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	4a17      	ldr	r2, [pc, #92]	@ (8005980 <TIM_OC5_SetConfig+0xc4>)
 8005922:	4293      	cmp	r3, r2
 8005924:	d00b      	beq.n	800593e <TIM_OC5_SetConfig+0x82>
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4a16      	ldr	r2, [pc, #88]	@ (8005984 <TIM_OC5_SetConfig+0xc8>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d007      	beq.n	800593e <TIM_OC5_SetConfig+0x82>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	4a15      	ldr	r2, [pc, #84]	@ (8005988 <TIM_OC5_SetConfig+0xcc>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d003      	beq.n	800593e <TIM_OC5_SetConfig+0x82>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a14      	ldr	r2, [pc, #80]	@ (800598c <TIM_OC5_SetConfig+0xd0>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d109      	bne.n	8005952 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005944:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	695b      	ldr	r3, [r3, #20]
 800594a:	021b      	lsls	r3, r3, #8
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	697a      	ldr	r2, [r7, #20]
 8005956:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	685a      	ldr	r2, [r3, #4]
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	693a      	ldr	r2, [r7, #16]
 800596a:	621a      	str	r2, [r3, #32]
}
 800596c:	bf00      	nop
 800596e:	371c      	adds	r7, #28
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr
 8005978:	40012c00 	.word	0x40012c00
 800597c:	40013400 	.word	0x40013400
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800
 800598c:	40015000 	.word	0x40015000

08005990 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005990:	b480      	push	{r7}
 8005992:	b087      	sub	sp, #28
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
 8005998:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6a1b      	ldr	r3, [r3, #32]
 800599e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6a1b      	ldr	r3, [r3, #32]
 80059a4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	685b      	ldr	r3, [r3, #4]
 80059b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80059b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	021b      	lsls	r3, r3, #8
 80059ca:	68fa      	ldr	r2, [r7, #12]
 80059cc:	4313      	orrs	r3, r2
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80059d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	051b      	lsls	r3, r3, #20
 80059de:	693a      	ldr	r2, [r7, #16]
 80059e0:	4313      	orrs	r3, r2
 80059e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a1a      	ldr	r2, [pc, #104]	@ (8005a50 <TIM_OC6_SetConfig+0xc0>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d013      	beq.n	8005a14 <TIM_OC6_SetConfig+0x84>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a19      	ldr	r2, [pc, #100]	@ (8005a54 <TIM_OC6_SetConfig+0xc4>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d00f      	beq.n	8005a14 <TIM_OC6_SetConfig+0x84>
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	4a18      	ldr	r2, [pc, #96]	@ (8005a58 <TIM_OC6_SetConfig+0xc8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d00b      	beq.n	8005a14 <TIM_OC6_SetConfig+0x84>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a17      	ldr	r2, [pc, #92]	@ (8005a5c <TIM_OC6_SetConfig+0xcc>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d007      	beq.n	8005a14 <TIM_OC6_SetConfig+0x84>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a16      	ldr	r2, [pc, #88]	@ (8005a60 <TIM_OC6_SetConfig+0xd0>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_OC6_SetConfig+0x84>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a15      	ldr	r2, [pc, #84]	@ (8005a64 <TIM_OC6_SetConfig+0xd4>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d109      	bne.n	8005a28 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	695b      	ldr	r3, [r3, #20]
 8005a20:	029b      	lsls	r3, r3, #10
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	697a      	ldr	r2, [r7, #20]
 8005a2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	68fa      	ldr	r2, [r7, #12]
 8005a32:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685a      	ldr	r2, [r3, #4]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	693a      	ldr	r2, [r7, #16]
 8005a40:	621a      	str	r2, [r3, #32]
}
 8005a42:	bf00      	nop
 8005a44:	371c      	adds	r7, #28
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr
 8005a4e:	bf00      	nop
 8005a50:	40012c00 	.word	0x40012c00
 8005a54:	40013400 	.word	0x40013400
 8005a58:	40014000 	.word	0x40014000
 8005a5c:	40014400 	.word	0x40014400
 8005a60:	40014800 	.word	0x40014800
 8005a64:	40015000 	.word	0x40015000

08005a68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b087      	sub	sp, #28
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	6a1b      	ldr	r3, [r3, #32]
 8005a7e:	f023 0201 	bic.w	r2, r3, #1
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	699b      	ldr	r3, [r3, #24]
 8005a8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	011b      	lsls	r3, r3, #4
 8005a98:	693a      	ldr	r2, [r7, #16]
 8005a9a:	4313      	orrs	r3, r2
 8005a9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005a9e:	697b      	ldr	r3, [r7, #20]
 8005aa0:	f023 030a 	bic.w	r3, r3, #10
 8005aa4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aa6:	697a      	ldr	r2, [r7, #20]
 8005aa8:	68bb      	ldr	r3, [r7, #8]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	693a      	ldr	r2, [r7, #16]
 8005ab2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	697a      	ldr	r2, [r7, #20]
 8005ab8:	621a      	str	r2, [r3, #32]
}
 8005aba:	bf00      	nop
 8005abc:	371c      	adds	r7, #28
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ac6:	b480      	push	{r7}
 8005ac8:	b087      	sub	sp, #28
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	60f8      	str	r0, [r7, #12]
 8005ace:	60b9      	str	r1, [r7, #8]
 8005ad0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	6a1b      	ldr	r3, [r3, #32]
 8005ad6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	6a1b      	ldr	r3, [r3, #32]
 8005adc:	f023 0210 	bic.w	r2, r3, #16
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	699b      	ldr	r3, [r3, #24]
 8005ae8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005af0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	031b      	lsls	r3, r3, #12
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	4313      	orrs	r3, r2
 8005afa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005b02:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b04:	68bb      	ldr	r3, [r7, #8]
 8005b06:	011b      	lsls	r3, r3, #4
 8005b08:	697a      	ldr	r2, [r7, #20]
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	697a      	ldr	r2, [r7, #20]
 8005b18:	621a      	str	r2, [r3, #32]
}
 8005b1a:	bf00      	nop
 8005b1c:	371c      	adds	r7, #28
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b085      	sub	sp, #20
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
 8005b2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	689b      	ldr	r3, [r3, #8]
 8005b34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005b3c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	f043 0307 	orr.w	r3, r3, #7
 8005b4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	68fa      	ldr	r2, [r7, #12]
 8005b52:	609a      	str	r2, [r3, #8]
}
 8005b54:	bf00      	nop
 8005b56:	3714      	adds	r7, #20
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b5e:	4770      	bx	lr

08005b60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
 8005b6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b74:	697b      	ldr	r3, [r7, #20]
 8005b76:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005b7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b7c:	683b      	ldr	r3, [r7, #0]
 8005b7e:	021a      	lsls	r2, r3, #8
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	431a      	orrs	r2, r3
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	4313      	orrs	r3, r2
 8005b88:	697a      	ldr	r2, [r7, #20]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	609a      	str	r2, [r3, #8]
}
 8005b94:	bf00      	nop
 8005b96:	371c      	adds	r7, #28
 8005b98:	46bd      	mov	sp, r7
 8005b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9e:	4770      	bx	lr

08005ba0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b087      	sub	sp, #28
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	f003 031f 	and.w	r3, r3, #31
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005bb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a1a      	ldr	r2, [r3, #32]
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	43db      	mvns	r3, r3
 8005bc2:	401a      	ands	r2, r3
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	6a1a      	ldr	r2, [r3, #32]
 8005bcc:	68bb      	ldr	r3, [r7, #8]
 8005bce:	f003 031f 	and.w	r3, r3, #31
 8005bd2:	6879      	ldr	r1, [r7, #4]
 8005bd4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bd8:	431a      	orrs	r2, r3
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	621a      	str	r2, [r3, #32]
}
 8005bde:	bf00      	nop
 8005be0:	371c      	adds	r7, #28
 8005be2:	46bd      	mov	sp, r7
 8005be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be8:	4770      	bx	lr
	...

08005bec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b085      	sub	sp, #20
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005bfc:	2b01      	cmp	r3, #1
 8005bfe:	d101      	bne.n	8005c04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005c00:	2302      	movs	r3, #2
 8005c02:	e074      	b.n	8005cee <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	4a34      	ldr	r2, [pc, #208]	@ (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d009      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a33      	ldr	r2, [pc, #204]	@ (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c34:	4293      	cmp	r3, r2
 8005c36:	d004      	beq.n	8005c42 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	4a31      	ldr	r2, [pc, #196]	@ (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d108      	bne.n	8005c54 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8005c48:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	685b      	ldr	r3, [r3, #4]
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8005c5a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005c5e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	4313      	orrs	r3, r2
 8005c68:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68fa      	ldr	r2, [r7, #12]
 8005c70:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	4a21      	ldr	r2, [pc, #132]	@ (8005cfc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d022      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005c84:	d01d      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	4a1f      	ldr	r2, [pc, #124]	@ (8005d08 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d018      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4a1d      	ldr	r2, [pc, #116]	@ (8005d0c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8005c96:	4293      	cmp	r3, r2
 8005c98:	d013      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8005d10 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d00e      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	4a15      	ldr	r2, [pc, #84]	@ (8005d00 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005caa:	4293      	cmp	r3, r2
 8005cac:	d009      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	4a18      	ldr	r2, [pc, #96]	@ (8005d14 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005cb4:	4293      	cmp	r3, r2
 8005cb6:	d004      	beq.n	8005cc2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	4a11      	ldr	r2, [pc, #68]	@ (8005d04 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d10c      	bne.n	8005cdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005cc8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68ba      	ldr	r2, [r7, #8]
 8005cda:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2201      	movs	r2, #1
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005cec:	2300      	movs	r3, #0
}
 8005cee:	4618      	mov	r0, r3
 8005cf0:	3714      	adds	r7, #20
 8005cf2:	46bd      	mov	sp, r7
 8005cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf8:	4770      	bx	lr
 8005cfa:	bf00      	nop
 8005cfc:	40012c00 	.word	0x40012c00
 8005d00:	40013400 	.word	0x40013400
 8005d04:	40015000 	.word	0x40015000
 8005d08:	40000400 	.word	0x40000400
 8005d0c:	40000800 	.word	0x40000800
 8005d10:	40000c00 	.word	0x40000c00
 8005d14:	40014000 	.word	0x40014000

08005d18 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b085      	sub	sp, #20
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d22:	2300      	movs	r3, #0
 8005d24:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d2c:	2b01      	cmp	r3, #1
 8005d2e:	d101      	bne.n	8005d34 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005d30:	2302      	movs	r3, #2
 8005d32:	e078      	b.n	8005e26 <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	68db      	ldr	r3, [r3, #12]
 8005d46:	4313      	orrs	r3, r2
 8005d48:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	689b      	ldr	r3, [r3, #8]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	4313      	orrs	r3, r2
 8005d64:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	4313      	orrs	r3, r2
 8005d72:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	691b      	ldr	r3, [r3, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	695b      	ldr	r3, [r3, #20]
 8005d8c:	4313      	orrs	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	699b      	ldr	r3, [r3, #24]
 8005da8:	041b      	lsls	r3, r3, #16
 8005daa:	4313      	orrs	r3, r2
 8005dac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	69db      	ldr	r3, [r3, #28]
 8005db8:	4313      	orrs	r3, r2
 8005dba:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	4a1c      	ldr	r2, [pc, #112]	@ (8005e34 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005dc2:	4293      	cmp	r3, r2
 8005dc4:	d009      	beq.n	8005dda <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	4a1b      	ldr	r2, [pc, #108]	@ (8005e38 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005dcc:	4293      	cmp	r3, r2
 8005dce:	d004      	beq.n	8005dda <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	4a19      	ldr	r2, [pc, #100]	@ (8005e3c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	d11c      	bne.n	8005e14 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8005de0:	683b      	ldr	r3, [r7, #0]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	051b      	lsls	r3, r3, #20
 8005de6:	4313      	orrs	r3, r2
 8005de8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	6a1b      	ldr	r3, [r3, #32]
 8005df4:	4313      	orrs	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8005dfe:	683b      	ldr	r3, [r7, #0]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e02:	4313      	orrs	r3, r2
 8005e04:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e10:	4313      	orrs	r3, r2
 8005e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68fa      	ldr	r2, [r7, #12]
 8005e1a:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2200      	movs	r2, #0
 8005e20:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3714      	adds	r7, #20
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e30:	4770      	bx	lr
 8005e32:	bf00      	nop
 8005e34:	40012c00 	.word	0x40012c00
 8005e38:	40013400 	.word	0x40013400
 8005e3c:	40015000 	.word	0x40015000

08005e40 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e54:	b480      	push	{r7}
 8005e56:	b083      	sub	sp, #12
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e5c:	bf00      	nop
 8005e5e:	370c      	adds	r7, #12
 8005e60:	46bd      	mov	sp, r7
 8005e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e66:	4770      	bx	lr

08005e68 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005e68:	b480      	push	{r7}
 8005e6a:	b083      	sub	sp, #12
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr

08005e7c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b083      	sub	sp, #12
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005e98:	bf00      	nop
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b083      	sub	sp, #12
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005eac:	bf00      	nop
 8005eae:	370c      	adds	r7, #12
 8005eb0:	46bd      	mov	sp, r7
 8005eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb6:	4770      	bx	lr

08005eb8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b083      	sub	sp, #12
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005ec0:	bf00      	nop
 8005ec2:	370c      	adds	r7, #12
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eca:	4770      	bx	lr

08005ecc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005ecc:	b580      	push	{r7, lr}
 8005ece:	b082      	sub	sp, #8
 8005ed0:	af00      	add	r7, sp, #0
 8005ed2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d101      	bne.n	8005ede <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eda:	2301      	movs	r3, #1
 8005edc:	e042      	b.n	8005f64 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d106      	bne.n	8005ef6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2200      	movs	r2, #0
 8005eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f7fc fb03 	bl	80024fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2224      	movs	r2, #36	@ 0x24
 8005efa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	681a      	ldr	r2, [r3, #0]
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	f022 0201 	bic.w	r2, r2, #1
 8005f0c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d002      	beq.n	8005f1c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 fc1e 	bl	8006758 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	f000 f91f 	bl	8006160 <UART_SetConfig>
 8005f22:	4603      	mov	r3, r0
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d101      	bne.n	8005f2c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8005f28:	2301      	movs	r3, #1
 8005f2a:	e01b      	b.n	8005f64 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005f3a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005f4a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f042 0201 	orr.w	r2, r2, #1
 8005f5a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 fc9d 	bl	800689c <UART_CheckIdleState>
 8005f62:	4603      	mov	r3, r0
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3708      	adds	r7, #8
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	@ 0x28
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f82:	2b20      	cmp	r3, #32
 8005f84:	d17b      	bne.n	800607e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	d002      	beq.n	8005f92 <HAL_UART_Transmit+0x26>
 8005f8c:	88fb      	ldrh	r3, [r7, #6]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d101      	bne.n	8005f96 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e074      	b.n	8006080 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	2221      	movs	r2, #33	@ 0x21
 8005fa2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005fa6:	f7fc fdab 	bl	8002b00 <HAL_GetTick>
 8005faa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	88fa      	ldrh	r2, [r7, #6]
 8005fb0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	88fa      	ldrh	r2, [r7, #6]
 8005fb8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	689b      	ldr	r3, [r3, #8]
 8005fc0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005fc4:	d108      	bne.n	8005fd8 <HAL_UART_Transmit+0x6c>
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d104      	bne.n	8005fd8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005fce:	2300      	movs	r3, #0
 8005fd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005fd2:	68bb      	ldr	r3, [r7, #8]
 8005fd4:	61bb      	str	r3, [r7, #24]
 8005fd6:	e003      	b.n	8005fe0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005fe0:	e030      	b.n	8006044 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	9300      	str	r3, [sp, #0]
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	2180      	movs	r1, #128	@ 0x80
 8005fec:	68f8      	ldr	r0, [r7, #12]
 8005fee:	f000 fcff 	bl	80069f0 <UART_WaitOnFlagUntilTimeout>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d005      	beq.n	8006004 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2220      	movs	r2, #32
 8005ffc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8006000:	2303      	movs	r3, #3
 8006002:	e03d      	b.n	8006080 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006004:	69fb      	ldr	r3, [r7, #28]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d10b      	bne.n	8006022 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	881b      	ldrh	r3, [r3, #0]
 800600e:	461a      	mov	r2, r3
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006018:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800601a:	69bb      	ldr	r3, [r7, #24]
 800601c:	3302      	adds	r3, #2
 800601e:	61bb      	str	r3, [r7, #24]
 8006020:	e007      	b.n	8006032 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	781a      	ldrb	r2, [r3, #0]
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800602c:	69fb      	ldr	r3, [r7, #28]
 800602e:	3301      	adds	r3, #1
 8006030:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006032:	68fb      	ldr	r3, [r7, #12]
 8006034:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006038:	b29b      	uxth	r3, r3
 800603a:	3b01      	subs	r3, #1
 800603c:	b29a      	uxth	r2, r3
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800604a:	b29b      	uxth	r3, r3
 800604c:	2b00      	cmp	r3, #0
 800604e:	d1c8      	bne.n	8005fe2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	9300      	str	r3, [sp, #0]
 8006054:	697b      	ldr	r3, [r7, #20]
 8006056:	2200      	movs	r2, #0
 8006058:	2140      	movs	r1, #64	@ 0x40
 800605a:	68f8      	ldr	r0, [r7, #12]
 800605c:	f000 fcc8 	bl	80069f0 <UART_WaitOnFlagUntilTimeout>
 8006060:	4603      	mov	r3, r0
 8006062:	2b00      	cmp	r3, #0
 8006064:	d005      	beq.n	8006072 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	2220      	movs	r2, #32
 800606a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800606e:	2303      	movs	r3, #3
 8006070:	e006      	b.n	8006080 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	2220      	movs	r2, #32
 8006076:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800607a:	2300      	movs	r3, #0
 800607c:	e000      	b.n	8006080 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800607e:	2302      	movs	r3, #2
  }
}
 8006080:	4618      	mov	r0, r3
 8006082:	3720      	adds	r7, #32
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b08a      	sub	sp, #40	@ 0x28
 800608c:	af00      	add	r7, sp, #0
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	4613      	mov	r3, r2
 8006094:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800609c:	2b20      	cmp	r3, #32
 800609e:	d137      	bne.n	8006110 <HAL_UART_Receive_DMA+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80060a0:	68bb      	ldr	r3, [r7, #8]
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d002      	beq.n	80060ac <HAL_UART_Receive_DMA+0x24>
 80060a6:	88fb      	ldrh	r3, [r7, #6]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d101      	bne.n	80060b0 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e030      	b.n	8006112 <HAL_UART_Receive_DMA+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	2200      	movs	r2, #0
 80060b4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a18      	ldr	r2, [pc, #96]	@ (800611c <HAL_UART_Receive_DMA+0x94>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d01f      	beq.n	8006100 <HAL_UART_Receive_DMA+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d018      	beq.n	8006100 <HAL_UART_Receive_DMA+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	e853 3f00 	ldrex	r3, [r3]
 80060da:	613b      	str	r3, [r7, #16]
   return(result);
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80060e2:	627b      	str	r3, [r7, #36]	@ 0x24
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	461a      	mov	r2, r3
 80060ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060ec:	623b      	str	r3, [r7, #32]
 80060ee:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060f0:	69f9      	ldr	r1, [r7, #28]
 80060f2:	6a3a      	ldr	r2, [r7, #32]
 80060f4:	e841 2300 	strex	r3, r2, [r1]
 80060f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80060fa:	69bb      	ldr	r3, [r7, #24]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d1e6      	bne.n	80060ce <HAL_UART_Receive_DMA+0x46>
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8006100:	88fb      	ldrh	r3, [r7, #6]
 8006102:	461a      	mov	r2, r3
 8006104:	68b9      	ldr	r1, [r7, #8]
 8006106:	68f8      	ldr	r0, [r7, #12]
 8006108:	f000 fce0 	bl	8006acc <UART_Start_Receive_DMA>
 800610c:	4603      	mov	r3, r0
 800610e:	e000      	b.n	8006112 <HAL_UART_Receive_DMA+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006110:	2302      	movs	r3, #2
  }
}
 8006112:	4618      	mov	r0, r3
 8006114:	3728      	adds	r7, #40	@ 0x28
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}
 800611a:	bf00      	nop
 800611c:	40008000 	.word	0x40008000

08006120 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006120:	b480      	push	{r7}
 8006122:	b083      	sub	sp, #12
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006134:	b480      	push	{r7}
 8006136:	b083      	sub	sp, #12
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800613c:	bf00      	nop
 800613e:	370c      	adds	r7, #12
 8006140:	46bd      	mov	sp, r7
 8006142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006146:	4770      	bx	lr

08006148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006148:	b480      	push	{r7}
 800614a:	b083      	sub	sp, #12
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006154:	bf00      	nop
 8006156:	370c      	adds	r7, #12
 8006158:	46bd      	mov	sp, r7
 800615a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800615e:	4770      	bx	lr

08006160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006164:	b08c      	sub	sp, #48	@ 0x30
 8006166:	af00      	add	r7, sp, #0
 8006168:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800616a:	2300      	movs	r3, #0
 800616c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006170:	697b      	ldr	r3, [r7, #20]
 8006172:	689a      	ldr	r2, [r3, #8]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	691b      	ldr	r3, [r3, #16]
 8006178:	431a      	orrs	r2, r3
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	695b      	ldr	r3, [r3, #20]
 800617e:	431a      	orrs	r2, r3
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	69db      	ldr	r3, [r3, #28]
 8006184:	4313      	orrs	r3, r2
 8006186:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	681a      	ldr	r2, [r3, #0]
 800618e:	4baa      	ldr	r3, [pc, #680]	@ (8006438 <UART_SetConfig+0x2d8>)
 8006190:	4013      	ands	r3, r2
 8006192:	697a      	ldr	r2, [r7, #20]
 8006194:	6812      	ldr	r2, [r2, #0]
 8006196:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006198:	430b      	orrs	r3, r1
 800619a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	68da      	ldr	r2, [r3, #12]
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	430a      	orrs	r2, r1
 80061b0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80061b2:	697b      	ldr	r3, [r7, #20]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a9f      	ldr	r2, [pc, #636]	@ (800643c <UART_SetConfig+0x2dc>)
 80061be:	4293      	cmp	r3, r2
 80061c0:	d004      	beq.n	80061cc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80061c2:	697b      	ldr	r3, [r7, #20]
 80061c4:	6a1b      	ldr	r3, [r3, #32]
 80061c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80061c8:	4313      	orrs	r3, r2
 80061ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	689b      	ldr	r3, [r3, #8]
 80061d2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80061d6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80061da:	697a      	ldr	r2, [r7, #20]
 80061dc:	6812      	ldr	r2, [r2, #0]
 80061de:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80061e0:	430b      	orrs	r3, r1
 80061e2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ea:	f023 010f 	bic.w	r1, r3, #15
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a90      	ldr	r2, [pc, #576]	@ (8006440 <UART_SetConfig+0x2e0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d125      	bne.n	8006250 <UART_SetConfig+0xf0>
 8006204:	4b8f      	ldr	r3, [pc, #572]	@ (8006444 <UART_SetConfig+0x2e4>)
 8006206:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800620a:	f003 0303 	and.w	r3, r3, #3
 800620e:	2b03      	cmp	r3, #3
 8006210:	d81a      	bhi.n	8006248 <UART_SetConfig+0xe8>
 8006212:	a201      	add	r2, pc, #4	@ (adr r2, 8006218 <UART_SetConfig+0xb8>)
 8006214:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006218:	08006229 	.word	0x08006229
 800621c:	08006239 	.word	0x08006239
 8006220:	08006231 	.word	0x08006231
 8006224:	08006241 	.word	0x08006241
 8006228:	2301      	movs	r3, #1
 800622a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800622e:	e116      	b.n	800645e <UART_SetConfig+0x2fe>
 8006230:	2302      	movs	r3, #2
 8006232:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006236:	e112      	b.n	800645e <UART_SetConfig+0x2fe>
 8006238:	2304      	movs	r3, #4
 800623a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800623e:	e10e      	b.n	800645e <UART_SetConfig+0x2fe>
 8006240:	2308      	movs	r3, #8
 8006242:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006246:	e10a      	b.n	800645e <UART_SetConfig+0x2fe>
 8006248:	2310      	movs	r3, #16
 800624a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800624e:	e106      	b.n	800645e <UART_SetConfig+0x2fe>
 8006250:	697b      	ldr	r3, [r7, #20]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a7c      	ldr	r2, [pc, #496]	@ (8006448 <UART_SetConfig+0x2e8>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d138      	bne.n	80062cc <UART_SetConfig+0x16c>
 800625a:	4b7a      	ldr	r3, [pc, #488]	@ (8006444 <UART_SetConfig+0x2e4>)
 800625c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006260:	f003 030c 	and.w	r3, r3, #12
 8006264:	2b0c      	cmp	r3, #12
 8006266:	d82d      	bhi.n	80062c4 <UART_SetConfig+0x164>
 8006268:	a201      	add	r2, pc, #4	@ (adr r2, 8006270 <UART_SetConfig+0x110>)
 800626a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800626e:	bf00      	nop
 8006270:	080062a5 	.word	0x080062a5
 8006274:	080062c5 	.word	0x080062c5
 8006278:	080062c5 	.word	0x080062c5
 800627c:	080062c5 	.word	0x080062c5
 8006280:	080062b5 	.word	0x080062b5
 8006284:	080062c5 	.word	0x080062c5
 8006288:	080062c5 	.word	0x080062c5
 800628c:	080062c5 	.word	0x080062c5
 8006290:	080062ad 	.word	0x080062ad
 8006294:	080062c5 	.word	0x080062c5
 8006298:	080062c5 	.word	0x080062c5
 800629c:	080062c5 	.word	0x080062c5
 80062a0:	080062bd 	.word	0x080062bd
 80062a4:	2300      	movs	r3, #0
 80062a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062aa:	e0d8      	b.n	800645e <UART_SetConfig+0x2fe>
 80062ac:	2302      	movs	r3, #2
 80062ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062b2:	e0d4      	b.n	800645e <UART_SetConfig+0x2fe>
 80062b4:	2304      	movs	r3, #4
 80062b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ba:	e0d0      	b.n	800645e <UART_SetConfig+0x2fe>
 80062bc:	2308      	movs	r3, #8
 80062be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062c2:	e0cc      	b.n	800645e <UART_SetConfig+0x2fe>
 80062c4:	2310      	movs	r3, #16
 80062c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80062ca:	e0c8      	b.n	800645e <UART_SetConfig+0x2fe>
 80062cc:	697b      	ldr	r3, [r7, #20]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a5e      	ldr	r2, [pc, #376]	@ (800644c <UART_SetConfig+0x2ec>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d125      	bne.n	8006322 <UART_SetConfig+0x1c2>
 80062d6:	4b5b      	ldr	r3, [pc, #364]	@ (8006444 <UART_SetConfig+0x2e4>)
 80062d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062dc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80062e0:	2b30      	cmp	r3, #48	@ 0x30
 80062e2:	d016      	beq.n	8006312 <UART_SetConfig+0x1b2>
 80062e4:	2b30      	cmp	r3, #48	@ 0x30
 80062e6:	d818      	bhi.n	800631a <UART_SetConfig+0x1ba>
 80062e8:	2b20      	cmp	r3, #32
 80062ea:	d00a      	beq.n	8006302 <UART_SetConfig+0x1a2>
 80062ec:	2b20      	cmp	r3, #32
 80062ee:	d814      	bhi.n	800631a <UART_SetConfig+0x1ba>
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d002      	beq.n	80062fa <UART_SetConfig+0x19a>
 80062f4:	2b10      	cmp	r3, #16
 80062f6:	d008      	beq.n	800630a <UART_SetConfig+0x1aa>
 80062f8:	e00f      	b.n	800631a <UART_SetConfig+0x1ba>
 80062fa:	2300      	movs	r3, #0
 80062fc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006300:	e0ad      	b.n	800645e <UART_SetConfig+0x2fe>
 8006302:	2302      	movs	r3, #2
 8006304:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006308:	e0a9      	b.n	800645e <UART_SetConfig+0x2fe>
 800630a:	2304      	movs	r3, #4
 800630c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006310:	e0a5      	b.n	800645e <UART_SetConfig+0x2fe>
 8006312:	2308      	movs	r3, #8
 8006314:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006318:	e0a1      	b.n	800645e <UART_SetConfig+0x2fe>
 800631a:	2310      	movs	r3, #16
 800631c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006320:	e09d      	b.n	800645e <UART_SetConfig+0x2fe>
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	4a4a      	ldr	r2, [pc, #296]	@ (8006450 <UART_SetConfig+0x2f0>)
 8006328:	4293      	cmp	r3, r2
 800632a:	d125      	bne.n	8006378 <UART_SetConfig+0x218>
 800632c:	4b45      	ldr	r3, [pc, #276]	@ (8006444 <UART_SetConfig+0x2e4>)
 800632e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006332:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006336:	2bc0      	cmp	r3, #192	@ 0xc0
 8006338:	d016      	beq.n	8006368 <UART_SetConfig+0x208>
 800633a:	2bc0      	cmp	r3, #192	@ 0xc0
 800633c:	d818      	bhi.n	8006370 <UART_SetConfig+0x210>
 800633e:	2b80      	cmp	r3, #128	@ 0x80
 8006340:	d00a      	beq.n	8006358 <UART_SetConfig+0x1f8>
 8006342:	2b80      	cmp	r3, #128	@ 0x80
 8006344:	d814      	bhi.n	8006370 <UART_SetConfig+0x210>
 8006346:	2b00      	cmp	r3, #0
 8006348:	d002      	beq.n	8006350 <UART_SetConfig+0x1f0>
 800634a:	2b40      	cmp	r3, #64	@ 0x40
 800634c:	d008      	beq.n	8006360 <UART_SetConfig+0x200>
 800634e:	e00f      	b.n	8006370 <UART_SetConfig+0x210>
 8006350:	2300      	movs	r3, #0
 8006352:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006356:	e082      	b.n	800645e <UART_SetConfig+0x2fe>
 8006358:	2302      	movs	r3, #2
 800635a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800635e:	e07e      	b.n	800645e <UART_SetConfig+0x2fe>
 8006360:	2304      	movs	r3, #4
 8006362:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006366:	e07a      	b.n	800645e <UART_SetConfig+0x2fe>
 8006368:	2308      	movs	r3, #8
 800636a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800636e:	e076      	b.n	800645e <UART_SetConfig+0x2fe>
 8006370:	2310      	movs	r3, #16
 8006372:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006376:	e072      	b.n	800645e <UART_SetConfig+0x2fe>
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	4a35      	ldr	r2, [pc, #212]	@ (8006454 <UART_SetConfig+0x2f4>)
 800637e:	4293      	cmp	r3, r2
 8006380:	d12a      	bne.n	80063d8 <UART_SetConfig+0x278>
 8006382:	4b30      	ldr	r3, [pc, #192]	@ (8006444 <UART_SetConfig+0x2e4>)
 8006384:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006388:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800638c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006390:	d01a      	beq.n	80063c8 <UART_SetConfig+0x268>
 8006392:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006396:	d81b      	bhi.n	80063d0 <UART_SetConfig+0x270>
 8006398:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800639c:	d00c      	beq.n	80063b8 <UART_SetConfig+0x258>
 800639e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80063a2:	d815      	bhi.n	80063d0 <UART_SetConfig+0x270>
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d003      	beq.n	80063b0 <UART_SetConfig+0x250>
 80063a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80063ac:	d008      	beq.n	80063c0 <UART_SetConfig+0x260>
 80063ae:	e00f      	b.n	80063d0 <UART_SetConfig+0x270>
 80063b0:	2300      	movs	r3, #0
 80063b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063b6:	e052      	b.n	800645e <UART_SetConfig+0x2fe>
 80063b8:	2302      	movs	r3, #2
 80063ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063be:	e04e      	b.n	800645e <UART_SetConfig+0x2fe>
 80063c0:	2304      	movs	r3, #4
 80063c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063c6:	e04a      	b.n	800645e <UART_SetConfig+0x2fe>
 80063c8:	2308      	movs	r3, #8
 80063ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063ce:	e046      	b.n	800645e <UART_SetConfig+0x2fe>
 80063d0:	2310      	movs	r3, #16
 80063d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80063d6:	e042      	b.n	800645e <UART_SetConfig+0x2fe>
 80063d8:	697b      	ldr	r3, [r7, #20]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a17      	ldr	r2, [pc, #92]	@ (800643c <UART_SetConfig+0x2dc>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d13a      	bne.n	8006458 <UART_SetConfig+0x2f8>
 80063e2:	4b18      	ldr	r3, [pc, #96]	@ (8006444 <UART_SetConfig+0x2e4>)
 80063e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063e8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80063ec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063f0:	d01a      	beq.n	8006428 <UART_SetConfig+0x2c8>
 80063f2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063f6:	d81b      	bhi.n	8006430 <UART_SetConfig+0x2d0>
 80063f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063fc:	d00c      	beq.n	8006418 <UART_SetConfig+0x2b8>
 80063fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006402:	d815      	bhi.n	8006430 <UART_SetConfig+0x2d0>
 8006404:	2b00      	cmp	r3, #0
 8006406:	d003      	beq.n	8006410 <UART_SetConfig+0x2b0>
 8006408:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800640c:	d008      	beq.n	8006420 <UART_SetConfig+0x2c0>
 800640e:	e00f      	b.n	8006430 <UART_SetConfig+0x2d0>
 8006410:	2300      	movs	r3, #0
 8006412:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006416:	e022      	b.n	800645e <UART_SetConfig+0x2fe>
 8006418:	2302      	movs	r3, #2
 800641a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800641e:	e01e      	b.n	800645e <UART_SetConfig+0x2fe>
 8006420:	2304      	movs	r3, #4
 8006422:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006426:	e01a      	b.n	800645e <UART_SetConfig+0x2fe>
 8006428:	2308      	movs	r3, #8
 800642a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800642e:	e016      	b.n	800645e <UART_SetConfig+0x2fe>
 8006430:	2310      	movs	r3, #16
 8006432:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006436:	e012      	b.n	800645e <UART_SetConfig+0x2fe>
 8006438:	cfff69f3 	.word	0xcfff69f3
 800643c:	40008000 	.word	0x40008000
 8006440:	40013800 	.word	0x40013800
 8006444:	40021000 	.word	0x40021000
 8006448:	40004400 	.word	0x40004400
 800644c:	40004800 	.word	0x40004800
 8006450:	40004c00 	.word	0x40004c00
 8006454:	40005000 	.word	0x40005000
 8006458:	2310      	movs	r3, #16
 800645a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	4aae      	ldr	r2, [pc, #696]	@ (800671c <UART_SetConfig+0x5bc>)
 8006464:	4293      	cmp	r3, r2
 8006466:	f040 8097 	bne.w	8006598 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800646a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800646e:	2b08      	cmp	r3, #8
 8006470:	d823      	bhi.n	80064ba <UART_SetConfig+0x35a>
 8006472:	a201      	add	r2, pc, #4	@ (adr r2, 8006478 <UART_SetConfig+0x318>)
 8006474:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006478:	0800649d 	.word	0x0800649d
 800647c:	080064bb 	.word	0x080064bb
 8006480:	080064a5 	.word	0x080064a5
 8006484:	080064bb 	.word	0x080064bb
 8006488:	080064ab 	.word	0x080064ab
 800648c:	080064bb 	.word	0x080064bb
 8006490:	080064bb 	.word	0x080064bb
 8006494:	080064bb 	.word	0x080064bb
 8006498:	080064b3 	.word	0x080064b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800649c:	f7fd fd98 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 80064a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064a2:	e010      	b.n	80064c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064a4:	4b9e      	ldr	r3, [pc, #632]	@ (8006720 <UART_SetConfig+0x5c0>)
 80064a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064a8:	e00d      	b.n	80064c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064aa:	f7fd fd23 	bl	8003ef4 <HAL_RCC_GetSysClockFreq>
 80064ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80064b0:	e009      	b.n	80064c6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80064b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80064b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80064b8:	e005      	b.n	80064c6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80064ba:	2300      	movs	r3, #0
 80064bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80064be:	2301      	movs	r3, #1
 80064c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80064c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80064c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	f000 8130 	beq.w	800672e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d2:	4a94      	ldr	r2, [pc, #592]	@ (8006724 <UART_SetConfig+0x5c4>)
 80064d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064d8:	461a      	mov	r2, r3
 80064da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80064e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	685a      	ldr	r2, [r3, #4]
 80064e6:	4613      	mov	r3, r2
 80064e8:	005b      	lsls	r3, r3, #1
 80064ea:	4413      	add	r3, r2
 80064ec:	69ba      	ldr	r2, [r7, #24]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	d305      	bcc.n	80064fe <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80064f2:	697b      	ldr	r3, [r7, #20]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80064f8:	69ba      	ldr	r2, [r7, #24]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d903      	bls.n	8006506 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80064fe:	2301      	movs	r3, #1
 8006500:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006504:	e113      	b.n	800672e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006508:	2200      	movs	r2, #0
 800650a:	60bb      	str	r3, [r7, #8]
 800650c:	60fa      	str	r2, [r7, #12]
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006512:	4a84      	ldr	r2, [pc, #528]	@ (8006724 <UART_SetConfig+0x5c4>)
 8006514:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006518:	b29b      	uxth	r3, r3
 800651a:	2200      	movs	r2, #0
 800651c:	603b      	str	r3, [r7, #0]
 800651e:	607a      	str	r2, [r7, #4]
 8006520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006524:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8006528:	f7fa fcf6 	bl	8000f18 <__aeabi_uldivmod>
 800652c:	4602      	mov	r2, r0
 800652e:	460b      	mov	r3, r1
 8006530:	4610      	mov	r0, r2
 8006532:	4619      	mov	r1, r3
 8006534:	f04f 0200 	mov.w	r2, #0
 8006538:	f04f 0300 	mov.w	r3, #0
 800653c:	020b      	lsls	r3, r1, #8
 800653e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006542:	0202      	lsls	r2, r0, #8
 8006544:	6979      	ldr	r1, [r7, #20]
 8006546:	6849      	ldr	r1, [r1, #4]
 8006548:	0849      	lsrs	r1, r1, #1
 800654a:	2000      	movs	r0, #0
 800654c:	460c      	mov	r4, r1
 800654e:	4605      	mov	r5, r0
 8006550:	eb12 0804 	adds.w	r8, r2, r4
 8006554:	eb43 0905 	adc.w	r9, r3, r5
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	2200      	movs	r2, #0
 800655e:	469a      	mov	sl, r3
 8006560:	4693      	mov	fp, r2
 8006562:	4652      	mov	r2, sl
 8006564:	465b      	mov	r3, fp
 8006566:	4640      	mov	r0, r8
 8006568:	4649      	mov	r1, r9
 800656a:	f7fa fcd5 	bl	8000f18 <__aeabi_uldivmod>
 800656e:	4602      	mov	r2, r0
 8006570:	460b      	mov	r3, r1
 8006572:	4613      	mov	r3, r2
 8006574:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006576:	6a3b      	ldr	r3, [r7, #32]
 8006578:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800657c:	d308      	bcc.n	8006590 <UART_SetConfig+0x430>
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006584:	d204      	bcs.n	8006590 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6a3a      	ldr	r2, [r7, #32]
 800658c:	60da      	str	r2, [r3, #12]
 800658e:	e0ce      	b.n	800672e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006590:	2301      	movs	r3, #1
 8006592:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006596:	e0ca      	b.n	800672e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006598:	697b      	ldr	r3, [r7, #20]
 800659a:	69db      	ldr	r3, [r3, #28]
 800659c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065a0:	d166      	bne.n	8006670 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80065a2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80065a6:	2b08      	cmp	r3, #8
 80065a8:	d827      	bhi.n	80065fa <UART_SetConfig+0x49a>
 80065aa:	a201      	add	r2, pc, #4	@ (adr r2, 80065b0 <UART_SetConfig+0x450>)
 80065ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065b0:	080065d5 	.word	0x080065d5
 80065b4:	080065dd 	.word	0x080065dd
 80065b8:	080065e5 	.word	0x080065e5
 80065bc:	080065fb 	.word	0x080065fb
 80065c0:	080065eb 	.word	0x080065eb
 80065c4:	080065fb 	.word	0x080065fb
 80065c8:	080065fb 	.word	0x080065fb
 80065cc:	080065fb 	.word	0x080065fb
 80065d0:	080065f3 	.word	0x080065f3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065d4:	f7fd fcfc 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 80065d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065da:	e014      	b.n	8006606 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065dc:	f7fd fd0e 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 80065e0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065e2:	e010      	b.n	8006606 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80065e4:	4b4e      	ldr	r3, [pc, #312]	@ (8006720 <UART_SetConfig+0x5c0>)
 80065e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065e8:	e00d      	b.n	8006606 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80065ea:	f7fd fc83 	bl	8003ef4 <HAL_RCC_GetSysClockFreq>
 80065ee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80065f0:	e009      	b.n	8006606 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80065f2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80065f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80065f8:	e005      	b.n	8006606 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80065fa:	2300      	movs	r3, #0
 80065fc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006604:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006608:	2b00      	cmp	r3, #0
 800660a:	f000 8090 	beq.w	800672e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006612:	4a44      	ldr	r2, [pc, #272]	@ (8006724 <UART_SetConfig+0x5c4>)
 8006614:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006618:	461a      	mov	r2, r3
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006620:	005a      	lsls	r2, r3, #1
 8006622:	697b      	ldr	r3, [r7, #20]
 8006624:	685b      	ldr	r3, [r3, #4]
 8006626:	085b      	lsrs	r3, r3, #1
 8006628:	441a      	add	r2, r3
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	685b      	ldr	r3, [r3, #4]
 800662e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006632:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006634:	6a3b      	ldr	r3, [r7, #32]
 8006636:	2b0f      	cmp	r3, #15
 8006638:	d916      	bls.n	8006668 <UART_SetConfig+0x508>
 800663a:	6a3b      	ldr	r3, [r7, #32]
 800663c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006640:	d212      	bcs.n	8006668 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	b29b      	uxth	r3, r3
 8006646:	f023 030f 	bic.w	r3, r3, #15
 800664a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	085b      	lsrs	r3, r3, #1
 8006650:	b29b      	uxth	r3, r3
 8006652:	f003 0307 	and.w	r3, r3, #7
 8006656:	b29a      	uxth	r2, r3
 8006658:	8bfb      	ldrh	r3, [r7, #30]
 800665a:	4313      	orrs	r3, r2
 800665c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800665e:	697b      	ldr	r3, [r7, #20]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	8bfa      	ldrh	r2, [r7, #30]
 8006664:	60da      	str	r2, [r3, #12]
 8006666:	e062      	b.n	800672e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006668:	2301      	movs	r3, #1
 800666a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800666e:	e05e      	b.n	800672e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006670:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006674:	2b08      	cmp	r3, #8
 8006676:	d828      	bhi.n	80066ca <UART_SetConfig+0x56a>
 8006678:	a201      	add	r2, pc, #4	@ (adr r2, 8006680 <UART_SetConfig+0x520>)
 800667a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667e:	bf00      	nop
 8006680:	080066a5 	.word	0x080066a5
 8006684:	080066ad 	.word	0x080066ad
 8006688:	080066b5 	.word	0x080066b5
 800668c:	080066cb 	.word	0x080066cb
 8006690:	080066bb 	.word	0x080066bb
 8006694:	080066cb 	.word	0x080066cb
 8006698:	080066cb 	.word	0x080066cb
 800669c:	080066cb 	.word	0x080066cb
 80066a0:	080066c3 	.word	0x080066c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80066a4:	f7fd fc94 	bl	8003fd0 <HAL_RCC_GetPCLK1Freq>
 80066a8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066aa:	e014      	b.n	80066d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80066ac:	f7fd fca6 	bl	8003ffc <HAL_RCC_GetPCLK2Freq>
 80066b0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066b2:	e010      	b.n	80066d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80066b4:	4b1a      	ldr	r3, [pc, #104]	@ (8006720 <UART_SetConfig+0x5c0>)
 80066b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066b8:	e00d      	b.n	80066d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80066ba:	f7fd fc1b 	bl	8003ef4 <HAL_RCC_GetSysClockFreq>
 80066be:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80066c0:	e009      	b.n	80066d6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80066c2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80066c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80066c8:	e005      	b.n	80066d6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80066ca:	2300      	movs	r3, #0
 80066cc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80066d4:	bf00      	nop
    }

    if (pclk != 0U)
 80066d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d028      	beq.n	800672e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066e0:	4a10      	ldr	r2, [pc, #64]	@ (8006724 <UART_SetConfig+0x5c4>)
 80066e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066e6:	461a      	mov	r2, r3
 80066e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ea:	fbb3 f2f2 	udiv	r2, r3, r2
 80066ee:	697b      	ldr	r3, [r7, #20]
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	085b      	lsrs	r3, r3, #1
 80066f4:	441a      	add	r2, r3
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	685b      	ldr	r3, [r3, #4]
 80066fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80066fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006700:	6a3b      	ldr	r3, [r7, #32]
 8006702:	2b0f      	cmp	r3, #15
 8006704:	d910      	bls.n	8006728 <UART_SetConfig+0x5c8>
 8006706:	6a3b      	ldr	r3, [r7, #32]
 8006708:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800670c:	d20c      	bcs.n	8006728 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800670e:	6a3b      	ldr	r3, [r7, #32]
 8006710:	b29a      	uxth	r2, r3
 8006712:	697b      	ldr	r3, [r7, #20]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	60da      	str	r2, [r3, #12]
 8006718:	e009      	b.n	800672e <UART_SetConfig+0x5ce>
 800671a:	bf00      	nop
 800671c:	40008000 	.word	0x40008000
 8006720:	00f42400 	.word	0x00f42400
 8006724:	0800cc8c 	.word	0x0800cc8c
      }
      else
      {
        ret = HAL_ERROR;
 8006728:	2301      	movs	r3, #1
 800672a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800672e:	697b      	ldr	r3, [r7, #20]
 8006730:	2201      	movs	r2, #1
 8006732:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006736:	697b      	ldr	r3, [r7, #20]
 8006738:	2201      	movs	r2, #1
 800673a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	2200      	movs	r2, #0
 8006742:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	2200      	movs	r2, #0
 8006748:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800674a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800674e:	4618      	mov	r0, r3
 8006750:	3730      	adds	r7, #48	@ 0x30
 8006752:	46bd      	mov	sp, r7
 8006754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006758 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006758:	b480      	push	{r7}
 800675a:	b083      	sub	sp, #12
 800675c:	af00      	add	r7, sp, #0
 800675e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006764:	f003 0308 	and.w	r3, r3, #8
 8006768:	2b00      	cmp	r3, #0
 800676a:	d00a      	beq.n	8006782 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	430a      	orrs	r2, r1
 8006780:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006786:	f003 0301 	and.w	r3, r3, #1
 800678a:	2b00      	cmp	r3, #0
 800678c:	d00a      	beq.n	80067a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	685b      	ldr	r3, [r3, #4]
 8006794:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	430a      	orrs	r2, r1
 80067a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067a8:	f003 0302 	and.w	r3, r3, #2
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00a      	beq.n	80067c6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	685b      	ldr	r3, [r3, #4]
 80067b6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	430a      	orrs	r2, r1
 80067c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ca:	f003 0304 	and.w	r3, r3, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00a      	beq.n	80067e8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	685b      	ldr	r3, [r3, #4]
 80067d8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	430a      	orrs	r2, r1
 80067e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ec:	f003 0310 	and.w	r3, r3, #16
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d00a      	beq.n	800680a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800680e:	f003 0320 	and.w	r3, r3, #32
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00a      	beq.n	800682c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006834:	2b00      	cmp	r3, #0
 8006836:	d01a      	beq.n	800686e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	685b      	ldr	r3, [r3, #4]
 800683e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	430a      	orrs	r2, r1
 800684c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006852:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006856:	d10a      	bne.n	800686e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	685b      	ldr	r3, [r3, #4]
 800685e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00a      	beq.n	8006890 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	430a      	orrs	r2, r1
 800688e:	605a      	str	r2, [r3, #4]
  }
}
 8006890:	bf00      	nop
 8006892:	370c      	adds	r7, #12
 8006894:	46bd      	mov	sp, r7
 8006896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689a:	4770      	bx	lr

0800689c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b098      	sub	sp, #96	@ 0x60
 80068a0:	af02      	add	r7, sp, #8
 80068a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80068ac:	f7fc f928 	bl	8002b00 <HAL_GetTick>
 80068b0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	f003 0308 	and.w	r3, r3, #8
 80068bc:	2b08      	cmp	r3, #8
 80068be:	d12f      	bne.n	8006920 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80068c0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80068c4:	9300      	str	r3, [sp, #0]
 80068c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80068c8:	2200      	movs	r2, #0
 80068ca:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80068ce:	6878      	ldr	r0, [r7, #4]
 80068d0:	f000 f88e 	bl	80069f0 <UART_WaitOnFlagUntilTimeout>
 80068d4:	4603      	mov	r3, r0
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d022      	beq.n	8006920 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068e0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80068e2:	e853 3f00 	ldrex	r3, [r3]
 80068e6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80068e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80068ee:	653b      	str	r3, [r7, #80]	@ 0x50
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	461a      	mov	r2, r3
 80068f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80068f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80068fa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068fc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80068fe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006900:	e841 2300 	strex	r3, r2, [r1]
 8006904:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006906:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006908:	2b00      	cmp	r3, #0
 800690a:	d1e6      	bne.n	80068da <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2220      	movs	r2, #32
 8006910:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	2200      	movs	r2, #0
 8006918:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800691c:	2303      	movs	r3, #3
 800691e:	e063      	b.n	80069e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f003 0304 	and.w	r3, r3, #4
 800692a:	2b04      	cmp	r3, #4
 800692c:	d149      	bne.n	80069c2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800692e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006932:	9300      	str	r3, [sp, #0]
 8006934:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006936:	2200      	movs	r2, #0
 8006938:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 f857 	bl	80069f0 <UART_WaitOnFlagUntilTimeout>
 8006942:	4603      	mov	r3, r0
 8006944:	2b00      	cmp	r3, #0
 8006946:	d03c      	beq.n	80069c2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800694e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006950:	e853 3f00 	ldrex	r3, [r3]
 8006954:	623b      	str	r3, [r7, #32]
   return(result);
 8006956:	6a3b      	ldr	r3, [r7, #32]
 8006958:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800695c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	461a      	mov	r2, r3
 8006964:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006966:	633b      	str	r3, [r7, #48]	@ 0x30
 8006968:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800696a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800696c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800696e:	e841 2300 	strex	r3, r2, [r1]
 8006972:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006974:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006976:	2b00      	cmp	r3, #0
 8006978:	d1e6      	bne.n	8006948 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	3308      	adds	r3, #8
 8006980:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006982:	693b      	ldr	r3, [r7, #16]
 8006984:	e853 3f00 	ldrex	r3, [r3]
 8006988:	60fb      	str	r3, [r7, #12]
   return(result);
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	f023 0301 	bic.w	r3, r3, #1
 8006990:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3308      	adds	r3, #8
 8006998:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800699a:	61fa      	str	r2, [r7, #28]
 800699c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800699e:	69b9      	ldr	r1, [r7, #24]
 80069a0:	69fa      	ldr	r2, [r7, #28]
 80069a2:	e841 2300 	strex	r3, r2, [r1]
 80069a6:	617b      	str	r3, [r7, #20]
   return(result);
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1e5      	bne.n	800697a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	2220      	movs	r2, #32
 80069b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069be:	2303      	movs	r3, #3
 80069c0:	e012      	b.n	80069e8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2220      	movs	r2, #32
 80069c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	2220      	movs	r2, #32
 80069ce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	2200      	movs	r2, #0
 80069e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80069e6:	2300      	movs	r3, #0
}
 80069e8:	4618      	mov	r0, r3
 80069ea:	3758      	adds	r7, #88	@ 0x58
 80069ec:	46bd      	mov	sp, r7
 80069ee:	bd80      	pop	{r7, pc}

080069f0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b084      	sub	sp, #16
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	603b      	str	r3, [r7, #0]
 80069fc:	4613      	mov	r3, r2
 80069fe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a00:	e04f      	b.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a02:	69bb      	ldr	r3, [r7, #24]
 8006a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a08:	d04b      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a0a:	f7fc f879 	bl	8002b00 <HAL_GetTick>
 8006a0e:	4602      	mov	r2, r0
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	1ad3      	subs	r3, r2, r3
 8006a14:	69ba      	ldr	r2, [r7, #24]
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d302      	bcc.n	8006a20 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a1a:	69bb      	ldr	r3, [r7, #24]
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d101      	bne.n	8006a24 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e04e      	b.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	f003 0304 	and.w	r3, r3, #4
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d037      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	2b80      	cmp	r3, #128	@ 0x80
 8006a36:	d034      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006a38:	68bb      	ldr	r3, [r7, #8]
 8006a3a:	2b40      	cmp	r3, #64	@ 0x40
 8006a3c:	d031      	beq.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	69db      	ldr	r3, [r3, #28]
 8006a44:	f003 0308 	and.w	r3, r3, #8
 8006a48:	2b08      	cmp	r3, #8
 8006a4a:	d110      	bne.n	8006a6e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2208      	movs	r2, #8
 8006a52:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a54:	68f8      	ldr	r0, [r7, #12]
 8006a56:	f000 f920 	bl	8006c9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	2208      	movs	r2, #8
 8006a5e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e029      	b.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a78:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a7c:	d111      	bne.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006a86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a88:	68f8      	ldr	r0, [r7, #12]
 8006a8a:	f000 f906 	bl	8006c9a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e00f      	b.n	8006ac2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	69da      	ldr	r2, [r3, #28]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	4013      	ands	r3, r2
 8006aac:	68ba      	ldr	r2, [r7, #8]
 8006aae:	429a      	cmp	r2, r3
 8006ab0:	bf0c      	ite	eq
 8006ab2:	2301      	moveq	r3, #1
 8006ab4:	2300      	movne	r3, #0
 8006ab6:	b2db      	uxtb	r3, r3
 8006ab8:	461a      	mov	r2, r3
 8006aba:	79fb      	ldrb	r3, [r7, #7]
 8006abc:	429a      	cmp	r2, r3
 8006abe:	d0a0      	beq.n	8006a02 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006ac0:	2300      	movs	r3, #0
}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3710      	adds	r7, #16
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}
	...

08006acc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006acc:	b580      	push	{r7, lr}
 8006ace:	b096      	sub	sp, #88	@ 0x58
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	60f8      	str	r0, [r7, #12]
 8006ad4:	60b9      	str	r1, [r7, #8]
 8006ad6:	4613      	mov	r3, r2
 8006ad8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	68ba      	ldr	r2, [r7, #8]
 8006ade:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize = Size;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	88fa      	ldrh	r2, [r7, #6]
 8006ae4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	2200      	movs	r2, #0
 8006aec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	2222      	movs	r2, #34	@ 0x22
 8006af4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  if (huart->hdmarx != NULL)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d02d      	beq.n	8006b5e <UART_Start_Receive_DMA+0x92>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b08:	4a40      	ldr	r2, [pc, #256]	@ (8006c0c <UART_Start_Receive_DMA+0x140>)
 8006b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b12:	4a3f      	ldr	r2, [pc, #252]	@ (8006c10 <UART_Start_Receive_DMA+0x144>)
 8006b14:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b1c:	4a3d      	ldr	r2, [pc, #244]	@ (8006c14 <UART_Start_Receive_DMA+0x148>)
 8006b1e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b26:	2200      	movs	r2, #0
 8006b28:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	3324      	adds	r3, #36	@ 0x24
 8006b36:	4619      	mov	r1, r3
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006b3c:	461a      	mov	r2, r3
 8006b3e:	88fb      	ldrh	r3, [r7, #6]
 8006b40:	f7fc f972 	bl	8002e28 <HAL_DMA_Start_IT>
 8006b44:	4603      	mov	r3, r0
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d009      	beq.n	8006b5e <UART_Start_Receive_DMA+0x92>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	2210      	movs	r2, #16
 8006b4e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      return HAL_ERROR;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	e051      	b.n	8006c02 <UART_Start_Receive_DMA+0x136>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	691b      	ldr	r3, [r3, #16]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d018      	beq.n	8006b98 <UART_Start_Receive_DMA+0xcc>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b6e:	e853 3f00 	ldrex	r3, [r3]
 8006b72:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006b74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	461a      	mov	r2, r3
 8006b82:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b84:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b86:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b88:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006b8a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b8c:	e841 2300 	strex	r3, r2, [r1]
 8006b90:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006b92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d1e6      	bne.n	8006b66 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	3308      	adds	r3, #8
 8006b9e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ba2:	e853 3f00 	ldrex	r3, [r3]
 8006ba6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006baa:	f043 0301 	orr.w	r3, r3, #1
 8006bae:	653b      	str	r3, [r7, #80]	@ 0x50
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	3308      	adds	r3, #8
 8006bb6:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006bb8:	637a      	str	r2, [r7, #52]	@ 0x34
 8006bba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006bbe:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006bc0:	e841 2300 	strex	r3, r2, [r1]
 8006bc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006bc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e5      	bne.n	8006b98 <UART_Start_Receive_DMA+0xcc>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	3308      	adds	r3, #8
 8006bd2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bd4:	697b      	ldr	r3, [r7, #20]
 8006bd6:	e853 3f00 	ldrex	r3, [r3]
 8006bda:	613b      	str	r3, [r7, #16]
   return(result);
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	3308      	adds	r3, #8
 8006bea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006bec:	623a      	str	r2, [r7, #32]
 8006bee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bf0:	69f9      	ldr	r1, [r7, #28]
 8006bf2:	6a3a      	ldr	r2, [r7, #32]
 8006bf4:	e841 2300 	strex	r3, r2, [r1]
 8006bf8:	61bb      	str	r3, [r7, #24]
   return(result);
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d1e5      	bne.n	8006bcc <UART_Start_Receive_DMA+0x100>

  return HAL_OK;
 8006c00:	2300      	movs	r3, #0
}
 8006c02:	4618      	mov	r0, r3
 8006c04:	3758      	adds	r7, #88	@ 0x58
 8006c06:	46bd      	mov	sp, r7
 8006c08:	bd80      	pop	{r7, pc}
 8006c0a:	bf00      	nop
 8006c0c:	08006d67 	.word	0x08006d67
 8006c10:	08006e93 	.word	0x08006e93
 8006c14:	08006ed1 	.word	0x08006ed1

08006c18 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b08f      	sub	sp, #60	@ 0x3c
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c26:	6a3b      	ldr	r3, [r7, #32]
 8006c28:	e853 3f00 	ldrex	r3, [r3]
 8006c2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8006c2e:	69fb      	ldr	r3, [r7, #28]
 8006c30:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006c34:	637b      	str	r3, [r7, #52]	@ 0x34
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	461a      	mov	r2, r3
 8006c3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006c40:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006c44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006c46:	e841 2300 	strex	r3, r2, [r1]
 8006c4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d1e6      	bne.n	8006c20 <UART_EndTxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	3308      	adds	r3, #8
 8006c58:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	e853 3f00 	ldrex	r3, [r3]
 8006c60:	60bb      	str	r3, [r7, #8]
   return(result);
 8006c62:	68bb      	ldr	r3, [r7, #8]
 8006c64:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8006c68:	633b      	str	r3, [r7, #48]	@ 0x30
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	3308      	adds	r3, #8
 8006c70:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006c72:	61ba      	str	r2, [r7, #24]
 8006c74:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c76:	6979      	ldr	r1, [r7, #20]
 8006c78:	69ba      	ldr	r2, [r7, #24]
 8006c7a:	e841 2300 	strex	r3, r2, [r1]
 8006c7e:	613b      	str	r3, [r7, #16]
   return(result);
 8006c80:	693b      	ldr	r3, [r7, #16]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d1e5      	bne.n	8006c52 <UART_EndTxTransfer+0x3a>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2220      	movs	r2, #32
 8006c8a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
}
 8006c8e:	bf00      	nop
 8006c90:	373c      	adds	r7, #60	@ 0x3c
 8006c92:	46bd      	mov	sp, r7
 8006c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c98:	4770      	bx	lr

08006c9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c9a:	b480      	push	{r7}
 8006c9c:	b095      	sub	sp, #84	@ 0x54
 8006c9e:	af00      	add	r7, sp, #0
 8006ca0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006caa:	e853 3f00 	ldrex	r3, [r3]
 8006cae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006cb2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	461a      	mov	r2, r3
 8006cbe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006cc0:	643b      	str	r3, [r7, #64]	@ 0x40
 8006cc2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006cc6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006cc8:	e841 2300 	strex	r3, r2, [r1]
 8006ccc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006cce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1e6      	bne.n	8006ca2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	3308      	adds	r3, #8
 8006cda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	e853 3f00 	ldrex	r3, [r3]
 8006ce2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cea:	f023 0301 	bic.w	r3, r3, #1
 8006cee:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3308      	adds	r3, #8
 8006cf6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006cf8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cfa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cfe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e3      	bne.n	8006cd4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006d10:	2b01      	cmp	r3, #1
 8006d12:	d118      	bne.n	8006d46 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	e853 3f00 	ldrex	r3, [r3]
 8006d20:	60bb      	str	r3, [r7, #8]
   return(result);
 8006d22:	68bb      	ldr	r3, [r7, #8]
 8006d24:	f023 0310 	bic.w	r3, r3, #16
 8006d28:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d32:	61bb      	str	r3, [r7, #24]
 8006d34:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d36:	6979      	ldr	r1, [r7, #20]
 8006d38:	69ba      	ldr	r2, [r7, #24]
 8006d3a:	e841 2300 	strex	r3, r2, [r1]
 8006d3e:	613b      	str	r3, [r7, #16]
   return(result);
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d1e6      	bne.n	8006d14 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	2220      	movs	r2, #32
 8006d4a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d5a:	bf00      	nop
 8006d5c:	3754      	adds	r7, #84	@ 0x54
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d64:	4770      	bx	lr

08006d66 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006d66:	b580      	push	{r7, lr}
 8006d68:	b09c      	sub	sp, #112	@ 0x70
 8006d6a:	af00      	add	r7, sp, #0
 8006d6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d72:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f003 0320 	and.w	r3, r3, #32
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d171      	bne.n	8006e66 <UART_DMAReceiveCplt+0x100>
  {
    huart->RxXferCount = 0U;
 8006d82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d84:	2200      	movs	r2, #0
 8006d86:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006d92:	e853 3f00 	ldrex	r3, [r3]
 8006d96:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006d98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006d9a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006d9e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006da0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	461a      	mov	r2, r3
 8006da6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006da8:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006daa:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006dae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006db0:	e841 2300 	strex	r3, r2, [r1]
 8006db4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006db6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d1e6      	bne.n	8006d8a <UART_DMAReceiveCplt+0x24>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dbc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3308      	adds	r3, #8
 8006dc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dc6:	e853 3f00 	ldrex	r3, [r3]
 8006dca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006dcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006dce:	f023 0301 	bic.w	r3, r3, #1
 8006dd2:	667b      	str	r3, [r7, #100]	@ 0x64
 8006dd4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	3308      	adds	r3, #8
 8006dda:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8006ddc:	647a      	str	r2, [r7, #68]	@ 0x44
 8006dde:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006de0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006de2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006de4:	e841 2300 	strex	r3, r2, [r1]
 8006de8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006dea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d1e5      	bne.n	8006dbc <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006df0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	3308      	adds	r3, #8
 8006df6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	623b      	str	r3, [r7, #32]
   return(result);
 8006e00:	6a3b      	ldr	r3, [r7, #32]
 8006e02:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006e06:	663b      	str	r3, [r7, #96]	@ 0x60
 8006e08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3308      	adds	r3, #8
 8006e0e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8006e10:	633a      	str	r2, [r7, #48]	@ 0x30
 8006e12:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e14:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e18:	e841 2300 	strex	r3, r2, [r1]
 8006e1c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d1e5      	bne.n	8006df0 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e26:	2220      	movs	r2, #32
 8006e28:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e2c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e2e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e30:	2b01      	cmp	r3, #1
 8006e32:	d118      	bne.n	8006e66 <UART_DMAReceiveCplt+0x100>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e34:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e3a:	693b      	ldr	r3, [r7, #16]
 8006e3c:	e853 3f00 	ldrex	r3, [r3]
 8006e40:	60fb      	str	r3, [r7, #12]
   return(result);
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	f023 0310 	bic.w	r3, r3, #16
 8006e48:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006e4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	461a      	mov	r2, r3
 8006e50:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e56:	69b9      	ldr	r1, [r7, #24]
 8006e58:	69fa      	ldr	r2, [r7, #28]
 8006e5a:	e841 2300 	strex	r3, r2, [r1]
 8006e5e:	617b      	str	r3, [r7, #20]
   return(result);
 8006e60:	697b      	ldr	r3, [r7, #20]
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d1e6      	bne.n	8006e34 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006e66:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e68:	2200      	movs	r2, #0
 8006e6a:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006e70:	2b01      	cmp	r3, #1
 8006e72:	d107      	bne.n	8006e84 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e76:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006e7a:	4619      	mov	r1, r3
 8006e7c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e7e:	f7ff f963 	bl	8006148 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006e82:	e002      	b.n	8006e8a <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8006e84:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8006e86:	f7fa fac1 	bl	800140c <HAL_UART_RxCpltCallback>
}
 8006e8a:	bf00      	nop
 8006e8c:	3770      	adds	r7, #112	@ 0x70
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}

08006e92 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e9e:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2201      	movs	r2, #1
 8006ea4:	671a      	str	r2, [r3, #112]	@ 0x70

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006eaa:	2b01      	cmp	r3, #1
 8006eac:	d109      	bne.n	8006ec2 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006eb4:	085b      	lsrs	r3, r3, #1
 8006eb6:	b29b      	uxth	r3, r3
 8006eb8:	4619      	mov	r1, r3
 8006eba:	68f8      	ldr	r0, [r7, #12]
 8006ebc:	f7ff f944 	bl	8006148 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006ec0:	e002      	b.n	8006ec8 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8006ec2:	68f8      	ldr	r0, [r7, #12]
 8006ec4:	f7ff f92c 	bl	8006120 <HAL_UART_RxHalfCpltCallback>
}
 8006ec8:	bf00      	nop
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}

08006ed0 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006ed0:	b580      	push	{r7, lr}
 8006ed2:	b086      	sub	sp, #24
 8006ed4:	af00      	add	r7, sp, #0
 8006ed6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006edc:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006ede:	697b      	ldr	r3, [r7, #20]
 8006ee0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ee4:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006ee6:	697b      	ldr	r3, [r7, #20]
 8006ee8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006eec:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	689b      	ldr	r3, [r3, #8]
 8006ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ef8:	2b80      	cmp	r3, #128	@ 0x80
 8006efa:	d109      	bne.n	8006f10 <UART_DMAError+0x40>
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	2b21      	cmp	r3, #33	@ 0x21
 8006f00:	d106      	bne.n	8006f10 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	2200      	movs	r2, #0
 8006f06:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    UART_EndTxTransfer(huart);
 8006f0a:	6978      	ldr	r0, [r7, #20]
 8006f0c:	f7ff fe84 	bl	8006c18 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8006f10:	697b      	ldr	r3, [r7, #20]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006f1a:	2b40      	cmp	r3, #64	@ 0x40
 8006f1c:	d109      	bne.n	8006f32 <UART_DMAError+0x62>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	2b22      	cmp	r3, #34	@ 0x22
 8006f22:	d106      	bne.n	8006f32 <UART_DMAError+0x62>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8006f24:	697b      	ldr	r3, [r7, #20]
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    UART_EndRxTransfer(huart);
 8006f2c:	6978      	ldr	r0, [r7, #20]
 8006f2e:	f7ff feb4 	bl	8006c9a <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006f38:	f043 0210 	orr.w	r2, r3, #16
 8006f3c:	697b      	ldr	r3, [r7, #20]
 8006f3e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f42:	6978      	ldr	r0, [r7, #20]
 8006f44:	f7ff f8f6 	bl	8006134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f48:	bf00      	nop
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006f5e:	2b01      	cmp	r3, #1
 8006f60:	d101      	bne.n	8006f66 <HAL_UARTEx_DisableFifoMode+0x16>
 8006f62:	2302      	movs	r3, #2
 8006f64:	e027      	b.n	8006fb6 <HAL_UARTEx_DisableFifoMode+0x66>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2201      	movs	r2, #1
 8006f6a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2224      	movs	r2, #36	@ 0x24
 8006f72:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	681a      	ldr	r2, [r3, #0]
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f022 0201 	bic.w	r2, r2, #1
 8006f8c:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006f94:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	2200      	movs	r2, #0
 8006f9a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68fa      	ldr	r2, [r7, #12]
 8006fa2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2220      	movs	r2, #32
 8006fa8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr

08006fc2 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006fd2:	2b01      	cmp	r3, #1
 8006fd4:	d101      	bne.n	8006fda <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006fd6:	2302      	movs	r3, #2
 8006fd8:	e02d      	b.n	8007036 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2201      	movs	r2, #1
 8006fde:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2224      	movs	r2, #36	@ 0x24
 8006fe6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	681a      	ldr	r2, [r3, #0]
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f022 0201 	bic.w	r2, r2, #1
 8007000:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	689b      	ldr	r3, [r3, #8]
 8007008:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	683a      	ldr	r2, [r7, #0]
 8007012:	430a      	orrs	r2, r1
 8007014:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f850 	bl	80070bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	68fa      	ldr	r2, [r7, #12]
 8007022:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2220      	movs	r2, #32
 8007028:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007034:	2300      	movs	r3, #0
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}

0800703e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b084      	sub	sp, #16
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800704e:	2b01      	cmp	r3, #1
 8007050:	d101      	bne.n	8007056 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007052:	2302      	movs	r3, #2
 8007054:	e02d      	b.n	80070b2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2224      	movs	r2, #36	@ 0x24
 8007062:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	681a      	ldr	r2, [r3, #0]
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	f022 0201 	bic.w	r2, r2, #1
 800707c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	683a      	ldr	r2, [r7, #0]
 800708e:	430a      	orrs	r2, r1
 8007090:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007092:	6878      	ldr	r0, [r7, #4]
 8007094:	f000 f812 	bl	80070bc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	68fa      	ldr	r2, [r7, #12]
 800709e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2220      	movs	r2, #32
 80070a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2200      	movs	r2, #0
 80070ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3710      	adds	r7, #16
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
	...

080070bc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80070bc:	b480      	push	{r7}
 80070be:	b085      	sub	sp, #20
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d108      	bne.n	80070de <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	2201      	movs	r2, #1
 80070d0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	2201      	movs	r2, #1
 80070d8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80070dc:	e031      	b.n	8007142 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80070de:	2308      	movs	r3, #8
 80070e0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80070e2:	2308      	movs	r3, #8
 80070e4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	0e5b      	lsrs	r3, r3, #25
 80070ee:	b2db      	uxtb	r3, r3
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	0f5b      	lsrs	r3, r3, #29
 80070fe:	b2db      	uxtb	r3, r3
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007106:	7bbb      	ldrb	r3, [r7, #14]
 8007108:	7b3a      	ldrb	r2, [r7, #12]
 800710a:	4911      	ldr	r1, [pc, #68]	@ (8007150 <UARTEx_SetNbDataToProcess+0x94>)
 800710c:	5c8a      	ldrb	r2, [r1, r2]
 800710e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007112:	7b3a      	ldrb	r2, [r7, #12]
 8007114:	490f      	ldr	r1, [pc, #60]	@ (8007154 <UARTEx_SetNbDataToProcess+0x98>)
 8007116:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007118:	fb93 f3f2 	sdiv	r3, r3, r2
 800711c:	b29a      	uxth	r2, r3
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007124:	7bfb      	ldrb	r3, [r7, #15]
 8007126:	7b7a      	ldrb	r2, [r7, #13]
 8007128:	4909      	ldr	r1, [pc, #36]	@ (8007150 <UARTEx_SetNbDataToProcess+0x94>)
 800712a:	5c8a      	ldrb	r2, [r1, r2]
 800712c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007130:	7b7a      	ldrb	r2, [r7, #13]
 8007132:	4908      	ldr	r1, [pc, #32]	@ (8007154 <UARTEx_SetNbDataToProcess+0x98>)
 8007134:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007136:	fb93 f3f2 	sdiv	r3, r3, r2
 800713a:	b29a      	uxth	r2, r3
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8007142:	bf00      	nop
 8007144:	3714      	adds	r7, #20
 8007146:	46bd      	mov	sp, r7
 8007148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714c:	4770      	bx	lr
 800714e:	bf00      	nop
 8007150:	0800cca4 	.word	0x0800cca4
 8007154:	0800ccac 	.word	0x0800ccac

08007158 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	b08e      	sub	sp, #56	@ 0x38
 800715c:	af00      	add	r7, sp, #0
 800715e:	60f8      	str	r0, [r7, #12]
 8007160:	60b9      	str	r1, [r7, #8]
 8007162:	607a      	str	r2, [r7, #4]
 8007164:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 8007166:	2234      	movs	r2, #52	@ 0x34
 8007168:	2100      	movs	r1, #0
 800716a:	68f8      	ldr	r0, [r7, #12]
 800716c:	f002 f95f 	bl	800942e <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 8007170:	683b      	ldr	r3, [r7, #0]
 8007172:	f023 0303 	bic.w	r3, r3, #3
 8007176:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	68ba      	ldr	r2, [r7, #8]
 800717c:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8007196:	683b      	ldr	r3, [r7, #0]
 8007198:	f1a3 0208 	sub.w	r2, r3, #8
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2202      	movs	r2, #2
 80071a4:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 80071aa:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	4413      	add	r3, r2
 80071b0:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 80071b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071b4:	3b04      	subs	r3, #4
 80071b6:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80071bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 80071c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071c2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071c4:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 80071c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071c8:	3b04      	subs	r3, #4
 80071ca:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 80071cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80071d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071d2:	687a      	ldr	r2, [r7, #4]
 80071d4:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 80071da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80071dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 80071de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071e2:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 80071e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071ea:	3304      	adds	r3, #4
 80071ec:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 80071ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80071f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 80071f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f4:	4a1f      	ldr	r2, [pc, #124]	@ (8007274 <_tx_byte_pool_create+0x11c>)
 80071f6:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80071fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007202:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8007204:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8007206:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8007208:	b672      	cpsid	i
#endif
    return(int_posture);
 800720a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800720c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	4a19      	ldr	r2, [pc, #100]	@ (8007278 <_tx_byte_pool_create+0x120>)
 8007212:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8007214:	4b19      	ldr	r3, [pc, #100]	@ (800727c <_tx_byte_pool_create+0x124>)
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d109      	bne.n	8007230 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800721c:	4a18      	ldr	r2, [pc, #96]	@ (8007280 <_tx_byte_pool_create+0x128>)
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	68fa      	ldr	r2, [r7, #12]
 8007226:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	68fa      	ldr	r2, [r7, #12]
 800722c:	631a      	str	r2, [r3, #48]	@ 0x30
 800722e:	e011      	b.n	8007254 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 8007230:	4b13      	ldr	r3, [pc, #76]	@ (8007280 <_tx_byte_pool_create+0x128>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 8007236:	6a3b      	ldr	r3, [r7, #32]
 8007238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800723a:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800723c:	6a3b      	ldr	r3, [r7, #32]
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 8007242:	69fb      	ldr	r3, [r7, #28]
 8007244:	68fa      	ldr	r2, [r7, #12]
 8007246:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	69fa      	ldr	r2, [r7, #28]
 800724c:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	6a3a      	ldr	r2, [r7, #32]
 8007252:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 8007254:	4b09      	ldr	r3, [pc, #36]	@ (800727c <_tx_byte_pool_create+0x124>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	3301      	adds	r3, #1
 800725a:	4a08      	ldr	r2, [pc, #32]	@ (800727c <_tx_byte_pool_create+0x124>)
 800725c:	6013      	str	r3, [r2, #0]
 800725e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007260:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	f383 8810 	msr	PRIMASK, r3
}
 8007268:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800726a:	2300      	movs	r3, #0
}
 800726c:	4618      	mov	r0, r3
 800726e:	3738      	adds	r7, #56	@ 0x38
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}
 8007274:	ffffeeee 	.word	0xffffeeee
 8007278:	42595445 	.word	0x42595445
 800727c:	200021e4 	.word	0x200021e4
 8007280:	200021e0 	.word	0x200021e0

08007284 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8007284:	b580      	push	{r7, lr}
 8007286:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8007288:	f000 f960 	bl	800754c <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800728c:	f000 fd86 	bl	8007d9c <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8007290:	4b12      	ldr	r3, [pc, #72]	@ (80072dc <_tx_initialize_high_level+0x58>)
 8007292:	2200      	movs	r2, #0
 8007294:	601a      	str	r2, [r3, #0]
 8007296:	4b12      	ldr	r3, [pc, #72]	@ (80072e0 <_tx_initialize_high_level+0x5c>)
 8007298:	2200      	movs	r2, #0
 800729a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800729c:	4b11      	ldr	r3, [pc, #68]	@ (80072e4 <_tx_initialize_high_level+0x60>)
 800729e:	2200      	movs	r2, #0
 80072a0:	601a      	str	r2, [r3, #0]
 80072a2:	4b11      	ldr	r3, [pc, #68]	@ (80072e8 <_tx_initialize_high_level+0x64>)
 80072a4:	2200      	movs	r2, #0
 80072a6:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 80072a8:	4b10      	ldr	r3, [pc, #64]	@ (80072ec <_tx_initialize_high_level+0x68>)
 80072aa:	2200      	movs	r2, #0
 80072ac:	601a      	str	r2, [r3, #0]
 80072ae:	4b10      	ldr	r3, [pc, #64]	@ (80072f0 <_tx_initialize_high_level+0x6c>)
 80072b0:	2200      	movs	r2, #0
 80072b2:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 80072b4:	4b0f      	ldr	r3, [pc, #60]	@ (80072f4 <_tx_initialize_high_level+0x70>)
 80072b6:	2200      	movs	r2, #0
 80072b8:	601a      	str	r2, [r3, #0]
 80072ba:	4b0f      	ldr	r3, [pc, #60]	@ (80072f8 <_tx_initialize_high_level+0x74>)
 80072bc:	2200      	movs	r2, #0
 80072be:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 80072c0:	4b0e      	ldr	r3, [pc, #56]	@ (80072fc <_tx_initialize_high_level+0x78>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	601a      	str	r2, [r3, #0]
 80072c6:	4b0e      	ldr	r3, [pc, #56]	@ (8007300 <_tx_initialize_high_level+0x7c>)
 80072c8:	2200      	movs	r2, #0
 80072ca:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 80072cc:	4b0d      	ldr	r3, [pc, #52]	@ (8007304 <_tx_initialize_high_level+0x80>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]
 80072d2:	4b0d      	ldr	r3, [pc, #52]	@ (8007308 <_tx_initialize_high_level+0x84>)
 80072d4:	2200      	movs	r2, #0
 80072d6:	601a      	str	r2, [r3, #0]
#endif
}
 80072d8:	bf00      	nop
 80072da:	bd80      	pop	{r7, pc}
 80072dc:	200021b8 	.word	0x200021b8
 80072e0:	200021bc 	.word	0x200021bc
 80072e4:	200021c0 	.word	0x200021c0
 80072e8:	200021c4 	.word	0x200021c4
 80072ec:	200021c8 	.word	0x200021c8
 80072f0:	200021cc 	.word	0x200021cc
 80072f4:	200021d8 	.word	0x200021d8
 80072f8:	200021dc 	.word	0x200021dc
 80072fc:	200021e0 	.word	0x200021e0
 8007300:	200021e4 	.word	0x200021e4
 8007304:	200021d0 	.word	0x200021d0
 8007308:	200021d4 	.word	0x200021d4

0800730c <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800730c:	b580      	push	{r7, lr}
 800730e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8007310:	4b10      	ldr	r3, [pc, #64]	@ (8007354 <_tx_initialize_kernel_enter+0x48>)
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 8007318:	d00c      	beq.n	8007334 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800731a:	4b0e      	ldr	r3, [pc, #56]	@ (8007354 <_tx_initialize_kernel_enter+0x48>)
 800731c:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 8007320:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 8007322:	f7f8 ff7d 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 8007326:	f7ff ffad 	bl	8007284 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800732a:	4b0b      	ldr	r3, [pc, #44]	@ (8007358 <_tx_initialize_kernel_enter+0x4c>)
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	3301      	adds	r3, #1
 8007330:	4a09      	ldr	r2, [pc, #36]	@ (8007358 <_tx_initialize_kernel_enter+0x4c>)
 8007332:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 8007334:	4b07      	ldr	r3, [pc, #28]	@ (8007354 <_tx_initialize_kernel_enter+0x48>)
 8007336:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 800733a:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800733c:	4b07      	ldr	r3, [pc, #28]	@ (800735c <_tx_initialize_kernel_enter+0x50>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	4618      	mov	r0, r3
 8007342:	f7f9 ff97 	bl	8001274 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 8007346:	4b03      	ldr	r3, [pc, #12]	@ (8007354 <_tx_initialize_kernel_enter+0x48>)
 8007348:	2200      	movs	r2, #0
 800734a:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800734c:	f7f8 ffa8 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8007350:	bf00      	nop
 8007352:	bd80      	pop	{r7, pc}
 8007354:	2000000c 	.word	0x2000000c
 8007358:	20002288 	.word	0x20002288
 800735c:	200021e8 	.word	0x200021e8

08007360 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b092      	sub	sp, #72	@ 0x48
 8007364:	af00      	add	r7, sp, #0
 8007366:	60f8      	str	r0, [r7, #12]
 8007368:	60b9      	str	r1, [r7, #8]
 800736a:	607a      	str	r2, [r7, #4]
 800736c:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800736e:	2300      	movs	r3, #0
 8007370:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 8007372:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007374:	21ef      	movs	r1, #239	@ 0xef
 8007376:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8007378:	f002 f859 	bl	800942e <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800737c:	22b0      	movs	r2, #176	@ 0xb0
 800737e:	2100      	movs	r1, #0
 8007380:	68f8      	ldr	r0, [r7, #12]
 8007382:	f002 f854 	bl	800942e <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	68ba      	ldr	r2, [r7, #8]
 800738a:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	687a      	ldr	r2, [r7, #4]
 8007390:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	683a      	ldr	r2, [r7, #0]
 8007396:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800739c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80073a2:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073a8:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073ae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80073b6:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80073bc:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	2220      	movs	r2, #32
 80073c2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80073c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80073c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 80073ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80073cc:	3b01      	subs	r3, #1
 80073ce:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80073d0:	4413      	add	r3, r2
 80073d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80073d8:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 80073da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80073de:	429a      	cmp	r2, r3
 80073e0:	d007      	beq.n	80073f2 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	2200      	movs	r2, #0
 80073e6:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2200      	movs	r2, #0
 80073ec:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 80073f0:	e006      	b.n	8007400 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073f6:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80073fc:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2203      	movs	r2, #3
 8007404:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	4a48      	ldr	r2, [pc, #288]	@ (800752c <_tx_thread_create+0x1cc>)
 800740a:	655a      	str	r2, [r3, #84]	@ 0x54
 800740c:	68fa      	ldr	r2, [r7, #12]
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8007412:	4947      	ldr	r1, [pc, #284]	@ (8007530 <_tx_thread_create+0x1d0>)
 8007414:	68f8      	ldr	r0, [r7, #12]
 8007416:	f7f8 ffa3 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800741a:	f3ef 8310 	mrs	r3, PRIMASK
 800741e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8007420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 8007422:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 8007424:	b672      	cpsid	i
    return(int_posture);
 8007426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 8007428:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800742a:	68fb      	ldr	r3, [r7, #12]
 800742c:	4a41      	ldr	r2, [pc, #260]	@ (8007534 <_tx_thread_create+0x1d4>)
 800742e:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 8007430:	4b41      	ldr	r3, [pc, #260]	@ (8007538 <_tx_thread_create+0x1d8>)
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d10b      	bne.n	8007450 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 8007438:	4a40      	ldr	r2, [pc, #256]	@ (800753c <_tx_thread_create+0x1dc>)
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	68fa      	ldr	r2, [r7, #12]
 8007442:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	68fa      	ldr	r2, [r7, #12]
 800744a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 800744e:	e016      	b.n	800747e <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 8007450:	4b3a      	ldr	r3, [pc, #232]	@ (800753c <_tx_thread_create+0x1dc>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 8007456:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007458:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800745c:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800745e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007460:	68fa      	ldr	r2, [r7, #12]
 8007462:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 8007466:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007468:	68fa      	ldr	r2, [r7, #12]
 800746a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007472:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800747a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800747e:	4b2e      	ldr	r3, [pc, #184]	@ (8007538 <_tx_thread_create+0x1d8>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	3301      	adds	r3, #1
 8007484:	4a2c      	ldr	r2, [pc, #176]	@ (8007538 <_tx_thread_create+0x1d8>)
 8007486:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8007488:	4b2d      	ldr	r3, [pc, #180]	@ (8007540 <_tx_thread_create+0x1e0>)
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	3301      	adds	r3, #1
 800748e:	4a2c      	ldr	r2, [pc, #176]	@ (8007540 <_tx_thread_create+0x1e0>)
 8007490:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8007492:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007494:	2b01      	cmp	r3, #1
 8007496:	d129      	bne.n	80074ec <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007498:	f3ef 8305 	mrs	r3, IPSR
 800749c:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800749e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 80074a0:	4b28      	ldr	r3, [pc, #160]	@ (8007544 <_tx_thread_create+0x1e4>)
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80074aa:	d30d      	bcc.n	80074c8 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 80074ac:	4b26      	ldr	r3, [pc, #152]	@ (8007548 <_tx_thread_create+0x1e8>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 80074b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d009      	beq.n	80074cc <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 80074b8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074bc:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 80074be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80074c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074c4:	63da      	str	r2, [r3, #60]	@ 0x3c
 80074c6:	e001      	b.n	80074cc <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80074cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ce:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80074d0:	6a3b      	ldr	r3, [r7, #32]
 80074d2:	f383 8810 	msr	PRIMASK, r3
}
 80074d6:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 f979 	bl	80077d0 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 80074de:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d01e      	beq.n	8007522 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 80074e4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80074e6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80074e8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80074ea:	e01a      	b.n	8007522 <_tx_thread_create+0x1c2>
 80074ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074ee:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f383 8810 	msr	PRIMASK, r3
}
 80074f6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80074f8:	f3ef 8310 	mrs	r3, PRIMASK
 80074fc:	61bb      	str	r3, [r7, #24]
    return(posture);
 80074fe:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8007500:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007502:	b672      	cpsid	i
    return(int_posture);
 8007504:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8007506:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8007508:	4b0d      	ldr	r3, [pc, #52]	@ (8007540 <_tx_thread_create+0x1e0>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	3b01      	subs	r3, #1
 800750e:	4a0c      	ldr	r2, [pc, #48]	@ (8007540 <_tx_thread_create+0x1e0>)
 8007510:	6013      	str	r3, [r2, #0]
 8007512:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007514:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007516:	69fb      	ldr	r3, [r7, #28]
 8007518:	f383 8810 	msr	PRIMASK, r3
}
 800751c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800751e:	f000 f91d 	bl	800775c <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 8007522:	2300      	movs	r3, #0
}
 8007524:	4618      	mov	r0, r3
 8007526:	3748      	adds	r7, #72	@ 0x48
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}
 800752c:	08007ca5 	.word	0x08007ca5
 8007530:	080075c5 	.word	0x080075c5
 8007534:	54485244 	.word	0x54485244
 8007538:	200021fc 	.word	0x200021fc
 800753c:	200021f8 	.word	0x200021f8
 8007540:	20002288 	.word	0x20002288
 8007544:	2000000c 	.word	0x2000000c
 8007548:	200021f4 	.word	0x200021f4

0800754c <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 8007550:	4b12      	ldr	r3, [pc, #72]	@ (800759c <_tx_thread_initialize+0x50>)
 8007552:	2200      	movs	r2, #0
 8007554:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 8007556:	4b12      	ldr	r3, [pc, #72]	@ (80075a0 <_tx_thread_initialize+0x54>)
 8007558:	2200      	movs	r2, #0
 800755a:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 800755c:	4b11      	ldr	r3, [pc, #68]	@ (80075a4 <_tx_thread_initialize+0x58>)
 800755e:	2200      	movs	r2, #0
 8007560:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007562:	4b11      	ldr	r3, [pc, #68]	@ (80075a8 <_tx_thread_initialize+0x5c>)
 8007564:	2220      	movs	r2, #32
 8007566:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 8007568:	2280      	movs	r2, #128	@ 0x80
 800756a:	2100      	movs	r1, #0
 800756c:	480f      	ldr	r0, [pc, #60]	@ (80075ac <_tx_thread_initialize+0x60>)
 800756e:	f001 ff5e 	bl	800942e <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 8007572:	4b0f      	ldr	r3, [pc, #60]	@ (80075b0 <_tx_thread_initialize+0x64>)
 8007574:	2200      	movs	r2, #0
 8007576:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 8007578:	4b0e      	ldr	r3, [pc, #56]	@ (80075b4 <_tx_thread_initialize+0x68>)
 800757a:	2200      	movs	r2, #0
 800757c:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800757e:	4b0e      	ldr	r3, [pc, #56]	@ (80075b8 <_tx_thread_initialize+0x6c>)
 8007580:	2200      	movs	r2, #0
 8007582:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8007584:	4b0d      	ldr	r3, [pc, #52]	@ (80075bc <_tx_thread_initialize+0x70>)
 8007586:	2200      	movs	r2, #0
 8007588:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800758a:	4b0d      	ldr	r3, [pc, #52]	@ (80075c0 <_tx_thread_initialize+0x74>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 8007592:	4a0b      	ldr	r2, [pc, #44]	@ (80075c0 <_tx_thread_initialize+0x74>)
 8007594:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8007596:	bf00      	nop
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	200021f0 	.word	0x200021f0
 80075a0:	200021f4 	.word	0x200021f4
 80075a4:	20002200 	.word	0x20002200
 80075a8:	20002204 	.word	0x20002204
 80075ac:	20002208 	.word	0x20002208
 80075b0:	200021f8 	.word	0x200021f8
 80075b4:	200021fc 	.word	0x200021fc
 80075b8:	20002288 	.word	0x20002288
 80075bc:	2000228c 	.word	0x2000228c
 80075c0:	20002290 	.word	0x20002290

080075c4 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b088      	sub	sp, #32
 80075c8:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80075ca:	4b21      	ldr	r3, [pc, #132]	@ (8007650 <_tx_thread_shell_entry+0x8c>)
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 80075d0:	69fb      	ldr	r3, [r7, #28]
 80075d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80075d4:	69fa      	ldr	r2, [r7, #28]
 80075d6:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80075d8:	4610      	mov	r0, r2
 80075da:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 80075dc:	4b1d      	ldr	r3, [pc, #116]	@ (8007654 <_tx_thread_shell_entry+0x90>)
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d003      	beq.n	80075ec <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 80075e4:	4b1b      	ldr	r3, [pc, #108]	@ (8007654 <_tx_thread_shell_entry+0x90>)
 80075e6:	681b      	ldr	r3, [r3, #0]
 80075e8:	69f8      	ldr	r0, [r7, #28]
 80075ea:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80075ec:	f3ef 8310 	mrs	r3, PRIMASK
 80075f0:	607b      	str	r3, [r7, #4]
    return(posture);
 80075f2:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 80075f4:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 80075f6:	b672      	cpsid	i
    return(int_posture);
 80075f8:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 80075fa:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 80075fc:	69fb      	ldr	r3, [r7, #28]
 80075fe:	2201      	movs	r2, #1
 8007600:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	2201      	movs	r2, #1
 8007606:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8007608:	69fb      	ldr	r3, [r7, #28]
 800760a:	2200      	movs	r2, #0
 800760c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800760e:	4b12      	ldr	r3, [pc, #72]	@ (8007658 <_tx_thread_shell_entry+0x94>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	3301      	adds	r3, #1
 8007614:	4a10      	ldr	r2, [pc, #64]	@ (8007658 <_tx_thread_shell_entry+0x94>)
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	69bb      	ldr	r3, [r7, #24]
 800761a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	f383 8810 	msr	PRIMASK, r3
}
 8007622:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 8007624:	f3ef 8314 	mrs	r3, CONTROL
 8007628:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800762a:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800762c:	617b      	str	r3, [r7, #20]
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	f023 0304 	bic.w	r3, r3, #4
 8007634:	617b      	str	r3, [r7, #20]
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	f383 8814 	msr	CONTROL, r3
}
 8007640:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 8007642:	69f8      	ldr	r0, [r7, #28]
 8007644:	f000 f9c4 	bl	80079d0 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 8007648:	bf00      	nop
 800764a:	3720      	adds	r7, #32
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	200021f0 	.word	0x200021f0
 8007654:	2000228c 	.word	0x2000228c
 8007658:	20002288 	.word	0x20002288

0800765c <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08e      	sub	sp, #56	@ 0x38
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007664:	f3ef 8310 	mrs	r3, PRIMASK
 8007668:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800766a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800766c:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800766e:	b672      	cpsid	i
    return(int_posture);
 8007670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8007672:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8007674:	4b35      	ldr	r3, [pc, #212]	@ (800774c <_tx_thread_sleep+0xf0>)
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800767a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800767c:	2b00      	cmp	r3, #0
 800767e:	d108      	bne.n	8007692 <_tx_thread_sleep+0x36>
 8007680:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007682:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007684:	6a3b      	ldr	r3, [r7, #32]
 8007686:	f383 8810 	msr	PRIMASK, r3
}
 800768a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800768c:	2313      	movs	r3, #19
 800768e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007690:	e056      	b.n	8007740 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007692:	f3ef 8305 	mrs	r3, IPSR
 8007696:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8007698:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800769a:	4b2d      	ldr	r3, [pc, #180]	@ (8007750 <_tx_thread_sleep+0xf4>)
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4313      	orrs	r3, r2
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d008      	beq.n	80076b6 <_tx_thread_sleep+0x5a>
 80076a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076a6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80076a8:	69bb      	ldr	r3, [r7, #24]
 80076aa:	f383 8810 	msr	PRIMASK, r3
}
 80076ae:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80076b0:	2313      	movs	r3, #19
 80076b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80076b4:	e044      	b.n	8007740 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 80076b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076b8:	4a26      	ldr	r2, [pc, #152]	@ (8007754 <_tx_thread_sleep+0xf8>)
 80076ba:	4293      	cmp	r3, r2
 80076bc:	d108      	bne.n	80076d0 <_tx_thread_sleep+0x74>
 80076be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076c0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	f383 8810 	msr	PRIMASK, r3
}
 80076c8:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 80076ca:	2313      	movs	r3, #19
 80076cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80076ce:	e037      	b.n	8007740 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d108      	bne.n	80076e8 <_tx_thread_sleep+0x8c>
 80076d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076d8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80076da:	693b      	ldr	r3, [r7, #16]
 80076dc:	f383 8810 	msr	PRIMASK, r3
}
 80076e0:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 80076e2:	2300      	movs	r3, #0
 80076e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80076e6:	e02b      	b.n	8007740 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 80076e8:	4b1b      	ldr	r3, [pc, #108]	@ (8007758 <_tx_thread_sleep+0xfc>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	2b00      	cmp	r3, #0
 80076ee:	d008      	beq.n	8007702 <_tx_thread_sleep+0xa6>
 80076f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80076f2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	f383 8810 	msr	PRIMASK, r3
}
 80076fa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 80076fc:	2313      	movs	r3, #19
 80076fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8007700:	e01e      	b.n	8007740 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8007702:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007704:	2204      	movs	r2, #4
 8007706:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8007708:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800770a:	2201      	movs	r2, #1
 800770c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800770e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007710:	2200      	movs	r2, #0
 8007712:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8007716:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800771c:	4b0e      	ldr	r3, [pc, #56]	@ (8007758 <_tx_thread_sleep+0xfc>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	3301      	adds	r3, #1
 8007722:	4a0d      	ldr	r2, [pc, #52]	@ (8007758 <_tx_thread_sleep+0xfc>)
 8007724:	6013      	str	r3, [r2, #0]
 8007726:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007728:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800772a:	68bb      	ldr	r3, [r7, #8]
 800772c:	f383 8810 	msr	PRIMASK, r3
}
 8007730:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 8007732:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8007734:	f000 f94c 	bl	80079d0 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 8007738:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800773a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800773e:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 8007740:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007742:	4618      	mov	r0, r3
 8007744:	3738      	adds	r7, #56	@ 0x38
 8007746:	46bd      	mov	sp, r7
 8007748:	bd80      	pop	{r7, pc}
 800774a:	bf00      	nop
 800774c:	200021f0 	.word	0x200021f0
 8007750:	2000000c 	.word	0x2000000c
 8007754:	20002338 	.word	0x20002338
 8007758:	20002288 	.word	0x20002288

0800775c <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800775c:	b480      	push	{r7}
 800775e:	b089      	sub	sp, #36	@ 0x24
 8007760:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007762:	4b17      	ldr	r3, [pc, #92]	@ (80077c0 <_tx_thread_system_preempt_check+0x64>)
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d121      	bne.n	80077b2 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800776e:	4b15      	ldr	r3, [pc, #84]	@ (80077c4 <_tx_thread_system_preempt_check+0x68>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 8007774:	4b14      	ldr	r3, [pc, #80]	@ (80077c8 <_tx_thread_system_preempt_check+0x6c>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800777a:	69ba      	ldr	r2, [r7, #24]
 800777c:	697b      	ldr	r3, [r7, #20]
 800777e:	429a      	cmp	r2, r3
 8007780:	d017      	beq.n	80077b2 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007782:	4b12      	ldr	r3, [pc, #72]	@ (80077cc <_tx_thread_system_preempt_check+0x70>)
 8007784:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007788:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800778a:	f3ef 8305 	mrs	r3, IPSR
 800778e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8007790:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8007792:	2b00      	cmp	r3, #0
 8007794:	d10c      	bne.n	80077b0 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007796:	f3ef 8310 	mrs	r3, PRIMASK
 800779a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800779c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800779e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80077a0:	b662      	cpsie	i
}
 80077a2:	bf00      	nop
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	f383 8810 	msr	PRIMASK, r3
}
 80077ae:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 80077b0:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 80077b2:	bf00      	nop
 80077b4:	3724      	adds	r7, #36	@ 0x24
 80077b6:	46bd      	mov	sp, r7
 80077b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077bc:	4770      	bx	lr
 80077be:	bf00      	nop
 80077c0:	20002288 	.word	0x20002288
 80077c4:	200021f0 	.word	0x200021f0
 80077c8:	200021f4 	.word	0x200021f4
 80077cc:	e000ed04 	.word	0xe000ed04

080077d0 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b096      	sub	sp, #88	@ 0x58
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80077d8:	f3ef 8310 	mrs	r3, PRIMASK
 80077dc:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 80077de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 80077e0:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 80077e2:	b672      	cpsid	i
    return(int_posture);
 80077e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80077e6:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d005      	beq.n	80077fc <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	334c      	adds	r3, #76	@ 0x4c
 80077f4:	4618      	mov	r0, r3
 80077f6:	f000 fbaf 	bl	8007f58 <_tx_timer_system_deactivate>
 80077fa:	e002      	b.n	8007802 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2200      	movs	r2, #0
 8007800:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8007802:	4b6c      	ldr	r3, [pc, #432]	@ (80079b4 <_tx_thread_system_resume+0x1e4>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3b01      	subs	r3, #1
 8007808:	4a6a      	ldr	r2, [pc, #424]	@ (80079b4 <_tx_thread_system_resume+0x1e4>)
 800780a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007810:	2b00      	cmp	r3, #0
 8007812:	f040 8083 	bne.w	800791c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800781a:	2b00      	cmp	r3, #0
 800781c:	f000 8097 	beq.w	800794e <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007824:	2b00      	cmp	r3, #0
 8007826:	d172      	bne.n	800790e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007832:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8007834:	4a60      	ldr	r2, [pc, #384]	@ (80079b8 <_tx_thread_system_resume+0x1e8>)
 8007836:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007838:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800783c:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 800783e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d154      	bne.n	80078ee <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8007844:	495c      	ldr	r1, [pc, #368]	@ (80079b8 <_tx_thread_system_resume+0x1e8>)
 8007846:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007848:	687a      	ldr	r2, [r7, #4]
 800784a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	687a      	ldr	r2, [r7, #4]
 8007852:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	687a      	ldr	r2, [r7, #4]
 8007858:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800785a:	2201      	movs	r2, #1
 800785c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800785e:	fa02 f303 	lsl.w	r3, r2, r3
 8007862:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8007864:	4b55      	ldr	r3, [pc, #340]	@ (80079bc <_tx_thread_system_resume+0x1ec>)
 8007866:	681a      	ldr	r2, [r3, #0]
 8007868:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800786a:	4313      	orrs	r3, r2
 800786c:	4a53      	ldr	r2, [pc, #332]	@ (80079bc <_tx_thread_system_resume+0x1ec>)
 800786e:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8007870:	4b53      	ldr	r3, [pc, #332]	@ (80079c0 <_tx_thread_system_resume+0x1f0>)
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007876:	429a      	cmp	r2, r3
 8007878:	d269      	bcs.n	800794e <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800787a:	4a51      	ldr	r2, [pc, #324]	@ (80079c0 <_tx_thread_system_resume+0x1f0>)
 800787c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800787e:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8007880:	4b50      	ldr	r3, [pc, #320]	@ (80079c4 <_tx_thread_system_resume+0x1f4>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8007886:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007888:	2b00      	cmp	r3, #0
 800788a:	d103      	bne.n	8007894 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800788c:	4a4d      	ldr	r2, [pc, #308]	@ (80079c4 <_tx_thread_system_resume+0x1f4>)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	6013      	str	r3, [r2, #0]
 8007892:	e05c      	b.n	800794e <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8007894:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007896:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007898:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800789a:	429a      	cmp	r2, r3
 800789c:	d257      	bcs.n	800794e <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800789e:	4a49      	ldr	r2, [pc, #292]	@ (80079c4 <_tx_thread_system_resume+0x1f4>)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6013      	str	r3, [r2, #0]
 80078a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80078a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80078a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80078aa:	f383 8810 	msr	PRIMASK, r3
}
 80078ae:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80078b0:	4b40      	ldr	r3, [pc, #256]	@ (80079b4 <_tx_thread_system_resume+0x1e4>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 80078b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d174      	bne.n	80079a6 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 80078bc:	4b42      	ldr	r3, [pc, #264]	@ (80079c8 <_tx_thread_system_resume+0x1f8>)
 80078be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80078c2:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80078c4:	f3ef 8305 	mrs	r3, IPSR
 80078c8:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 80078ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d10c      	bne.n	80078ea <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80078d0:	f3ef 8310 	mrs	r3, PRIMASK
 80078d4:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 80078d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 80078d8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 80078da:	b662      	cpsie	i
}
 80078dc:	bf00      	nop
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80078e2:	69fb      	ldr	r3, [r7, #28]
 80078e4:	f383 8810 	msr	PRIMASK, r3
}
 80078e8:	bf00      	nop
}
 80078ea:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 80078ec:	e05b      	b.n	80079a6 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 80078ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078f2:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 80078f4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 80078fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078fc:	687a      	ldr	r2, [r7, #4]
 80078fe:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007904:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800790a:	621a      	str	r2, [r3, #32]
 800790c:	e01f      	b.n	800794e <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2203      	movs	r2, #3
 8007918:	631a      	str	r2, [r3, #48]	@ 0x30
 800791a:	e018      	b.n	800794e <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007920:	2b01      	cmp	r3, #1
 8007922:	d014      	beq.n	800794e <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007928:	2b02      	cmp	r3, #2
 800792a:	d010      	beq.n	800794e <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007930:	2b00      	cmp	r3, #0
 8007932:	d106      	bne.n	8007942 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	2200      	movs	r2, #0
 8007938:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	631a      	str	r2, [r3, #48]	@ 0x30
 8007940:	e005      	b.n	800794e <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2200      	movs	r2, #0
 8007946:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2203      	movs	r2, #3
 800794c:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800794e:	4b1f      	ldr	r3, [pc, #124]	@ (80079cc <_tx_thread_system_resume+0x1fc>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007954:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007956:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	f383 8810 	msr	PRIMASK, r3
}
 800795e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8007960:	4b18      	ldr	r3, [pc, #96]	@ (80079c4 <_tx_thread_system_resume+0x1f4>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007966:	429a      	cmp	r2, r3
 8007968:	d020      	beq.n	80079ac <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800796a:	4b12      	ldr	r3, [pc, #72]	@ (80079b4 <_tx_thread_system_resume+0x1e4>)
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 8007970:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007972:	2b00      	cmp	r3, #0
 8007974:	d11a      	bne.n	80079ac <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007976:	4b14      	ldr	r3, [pc, #80]	@ (80079c8 <_tx_thread_system_resume+0x1f8>)
 8007978:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800797c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800797e:	f3ef 8305 	mrs	r3, IPSR
 8007982:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8007984:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8007986:	2b00      	cmp	r3, #0
 8007988:	d10f      	bne.n	80079aa <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800798a:	f3ef 8310 	mrs	r3, PRIMASK
 800798e:	613b      	str	r3, [r7, #16]
    return(posture);
 8007990:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8007992:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007994:	b662      	cpsie	i
}
 8007996:	bf00      	nop
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800799c:	68bb      	ldr	r3, [r7, #8]
 800799e:	f383 8810 	msr	PRIMASK, r3
}
 80079a2:	bf00      	nop
}
 80079a4:	e001      	b.n	80079aa <_tx_thread_system_resume+0x1da>
                                return;
 80079a6:	bf00      	nop
 80079a8:	e000      	b.n	80079ac <_tx_thread_system_resume+0x1dc>
 80079aa:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 80079ac:	3758      	adds	r7, #88	@ 0x58
 80079ae:	46bd      	mov	sp, r7
 80079b0:	bd80      	pop	{r7, pc}
 80079b2:	bf00      	nop
 80079b4:	20002288 	.word	0x20002288
 80079b8:	20002208 	.word	0x20002208
 80079bc:	20002200 	.word	0x20002200
 80079c0:	20002204 	.word	0x20002204
 80079c4:	200021f4 	.word	0x200021f4
 80079c8:	e000ed04 	.word	0xe000ed04
 80079cc:	200021f0 	.word	0x200021f0

080079d0 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b09e      	sub	sp, #120	@ 0x78
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 80079d8:	4b81      	ldr	r3, [pc, #516]	@ (8007be0 <_tx_thread_system_suspend+0x210>)
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80079de:	f3ef 8310 	mrs	r3, PRIMASK
 80079e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 80079e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 80079e6:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 80079e8:	b672      	cpsid	i
    return(int_posture);
 80079ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 80079ec:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 80079ee:	687a      	ldr	r2, [r7, #4]
 80079f0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079f2:	429a      	cmp	r2, r3
 80079f4:	d112      	bne.n	8007a1c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80079fa:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 80079fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d008      	beq.n	8007a14 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8007a02:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007a04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a08:	d004      	beq.n	8007a14 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	334c      	adds	r3, #76	@ 0x4c
 8007a0e:	4618      	mov	r0, r3
 8007a10:	f000 fa40 	bl	8007e94 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	69db      	ldr	r3, [r3, #28]
 8007a18:	4a72      	ldr	r2, [pc, #456]	@ (8007be4 <_tx_thread_system_suspend+0x214>)
 8007a1a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8007a1c:	4b72      	ldr	r3, [pc, #456]	@ (8007be8 <_tx_thread_system_suspend+0x218>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	3b01      	subs	r3, #1
 8007a22:	4a71      	ldr	r2, [pc, #452]	@ (8007be8 <_tx_thread_system_suspend+0x218>)
 8007a24:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007a2a:	2b01      	cmp	r3, #1
 8007a2c:	f040 80a6 	bne.w	8007b7c <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2200      	movs	r2, #0
 8007a34:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3a:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	6a1b      	ldr	r3, [r3, #32]
 8007a40:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8007a42:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	429a      	cmp	r2, r3
 8007a48:	d015      	beq.n	8007a76 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007a4e:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8007a50:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a52:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8007a54:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8007a56:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a58:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a5a:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8007a5c:	4a63      	ldr	r2, [pc, #396]	@ (8007bec <_tx_thread_system_suspend+0x21c>)
 8007a5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007a64:	687a      	ldr	r2, [r7, #4]
 8007a66:	429a      	cmp	r2, r3
 8007a68:	d157      	bne.n	8007b1a <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8007a6a:	4960      	ldr	r1, [pc, #384]	@ (8007bec <_tx_thread_system_suspend+0x21c>)
 8007a6c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a6e:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007a70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8007a74:	e051      	b.n	8007b1a <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8007a76:	4a5d      	ldr	r2, [pc, #372]	@ (8007bec <_tx_thread_system_suspend+0x21c>)
 8007a78:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a7a:	2100      	movs	r1, #0
 8007a7c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8007a80:	2201      	movs	r2, #1
 8007a82:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007a84:	fa02 f303 	lsl.w	r3, r2, r3
 8007a88:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8007a8a:	4b59      	ldr	r3, [pc, #356]	@ (8007bf0 <_tx_thread_system_suspend+0x220>)
 8007a8c:	681a      	ldr	r2, [r3, #0]
 8007a8e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a90:	43db      	mvns	r3, r3
 8007a92:	4013      	ands	r3, r2
 8007a94:	4a56      	ldr	r2, [pc, #344]	@ (8007bf0 <_tx_thread_system_suspend+0x220>)
 8007a96:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8007a98:	2300      	movs	r3, #0
 8007a9a:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8007a9c:	4b54      	ldr	r3, [pc, #336]	@ (8007bf0 <_tx_thread_system_suspend+0x220>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8007aa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d12b      	bne.n	8007b00 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8007aa8:	4b52      	ldr	r3, [pc, #328]	@ (8007bf4 <_tx_thread_system_suspend+0x224>)
 8007aaa:	2220      	movs	r2, #32
 8007aac:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8007aae:	4b52      	ldr	r3, [pc, #328]	@ (8007bf8 <_tx_thread_system_suspend+0x228>)
 8007ab0:	2200      	movs	r2, #0
 8007ab2:	601a      	str	r2, [r3, #0]
 8007ab4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ab6:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007ab8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007aba:	f383 8810 	msr	PRIMASK, r3
}
 8007abe:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007ac0:	4b49      	ldr	r3, [pc, #292]	@ (8007be8 <_tx_thread_system_suspend+0x218>)
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 8007ac6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	f040 8081 	bne.w	8007bd0 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007ace:	4b4b      	ldr	r3, [pc, #300]	@ (8007bfc <_tx_thread_system_suspend+0x22c>)
 8007ad0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ad4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007ad6:	f3ef 8305 	mrs	r3, IPSR
 8007ada:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 8007adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10c      	bne.n	8007afc <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007ae2:	f3ef 8310 	mrs	r3, PRIMASK
 8007ae6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 8007ae8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 8007aea:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007aec:	b662      	cpsie	i
}
 8007aee:	bf00      	nop
 8007af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007af2:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007af4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af6:	f383 8810 	msr	PRIMASK, r3
}
 8007afa:	bf00      	nop
}
 8007afc:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8007afe:	e067      	b.n	8007bd0 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8007b00:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b02:	fa93 f3a3 	rbit	r3, r3
 8007b06:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007b08:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007b0a:	fab3 f383 	clz	r3, r3
 8007b0e:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8007b10:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007b12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b14:	4413      	add	r3, r2
 8007b16:	4a37      	ldr	r2, [pc, #220]	@ (8007bf4 <_tx_thread_system_suspend+0x224>)
 8007b18:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8007b1a:	4b37      	ldr	r3, [pc, #220]	@ (8007bf8 <_tx_thread_system_suspend+0x228>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	687a      	ldr	r2, [r7, #4]
 8007b20:	429a      	cmp	r2, r3
 8007b22:	d12b      	bne.n	8007b7c <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8007b24:	4b33      	ldr	r3, [pc, #204]	@ (8007bf4 <_tx_thread_system_suspend+0x224>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a30      	ldr	r2, [pc, #192]	@ (8007bec <_tx_thread_system_suspend+0x21c>)
 8007b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b2e:	4a32      	ldr	r2, [pc, #200]	@ (8007bf8 <_tx_thread_system_suspend+0x228>)
 8007b30:	6013      	str	r3, [r2, #0]
 8007b32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b34:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b38:	f383 8810 	msr	PRIMASK, r3
}
 8007b3c:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007b3e:	4b2a      	ldr	r3, [pc, #168]	@ (8007be8 <_tx_thread_system_suspend+0x218>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 8007b44:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d144      	bne.n	8007bd4 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007b4a:	4b2c      	ldr	r3, [pc, #176]	@ (8007bfc <_tx_thread_system_suspend+0x22c>)
 8007b4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b50:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007b52:	f3ef 8305 	mrs	r3, IPSR
 8007b56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 8007b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d10c      	bne.n	8007b78 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007b5e:	f3ef 8310 	mrs	r3, PRIMASK
 8007b62:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8007b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 8007b66:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007b68:	b662      	cpsie	i
}
 8007b6a:	bf00      	nop
 8007b6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b6e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b70:	6a3b      	ldr	r3, [r7, #32]
 8007b72:	f383 8810 	msr	PRIMASK, r3
}
 8007b76:	bf00      	nop
}
 8007b78:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8007b7a:	e02b      	b.n	8007bd4 <_tx_thread_system_suspend+0x204>
 8007b7c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007b7e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007b80:	69fb      	ldr	r3, [r7, #28]
 8007b82:	f383 8810 	msr	PRIMASK, r3
}
 8007b86:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8007b88:	4b1b      	ldr	r3, [pc, #108]	@ (8007bf8 <_tx_thread_system_suspend+0x228>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8007b8e:	429a      	cmp	r2, r3
 8007b90:	d022      	beq.n	8007bd8 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8007b92:	4b15      	ldr	r3, [pc, #84]	@ (8007be8 <_tx_thread_system_suspend+0x218>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 8007b98:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d11c      	bne.n	8007bd8 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8007b9e:	4b17      	ldr	r3, [pc, #92]	@ (8007bfc <_tx_thread_system_suspend+0x22c>)
 8007ba0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ba4:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8007ba6:	f3ef 8305 	mrs	r3, IPSR
 8007baa:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8007bac:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d10c      	bne.n	8007bcc <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8007bb6:	617b      	str	r3, [r7, #20]
    return(posture);
 8007bb8:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8007bba:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8007bbc:	b662      	cpsie	i
}
 8007bbe:	bf00      	nop
 8007bc0:	693b      	ldr	r3, [r7, #16]
 8007bc2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	f383 8810 	msr	PRIMASK, r3
}
 8007bca:	bf00      	nop
}
 8007bcc:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8007bce:	e003      	b.n	8007bd8 <_tx_thread_system_suspend+0x208>
                return;
 8007bd0:	bf00      	nop
 8007bd2:	e002      	b.n	8007bda <_tx_thread_system_suspend+0x20a>
            return;
 8007bd4:	bf00      	nop
 8007bd6:	e000      	b.n	8007bda <_tx_thread_system_suspend+0x20a>
    return;
 8007bd8:	bf00      	nop
}
 8007bda:	3778      	adds	r7, #120	@ 0x78
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	bd80      	pop	{r7, pc}
 8007be0:	200021f0 	.word	0x200021f0
 8007be4:	200027f4 	.word	0x200027f4
 8007be8:	20002288 	.word	0x20002288
 8007bec:	20002208 	.word	0x20002208
 8007bf0:	20002200 	.word	0x20002200
 8007bf4:	20002204 	.word	0x20002204
 8007bf8:	200021f4 	.word	0x200021f4
 8007bfc:	e000ed04 	.word	0xe000ed04

08007c00 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8007c00:	b480      	push	{r7}
 8007c02:	b087      	sub	sp, #28
 8007c04:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8007c06:	4b21      	ldr	r3, [pc, #132]	@ (8007c8c <_tx_thread_time_slice+0x8c>)
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8007c10:	60fb      	str	r3, [r7, #12]
    return(posture);
 8007c12:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8007c14:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007c16:	b672      	cpsid	i
    return(int_posture);
 8007c18:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8007c1a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8007c1c:	4b1c      	ldr	r3, [pc, #112]	@ (8007c90 <_tx_thread_time_slice+0x90>)
 8007c1e:	2200      	movs	r2, #0
 8007c20:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8007c22:	697b      	ldr	r3, [r7, #20]
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d024      	beq.n	8007c72 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8007c28:	697b      	ldr	r3, [r7, #20]
 8007c2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d120      	bne.n	8007c72 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	69da      	ldr	r2, [r3, #28]
 8007c34:	697b      	ldr	r3, [r7, #20]
 8007c36:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8007c38:	697b      	ldr	r3, [r7, #20]
 8007c3a:	699b      	ldr	r3, [r3, #24]
 8007c3c:	4a15      	ldr	r2, [pc, #84]	@ (8007c94 <_tx_thread_time_slice+0x94>)
 8007c3e:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8007c40:	697b      	ldr	r3, [r7, #20]
 8007c42:	6a1b      	ldr	r3, [r3, #32]
 8007c44:	697a      	ldr	r2, [r7, #20]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d013      	beq.n	8007c72 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8007c4a:	697b      	ldr	r3, [r7, #20]
 8007c4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c4e:	697b      	ldr	r3, [r7, #20]
 8007c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c52:	429a      	cmp	r2, r3
 8007c54:	d10d      	bne.n	8007c72 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8007c56:	697b      	ldr	r3, [r7, #20]
 8007c58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c5a:	697a      	ldr	r2, [r7, #20]
 8007c5c:	6a12      	ldr	r2, [r2, #32]
 8007c5e:	490e      	ldr	r1, [pc, #56]	@ (8007c98 <_tx_thread_time_slice+0x98>)
 8007c60:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8007c64:	4b0d      	ldr	r3, [pc, #52]	@ (8007c9c <_tx_thread_time_slice+0x9c>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	4a0b      	ldr	r2, [pc, #44]	@ (8007c98 <_tx_thread_time_slice+0x98>)
 8007c6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007c6e:	4a0c      	ldr	r2, [pc, #48]	@ (8007ca0 <_tx_thread_time_slice+0xa0>)
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	f383 8810 	msr	PRIMASK, r3
}
 8007c7c:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8007c7e:	bf00      	nop
 8007c80:	371c      	adds	r7, #28
 8007c82:	46bd      	mov	sp, r7
 8007c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c88:	4770      	bx	lr
 8007c8a:	bf00      	nop
 8007c8c:	200021f0 	.word	0x200021f0
 8007c90:	20002298 	.word	0x20002298
 8007c94:	200027f4 	.word	0x200027f4
 8007c98:	20002208 	.word	0x20002208
 8007c9c:	20002204 	.word	0x20002204
 8007ca0:	200021f4 	.word	0x200021f4

08007ca4 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b08a      	sub	sp, #40	@ 0x28
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007cb0:	f3ef 8310 	mrs	r3, PRIMASK
 8007cb4:	617b      	str	r3, [r7, #20]
    return(posture);
 8007cb6:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8007cb8:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007cba:	b672      	cpsid	i
    return(int_posture);
 8007cbc:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8007cbe:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007cc4:	2b04      	cmp	r3, #4
 8007cc6:	d10e      	bne.n	8007ce6 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8007cc8:	4b13      	ldr	r3, [pc, #76]	@ (8007d18 <_tx_thread_timeout+0x74>)
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	3301      	adds	r3, #1
 8007cce:	4a12      	ldr	r2, [pc, #72]	@ (8007d18 <_tx_thread_timeout+0x74>)
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	6a3b      	ldr	r3, [r7, #32]
 8007cd4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	f383 8810 	msr	PRIMASK, r3
}
 8007cdc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8007cde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007ce0:	f7ff fd76 	bl	80077d0 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8007ce4:	e013      	b.n	8007d0e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8007ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ce8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007cea:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8007cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cee:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8007cf2:	61bb      	str	r3, [r7, #24]
 8007cf4:	6a3b      	ldr	r3, [r7, #32]
 8007cf6:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	f383 8810 	msr	PRIMASK, r3
}
 8007cfe:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8007d00:	69fb      	ldr	r3, [r7, #28]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d003      	beq.n	8007d0e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8007d06:	69fb      	ldr	r3, [r7, #28]
 8007d08:	69b9      	ldr	r1, [r7, #24]
 8007d0a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007d0c:	4798      	blx	r3
}
 8007d0e:	bf00      	nop
 8007d10:	3728      	adds	r7, #40	@ 0x28
 8007d12:	46bd      	mov	sp, r7
 8007d14:	bd80      	pop	{r7, pc}
 8007d16:	bf00      	nop
 8007d18:	20002288 	.word	0x20002288

08007d1c <_tx_time_get>:
/*  12-31-2020     Andres Mlinar            Modified comment(s),          */
/*                                            resulting in version 6.1.3  */
/*                                                                        */
/**************************************************************************/
ULONG  _tx_time_get(VOID)
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	b087      	sub	sp, #28
 8007d20:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007d22:	f3ef 8310 	mrs	r3, PRIMASK
 8007d26:	60bb      	str	r3, [r7, #8]
    return(posture);
 8007d28:	68bb      	ldr	r3, [r7, #8]
    int_posture = __get_interrupt_posture();
 8007d2a:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007d2c:	b672      	cpsid	i
    return(int_posture);
 8007d2e:	687b      	ldr	r3, [r7, #4]
#endif
ULONG   temp_time;


    /* Disable interrupts.  */
    TX_DISABLE
 8007d30:	617b      	str	r3, [r7, #20]

    /* Pickup the system clock time.  */
    temp_time =  _tx_timer_system_clock;
 8007d32:	4b08      	ldr	r3, [pc, #32]	@ (8007d54 <_tx_time_get+0x38>)
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	613b      	str	r3, [r7, #16]
 8007d38:	697b      	ldr	r3, [r7, #20]
 8007d3a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	f383 8810 	msr	PRIMASK, r3
}
 8007d42:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return the time.  */
    return(temp_time);
 8007d44:	693b      	ldr	r3, [r7, #16]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	371c      	adds	r7, #28
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d50:	4770      	bx	lr
 8007d52:	bf00      	nop
 8007d54:	20002294 	.word	0x20002294

08007d58 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b084      	sub	sp, #16
 8007d5c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007d5e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d62:	607b      	str	r3, [r7, #4]
    return(posture);
 8007d64:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8007d66:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8007d68:	b672      	cpsid	i
    return(int_posture);
 8007d6a:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8007d6c:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8007d6e:	4b09      	ldr	r3, [pc, #36]	@ (8007d94 <_tx_timer_expiration_process+0x3c>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	3301      	adds	r3, #1
 8007d74:	4a07      	ldr	r2, [pc, #28]	@ (8007d94 <_tx_timer_expiration_process+0x3c>)
 8007d76:	6013      	str	r3, [r2, #0]
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8007d7c:	68bb      	ldr	r3, [r7, #8]
 8007d7e:	f383 8810 	msr	PRIMASK, r3
}
 8007d82:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8007d84:	4804      	ldr	r0, [pc, #16]	@ (8007d98 <_tx_timer_expiration_process+0x40>)
 8007d86:	f7ff fd23 	bl	80077d0 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8007d8a:	bf00      	nop
 8007d8c:	3710      	adds	r7, #16
 8007d8e:	46bd      	mov	sp, r7
 8007d90:	bd80      	pop	{r7, pc}
 8007d92:	bf00      	nop
 8007d94:	20002288 	.word	0x20002288
 8007d98:	20002338 	.word	0x20002338

08007d9c <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8007d9c:	b590      	push	{r4, r7, lr}
 8007d9e:	b089      	sub	sp, #36	@ 0x24
 8007da0:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8007da2:	4b28      	ldr	r3, [pc, #160]	@ (8007e44 <_tx_timer_initialize+0xa8>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8007da8:	4b27      	ldr	r3, [pc, #156]	@ (8007e48 <_tx_timer_initialize+0xac>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8007dae:	4b27      	ldr	r3, [pc, #156]	@ (8007e4c <_tx_timer_initialize+0xb0>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8007db4:	4b26      	ldr	r3, [pc, #152]	@ (8007e50 <_tx_timer_initialize+0xb4>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8007dba:	4b26      	ldr	r3, [pc, #152]	@ (8007e54 <_tx_timer_initialize+0xb8>)
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8007dc0:	2280      	movs	r2, #128	@ 0x80
 8007dc2:	2100      	movs	r1, #0
 8007dc4:	4824      	ldr	r0, [pc, #144]	@ (8007e58 <_tx_timer_initialize+0xbc>)
 8007dc6:	f001 fb32 	bl	800942e <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 8007dca:	4b24      	ldr	r3, [pc, #144]	@ (8007e5c <_tx_timer_initialize+0xc0>)
 8007dcc:	4a22      	ldr	r2, [pc, #136]	@ (8007e58 <_tx_timer_initialize+0xbc>)
 8007dce:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8007dd0:	4b23      	ldr	r3, [pc, #140]	@ (8007e60 <_tx_timer_initialize+0xc4>)
 8007dd2:	4a21      	ldr	r2, [pc, #132]	@ (8007e58 <_tx_timer_initialize+0xbc>)
 8007dd4:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 8007dd6:	4b23      	ldr	r3, [pc, #140]	@ (8007e64 <_tx_timer_initialize+0xc8>)
 8007dd8:	4a23      	ldr	r2, [pc, #140]	@ (8007e68 <_tx_timer_initialize+0xcc>)
 8007dda:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8007ddc:	4b21      	ldr	r3, [pc, #132]	@ (8007e64 <_tx_timer_initialize+0xc8>)
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	3304      	adds	r3, #4
 8007de2:	4a20      	ldr	r2, [pc, #128]	@ (8007e64 <_tx_timer_initialize+0xc8>)
 8007de4:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 8007de6:	4b21      	ldr	r3, [pc, #132]	@ (8007e6c <_tx_timer_initialize+0xd0>)
 8007de8:	4a21      	ldr	r2, [pc, #132]	@ (8007e70 <_tx_timer_initialize+0xd4>)
 8007dea:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8007dec:	4b21      	ldr	r3, [pc, #132]	@ (8007e74 <_tx_timer_initialize+0xd8>)
 8007dee:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007df2:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8007df4:	4b20      	ldr	r3, [pc, #128]	@ (8007e78 <_tx_timer_initialize+0xdc>)
 8007df6:	2200      	movs	r2, #0
 8007df8:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 8007dfa:	4b1c      	ldr	r3, [pc, #112]	@ (8007e6c <_tx_timer_initialize+0xd0>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	4a1d      	ldr	r2, [pc, #116]	@ (8007e74 <_tx_timer_initialize+0xd8>)
 8007e00:	6812      	ldr	r2, [r2, #0]
 8007e02:	491d      	ldr	r1, [pc, #116]	@ (8007e78 <_tx_timer_initialize+0xdc>)
 8007e04:	6809      	ldr	r1, [r1, #0]
 8007e06:	481c      	ldr	r0, [pc, #112]	@ (8007e78 <_tx_timer_initialize+0xdc>)
 8007e08:	6800      	ldr	r0, [r0, #0]
 8007e0a:	2400      	movs	r4, #0
 8007e0c:	9405      	str	r4, [sp, #20]
 8007e0e:	2400      	movs	r4, #0
 8007e10:	9404      	str	r4, [sp, #16]
 8007e12:	9003      	str	r0, [sp, #12]
 8007e14:	9102      	str	r1, [sp, #8]
 8007e16:	9201      	str	r2, [sp, #4]
 8007e18:	9300      	str	r3, [sp, #0]
 8007e1a:	4b18      	ldr	r3, [pc, #96]	@ (8007e7c <_tx_timer_initialize+0xe0>)
 8007e1c:	4a18      	ldr	r2, [pc, #96]	@ (8007e80 <_tx_timer_initialize+0xe4>)
 8007e1e:	4919      	ldr	r1, [pc, #100]	@ (8007e84 <_tx_timer_initialize+0xe8>)
 8007e20:	4819      	ldr	r0, [pc, #100]	@ (8007e88 <_tx_timer_initialize+0xec>)
 8007e22:	f7ff fa9d 	bl	8007360 <_tx_thread_create>
 8007e26:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e5      	bne.n	8007dfa <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8007e2e:	4b17      	ldr	r3, [pc, #92]	@ (8007e8c <_tx_timer_initialize+0xf0>)
 8007e30:	2200      	movs	r2, #0
 8007e32:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8007e34:	4b16      	ldr	r3, [pc, #88]	@ (8007e90 <_tx_timer_initialize+0xf4>)
 8007e36:	2200      	movs	r2, #0
 8007e38:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 8007e3a:	bf00      	nop
 8007e3c:	370c      	adds	r7, #12
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd90      	pop	{r4, r7, pc}
 8007e42:	bf00      	nop
 8007e44:	20002294 	.word	0x20002294
 8007e48:	200027f4 	.word	0x200027f4
 8007e4c:	20002298 	.word	0x20002298
 8007e50:	20002328 	.word	0x20002328
 8007e54:	20002334 	.word	0x20002334
 8007e58:	2000229c 	.word	0x2000229c
 8007e5c:	2000231c 	.word	0x2000231c
 8007e60:	20002324 	.word	0x20002324
 8007e64:	20002320 	.word	0x20002320
 8007e68:	20002318 	.word	0x20002318
 8007e6c:	200023e8 	.word	0x200023e8
 8007e70:	200023f4 	.word	0x200023f4
 8007e74:	200023ec 	.word	0x200023ec
 8007e78:	200023f0 	.word	0x200023f0
 8007e7c:	4154494d 	.word	0x4154494d
 8007e80:	08007fc9 	.word	0x08007fc9
 8007e84:	0800cc60 	.word	0x0800cc60
 8007e88:	20002338 	.word	0x20002338
 8007e8c:	2000232c 	.word	0x2000232c
 8007e90:	20002330 	.word	0x20002330

08007e94 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 8007e94:	b480      	push	{r7}
 8007e96:	b089      	sub	sp, #36	@ 0x24
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d04a      	beq.n	8007f3e <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 8007ea8:	697b      	ldr	r3, [r7, #20]
 8007eaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007eae:	d046      	beq.n	8007f3e <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	699b      	ldr	r3, [r3, #24]
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d142      	bne.n	8007f3e <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 8007eb8:	697b      	ldr	r3, [r7, #20]
 8007eba:	2b20      	cmp	r3, #32
 8007ebc:	d902      	bls.n	8007ec4 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8007ebe:	231f      	movs	r3, #31
 8007ec0:	61bb      	str	r3, [r7, #24]
 8007ec2:	e002      	b.n	8007eca <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	3b01      	subs	r3, #1
 8007ec8:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 8007eca:	4b20      	ldr	r3, [pc, #128]	@ (8007f4c <_tx_timer_system_activate+0xb8>)
 8007ecc:	681a      	ldr	r2, [r3, #0]
 8007ece:	69bb      	ldr	r3, [r7, #24]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 8007ed6:	4b1e      	ldr	r3, [pc, #120]	@ (8007f50 <_tx_timer_system_activate+0xbc>)
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	69fa      	ldr	r2, [r7, #28]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d30b      	bcc.n	8007ef8 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8007ee0:	4b1b      	ldr	r3, [pc, #108]	@ (8007f50 <_tx_timer_system_activate+0xbc>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	69fa      	ldr	r2, [r7, #28]
 8007ee6:	1ad3      	subs	r3, r2, r3
 8007ee8:	109b      	asrs	r3, r3, #2
 8007eea:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8007eec:	4b19      	ldr	r3, [pc, #100]	@ (8007f54 <_tx_timer_system_activate+0xc0>)
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	693b      	ldr	r3, [r7, #16]
 8007ef2:	009b      	lsls	r3, r3, #2
 8007ef4:	4413      	add	r3, r2
 8007ef6:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 8007ef8:	69fb      	ldr	r3, [r7, #28]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d109      	bne.n	8007f14 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8007f0c:	69fb      	ldr	r3, [r7, #28]
 8007f0e:	687a      	ldr	r2, [r7, #4]
 8007f10:	601a      	str	r2, [r3, #0]
 8007f12:	e011      	b.n	8007f38 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	695b      	ldr	r3, [r3, #20]
 8007f1e:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	687a      	ldr	r2, [r7, #4]
 8007f24:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	68ba      	ldr	r2, [r7, #8]
 8007f36:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	69fa      	ldr	r2, [r7, #28]
 8007f3c:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8007f3e:	bf00      	nop
 8007f40:	3724      	adds	r7, #36	@ 0x24
 8007f42:	46bd      	mov	sp, r7
 8007f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	20002324 	.word	0x20002324
 8007f50:	20002320 	.word	0x20002320
 8007f54:	2000231c 	.word	0x2000231c

08007f58 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 8007f58:	b480      	push	{r7}
 8007f5a:	b087      	sub	sp, #28
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	699b      	ldr	r3, [r3, #24]
 8007f64:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d026      	beq.n	8007fba <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	691b      	ldr	r3, [r3, #16]
 8007f70:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d108      	bne.n	8007f8c <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8007f7a:	697b      	ldr	r3, [r7, #20]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	687a      	ldr	r2, [r7, #4]
 8007f80:	429a      	cmp	r2, r3
 8007f82:	d117      	bne.n	8007fb4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 8007f84:	697b      	ldr	r3, [r7, #20]
 8007f86:	2200      	movs	r2, #0
 8007f88:	601a      	str	r2, [r3, #0]
 8007f8a:	e013      	b.n	8007fb4 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	695b      	ldr	r3, [r3, #20]
 8007f90:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	68fa      	ldr	r2, [r7, #12]
 8007f96:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	693a      	ldr	r2, [r7, #16]
 8007f9c:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 8007f9e:	697b      	ldr	r3, [r7, #20]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	687a      	ldr	r2, [r7, #4]
 8007fa4:	429a      	cmp	r2, r3
 8007fa6:	d105      	bne.n	8007fb4 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	697a      	ldr	r2, [r7, #20]
 8007fac:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 8007fae:	697b      	ldr	r3, [r7, #20]
 8007fb0:	693a      	ldr	r2, [r7, #16]
 8007fb2:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	619a      	str	r2, [r3, #24]
    }
}
 8007fba:	bf00      	nop
 8007fbc:	371c      	adds	r7, #28
 8007fbe:	46bd      	mov	sp, r7
 8007fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc4:	4770      	bx	lr
	...

08007fc8 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b098      	sub	sp, #96	@ 0x60
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	4a73      	ldr	r2, [pc, #460]	@ (80081a4 <_tx_timer_thread_entry+0x1dc>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	f040 80de 	bne.w	800819a <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8007fde:	f3ef 8310 	mrs	r3, PRIMASK
 8007fe2:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8007fe4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 8007fe6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 8007fe8:	b672      	cpsid	i
    return(int_posture);
 8007fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8007fec:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8007fee:	4b6e      	ldr	r3, [pc, #440]	@ (80081a8 <_tx_timer_thread_entry+0x1e0>)
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	d003      	beq.n	8008004 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	f107 020c 	add.w	r2, r7, #12
 8008002:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8008004:	4b68      	ldr	r3, [pc, #416]	@ (80081a8 <_tx_timer_thread_entry+0x1e0>)
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	2200      	movs	r2, #0
 800800a:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800800c:	4b66      	ldr	r3, [pc, #408]	@ (80081a8 <_tx_timer_thread_entry+0x1e0>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3304      	adds	r3, #4
 8008012:	4a65      	ldr	r2, [pc, #404]	@ (80081a8 <_tx_timer_thread_entry+0x1e0>)
 8008014:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 8008016:	4b64      	ldr	r3, [pc, #400]	@ (80081a8 <_tx_timer_thread_entry+0x1e0>)
 8008018:	681a      	ldr	r2, [r3, #0]
 800801a:	4b64      	ldr	r3, [pc, #400]	@ (80081ac <_tx_timer_thread_entry+0x1e4>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	429a      	cmp	r2, r3
 8008020:	d103      	bne.n	800802a <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8008022:	4b63      	ldr	r3, [pc, #396]	@ (80081b0 <_tx_timer_thread_entry+0x1e8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	4a60      	ldr	r2, [pc, #384]	@ (80081a8 <_tx_timer_thread_entry+0x1e0>)
 8008028:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800802a:	4b62      	ldr	r3, [pc, #392]	@ (80081b4 <_tx_timer_thread_entry+0x1ec>)
 800802c:	2200      	movs	r2, #0
 800802e:	601a      	str	r2, [r3, #0]
 8008030:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008032:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008034:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008036:	f383 8810 	msr	PRIMASK, r3
}
 800803a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800803c:	f3ef 8310 	mrs	r3, PRIMASK
 8008040:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8008042:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8008044:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 8008046:	b672      	cpsid	i
    return(int_posture);
 8008048:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800804a:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800804c:	e07f      	b.n	800814e <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	691b      	ldr	r3, [r3, #16]
 8008056:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 8008058:	2300      	movs	r3, #0
 800805a:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800805c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800805e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008060:	429a      	cmp	r2, r3
 8008062:	d102      	bne.n	800806a <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]
 8008068:	e00e      	b.n	8008088 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800806a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800806c:	695b      	ldr	r3, [r3, #20]
 800806e:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 8008070:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008072:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008074:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 8008076:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008078:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800807a:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800807c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800807e:	f107 020c 	add.w	r2, r7, #12
 8008082:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 8008084:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008086:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 8008088:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	2b20      	cmp	r3, #32
 800808e:	d911      	bls.n	80080b4 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 8008090:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 8008098:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800809a:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800809c:	2300      	movs	r3, #0
 800809e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80080a0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080a2:	f107 0208 	add.w	r2, r7, #8
 80080a6:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80080a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080aa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080ac:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80080ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080b0:	60bb      	str	r3, [r7, #8]
 80080b2:	e01a      	b.n	80080ea <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80080b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080b6:	689b      	ldr	r3, [r3, #8]
 80080b8:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80080ba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 80080c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080c2:	685a      	ldr	r2, [r3, #4]
 80080c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080c6:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 80080c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d009      	beq.n	80080e4 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80080d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080d2:	f107 0208 	add.w	r2, r7, #8
 80080d6:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 80080d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80080dc:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 80080de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080e0:	60bb      	str	r3, [r7, #8]
 80080e2:	e002      	b.n	80080ea <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 80080e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080e6:	2200      	movs	r2, #0
 80080e8:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 80080ea:	4a33      	ldr	r2, [pc, #204]	@ (80081b8 <_tx_timer_thread_entry+0x1f0>)
 80080ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80080ee:	6013      	str	r3, [r2, #0]
 80080f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80080f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080f6:	f383 8810 	msr	PRIMASK, r3
}
 80080fa:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 80080fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d002      	beq.n	8008108 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8008102:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008104:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8008106:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008108:	f3ef 8310 	mrs	r3, PRIMASK
 800810c:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 800810e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8008110:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8008112:	b672      	cpsid	i
    return(int_posture);
 8008114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 8008116:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 8008118:	4b27      	ldr	r3, [pc, #156]	@ (80081b8 <_tx_timer_thread_entry+0x1f0>)
 800811a:	2200      	movs	r2, #0
 800811c:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800811e:	68bb      	ldr	r3, [r7, #8]
 8008120:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8008122:	429a      	cmp	r2, r3
 8008124:	d105      	bne.n	8008132 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 8008126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008128:	2200      	movs	r2, #0
 800812a:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800812c:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 800812e:	f7ff feb1 	bl	8007e94 <_tx_timer_system_activate>
 8008132:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008134:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	f383 8810 	msr	PRIMASK, r3
}
 800813c:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800813e:	f3ef 8310 	mrs	r3, PRIMASK
 8008142:	623b      	str	r3, [r7, #32]
    return(posture);
 8008144:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 8008146:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8008148:	b672      	cpsid	i
    return(int_posture);
 800814a:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800814c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 800814e:	68fb      	ldr	r3, [r7, #12]
 8008150:	2b00      	cmp	r3, #0
 8008152:	f47f af7c 	bne.w	800804e <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 8008156:	4b17      	ldr	r3, [pc, #92]	@ (80081b4 <_tx_timer_thread_entry+0x1ec>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	2b00      	cmp	r3, #0
 800815c:	d116      	bne.n	800818c <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800815e:	4b17      	ldr	r3, [pc, #92]	@ (80081bc <_tx_timer_thread_entry+0x1f4>)
 8008160:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8008162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008164:	2203      	movs	r2, #3
 8008166:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8008168:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800816a:	2201      	movs	r2, #1
 800816c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800816e:	4b14      	ldr	r3, [pc, #80]	@ (80081c0 <_tx_timer_thread_entry+0x1f8>)
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	3301      	adds	r3, #1
 8008174:	4a12      	ldr	r2, [pc, #72]	@ (80081c0 <_tx_timer_thread_entry+0x1f8>)
 8008176:	6013      	str	r3, [r2, #0]
 8008178:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800817a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	f383 8810 	msr	PRIMASK, r3
}
 8008182:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 8008184:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 8008186:	f7ff fc23 	bl	80079d0 <_tx_thread_system_suspend>
 800818a:	e728      	b.n	8007fde <_tx_timer_thread_entry+0x16>
 800818c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800818e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008190:	693b      	ldr	r3, [r7, #16]
 8008192:	f383 8810 	msr	PRIMASK, r3
}
 8008196:	bf00      	nop
            TX_DISABLE
 8008198:	e721      	b.n	8007fde <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800819a:	bf00      	nop
 800819c:	3760      	adds	r7, #96	@ 0x60
 800819e:	46bd      	mov	sp, r7
 80081a0:	bd80      	pop	{r7, pc}
 80081a2:	bf00      	nop
 80081a4:	4154494d 	.word	0x4154494d
 80081a8:	20002324 	.word	0x20002324
 80081ac:	20002320 	.word	0x20002320
 80081b0:	2000231c 	.word	0x2000231c
 80081b4:	20002328 	.word	0x20002328
 80081b8:	20002334 	.word	0x20002334
 80081bc:	20002338 	.word	0x20002338
 80081c0:	20002288 	.word	0x20002288

080081c4 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b092      	sub	sp, #72	@ 0x48
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	60f8      	str	r0, [r7, #12]
 80081cc:	60b9      	str	r1, [r7, #8]
 80081ce:	607a      	str	r2, [r7, #4]
 80081d0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 80081d2:	2300      	movs	r3, #0
 80081d4:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d102      	bne.n	80081e2 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80081dc:	2302      	movs	r3, #2
 80081de:	647b      	str	r3, [r7, #68]	@ 0x44
 80081e0:	e075      	b.n	80082ce <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 80081e2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80081e4:	2b34      	cmp	r3, #52	@ 0x34
 80081e6:	d002      	beq.n	80081ee <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 80081e8:	2302      	movs	r3, #2
 80081ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80081ec:	e06f      	b.n	80082ce <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80081ee:	f3ef 8310 	mrs	r3, PRIMASK
 80081f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 80081f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 80081f6:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80081f8:	b672      	cpsid	i
    return(int_posture);
 80081fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 80081fc:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 80081fe:	4b3b      	ldr	r3, [pc, #236]	@ (80082ec <_txe_byte_pool_create+0x128>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	3301      	adds	r3, #1
 8008204:	4a39      	ldr	r2, [pc, #228]	@ (80082ec <_txe_byte_pool_create+0x128>)
 8008206:	6013      	str	r3, [r2, #0]
 8008208:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800820a:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800820c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820e:	f383 8810 	msr	PRIMASK, r3
}
 8008212:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8008214:	4b36      	ldr	r3, [pc, #216]	@ (80082f0 <_txe_byte_pool_create+0x12c>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800821a:	2300      	movs	r3, #0
 800821c:	643b      	str	r3, [r7, #64]	@ 0x40
 800821e:	e009      	b.n	8008234 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8008220:	68fa      	ldr	r2, [r7, #12]
 8008222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008224:	429a      	cmp	r2, r3
 8008226:	d00b      	beq.n	8008240 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 8008228:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800822a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800822c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800822e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008230:	3301      	adds	r3, #1
 8008232:	643b      	str	r3, [r7, #64]	@ 0x40
 8008234:	4b2f      	ldr	r3, [pc, #188]	@ (80082f4 <_txe_byte_pool_create+0x130>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800823a:	429a      	cmp	r2, r3
 800823c:	d3f0      	bcc.n	8008220 <_txe_byte_pool_create+0x5c>
 800823e:	e000      	b.n	8008242 <_txe_byte_pool_create+0x7e>
                break;
 8008240:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8008242:	f3ef 8310 	mrs	r3, PRIMASK
 8008246:	623b      	str	r3, [r7, #32]
    return(posture);
 8008248:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800824a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800824c:	b672      	cpsid	i
    return(int_posture);
 800824e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8008250:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8008252:	4b26      	ldr	r3, [pc, #152]	@ (80082ec <_txe_byte_pool_create+0x128>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	3b01      	subs	r3, #1
 8008258:	4a24      	ldr	r2, [pc, #144]	@ (80082ec <_txe_byte_pool_create+0x128>)
 800825a:	6013      	str	r3, [r2, #0]
 800825c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800825e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8008260:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008262:	f383 8810 	msr	PRIMASK, r3
}
 8008266:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008268:	f7ff fa78 	bl	800775c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800826c:	68fa      	ldr	r2, [r7, #12]
 800826e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008270:	429a      	cmp	r2, r3
 8008272:	d102      	bne.n	800827a <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 8008274:	2302      	movs	r3, #2
 8008276:	647b      	str	r3, [r7, #68]	@ 0x44
 8008278:	e029      	b.n	80082ce <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d102      	bne.n	8008286 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 8008280:	2303      	movs	r3, #3
 8008282:	647b      	str	r3, [r7, #68]	@ 0x44
 8008284:	e023      	b.n	80082ce <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 8008286:	683b      	ldr	r3, [r7, #0]
 8008288:	2b63      	cmp	r3, #99	@ 0x63
 800828a:	d802      	bhi.n	8008292 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800828c:	2305      	movs	r3, #5
 800828e:	647b      	str	r3, [r7, #68]	@ 0x44
 8008290:	e01d      	b.n	80082ce <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 8008292:	4b19      	ldr	r3, [pc, #100]	@ (80082f8 <_txe_byte_pool_create+0x134>)
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 8008298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800829a:	4a18      	ldr	r2, [pc, #96]	@ (80082fc <_txe_byte_pool_create+0x138>)
 800829c:	4293      	cmp	r3, r2
 800829e:	d101      	bne.n	80082a4 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80082a0:	2313      	movs	r3, #19
 80082a2:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80082a4:	f3ef 8305 	mrs	r3, IPSR
 80082a8:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80082aa:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80082ac:	4b14      	ldr	r3, [pc, #80]	@ (8008300 <_txe_byte_pool_create+0x13c>)
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d00b      	beq.n	80082ce <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80082b6:	f3ef 8305 	mrs	r3, IPSR
 80082ba:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80082bc:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80082be:	4b10      	ldr	r3, [pc, #64]	@ (8008300 <_txe_byte_pool_create+0x13c>)
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80082c8:	d201      	bcs.n	80082ce <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80082ca:	2313      	movs	r3, #19
 80082cc:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80082ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d106      	bne.n	80082e2 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 80082d4:	683b      	ldr	r3, [r7, #0]
 80082d6:	687a      	ldr	r2, [r7, #4]
 80082d8:	68b9      	ldr	r1, [r7, #8]
 80082da:	68f8      	ldr	r0, [r7, #12]
 80082dc:	f7fe ff3c 	bl	8007158 <_tx_byte_pool_create>
 80082e0:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 80082e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80082e4:	4618      	mov	r0, r3
 80082e6:	3748      	adds	r7, #72	@ 0x48
 80082e8:	46bd      	mov	sp, r7
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	20002288 	.word	0x20002288
 80082f0:	200021e0 	.word	0x200021e0
 80082f4:	200021e4 	.word	0x200021e4
 80082f8:	200021f0 	.word	0x200021f0
 80082fc:	20002338 	.word	0x20002338
 8008300:	2000000c 	.word	0x2000000c

08008304 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8008304:	b580      	push	{r7, lr}
 8008306:	b09a      	sub	sp, #104	@ 0x68
 8008308:	af06      	add	r7, sp, #24
 800830a:	60f8      	str	r0, [r7, #12]
 800830c:	60b9      	str	r1, [r7, #8]
 800830e:	607a      	str	r2, [r7, #4]
 8008310:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8008312:	2300      	movs	r3, #0
 8008314:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	2b00      	cmp	r3, #0
 800831a:	d102      	bne.n	8008322 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800831c:	230e      	movs	r3, #14
 800831e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008320:	e0bb      	b.n	800849a <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8008322:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008324:	2bb0      	cmp	r3, #176	@ 0xb0
 8008326:	d002      	beq.n	800832e <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8008328:	230e      	movs	r3, #14
 800832a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800832c:	e0b5      	b.n	800849a <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800832e:	f3ef 8310 	mrs	r3, PRIMASK
 8008332:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8008336:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8008338:	b672      	cpsid	i
    return(int_posture);
 800833a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800833c:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800833e:	4b64      	ldr	r3, [pc, #400]	@ (80084d0 <_txe_thread_create+0x1cc>)
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	3301      	adds	r3, #1
 8008344:	4a62      	ldr	r2, [pc, #392]	@ (80084d0 <_txe_thread_create+0x1cc>)
 8008346:	6013      	str	r3, [r2, #0]
 8008348:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800834a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800834c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800834e:	f383 8810 	msr	PRIMASK, r3
}
 8008352:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8008354:	2300      	movs	r3, #0
 8008356:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 8008358:	4b5e      	ldr	r3, [pc, #376]	@ (80084d4 <_txe_thread_create+0x1d0>)
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800835e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008360:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 8008362:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008364:	3b01      	subs	r3, #1
 8008366:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8008368:	4413      	add	r3, r2
 800836a:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800836c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800836e:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 8008370:	2300      	movs	r3, #0
 8008372:	647b      	str	r3, [r7, #68]	@ 0x44
 8008374:	e02b      	b.n	80083ce <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 8008376:	68fa      	ldr	r2, [r7, #12]
 8008378:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800837a:	429a      	cmp	r2, r3
 800837c:	d101      	bne.n	8008382 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800837e:	2301      	movs	r3, #1
 8008380:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 8008382:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008384:	2b01      	cmp	r3, #1
 8008386:	d028      	beq.n	80083da <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 8008388:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800838a:	68db      	ldr	r3, [r3, #12]
 800838c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800838e:	429a      	cmp	r2, r3
 8008390:	d308      	bcc.n	80083a4 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 8008392:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008394:	691b      	ldr	r3, [r3, #16]
 8008396:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008398:	429a      	cmp	r2, r3
 800839a:	d203      	bcs.n	80083a4 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800839c:	2300      	movs	r3, #0
 800839e:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80083a0:	2301      	movs	r3, #1
 80083a2:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80083a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083a6:	68db      	ldr	r3, [r3, #12]
 80083a8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083aa:	429a      	cmp	r2, r3
 80083ac:	d308      	bcc.n	80083c0 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80083ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083b0:	691b      	ldr	r3, [r3, #16]
 80083b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80083b4:	429a      	cmp	r2, r3
 80083b6:	d203      	bcs.n	80083c0 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80083b8:	2300      	movs	r3, #0
 80083ba:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80083bc:	2301      	movs	r3, #1
 80083be:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 80083c0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80083c6:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80083c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80083ca:	3301      	adds	r3, #1
 80083cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80083ce:	4b42      	ldr	r3, [pc, #264]	@ (80084d8 <_txe_thread_create+0x1d4>)
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d3ce      	bcc.n	8008376 <_txe_thread_create+0x72>
 80083d8:	e000      	b.n	80083dc <_txe_thread_create+0xd8>
                break;
 80083da:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80083dc:	f3ef 8310 	mrs	r3, PRIMASK
 80083e0:	61fb      	str	r3, [r7, #28]
    return(posture);
 80083e2:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 80083e4:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 80083e6:	b672      	cpsid	i
    return(int_posture);
 80083e8:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 80083ea:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 80083ec:	4b38      	ldr	r3, [pc, #224]	@ (80084d0 <_txe_thread_create+0x1cc>)
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	4a37      	ldr	r2, [pc, #220]	@ (80084d0 <_txe_thread_create+0x1cc>)
 80083f4:	6013      	str	r3, [r2, #0]
 80083f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80083f8:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80083fa:	6a3b      	ldr	r3, [r7, #32]
 80083fc:	f383 8810 	msr	PRIMASK, r3
}
 8008400:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8008402:	f7ff f9ab 	bl	800775c <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 8008406:	68fa      	ldr	r2, [r7, #12]
 8008408:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800840a:	429a      	cmp	r2, r3
 800840c:	d102      	bne.n	8008414 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800840e:	230e      	movs	r3, #14
 8008410:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008412:	e042      	b.n	800849a <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8008414:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008416:	2b00      	cmp	r3, #0
 8008418:	d102      	bne.n	8008420 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800841a:	2303      	movs	r3, #3
 800841c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800841e:	e03c      	b.n	800849a <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d102      	bne.n	800842c <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 8008426:	2303      	movs	r3, #3
 8008428:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800842a:	e036      	b.n	800849a <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800842c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800842e:	2bc7      	cmp	r3, #199	@ 0xc7
 8008430:	d802      	bhi.n	8008438 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8008432:	2305      	movs	r3, #5
 8008434:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008436:	e030      	b.n	800849a <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 8008438:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800843a:	2b1f      	cmp	r3, #31
 800843c:	d902      	bls.n	8008444 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800843e:	230f      	movs	r3, #15
 8008440:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008442:	e02a      	b.n	800849a <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8008444:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008446:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008448:	429a      	cmp	r2, r3
 800844a:	d902      	bls.n	8008452 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800844c:	2318      	movs	r3, #24
 800844e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008450:	e023      	b.n	800849a <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8008452:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8008454:	2b01      	cmp	r3, #1
 8008456:	d902      	bls.n	800845e <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 8008458:	2310      	movs	r3, #16
 800845a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800845c:	e01d      	b.n	800849a <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800845e:	4b1f      	ldr	r3, [pc, #124]	@ (80084dc <_txe_thread_create+0x1d8>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 8008464:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008466:	4a1e      	ldr	r2, [pc, #120]	@ (80084e0 <_txe_thread_create+0x1dc>)
 8008468:	4293      	cmp	r3, r2
 800846a:	d101      	bne.n	8008470 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800846c:	2313      	movs	r3, #19
 800846e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008470:	f3ef 8305 	mrs	r3, IPSR
 8008474:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8008476:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 8008478:	4b1a      	ldr	r3, [pc, #104]	@ (80084e4 <_txe_thread_create+0x1e0>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	4313      	orrs	r3, r2
 800847e:	2b00      	cmp	r3, #0
 8008480:	d00b      	beq.n	800849a <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8008482:	f3ef 8305 	mrs	r3, IPSR
 8008486:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8008488:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800848a:	4b16      	ldr	r3, [pc, #88]	@ (80084e4 <_txe_thread_create+0x1e0>)
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	4313      	orrs	r3, r2
 8008490:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 8008494:	d201      	bcs.n	800849a <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 8008496:	2313      	movs	r3, #19
 8008498:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800849a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800849c:	2b00      	cmp	r3, #0
 800849e:	d112      	bne.n	80084c6 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80084a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80084a2:	9305      	str	r3, [sp, #20]
 80084a4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80084a6:	9304      	str	r3, [sp, #16]
 80084a8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80084aa:	9303      	str	r3, [sp, #12]
 80084ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80084ae:	9302      	str	r3, [sp, #8]
 80084b0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80084b2:	9301      	str	r3, [sp, #4]
 80084b4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80084b6:	9300      	str	r3, [sp, #0]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	687a      	ldr	r2, [r7, #4]
 80084bc:	68b9      	ldr	r1, [r7, #8]
 80084be:	68f8      	ldr	r0, [r7, #12]
 80084c0:	f7fe ff4e 	bl	8007360 <_tx_thread_create>
 80084c4:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 80084c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80084c8:	4618      	mov	r0, r3
 80084ca:	3750      	adds	r7, #80	@ 0x50
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	20002288 	.word	0x20002288
 80084d4:	200021f8 	.word	0x200021f8
 80084d8:	200021fc 	.word	0x200021fc
 80084dc:	200021f0 	.word	0x200021f0
 80084e0:	20002338 	.word	0x20002338
 80084e4:	2000000c 	.word	0x2000000c

080084e8 <__cvt>:
 80084e8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084ec:	ec57 6b10 	vmov	r6, r7, d0
 80084f0:	2f00      	cmp	r7, #0
 80084f2:	460c      	mov	r4, r1
 80084f4:	4619      	mov	r1, r3
 80084f6:	463b      	mov	r3, r7
 80084f8:	bfbb      	ittet	lt
 80084fa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80084fe:	461f      	movlt	r7, r3
 8008500:	2300      	movge	r3, #0
 8008502:	232d      	movlt	r3, #45	@ 0x2d
 8008504:	700b      	strb	r3, [r1, #0]
 8008506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008508:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800850c:	4691      	mov	r9, r2
 800850e:	f023 0820 	bic.w	r8, r3, #32
 8008512:	bfbc      	itt	lt
 8008514:	4632      	movlt	r2, r6
 8008516:	4616      	movlt	r6, r2
 8008518:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800851c:	d005      	beq.n	800852a <__cvt+0x42>
 800851e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008522:	d100      	bne.n	8008526 <__cvt+0x3e>
 8008524:	3401      	adds	r4, #1
 8008526:	2102      	movs	r1, #2
 8008528:	e000      	b.n	800852c <__cvt+0x44>
 800852a:	2103      	movs	r1, #3
 800852c:	ab03      	add	r3, sp, #12
 800852e:	9301      	str	r3, [sp, #4]
 8008530:	ab02      	add	r3, sp, #8
 8008532:	9300      	str	r3, [sp, #0]
 8008534:	ec47 6b10 	vmov	d0, r6, r7
 8008538:	4653      	mov	r3, sl
 800853a:	4622      	mov	r2, r4
 800853c:	f001 f888 	bl	8009650 <_dtoa_r>
 8008540:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008544:	4605      	mov	r5, r0
 8008546:	d119      	bne.n	800857c <__cvt+0x94>
 8008548:	f019 0f01 	tst.w	r9, #1
 800854c:	d00e      	beq.n	800856c <__cvt+0x84>
 800854e:	eb00 0904 	add.w	r9, r0, r4
 8008552:	2200      	movs	r2, #0
 8008554:	2300      	movs	r3, #0
 8008556:	4630      	mov	r0, r6
 8008558:	4639      	mov	r1, r7
 800855a:	f7f8 fbfd 	bl	8000d58 <__aeabi_dcmpeq>
 800855e:	b108      	cbz	r0, 8008564 <__cvt+0x7c>
 8008560:	f8cd 900c 	str.w	r9, [sp, #12]
 8008564:	2230      	movs	r2, #48	@ 0x30
 8008566:	9b03      	ldr	r3, [sp, #12]
 8008568:	454b      	cmp	r3, r9
 800856a:	d31e      	bcc.n	80085aa <__cvt+0xc2>
 800856c:	9b03      	ldr	r3, [sp, #12]
 800856e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008570:	1b5b      	subs	r3, r3, r5
 8008572:	4628      	mov	r0, r5
 8008574:	6013      	str	r3, [r2, #0]
 8008576:	b004      	add	sp, #16
 8008578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800857c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008580:	eb00 0904 	add.w	r9, r0, r4
 8008584:	d1e5      	bne.n	8008552 <__cvt+0x6a>
 8008586:	7803      	ldrb	r3, [r0, #0]
 8008588:	2b30      	cmp	r3, #48	@ 0x30
 800858a:	d10a      	bne.n	80085a2 <__cvt+0xba>
 800858c:	2200      	movs	r2, #0
 800858e:	2300      	movs	r3, #0
 8008590:	4630      	mov	r0, r6
 8008592:	4639      	mov	r1, r7
 8008594:	f7f8 fbe0 	bl	8000d58 <__aeabi_dcmpeq>
 8008598:	b918      	cbnz	r0, 80085a2 <__cvt+0xba>
 800859a:	f1c4 0401 	rsb	r4, r4, #1
 800859e:	f8ca 4000 	str.w	r4, [sl]
 80085a2:	f8da 3000 	ldr.w	r3, [sl]
 80085a6:	4499      	add	r9, r3
 80085a8:	e7d3      	b.n	8008552 <__cvt+0x6a>
 80085aa:	1c59      	adds	r1, r3, #1
 80085ac:	9103      	str	r1, [sp, #12]
 80085ae:	701a      	strb	r2, [r3, #0]
 80085b0:	e7d9      	b.n	8008566 <__cvt+0x7e>

080085b2 <__exponent>:
 80085b2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80085b4:	2900      	cmp	r1, #0
 80085b6:	bfba      	itte	lt
 80085b8:	4249      	neglt	r1, r1
 80085ba:	232d      	movlt	r3, #45	@ 0x2d
 80085bc:	232b      	movge	r3, #43	@ 0x2b
 80085be:	2909      	cmp	r1, #9
 80085c0:	7002      	strb	r2, [r0, #0]
 80085c2:	7043      	strb	r3, [r0, #1]
 80085c4:	dd29      	ble.n	800861a <__exponent+0x68>
 80085c6:	f10d 0307 	add.w	r3, sp, #7
 80085ca:	461d      	mov	r5, r3
 80085cc:	270a      	movs	r7, #10
 80085ce:	461a      	mov	r2, r3
 80085d0:	fbb1 f6f7 	udiv	r6, r1, r7
 80085d4:	fb07 1416 	mls	r4, r7, r6, r1
 80085d8:	3430      	adds	r4, #48	@ 0x30
 80085da:	f802 4c01 	strb.w	r4, [r2, #-1]
 80085de:	460c      	mov	r4, r1
 80085e0:	2c63      	cmp	r4, #99	@ 0x63
 80085e2:	f103 33ff 	add.w	r3, r3, #4294967295
 80085e6:	4631      	mov	r1, r6
 80085e8:	dcf1      	bgt.n	80085ce <__exponent+0x1c>
 80085ea:	3130      	adds	r1, #48	@ 0x30
 80085ec:	1e94      	subs	r4, r2, #2
 80085ee:	f803 1c01 	strb.w	r1, [r3, #-1]
 80085f2:	1c41      	adds	r1, r0, #1
 80085f4:	4623      	mov	r3, r4
 80085f6:	42ab      	cmp	r3, r5
 80085f8:	d30a      	bcc.n	8008610 <__exponent+0x5e>
 80085fa:	f10d 0309 	add.w	r3, sp, #9
 80085fe:	1a9b      	subs	r3, r3, r2
 8008600:	42ac      	cmp	r4, r5
 8008602:	bf88      	it	hi
 8008604:	2300      	movhi	r3, #0
 8008606:	3302      	adds	r3, #2
 8008608:	4403      	add	r3, r0
 800860a:	1a18      	subs	r0, r3, r0
 800860c:	b003      	add	sp, #12
 800860e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008610:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008614:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008618:	e7ed      	b.n	80085f6 <__exponent+0x44>
 800861a:	2330      	movs	r3, #48	@ 0x30
 800861c:	3130      	adds	r1, #48	@ 0x30
 800861e:	7083      	strb	r3, [r0, #2]
 8008620:	70c1      	strb	r1, [r0, #3]
 8008622:	1d03      	adds	r3, r0, #4
 8008624:	e7f1      	b.n	800860a <__exponent+0x58>
	...

08008628 <_printf_float>:
 8008628:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800862c:	b08d      	sub	sp, #52	@ 0x34
 800862e:	460c      	mov	r4, r1
 8008630:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008634:	4616      	mov	r6, r2
 8008636:	461f      	mov	r7, r3
 8008638:	4605      	mov	r5, r0
 800863a:	f000 ff01 	bl	8009440 <_localeconv_r>
 800863e:	6803      	ldr	r3, [r0, #0]
 8008640:	9304      	str	r3, [sp, #16]
 8008642:	4618      	mov	r0, r3
 8008644:	f7f7 ff5c 	bl	8000500 <strlen>
 8008648:	2300      	movs	r3, #0
 800864a:	930a      	str	r3, [sp, #40]	@ 0x28
 800864c:	f8d8 3000 	ldr.w	r3, [r8]
 8008650:	9005      	str	r0, [sp, #20]
 8008652:	3307      	adds	r3, #7
 8008654:	f023 0307 	bic.w	r3, r3, #7
 8008658:	f103 0208 	add.w	r2, r3, #8
 800865c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008660:	f8d4 b000 	ldr.w	fp, [r4]
 8008664:	f8c8 2000 	str.w	r2, [r8]
 8008668:	e9d3 8900 	ldrd	r8, r9, [r3]
 800866c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008670:	9307      	str	r3, [sp, #28]
 8008672:	f8cd 8018 	str.w	r8, [sp, #24]
 8008676:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800867a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800867e:	4b9c      	ldr	r3, [pc, #624]	@ (80088f0 <_printf_float+0x2c8>)
 8008680:	f04f 32ff 	mov.w	r2, #4294967295
 8008684:	f7f8 fb9a 	bl	8000dbc <__aeabi_dcmpun>
 8008688:	bb70      	cbnz	r0, 80086e8 <_printf_float+0xc0>
 800868a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800868e:	4b98      	ldr	r3, [pc, #608]	@ (80088f0 <_printf_float+0x2c8>)
 8008690:	f04f 32ff 	mov.w	r2, #4294967295
 8008694:	f7f8 fb74 	bl	8000d80 <__aeabi_dcmple>
 8008698:	bb30      	cbnz	r0, 80086e8 <_printf_float+0xc0>
 800869a:	2200      	movs	r2, #0
 800869c:	2300      	movs	r3, #0
 800869e:	4640      	mov	r0, r8
 80086a0:	4649      	mov	r1, r9
 80086a2:	f7f8 fb63 	bl	8000d6c <__aeabi_dcmplt>
 80086a6:	b110      	cbz	r0, 80086ae <_printf_float+0x86>
 80086a8:	232d      	movs	r3, #45	@ 0x2d
 80086aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80086ae:	4a91      	ldr	r2, [pc, #580]	@ (80088f4 <_printf_float+0x2cc>)
 80086b0:	4b91      	ldr	r3, [pc, #580]	@ (80088f8 <_printf_float+0x2d0>)
 80086b2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80086b6:	bf94      	ite	ls
 80086b8:	4690      	movls	r8, r2
 80086ba:	4698      	movhi	r8, r3
 80086bc:	2303      	movs	r3, #3
 80086be:	6123      	str	r3, [r4, #16]
 80086c0:	f02b 0304 	bic.w	r3, fp, #4
 80086c4:	6023      	str	r3, [r4, #0]
 80086c6:	f04f 0900 	mov.w	r9, #0
 80086ca:	9700      	str	r7, [sp, #0]
 80086cc:	4633      	mov	r3, r6
 80086ce:	aa0b      	add	r2, sp, #44	@ 0x2c
 80086d0:	4621      	mov	r1, r4
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 f9d2 	bl	8008a7c <_printf_common>
 80086d8:	3001      	adds	r0, #1
 80086da:	f040 808d 	bne.w	80087f8 <_printf_float+0x1d0>
 80086de:	f04f 30ff 	mov.w	r0, #4294967295
 80086e2:	b00d      	add	sp, #52	@ 0x34
 80086e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086e8:	4642      	mov	r2, r8
 80086ea:	464b      	mov	r3, r9
 80086ec:	4640      	mov	r0, r8
 80086ee:	4649      	mov	r1, r9
 80086f0:	f7f8 fb64 	bl	8000dbc <__aeabi_dcmpun>
 80086f4:	b140      	cbz	r0, 8008708 <_printf_float+0xe0>
 80086f6:	464b      	mov	r3, r9
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	bfbc      	itt	lt
 80086fc:	232d      	movlt	r3, #45	@ 0x2d
 80086fe:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008702:	4a7e      	ldr	r2, [pc, #504]	@ (80088fc <_printf_float+0x2d4>)
 8008704:	4b7e      	ldr	r3, [pc, #504]	@ (8008900 <_printf_float+0x2d8>)
 8008706:	e7d4      	b.n	80086b2 <_printf_float+0x8a>
 8008708:	6863      	ldr	r3, [r4, #4]
 800870a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800870e:	9206      	str	r2, [sp, #24]
 8008710:	1c5a      	adds	r2, r3, #1
 8008712:	d13b      	bne.n	800878c <_printf_float+0x164>
 8008714:	2306      	movs	r3, #6
 8008716:	6063      	str	r3, [r4, #4]
 8008718:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800871c:	2300      	movs	r3, #0
 800871e:	6022      	str	r2, [r4, #0]
 8008720:	9303      	str	r3, [sp, #12]
 8008722:	ab0a      	add	r3, sp, #40	@ 0x28
 8008724:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008728:	ab09      	add	r3, sp, #36	@ 0x24
 800872a:	9300      	str	r3, [sp, #0]
 800872c:	6861      	ldr	r1, [r4, #4]
 800872e:	ec49 8b10 	vmov	d0, r8, r9
 8008732:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008736:	4628      	mov	r0, r5
 8008738:	f7ff fed6 	bl	80084e8 <__cvt>
 800873c:	9b06      	ldr	r3, [sp, #24]
 800873e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008740:	2b47      	cmp	r3, #71	@ 0x47
 8008742:	4680      	mov	r8, r0
 8008744:	d129      	bne.n	800879a <_printf_float+0x172>
 8008746:	1cc8      	adds	r0, r1, #3
 8008748:	db02      	blt.n	8008750 <_printf_float+0x128>
 800874a:	6863      	ldr	r3, [r4, #4]
 800874c:	4299      	cmp	r1, r3
 800874e:	dd41      	ble.n	80087d4 <_printf_float+0x1ac>
 8008750:	f1aa 0a02 	sub.w	sl, sl, #2
 8008754:	fa5f fa8a 	uxtb.w	sl, sl
 8008758:	3901      	subs	r1, #1
 800875a:	4652      	mov	r2, sl
 800875c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008760:	9109      	str	r1, [sp, #36]	@ 0x24
 8008762:	f7ff ff26 	bl	80085b2 <__exponent>
 8008766:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008768:	1813      	adds	r3, r2, r0
 800876a:	2a01      	cmp	r2, #1
 800876c:	4681      	mov	r9, r0
 800876e:	6123      	str	r3, [r4, #16]
 8008770:	dc02      	bgt.n	8008778 <_printf_float+0x150>
 8008772:	6822      	ldr	r2, [r4, #0]
 8008774:	07d2      	lsls	r2, r2, #31
 8008776:	d501      	bpl.n	800877c <_printf_float+0x154>
 8008778:	3301      	adds	r3, #1
 800877a:	6123      	str	r3, [r4, #16]
 800877c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008780:	2b00      	cmp	r3, #0
 8008782:	d0a2      	beq.n	80086ca <_printf_float+0xa2>
 8008784:	232d      	movs	r3, #45	@ 0x2d
 8008786:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800878a:	e79e      	b.n	80086ca <_printf_float+0xa2>
 800878c:	9a06      	ldr	r2, [sp, #24]
 800878e:	2a47      	cmp	r2, #71	@ 0x47
 8008790:	d1c2      	bne.n	8008718 <_printf_float+0xf0>
 8008792:	2b00      	cmp	r3, #0
 8008794:	d1c0      	bne.n	8008718 <_printf_float+0xf0>
 8008796:	2301      	movs	r3, #1
 8008798:	e7bd      	b.n	8008716 <_printf_float+0xee>
 800879a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800879e:	d9db      	bls.n	8008758 <_printf_float+0x130>
 80087a0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80087a4:	d118      	bne.n	80087d8 <_printf_float+0x1b0>
 80087a6:	2900      	cmp	r1, #0
 80087a8:	6863      	ldr	r3, [r4, #4]
 80087aa:	dd0b      	ble.n	80087c4 <_printf_float+0x19c>
 80087ac:	6121      	str	r1, [r4, #16]
 80087ae:	b913      	cbnz	r3, 80087b6 <_printf_float+0x18e>
 80087b0:	6822      	ldr	r2, [r4, #0]
 80087b2:	07d0      	lsls	r0, r2, #31
 80087b4:	d502      	bpl.n	80087bc <_printf_float+0x194>
 80087b6:	3301      	adds	r3, #1
 80087b8:	440b      	add	r3, r1
 80087ba:	6123      	str	r3, [r4, #16]
 80087bc:	65a1      	str	r1, [r4, #88]	@ 0x58
 80087be:	f04f 0900 	mov.w	r9, #0
 80087c2:	e7db      	b.n	800877c <_printf_float+0x154>
 80087c4:	b913      	cbnz	r3, 80087cc <_printf_float+0x1a4>
 80087c6:	6822      	ldr	r2, [r4, #0]
 80087c8:	07d2      	lsls	r2, r2, #31
 80087ca:	d501      	bpl.n	80087d0 <_printf_float+0x1a8>
 80087cc:	3302      	adds	r3, #2
 80087ce:	e7f4      	b.n	80087ba <_printf_float+0x192>
 80087d0:	2301      	movs	r3, #1
 80087d2:	e7f2      	b.n	80087ba <_printf_float+0x192>
 80087d4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80087d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087da:	4299      	cmp	r1, r3
 80087dc:	db05      	blt.n	80087ea <_printf_float+0x1c2>
 80087de:	6823      	ldr	r3, [r4, #0]
 80087e0:	6121      	str	r1, [r4, #16]
 80087e2:	07d8      	lsls	r0, r3, #31
 80087e4:	d5ea      	bpl.n	80087bc <_printf_float+0x194>
 80087e6:	1c4b      	adds	r3, r1, #1
 80087e8:	e7e7      	b.n	80087ba <_printf_float+0x192>
 80087ea:	2900      	cmp	r1, #0
 80087ec:	bfd4      	ite	le
 80087ee:	f1c1 0202 	rsble	r2, r1, #2
 80087f2:	2201      	movgt	r2, #1
 80087f4:	4413      	add	r3, r2
 80087f6:	e7e0      	b.n	80087ba <_printf_float+0x192>
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	055a      	lsls	r2, r3, #21
 80087fc:	d407      	bmi.n	800880e <_printf_float+0x1e6>
 80087fe:	6923      	ldr	r3, [r4, #16]
 8008800:	4642      	mov	r2, r8
 8008802:	4631      	mov	r1, r6
 8008804:	4628      	mov	r0, r5
 8008806:	47b8      	blx	r7
 8008808:	3001      	adds	r0, #1
 800880a:	d12b      	bne.n	8008864 <_printf_float+0x23c>
 800880c:	e767      	b.n	80086de <_printf_float+0xb6>
 800880e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008812:	f240 80dd 	bls.w	80089d0 <_printf_float+0x3a8>
 8008816:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800881a:	2200      	movs	r2, #0
 800881c:	2300      	movs	r3, #0
 800881e:	f7f8 fa9b 	bl	8000d58 <__aeabi_dcmpeq>
 8008822:	2800      	cmp	r0, #0
 8008824:	d033      	beq.n	800888e <_printf_float+0x266>
 8008826:	4a37      	ldr	r2, [pc, #220]	@ (8008904 <_printf_float+0x2dc>)
 8008828:	2301      	movs	r3, #1
 800882a:	4631      	mov	r1, r6
 800882c:	4628      	mov	r0, r5
 800882e:	47b8      	blx	r7
 8008830:	3001      	adds	r0, #1
 8008832:	f43f af54 	beq.w	80086de <_printf_float+0xb6>
 8008836:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800883a:	4543      	cmp	r3, r8
 800883c:	db02      	blt.n	8008844 <_printf_float+0x21c>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	07d8      	lsls	r0, r3, #31
 8008842:	d50f      	bpl.n	8008864 <_printf_float+0x23c>
 8008844:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008848:	4631      	mov	r1, r6
 800884a:	4628      	mov	r0, r5
 800884c:	47b8      	blx	r7
 800884e:	3001      	adds	r0, #1
 8008850:	f43f af45 	beq.w	80086de <_printf_float+0xb6>
 8008854:	f04f 0900 	mov.w	r9, #0
 8008858:	f108 38ff 	add.w	r8, r8, #4294967295
 800885c:	f104 0a1a 	add.w	sl, r4, #26
 8008860:	45c8      	cmp	r8, r9
 8008862:	dc09      	bgt.n	8008878 <_printf_float+0x250>
 8008864:	6823      	ldr	r3, [r4, #0]
 8008866:	079b      	lsls	r3, r3, #30
 8008868:	f100 8103 	bmi.w	8008a72 <_printf_float+0x44a>
 800886c:	68e0      	ldr	r0, [r4, #12]
 800886e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008870:	4298      	cmp	r0, r3
 8008872:	bfb8      	it	lt
 8008874:	4618      	movlt	r0, r3
 8008876:	e734      	b.n	80086e2 <_printf_float+0xba>
 8008878:	2301      	movs	r3, #1
 800887a:	4652      	mov	r2, sl
 800887c:	4631      	mov	r1, r6
 800887e:	4628      	mov	r0, r5
 8008880:	47b8      	blx	r7
 8008882:	3001      	adds	r0, #1
 8008884:	f43f af2b 	beq.w	80086de <_printf_float+0xb6>
 8008888:	f109 0901 	add.w	r9, r9, #1
 800888c:	e7e8      	b.n	8008860 <_printf_float+0x238>
 800888e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008890:	2b00      	cmp	r3, #0
 8008892:	dc39      	bgt.n	8008908 <_printf_float+0x2e0>
 8008894:	4a1b      	ldr	r2, [pc, #108]	@ (8008904 <_printf_float+0x2dc>)
 8008896:	2301      	movs	r3, #1
 8008898:	4631      	mov	r1, r6
 800889a:	4628      	mov	r0, r5
 800889c:	47b8      	blx	r7
 800889e:	3001      	adds	r0, #1
 80088a0:	f43f af1d 	beq.w	80086de <_printf_float+0xb6>
 80088a4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80088a8:	ea59 0303 	orrs.w	r3, r9, r3
 80088ac:	d102      	bne.n	80088b4 <_printf_float+0x28c>
 80088ae:	6823      	ldr	r3, [r4, #0]
 80088b0:	07d9      	lsls	r1, r3, #31
 80088b2:	d5d7      	bpl.n	8008864 <_printf_float+0x23c>
 80088b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088b8:	4631      	mov	r1, r6
 80088ba:	4628      	mov	r0, r5
 80088bc:	47b8      	blx	r7
 80088be:	3001      	adds	r0, #1
 80088c0:	f43f af0d 	beq.w	80086de <_printf_float+0xb6>
 80088c4:	f04f 0a00 	mov.w	sl, #0
 80088c8:	f104 0b1a 	add.w	fp, r4, #26
 80088cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80088ce:	425b      	negs	r3, r3
 80088d0:	4553      	cmp	r3, sl
 80088d2:	dc01      	bgt.n	80088d8 <_printf_float+0x2b0>
 80088d4:	464b      	mov	r3, r9
 80088d6:	e793      	b.n	8008800 <_printf_float+0x1d8>
 80088d8:	2301      	movs	r3, #1
 80088da:	465a      	mov	r2, fp
 80088dc:	4631      	mov	r1, r6
 80088de:	4628      	mov	r0, r5
 80088e0:	47b8      	blx	r7
 80088e2:	3001      	adds	r0, #1
 80088e4:	f43f aefb 	beq.w	80086de <_printf_float+0xb6>
 80088e8:	f10a 0a01 	add.w	sl, sl, #1
 80088ec:	e7ee      	b.n	80088cc <_printf_float+0x2a4>
 80088ee:	bf00      	nop
 80088f0:	7fefffff 	.word	0x7fefffff
 80088f4:	0800ccb4 	.word	0x0800ccb4
 80088f8:	0800ccb8 	.word	0x0800ccb8
 80088fc:	0800ccbc 	.word	0x0800ccbc
 8008900:	0800ccc0 	.word	0x0800ccc0
 8008904:	0800ccc4 	.word	0x0800ccc4
 8008908:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800890a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800890e:	4553      	cmp	r3, sl
 8008910:	bfa8      	it	ge
 8008912:	4653      	movge	r3, sl
 8008914:	2b00      	cmp	r3, #0
 8008916:	4699      	mov	r9, r3
 8008918:	dc36      	bgt.n	8008988 <_printf_float+0x360>
 800891a:	f04f 0b00 	mov.w	fp, #0
 800891e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008922:	f104 021a 	add.w	r2, r4, #26
 8008926:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008928:	9306      	str	r3, [sp, #24]
 800892a:	eba3 0309 	sub.w	r3, r3, r9
 800892e:	455b      	cmp	r3, fp
 8008930:	dc31      	bgt.n	8008996 <_printf_float+0x36e>
 8008932:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008934:	459a      	cmp	sl, r3
 8008936:	dc3a      	bgt.n	80089ae <_printf_float+0x386>
 8008938:	6823      	ldr	r3, [r4, #0]
 800893a:	07da      	lsls	r2, r3, #31
 800893c:	d437      	bmi.n	80089ae <_printf_float+0x386>
 800893e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008940:	ebaa 0903 	sub.w	r9, sl, r3
 8008944:	9b06      	ldr	r3, [sp, #24]
 8008946:	ebaa 0303 	sub.w	r3, sl, r3
 800894a:	4599      	cmp	r9, r3
 800894c:	bfa8      	it	ge
 800894e:	4699      	movge	r9, r3
 8008950:	f1b9 0f00 	cmp.w	r9, #0
 8008954:	dc33      	bgt.n	80089be <_printf_float+0x396>
 8008956:	f04f 0800 	mov.w	r8, #0
 800895a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800895e:	f104 0b1a 	add.w	fp, r4, #26
 8008962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008964:	ebaa 0303 	sub.w	r3, sl, r3
 8008968:	eba3 0309 	sub.w	r3, r3, r9
 800896c:	4543      	cmp	r3, r8
 800896e:	f77f af79 	ble.w	8008864 <_printf_float+0x23c>
 8008972:	2301      	movs	r3, #1
 8008974:	465a      	mov	r2, fp
 8008976:	4631      	mov	r1, r6
 8008978:	4628      	mov	r0, r5
 800897a:	47b8      	blx	r7
 800897c:	3001      	adds	r0, #1
 800897e:	f43f aeae 	beq.w	80086de <_printf_float+0xb6>
 8008982:	f108 0801 	add.w	r8, r8, #1
 8008986:	e7ec      	b.n	8008962 <_printf_float+0x33a>
 8008988:	4642      	mov	r2, r8
 800898a:	4631      	mov	r1, r6
 800898c:	4628      	mov	r0, r5
 800898e:	47b8      	blx	r7
 8008990:	3001      	adds	r0, #1
 8008992:	d1c2      	bne.n	800891a <_printf_float+0x2f2>
 8008994:	e6a3      	b.n	80086de <_printf_float+0xb6>
 8008996:	2301      	movs	r3, #1
 8008998:	4631      	mov	r1, r6
 800899a:	4628      	mov	r0, r5
 800899c:	9206      	str	r2, [sp, #24]
 800899e:	47b8      	blx	r7
 80089a0:	3001      	adds	r0, #1
 80089a2:	f43f ae9c 	beq.w	80086de <_printf_float+0xb6>
 80089a6:	9a06      	ldr	r2, [sp, #24]
 80089a8:	f10b 0b01 	add.w	fp, fp, #1
 80089ac:	e7bb      	b.n	8008926 <_printf_float+0x2fe>
 80089ae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089b2:	4631      	mov	r1, r6
 80089b4:	4628      	mov	r0, r5
 80089b6:	47b8      	blx	r7
 80089b8:	3001      	adds	r0, #1
 80089ba:	d1c0      	bne.n	800893e <_printf_float+0x316>
 80089bc:	e68f      	b.n	80086de <_printf_float+0xb6>
 80089be:	9a06      	ldr	r2, [sp, #24]
 80089c0:	464b      	mov	r3, r9
 80089c2:	4442      	add	r2, r8
 80089c4:	4631      	mov	r1, r6
 80089c6:	4628      	mov	r0, r5
 80089c8:	47b8      	blx	r7
 80089ca:	3001      	adds	r0, #1
 80089cc:	d1c3      	bne.n	8008956 <_printf_float+0x32e>
 80089ce:	e686      	b.n	80086de <_printf_float+0xb6>
 80089d0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80089d4:	f1ba 0f01 	cmp.w	sl, #1
 80089d8:	dc01      	bgt.n	80089de <_printf_float+0x3b6>
 80089da:	07db      	lsls	r3, r3, #31
 80089dc:	d536      	bpl.n	8008a4c <_printf_float+0x424>
 80089de:	2301      	movs	r3, #1
 80089e0:	4642      	mov	r2, r8
 80089e2:	4631      	mov	r1, r6
 80089e4:	4628      	mov	r0, r5
 80089e6:	47b8      	blx	r7
 80089e8:	3001      	adds	r0, #1
 80089ea:	f43f ae78 	beq.w	80086de <_printf_float+0xb6>
 80089ee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089f2:	4631      	mov	r1, r6
 80089f4:	4628      	mov	r0, r5
 80089f6:	47b8      	blx	r7
 80089f8:	3001      	adds	r0, #1
 80089fa:	f43f ae70 	beq.w	80086de <_printf_float+0xb6>
 80089fe:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a02:	2200      	movs	r2, #0
 8008a04:	2300      	movs	r3, #0
 8008a06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008a0a:	f7f8 f9a5 	bl	8000d58 <__aeabi_dcmpeq>
 8008a0e:	b9c0      	cbnz	r0, 8008a42 <_printf_float+0x41a>
 8008a10:	4653      	mov	r3, sl
 8008a12:	f108 0201 	add.w	r2, r8, #1
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	d10c      	bne.n	8008a3a <_printf_float+0x412>
 8008a20:	e65d      	b.n	80086de <_printf_float+0xb6>
 8008a22:	2301      	movs	r3, #1
 8008a24:	465a      	mov	r2, fp
 8008a26:	4631      	mov	r1, r6
 8008a28:	4628      	mov	r0, r5
 8008a2a:	47b8      	blx	r7
 8008a2c:	3001      	adds	r0, #1
 8008a2e:	f43f ae56 	beq.w	80086de <_printf_float+0xb6>
 8008a32:	f108 0801 	add.w	r8, r8, #1
 8008a36:	45d0      	cmp	r8, sl
 8008a38:	dbf3      	blt.n	8008a22 <_printf_float+0x3fa>
 8008a3a:	464b      	mov	r3, r9
 8008a3c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008a40:	e6df      	b.n	8008802 <_printf_float+0x1da>
 8008a42:	f04f 0800 	mov.w	r8, #0
 8008a46:	f104 0b1a 	add.w	fp, r4, #26
 8008a4a:	e7f4      	b.n	8008a36 <_printf_float+0x40e>
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	4642      	mov	r2, r8
 8008a50:	e7e1      	b.n	8008a16 <_printf_float+0x3ee>
 8008a52:	2301      	movs	r3, #1
 8008a54:	464a      	mov	r2, r9
 8008a56:	4631      	mov	r1, r6
 8008a58:	4628      	mov	r0, r5
 8008a5a:	47b8      	blx	r7
 8008a5c:	3001      	adds	r0, #1
 8008a5e:	f43f ae3e 	beq.w	80086de <_printf_float+0xb6>
 8008a62:	f108 0801 	add.w	r8, r8, #1
 8008a66:	68e3      	ldr	r3, [r4, #12]
 8008a68:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a6a:	1a5b      	subs	r3, r3, r1
 8008a6c:	4543      	cmp	r3, r8
 8008a6e:	dcf0      	bgt.n	8008a52 <_printf_float+0x42a>
 8008a70:	e6fc      	b.n	800886c <_printf_float+0x244>
 8008a72:	f04f 0800 	mov.w	r8, #0
 8008a76:	f104 0919 	add.w	r9, r4, #25
 8008a7a:	e7f4      	b.n	8008a66 <_printf_float+0x43e>

08008a7c <_printf_common>:
 8008a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a80:	4616      	mov	r6, r2
 8008a82:	4698      	mov	r8, r3
 8008a84:	688a      	ldr	r2, [r1, #8]
 8008a86:	690b      	ldr	r3, [r1, #16]
 8008a88:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008a8c:	4293      	cmp	r3, r2
 8008a8e:	bfb8      	it	lt
 8008a90:	4613      	movlt	r3, r2
 8008a92:	6033      	str	r3, [r6, #0]
 8008a94:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008a98:	4607      	mov	r7, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	b10a      	cbz	r2, 8008aa2 <_printf_common+0x26>
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	6033      	str	r3, [r6, #0]
 8008aa2:	6823      	ldr	r3, [r4, #0]
 8008aa4:	0699      	lsls	r1, r3, #26
 8008aa6:	bf42      	ittt	mi
 8008aa8:	6833      	ldrmi	r3, [r6, #0]
 8008aaa:	3302      	addmi	r3, #2
 8008aac:	6033      	strmi	r3, [r6, #0]
 8008aae:	6825      	ldr	r5, [r4, #0]
 8008ab0:	f015 0506 	ands.w	r5, r5, #6
 8008ab4:	d106      	bne.n	8008ac4 <_printf_common+0x48>
 8008ab6:	f104 0a19 	add.w	sl, r4, #25
 8008aba:	68e3      	ldr	r3, [r4, #12]
 8008abc:	6832      	ldr	r2, [r6, #0]
 8008abe:	1a9b      	subs	r3, r3, r2
 8008ac0:	42ab      	cmp	r3, r5
 8008ac2:	dc26      	bgt.n	8008b12 <_printf_common+0x96>
 8008ac4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008ac8:	6822      	ldr	r2, [r4, #0]
 8008aca:	3b00      	subs	r3, #0
 8008acc:	bf18      	it	ne
 8008ace:	2301      	movne	r3, #1
 8008ad0:	0692      	lsls	r2, r2, #26
 8008ad2:	d42b      	bmi.n	8008b2c <_printf_common+0xb0>
 8008ad4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008ad8:	4641      	mov	r1, r8
 8008ada:	4638      	mov	r0, r7
 8008adc:	47c8      	blx	r9
 8008ade:	3001      	adds	r0, #1
 8008ae0:	d01e      	beq.n	8008b20 <_printf_common+0xa4>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	6922      	ldr	r2, [r4, #16]
 8008ae6:	f003 0306 	and.w	r3, r3, #6
 8008aea:	2b04      	cmp	r3, #4
 8008aec:	bf02      	ittt	eq
 8008aee:	68e5      	ldreq	r5, [r4, #12]
 8008af0:	6833      	ldreq	r3, [r6, #0]
 8008af2:	1aed      	subeq	r5, r5, r3
 8008af4:	68a3      	ldr	r3, [r4, #8]
 8008af6:	bf0c      	ite	eq
 8008af8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008afc:	2500      	movne	r5, #0
 8008afe:	4293      	cmp	r3, r2
 8008b00:	bfc4      	itt	gt
 8008b02:	1a9b      	subgt	r3, r3, r2
 8008b04:	18ed      	addgt	r5, r5, r3
 8008b06:	2600      	movs	r6, #0
 8008b08:	341a      	adds	r4, #26
 8008b0a:	42b5      	cmp	r5, r6
 8008b0c:	d11a      	bne.n	8008b44 <_printf_common+0xc8>
 8008b0e:	2000      	movs	r0, #0
 8008b10:	e008      	b.n	8008b24 <_printf_common+0xa8>
 8008b12:	2301      	movs	r3, #1
 8008b14:	4652      	mov	r2, sl
 8008b16:	4641      	mov	r1, r8
 8008b18:	4638      	mov	r0, r7
 8008b1a:	47c8      	blx	r9
 8008b1c:	3001      	adds	r0, #1
 8008b1e:	d103      	bne.n	8008b28 <_printf_common+0xac>
 8008b20:	f04f 30ff 	mov.w	r0, #4294967295
 8008b24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b28:	3501      	adds	r5, #1
 8008b2a:	e7c6      	b.n	8008aba <_printf_common+0x3e>
 8008b2c:	18e1      	adds	r1, r4, r3
 8008b2e:	1c5a      	adds	r2, r3, #1
 8008b30:	2030      	movs	r0, #48	@ 0x30
 8008b32:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b36:	4422      	add	r2, r4
 8008b38:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b3c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b40:	3302      	adds	r3, #2
 8008b42:	e7c7      	b.n	8008ad4 <_printf_common+0x58>
 8008b44:	2301      	movs	r3, #1
 8008b46:	4622      	mov	r2, r4
 8008b48:	4641      	mov	r1, r8
 8008b4a:	4638      	mov	r0, r7
 8008b4c:	47c8      	blx	r9
 8008b4e:	3001      	adds	r0, #1
 8008b50:	d0e6      	beq.n	8008b20 <_printf_common+0xa4>
 8008b52:	3601      	adds	r6, #1
 8008b54:	e7d9      	b.n	8008b0a <_printf_common+0x8e>
	...

08008b58 <_printf_i>:
 8008b58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b5c:	7e0f      	ldrb	r7, [r1, #24]
 8008b5e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b60:	2f78      	cmp	r7, #120	@ 0x78
 8008b62:	4691      	mov	r9, r2
 8008b64:	4680      	mov	r8, r0
 8008b66:	460c      	mov	r4, r1
 8008b68:	469a      	mov	sl, r3
 8008b6a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b6e:	d807      	bhi.n	8008b80 <_printf_i+0x28>
 8008b70:	2f62      	cmp	r7, #98	@ 0x62
 8008b72:	d80a      	bhi.n	8008b8a <_printf_i+0x32>
 8008b74:	2f00      	cmp	r7, #0
 8008b76:	f000 80d2 	beq.w	8008d1e <_printf_i+0x1c6>
 8008b7a:	2f58      	cmp	r7, #88	@ 0x58
 8008b7c:	f000 80b9 	beq.w	8008cf2 <_printf_i+0x19a>
 8008b80:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b84:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b88:	e03a      	b.n	8008c00 <_printf_i+0xa8>
 8008b8a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008b8e:	2b15      	cmp	r3, #21
 8008b90:	d8f6      	bhi.n	8008b80 <_printf_i+0x28>
 8008b92:	a101      	add	r1, pc, #4	@ (adr r1, 8008b98 <_printf_i+0x40>)
 8008b94:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008b98:	08008bf1 	.word	0x08008bf1
 8008b9c:	08008c05 	.word	0x08008c05
 8008ba0:	08008b81 	.word	0x08008b81
 8008ba4:	08008b81 	.word	0x08008b81
 8008ba8:	08008b81 	.word	0x08008b81
 8008bac:	08008b81 	.word	0x08008b81
 8008bb0:	08008c05 	.word	0x08008c05
 8008bb4:	08008b81 	.word	0x08008b81
 8008bb8:	08008b81 	.word	0x08008b81
 8008bbc:	08008b81 	.word	0x08008b81
 8008bc0:	08008b81 	.word	0x08008b81
 8008bc4:	08008d05 	.word	0x08008d05
 8008bc8:	08008c2f 	.word	0x08008c2f
 8008bcc:	08008cbf 	.word	0x08008cbf
 8008bd0:	08008b81 	.word	0x08008b81
 8008bd4:	08008b81 	.word	0x08008b81
 8008bd8:	08008d27 	.word	0x08008d27
 8008bdc:	08008b81 	.word	0x08008b81
 8008be0:	08008c2f 	.word	0x08008c2f
 8008be4:	08008b81 	.word	0x08008b81
 8008be8:	08008b81 	.word	0x08008b81
 8008bec:	08008cc7 	.word	0x08008cc7
 8008bf0:	6833      	ldr	r3, [r6, #0]
 8008bf2:	1d1a      	adds	r2, r3, #4
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	6032      	str	r2, [r6, #0]
 8008bf8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008bfc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c00:	2301      	movs	r3, #1
 8008c02:	e09d      	b.n	8008d40 <_printf_i+0x1e8>
 8008c04:	6833      	ldr	r3, [r6, #0]
 8008c06:	6820      	ldr	r0, [r4, #0]
 8008c08:	1d19      	adds	r1, r3, #4
 8008c0a:	6031      	str	r1, [r6, #0]
 8008c0c:	0606      	lsls	r6, r0, #24
 8008c0e:	d501      	bpl.n	8008c14 <_printf_i+0xbc>
 8008c10:	681d      	ldr	r5, [r3, #0]
 8008c12:	e003      	b.n	8008c1c <_printf_i+0xc4>
 8008c14:	0645      	lsls	r5, r0, #25
 8008c16:	d5fb      	bpl.n	8008c10 <_printf_i+0xb8>
 8008c18:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c1c:	2d00      	cmp	r5, #0
 8008c1e:	da03      	bge.n	8008c28 <_printf_i+0xd0>
 8008c20:	232d      	movs	r3, #45	@ 0x2d
 8008c22:	426d      	negs	r5, r5
 8008c24:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c28:	4859      	ldr	r0, [pc, #356]	@ (8008d90 <_printf_i+0x238>)
 8008c2a:	230a      	movs	r3, #10
 8008c2c:	e011      	b.n	8008c52 <_printf_i+0xfa>
 8008c2e:	6821      	ldr	r1, [r4, #0]
 8008c30:	6833      	ldr	r3, [r6, #0]
 8008c32:	0608      	lsls	r0, r1, #24
 8008c34:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c38:	d402      	bmi.n	8008c40 <_printf_i+0xe8>
 8008c3a:	0649      	lsls	r1, r1, #25
 8008c3c:	bf48      	it	mi
 8008c3e:	b2ad      	uxthmi	r5, r5
 8008c40:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c42:	4853      	ldr	r0, [pc, #332]	@ (8008d90 <_printf_i+0x238>)
 8008c44:	6033      	str	r3, [r6, #0]
 8008c46:	bf14      	ite	ne
 8008c48:	230a      	movne	r3, #10
 8008c4a:	2308      	moveq	r3, #8
 8008c4c:	2100      	movs	r1, #0
 8008c4e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c52:	6866      	ldr	r6, [r4, #4]
 8008c54:	60a6      	str	r6, [r4, #8]
 8008c56:	2e00      	cmp	r6, #0
 8008c58:	bfa2      	ittt	ge
 8008c5a:	6821      	ldrge	r1, [r4, #0]
 8008c5c:	f021 0104 	bicge.w	r1, r1, #4
 8008c60:	6021      	strge	r1, [r4, #0]
 8008c62:	b90d      	cbnz	r5, 8008c68 <_printf_i+0x110>
 8008c64:	2e00      	cmp	r6, #0
 8008c66:	d04b      	beq.n	8008d00 <_printf_i+0x1a8>
 8008c68:	4616      	mov	r6, r2
 8008c6a:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c6e:	fb03 5711 	mls	r7, r3, r1, r5
 8008c72:	5dc7      	ldrb	r7, [r0, r7]
 8008c74:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c78:	462f      	mov	r7, r5
 8008c7a:	42bb      	cmp	r3, r7
 8008c7c:	460d      	mov	r5, r1
 8008c7e:	d9f4      	bls.n	8008c6a <_printf_i+0x112>
 8008c80:	2b08      	cmp	r3, #8
 8008c82:	d10b      	bne.n	8008c9c <_printf_i+0x144>
 8008c84:	6823      	ldr	r3, [r4, #0]
 8008c86:	07df      	lsls	r7, r3, #31
 8008c88:	d508      	bpl.n	8008c9c <_printf_i+0x144>
 8008c8a:	6923      	ldr	r3, [r4, #16]
 8008c8c:	6861      	ldr	r1, [r4, #4]
 8008c8e:	4299      	cmp	r1, r3
 8008c90:	bfde      	ittt	le
 8008c92:	2330      	movle	r3, #48	@ 0x30
 8008c94:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008c98:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008c9c:	1b92      	subs	r2, r2, r6
 8008c9e:	6122      	str	r2, [r4, #16]
 8008ca0:	f8cd a000 	str.w	sl, [sp]
 8008ca4:	464b      	mov	r3, r9
 8008ca6:	aa03      	add	r2, sp, #12
 8008ca8:	4621      	mov	r1, r4
 8008caa:	4640      	mov	r0, r8
 8008cac:	f7ff fee6 	bl	8008a7c <_printf_common>
 8008cb0:	3001      	adds	r0, #1
 8008cb2:	d14a      	bne.n	8008d4a <_printf_i+0x1f2>
 8008cb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb8:	b004      	add	sp, #16
 8008cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cbe:	6823      	ldr	r3, [r4, #0]
 8008cc0:	f043 0320 	orr.w	r3, r3, #32
 8008cc4:	6023      	str	r3, [r4, #0]
 8008cc6:	4833      	ldr	r0, [pc, #204]	@ (8008d94 <_printf_i+0x23c>)
 8008cc8:	2778      	movs	r7, #120	@ 0x78
 8008cca:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	6831      	ldr	r1, [r6, #0]
 8008cd2:	061f      	lsls	r7, r3, #24
 8008cd4:	f851 5b04 	ldr.w	r5, [r1], #4
 8008cd8:	d402      	bmi.n	8008ce0 <_printf_i+0x188>
 8008cda:	065f      	lsls	r7, r3, #25
 8008cdc:	bf48      	it	mi
 8008cde:	b2ad      	uxthmi	r5, r5
 8008ce0:	6031      	str	r1, [r6, #0]
 8008ce2:	07d9      	lsls	r1, r3, #31
 8008ce4:	bf44      	itt	mi
 8008ce6:	f043 0320 	orrmi.w	r3, r3, #32
 8008cea:	6023      	strmi	r3, [r4, #0]
 8008cec:	b11d      	cbz	r5, 8008cf6 <_printf_i+0x19e>
 8008cee:	2310      	movs	r3, #16
 8008cf0:	e7ac      	b.n	8008c4c <_printf_i+0xf4>
 8008cf2:	4827      	ldr	r0, [pc, #156]	@ (8008d90 <_printf_i+0x238>)
 8008cf4:	e7e9      	b.n	8008cca <_printf_i+0x172>
 8008cf6:	6823      	ldr	r3, [r4, #0]
 8008cf8:	f023 0320 	bic.w	r3, r3, #32
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	e7f6      	b.n	8008cee <_printf_i+0x196>
 8008d00:	4616      	mov	r6, r2
 8008d02:	e7bd      	b.n	8008c80 <_printf_i+0x128>
 8008d04:	6833      	ldr	r3, [r6, #0]
 8008d06:	6825      	ldr	r5, [r4, #0]
 8008d08:	6961      	ldr	r1, [r4, #20]
 8008d0a:	1d18      	adds	r0, r3, #4
 8008d0c:	6030      	str	r0, [r6, #0]
 8008d0e:	062e      	lsls	r6, r5, #24
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	d501      	bpl.n	8008d18 <_printf_i+0x1c0>
 8008d14:	6019      	str	r1, [r3, #0]
 8008d16:	e002      	b.n	8008d1e <_printf_i+0x1c6>
 8008d18:	0668      	lsls	r0, r5, #25
 8008d1a:	d5fb      	bpl.n	8008d14 <_printf_i+0x1bc>
 8008d1c:	8019      	strh	r1, [r3, #0]
 8008d1e:	2300      	movs	r3, #0
 8008d20:	6123      	str	r3, [r4, #16]
 8008d22:	4616      	mov	r6, r2
 8008d24:	e7bc      	b.n	8008ca0 <_printf_i+0x148>
 8008d26:	6833      	ldr	r3, [r6, #0]
 8008d28:	1d1a      	adds	r2, r3, #4
 8008d2a:	6032      	str	r2, [r6, #0]
 8008d2c:	681e      	ldr	r6, [r3, #0]
 8008d2e:	6862      	ldr	r2, [r4, #4]
 8008d30:	2100      	movs	r1, #0
 8008d32:	4630      	mov	r0, r6
 8008d34:	f7f7 fb94 	bl	8000460 <memchr>
 8008d38:	b108      	cbz	r0, 8008d3e <_printf_i+0x1e6>
 8008d3a:	1b80      	subs	r0, r0, r6
 8008d3c:	6060      	str	r0, [r4, #4]
 8008d3e:	6863      	ldr	r3, [r4, #4]
 8008d40:	6123      	str	r3, [r4, #16]
 8008d42:	2300      	movs	r3, #0
 8008d44:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d48:	e7aa      	b.n	8008ca0 <_printf_i+0x148>
 8008d4a:	6923      	ldr	r3, [r4, #16]
 8008d4c:	4632      	mov	r2, r6
 8008d4e:	4649      	mov	r1, r9
 8008d50:	4640      	mov	r0, r8
 8008d52:	47d0      	blx	sl
 8008d54:	3001      	adds	r0, #1
 8008d56:	d0ad      	beq.n	8008cb4 <_printf_i+0x15c>
 8008d58:	6823      	ldr	r3, [r4, #0]
 8008d5a:	079b      	lsls	r3, r3, #30
 8008d5c:	d413      	bmi.n	8008d86 <_printf_i+0x22e>
 8008d5e:	68e0      	ldr	r0, [r4, #12]
 8008d60:	9b03      	ldr	r3, [sp, #12]
 8008d62:	4298      	cmp	r0, r3
 8008d64:	bfb8      	it	lt
 8008d66:	4618      	movlt	r0, r3
 8008d68:	e7a6      	b.n	8008cb8 <_printf_i+0x160>
 8008d6a:	2301      	movs	r3, #1
 8008d6c:	4632      	mov	r2, r6
 8008d6e:	4649      	mov	r1, r9
 8008d70:	4640      	mov	r0, r8
 8008d72:	47d0      	blx	sl
 8008d74:	3001      	adds	r0, #1
 8008d76:	d09d      	beq.n	8008cb4 <_printf_i+0x15c>
 8008d78:	3501      	adds	r5, #1
 8008d7a:	68e3      	ldr	r3, [r4, #12]
 8008d7c:	9903      	ldr	r1, [sp, #12]
 8008d7e:	1a5b      	subs	r3, r3, r1
 8008d80:	42ab      	cmp	r3, r5
 8008d82:	dcf2      	bgt.n	8008d6a <_printf_i+0x212>
 8008d84:	e7eb      	b.n	8008d5e <_printf_i+0x206>
 8008d86:	2500      	movs	r5, #0
 8008d88:	f104 0619 	add.w	r6, r4, #25
 8008d8c:	e7f5      	b.n	8008d7a <_printf_i+0x222>
 8008d8e:	bf00      	nop
 8008d90:	0800ccc6 	.word	0x0800ccc6
 8008d94:	0800ccd7 	.word	0x0800ccd7

08008d98 <_scanf_float>:
 8008d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d9c:	b087      	sub	sp, #28
 8008d9e:	4617      	mov	r7, r2
 8008da0:	9303      	str	r3, [sp, #12]
 8008da2:	688b      	ldr	r3, [r1, #8]
 8008da4:	1e5a      	subs	r2, r3, #1
 8008da6:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8008daa:	bf81      	itttt	hi
 8008dac:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8008db0:	eb03 0b05 	addhi.w	fp, r3, r5
 8008db4:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8008db8:	608b      	strhi	r3, [r1, #8]
 8008dba:	680b      	ldr	r3, [r1, #0]
 8008dbc:	460a      	mov	r2, r1
 8008dbe:	f04f 0500 	mov.w	r5, #0
 8008dc2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8008dc6:	f842 3b1c 	str.w	r3, [r2], #28
 8008dca:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008dce:	4680      	mov	r8, r0
 8008dd0:	460c      	mov	r4, r1
 8008dd2:	bf98      	it	ls
 8008dd4:	f04f 0b00 	movls.w	fp, #0
 8008dd8:	9201      	str	r2, [sp, #4]
 8008dda:	4616      	mov	r6, r2
 8008ddc:	46aa      	mov	sl, r5
 8008dde:	46a9      	mov	r9, r5
 8008de0:	9502      	str	r5, [sp, #8]
 8008de2:	68a2      	ldr	r2, [r4, #8]
 8008de4:	b152      	cbz	r2, 8008dfc <_scanf_float+0x64>
 8008de6:	683b      	ldr	r3, [r7, #0]
 8008de8:	781b      	ldrb	r3, [r3, #0]
 8008dea:	2b4e      	cmp	r3, #78	@ 0x4e
 8008dec:	d864      	bhi.n	8008eb8 <_scanf_float+0x120>
 8008dee:	2b40      	cmp	r3, #64	@ 0x40
 8008df0:	d83c      	bhi.n	8008e6c <_scanf_float+0xd4>
 8008df2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8008df6:	b2c8      	uxtb	r0, r1
 8008df8:	280e      	cmp	r0, #14
 8008dfa:	d93a      	bls.n	8008e72 <_scanf_float+0xda>
 8008dfc:	f1b9 0f00 	cmp.w	r9, #0
 8008e00:	d003      	beq.n	8008e0a <_scanf_float+0x72>
 8008e02:	6823      	ldr	r3, [r4, #0]
 8008e04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008e08:	6023      	str	r3, [r4, #0]
 8008e0a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008e0e:	f1ba 0f01 	cmp.w	sl, #1
 8008e12:	f200 8117 	bhi.w	8009044 <_scanf_float+0x2ac>
 8008e16:	9b01      	ldr	r3, [sp, #4]
 8008e18:	429e      	cmp	r6, r3
 8008e1a:	f200 8108 	bhi.w	800902e <_scanf_float+0x296>
 8008e1e:	2001      	movs	r0, #1
 8008e20:	b007      	add	sp, #28
 8008e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e26:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8008e2a:	2a0d      	cmp	r2, #13
 8008e2c:	d8e6      	bhi.n	8008dfc <_scanf_float+0x64>
 8008e2e:	a101      	add	r1, pc, #4	@ (adr r1, 8008e34 <_scanf_float+0x9c>)
 8008e30:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008e34:	08008f7b 	.word	0x08008f7b
 8008e38:	08008dfd 	.word	0x08008dfd
 8008e3c:	08008dfd 	.word	0x08008dfd
 8008e40:	08008dfd 	.word	0x08008dfd
 8008e44:	08008fdb 	.word	0x08008fdb
 8008e48:	08008fb3 	.word	0x08008fb3
 8008e4c:	08008dfd 	.word	0x08008dfd
 8008e50:	08008dfd 	.word	0x08008dfd
 8008e54:	08008f89 	.word	0x08008f89
 8008e58:	08008dfd 	.word	0x08008dfd
 8008e5c:	08008dfd 	.word	0x08008dfd
 8008e60:	08008dfd 	.word	0x08008dfd
 8008e64:	08008dfd 	.word	0x08008dfd
 8008e68:	08008f41 	.word	0x08008f41
 8008e6c:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8008e70:	e7db      	b.n	8008e2a <_scanf_float+0x92>
 8008e72:	290e      	cmp	r1, #14
 8008e74:	d8c2      	bhi.n	8008dfc <_scanf_float+0x64>
 8008e76:	a001      	add	r0, pc, #4	@ (adr r0, 8008e7c <_scanf_float+0xe4>)
 8008e78:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008e7c:	08008f31 	.word	0x08008f31
 8008e80:	08008dfd 	.word	0x08008dfd
 8008e84:	08008f31 	.word	0x08008f31
 8008e88:	08008fc7 	.word	0x08008fc7
 8008e8c:	08008dfd 	.word	0x08008dfd
 8008e90:	08008ed9 	.word	0x08008ed9
 8008e94:	08008f17 	.word	0x08008f17
 8008e98:	08008f17 	.word	0x08008f17
 8008e9c:	08008f17 	.word	0x08008f17
 8008ea0:	08008f17 	.word	0x08008f17
 8008ea4:	08008f17 	.word	0x08008f17
 8008ea8:	08008f17 	.word	0x08008f17
 8008eac:	08008f17 	.word	0x08008f17
 8008eb0:	08008f17 	.word	0x08008f17
 8008eb4:	08008f17 	.word	0x08008f17
 8008eb8:	2b6e      	cmp	r3, #110	@ 0x6e
 8008eba:	d809      	bhi.n	8008ed0 <_scanf_float+0x138>
 8008ebc:	2b60      	cmp	r3, #96	@ 0x60
 8008ebe:	d8b2      	bhi.n	8008e26 <_scanf_float+0x8e>
 8008ec0:	2b54      	cmp	r3, #84	@ 0x54
 8008ec2:	d07b      	beq.n	8008fbc <_scanf_float+0x224>
 8008ec4:	2b59      	cmp	r3, #89	@ 0x59
 8008ec6:	d199      	bne.n	8008dfc <_scanf_float+0x64>
 8008ec8:	2d07      	cmp	r5, #7
 8008eca:	d197      	bne.n	8008dfc <_scanf_float+0x64>
 8008ecc:	2508      	movs	r5, #8
 8008ece:	e02c      	b.n	8008f2a <_scanf_float+0x192>
 8008ed0:	2b74      	cmp	r3, #116	@ 0x74
 8008ed2:	d073      	beq.n	8008fbc <_scanf_float+0x224>
 8008ed4:	2b79      	cmp	r3, #121	@ 0x79
 8008ed6:	e7f6      	b.n	8008ec6 <_scanf_float+0x12e>
 8008ed8:	6821      	ldr	r1, [r4, #0]
 8008eda:	05c8      	lsls	r0, r1, #23
 8008edc:	d51b      	bpl.n	8008f16 <_scanf_float+0x17e>
 8008ede:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8008ee2:	6021      	str	r1, [r4, #0]
 8008ee4:	f109 0901 	add.w	r9, r9, #1
 8008ee8:	f1bb 0f00 	cmp.w	fp, #0
 8008eec:	d003      	beq.n	8008ef6 <_scanf_float+0x15e>
 8008eee:	3201      	adds	r2, #1
 8008ef0:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008ef4:	60a2      	str	r2, [r4, #8]
 8008ef6:	68a3      	ldr	r3, [r4, #8]
 8008ef8:	3b01      	subs	r3, #1
 8008efa:	60a3      	str	r3, [r4, #8]
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	3301      	adds	r3, #1
 8008f00:	6123      	str	r3, [r4, #16]
 8008f02:	687b      	ldr	r3, [r7, #4]
 8008f04:	3b01      	subs	r3, #1
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	607b      	str	r3, [r7, #4]
 8008f0a:	f340 8087 	ble.w	800901c <_scanf_float+0x284>
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	3301      	adds	r3, #1
 8008f12:	603b      	str	r3, [r7, #0]
 8008f14:	e765      	b.n	8008de2 <_scanf_float+0x4a>
 8008f16:	eb1a 0105 	adds.w	r1, sl, r5
 8008f1a:	f47f af6f 	bne.w	8008dfc <_scanf_float+0x64>
 8008f1e:	6822      	ldr	r2, [r4, #0]
 8008f20:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8008f24:	6022      	str	r2, [r4, #0]
 8008f26:	460d      	mov	r5, r1
 8008f28:	468a      	mov	sl, r1
 8008f2a:	f806 3b01 	strb.w	r3, [r6], #1
 8008f2e:	e7e2      	b.n	8008ef6 <_scanf_float+0x15e>
 8008f30:	6822      	ldr	r2, [r4, #0]
 8008f32:	0610      	lsls	r0, r2, #24
 8008f34:	f57f af62 	bpl.w	8008dfc <_scanf_float+0x64>
 8008f38:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008f3c:	6022      	str	r2, [r4, #0]
 8008f3e:	e7f4      	b.n	8008f2a <_scanf_float+0x192>
 8008f40:	f1ba 0f00 	cmp.w	sl, #0
 8008f44:	d10e      	bne.n	8008f64 <_scanf_float+0x1cc>
 8008f46:	f1b9 0f00 	cmp.w	r9, #0
 8008f4a:	d10e      	bne.n	8008f6a <_scanf_float+0x1d2>
 8008f4c:	6822      	ldr	r2, [r4, #0]
 8008f4e:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008f52:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008f56:	d108      	bne.n	8008f6a <_scanf_float+0x1d2>
 8008f58:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008f5c:	6022      	str	r2, [r4, #0]
 8008f5e:	f04f 0a01 	mov.w	sl, #1
 8008f62:	e7e2      	b.n	8008f2a <_scanf_float+0x192>
 8008f64:	f1ba 0f02 	cmp.w	sl, #2
 8008f68:	d055      	beq.n	8009016 <_scanf_float+0x27e>
 8008f6a:	2d01      	cmp	r5, #1
 8008f6c:	d002      	beq.n	8008f74 <_scanf_float+0x1dc>
 8008f6e:	2d04      	cmp	r5, #4
 8008f70:	f47f af44 	bne.w	8008dfc <_scanf_float+0x64>
 8008f74:	3501      	adds	r5, #1
 8008f76:	b2ed      	uxtb	r5, r5
 8008f78:	e7d7      	b.n	8008f2a <_scanf_float+0x192>
 8008f7a:	f1ba 0f01 	cmp.w	sl, #1
 8008f7e:	f47f af3d 	bne.w	8008dfc <_scanf_float+0x64>
 8008f82:	f04f 0a02 	mov.w	sl, #2
 8008f86:	e7d0      	b.n	8008f2a <_scanf_float+0x192>
 8008f88:	b97d      	cbnz	r5, 8008faa <_scanf_float+0x212>
 8008f8a:	f1b9 0f00 	cmp.w	r9, #0
 8008f8e:	f47f af38 	bne.w	8008e02 <_scanf_float+0x6a>
 8008f92:	6822      	ldr	r2, [r4, #0]
 8008f94:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8008f98:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8008f9c:	f040 8108 	bne.w	80091b0 <_scanf_float+0x418>
 8008fa0:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008fa4:	6022      	str	r2, [r4, #0]
 8008fa6:	2501      	movs	r5, #1
 8008fa8:	e7bf      	b.n	8008f2a <_scanf_float+0x192>
 8008faa:	2d03      	cmp	r5, #3
 8008fac:	d0e2      	beq.n	8008f74 <_scanf_float+0x1dc>
 8008fae:	2d05      	cmp	r5, #5
 8008fb0:	e7de      	b.n	8008f70 <_scanf_float+0x1d8>
 8008fb2:	2d02      	cmp	r5, #2
 8008fb4:	f47f af22 	bne.w	8008dfc <_scanf_float+0x64>
 8008fb8:	2503      	movs	r5, #3
 8008fba:	e7b6      	b.n	8008f2a <_scanf_float+0x192>
 8008fbc:	2d06      	cmp	r5, #6
 8008fbe:	f47f af1d 	bne.w	8008dfc <_scanf_float+0x64>
 8008fc2:	2507      	movs	r5, #7
 8008fc4:	e7b1      	b.n	8008f2a <_scanf_float+0x192>
 8008fc6:	6822      	ldr	r2, [r4, #0]
 8008fc8:	0591      	lsls	r1, r2, #22
 8008fca:	f57f af17 	bpl.w	8008dfc <_scanf_float+0x64>
 8008fce:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8008fd2:	6022      	str	r2, [r4, #0]
 8008fd4:	f8cd 9008 	str.w	r9, [sp, #8]
 8008fd8:	e7a7      	b.n	8008f2a <_scanf_float+0x192>
 8008fda:	6822      	ldr	r2, [r4, #0]
 8008fdc:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8008fe0:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8008fe4:	d006      	beq.n	8008ff4 <_scanf_float+0x25c>
 8008fe6:	0550      	lsls	r0, r2, #21
 8008fe8:	f57f af08 	bpl.w	8008dfc <_scanf_float+0x64>
 8008fec:	f1b9 0f00 	cmp.w	r9, #0
 8008ff0:	f000 80de 	beq.w	80091b0 <_scanf_float+0x418>
 8008ff4:	0591      	lsls	r1, r2, #22
 8008ff6:	bf58      	it	pl
 8008ff8:	9902      	ldrpl	r1, [sp, #8]
 8008ffa:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8008ffe:	bf58      	it	pl
 8009000:	eba9 0101 	subpl.w	r1, r9, r1
 8009004:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8009008:	bf58      	it	pl
 800900a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800900e:	6022      	str	r2, [r4, #0]
 8009010:	f04f 0900 	mov.w	r9, #0
 8009014:	e789      	b.n	8008f2a <_scanf_float+0x192>
 8009016:	f04f 0a03 	mov.w	sl, #3
 800901a:	e786      	b.n	8008f2a <_scanf_float+0x192>
 800901c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009020:	4639      	mov	r1, r7
 8009022:	4640      	mov	r0, r8
 8009024:	4798      	blx	r3
 8009026:	2800      	cmp	r0, #0
 8009028:	f43f aedb 	beq.w	8008de2 <_scanf_float+0x4a>
 800902c:	e6e6      	b.n	8008dfc <_scanf_float+0x64>
 800902e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009032:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009036:	463a      	mov	r2, r7
 8009038:	4640      	mov	r0, r8
 800903a:	4798      	blx	r3
 800903c:	6923      	ldr	r3, [r4, #16]
 800903e:	3b01      	subs	r3, #1
 8009040:	6123      	str	r3, [r4, #16]
 8009042:	e6e8      	b.n	8008e16 <_scanf_float+0x7e>
 8009044:	1e6b      	subs	r3, r5, #1
 8009046:	2b06      	cmp	r3, #6
 8009048:	d824      	bhi.n	8009094 <_scanf_float+0x2fc>
 800904a:	2d02      	cmp	r5, #2
 800904c:	d836      	bhi.n	80090bc <_scanf_float+0x324>
 800904e:	9b01      	ldr	r3, [sp, #4]
 8009050:	429e      	cmp	r6, r3
 8009052:	f67f aee4 	bls.w	8008e1e <_scanf_float+0x86>
 8009056:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800905a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800905e:	463a      	mov	r2, r7
 8009060:	4640      	mov	r0, r8
 8009062:	4798      	blx	r3
 8009064:	6923      	ldr	r3, [r4, #16]
 8009066:	3b01      	subs	r3, #1
 8009068:	6123      	str	r3, [r4, #16]
 800906a:	e7f0      	b.n	800904e <_scanf_float+0x2b6>
 800906c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009070:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8009074:	463a      	mov	r2, r7
 8009076:	4640      	mov	r0, r8
 8009078:	4798      	blx	r3
 800907a:	6923      	ldr	r3, [r4, #16]
 800907c:	3b01      	subs	r3, #1
 800907e:	6123      	str	r3, [r4, #16]
 8009080:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009084:	fa5f fa8a 	uxtb.w	sl, sl
 8009088:	f1ba 0f02 	cmp.w	sl, #2
 800908c:	d1ee      	bne.n	800906c <_scanf_float+0x2d4>
 800908e:	3d03      	subs	r5, #3
 8009090:	b2ed      	uxtb	r5, r5
 8009092:	1b76      	subs	r6, r6, r5
 8009094:	6823      	ldr	r3, [r4, #0]
 8009096:	05da      	lsls	r2, r3, #23
 8009098:	d530      	bpl.n	80090fc <_scanf_float+0x364>
 800909a:	055b      	lsls	r3, r3, #21
 800909c:	d511      	bpl.n	80090c2 <_scanf_float+0x32a>
 800909e:	9b01      	ldr	r3, [sp, #4]
 80090a0:	429e      	cmp	r6, r3
 80090a2:	f67f aebc 	bls.w	8008e1e <_scanf_float+0x86>
 80090a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090aa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80090ae:	463a      	mov	r2, r7
 80090b0:	4640      	mov	r0, r8
 80090b2:	4798      	blx	r3
 80090b4:	6923      	ldr	r3, [r4, #16]
 80090b6:	3b01      	subs	r3, #1
 80090b8:	6123      	str	r3, [r4, #16]
 80090ba:	e7f0      	b.n	800909e <_scanf_float+0x306>
 80090bc:	46aa      	mov	sl, r5
 80090be:	46b3      	mov	fp, r6
 80090c0:	e7de      	b.n	8009080 <_scanf_float+0x2e8>
 80090c2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	2965      	cmp	r1, #101	@ 0x65
 80090ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80090ce:	f106 35ff 	add.w	r5, r6, #4294967295
 80090d2:	6123      	str	r3, [r4, #16]
 80090d4:	d00c      	beq.n	80090f0 <_scanf_float+0x358>
 80090d6:	2945      	cmp	r1, #69	@ 0x45
 80090d8:	d00a      	beq.n	80090f0 <_scanf_float+0x358>
 80090da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090de:	463a      	mov	r2, r7
 80090e0:	4640      	mov	r0, r8
 80090e2:	4798      	blx	r3
 80090e4:	6923      	ldr	r3, [r4, #16]
 80090e6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80090ea:	3b01      	subs	r3, #1
 80090ec:	1eb5      	subs	r5, r6, #2
 80090ee:	6123      	str	r3, [r4, #16]
 80090f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80090f4:	463a      	mov	r2, r7
 80090f6:	4640      	mov	r0, r8
 80090f8:	4798      	blx	r3
 80090fa:	462e      	mov	r6, r5
 80090fc:	6822      	ldr	r2, [r4, #0]
 80090fe:	f012 0210 	ands.w	r2, r2, #16
 8009102:	d001      	beq.n	8009108 <_scanf_float+0x370>
 8009104:	2000      	movs	r0, #0
 8009106:	e68b      	b.n	8008e20 <_scanf_float+0x88>
 8009108:	7032      	strb	r2, [r6, #0]
 800910a:	6823      	ldr	r3, [r4, #0]
 800910c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8009110:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009114:	d11c      	bne.n	8009150 <_scanf_float+0x3b8>
 8009116:	9b02      	ldr	r3, [sp, #8]
 8009118:	454b      	cmp	r3, r9
 800911a:	eba3 0209 	sub.w	r2, r3, r9
 800911e:	d123      	bne.n	8009168 <_scanf_float+0x3d0>
 8009120:	9901      	ldr	r1, [sp, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	4640      	mov	r0, r8
 8009126:	f002 fc0b 	bl	800b940 <_strtod_r>
 800912a:	9b03      	ldr	r3, [sp, #12]
 800912c:	6821      	ldr	r1, [r4, #0]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f011 0f02 	tst.w	r1, #2
 8009134:	ec57 6b10 	vmov	r6, r7, d0
 8009138:	f103 0204 	add.w	r2, r3, #4
 800913c:	d01f      	beq.n	800917e <_scanf_float+0x3e6>
 800913e:	9903      	ldr	r1, [sp, #12]
 8009140:	600a      	str	r2, [r1, #0]
 8009142:	681b      	ldr	r3, [r3, #0]
 8009144:	e9c3 6700 	strd	r6, r7, [r3]
 8009148:	68e3      	ldr	r3, [r4, #12]
 800914a:	3301      	adds	r3, #1
 800914c:	60e3      	str	r3, [r4, #12]
 800914e:	e7d9      	b.n	8009104 <_scanf_float+0x36c>
 8009150:	9b04      	ldr	r3, [sp, #16]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d0e4      	beq.n	8009120 <_scanf_float+0x388>
 8009156:	9905      	ldr	r1, [sp, #20]
 8009158:	230a      	movs	r3, #10
 800915a:	3101      	adds	r1, #1
 800915c:	4640      	mov	r0, r8
 800915e:	f002 fc6f 	bl	800ba40 <_strtol_r>
 8009162:	9b04      	ldr	r3, [sp, #16]
 8009164:	9e05      	ldr	r6, [sp, #20]
 8009166:	1ac2      	subs	r2, r0, r3
 8009168:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 800916c:	429e      	cmp	r6, r3
 800916e:	bf28      	it	cs
 8009170:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8009174:	4910      	ldr	r1, [pc, #64]	@ (80091b8 <_scanf_float+0x420>)
 8009176:	4630      	mov	r0, r6
 8009178:	f000 f8f6 	bl	8009368 <siprintf>
 800917c:	e7d0      	b.n	8009120 <_scanf_float+0x388>
 800917e:	f011 0f04 	tst.w	r1, #4
 8009182:	9903      	ldr	r1, [sp, #12]
 8009184:	600a      	str	r2, [r1, #0]
 8009186:	d1dc      	bne.n	8009142 <_scanf_float+0x3aa>
 8009188:	681d      	ldr	r5, [r3, #0]
 800918a:	4632      	mov	r2, r6
 800918c:	463b      	mov	r3, r7
 800918e:	4630      	mov	r0, r6
 8009190:	4639      	mov	r1, r7
 8009192:	f7f7 fe13 	bl	8000dbc <__aeabi_dcmpun>
 8009196:	b128      	cbz	r0, 80091a4 <_scanf_float+0x40c>
 8009198:	4808      	ldr	r0, [pc, #32]	@ (80091bc <_scanf_float+0x424>)
 800919a:	f000 f9c9 	bl	8009530 <nanf>
 800919e:	ed85 0a00 	vstr	s0, [r5]
 80091a2:	e7d1      	b.n	8009148 <_scanf_float+0x3b0>
 80091a4:	4630      	mov	r0, r6
 80091a6:	4639      	mov	r1, r7
 80091a8:	f7f7 fe66 	bl	8000e78 <__aeabi_d2f>
 80091ac:	6028      	str	r0, [r5, #0]
 80091ae:	e7cb      	b.n	8009148 <_scanf_float+0x3b0>
 80091b0:	f04f 0900 	mov.w	r9, #0
 80091b4:	e629      	b.n	8008e0a <_scanf_float+0x72>
 80091b6:	bf00      	nop
 80091b8:	0800cce8 	.word	0x0800cce8
 80091bc:	0800d07d 	.word	0x0800d07d

080091c0 <std>:
 80091c0:	2300      	movs	r3, #0
 80091c2:	b510      	push	{r4, lr}
 80091c4:	4604      	mov	r4, r0
 80091c6:	e9c0 3300 	strd	r3, r3, [r0]
 80091ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80091ce:	6083      	str	r3, [r0, #8]
 80091d0:	8181      	strh	r1, [r0, #12]
 80091d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80091d4:	81c2      	strh	r2, [r0, #14]
 80091d6:	6183      	str	r3, [r0, #24]
 80091d8:	4619      	mov	r1, r3
 80091da:	2208      	movs	r2, #8
 80091dc:	305c      	adds	r0, #92	@ 0x5c
 80091de:	f000 f926 	bl	800942e <memset>
 80091e2:	4b0d      	ldr	r3, [pc, #52]	@ (8009218 <std+0x58>)
 80091e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80091e6:	4b0d      	ldr	r3, [pc, #52]	@ (800921c <std+0x5c>)
 80091e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80091ea:	4b0d      	ldr	r3, [pc, #52]	@ (8009220 <std+0x60>)
 80091ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80091ee:	4b0d      	ldr	r3, [pc, #52]	@ (8009224 <std+0x64>)
 80091f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80091f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009228 <std+0x68>)
 80091f4:	6224      	str	r4, [r4, #32]
 80091f6:	429c      	cmp	r4, r3
 80091f8:	d006      	beq.n	8009208 <std+0x48>
 80091fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80091fe:	4294      	cmp	r4, r2
 8009200:	d002      	beq.n	8009208 <std+0x48>
 8009202:	33d0      	adds	r3, #208	@ 0xd0
 8009204:	429c      	cmp	r4, r3
 8009206:	d105      	bne.n	8009214 <std+0x54>
 8009208:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800920c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009210:	f000 b98a 	b.w	8009528 <__retarget_lock_init_recursive>
 8009214:	bd10      	pop	{r4, pc}
 8009216:	bf00      	nop
 8009218:	080093a9 	.word	0x080093a9
 800921c:	080093cb 	.word	0x080093cb
 8009220:	08009403 	.word	0x08009403
 8009224:	08009427 	.word	0x08009427
 8009228:	200027f8 	.word	0x200027f8

0800922c <stdio_exit_handler>:
 800922c:	4a02      	ldr	r2, [pc, #8]	@ (8009238 <stdio_exit_handler+0xc>)
 800922e:	4903      	ldr	r1, [pc, #12]	@ (800923c <stdio_exit_handler+0x10>)
 8009230:	4803      	ldr	r0, [pc, #12]	@ (8009240 <stdio_exit_handler+0x14>)
 8009232:	f000 b869 	b.w	8009308 <_fwalk_sglue>
 8009236:	bf00      	nop
 8009238:	20000010 	.word	0x20000010
 800923c:	0800c081 	.word	0x0800c081
 8009240:	20000020 	.word	0x20000020

08009244 <cleanup_stdio>:
 8009244:	6841      	ldr	r1, [r0, #4]
 8009246:	4b0c      	ldr	r3, [pc, #48]	@ (8009278 <cleanup_stdio+0x34>)
 8009248:	4299      	cmp	r1, r3
 800924a:	b510      	push	{r4, lr}
 800924c:	4604      	mov	r4, r0
 800924e:	d001      	beq.n	8009254 <cleanup_stdio+0x10>
 8009250:	f002 ff16 	bl	800c080 <_fflush_r>
 8009254:	68a1      	ldr	r1, [r4, #8]
 8009256:	4b09      	ldr	r3, [pc, #36]	@ (800927c <cleanup_stdio+0x38>)
 8009258:	4299      	cmp	r1, r3
 800925a:	d002      	beq.n	8009262 <cleanup_stdio+0x1e>
 800925c:	4620      	mov	r0, r4
 800925e:	f002 ff0f 	bl	800c080 <_fflush_r>
 8009262:	68e1      	ldr	r1, [r4, #12]
 8009264:	4b06      	ldr	r3, [pc, #24]	@ (8009280 <cleanup_stdio+0x3c>)
 8009266:	4299      	cmp	r1, r3
 8009268:	d004      	beq.n	8009274 <cleanup_stdio+0x30>
 800926a:	4620      	mov	r0, r4
 800926c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009270:	f002 bf06 	b.w	800c080 <_fflush_r>
 8009274:	bd10      	pop	{r4, pc}
 8009276:	bf00      	nop
 8009278:	200027f8 	.word	0x200027f8
 800927c:	20002860 	.word	0x20002860
 8009280:	200028c8 	.word	0x200028c8

08009284 <global_stdio_init.part.0>:
 8009284:	b510      	push	{r4, lr}
 8009286:	4b0b      	ldr	r3, [pc, #44]	@ (80092b4 <global_stdio_init.part.0+0x30>)
 8009288:	4c0b      	ldr	r4, [pc, #44]	@ (80092b8 <global_stdio_init.part.0+0x34>)
 800928a:	4a0c      	ldr	r2, [pc, #48]	@ (80092bc <global_stdio_init.part.0+0x38>)
 800928c:	601a      	str	r2, [r3, #0]
 800928e:	4620      	mov	r0, r4
 8009290:	2200      	movs	r2, #0
 8009292:	2104      	movs	r1, #4
 8009294:	f7ff ff94 	bl	80091c0 <std>
 8009298:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800929c:	2201      	movs	r2, #1
 800929e:	2109      	movs	r1, #9
 80092a0:	f7ff ff8e 	bl	80091c0 <std>
 80092a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80092a8:	2202      	movs	r2, #2
 80092aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092ae:	2112      	movs	r1, #18
 80092b0:	f7ff bf86 	b.w	80091c0 <std>
 80092b4:	20002930 	.word	0x20002930
 80092b8:	200027f8 	.word	0x200027f8
 80092bc:	0800922d 	.word	0x0800922d

080092c0 <__sfp_lock_acquire>:
 80092c0:	4801      	ldr	r0, [pc, #4]	@ (80092c8 <__sfp_lock_acquire+0x8>)
 80092c2:	f000 b932 	b.w	800952a <__retarget_lock_acquire_recursive>
 80092c6:	bf00      	nop
 80092c8:	20002939 	.word	0x20002939

080092cc <__sfp_lock_release>:
 80092cc:	4801      	ldr	r0, [pc, #4]	@ (80092d4 <__sfp_lock_release+0x8>)
 80092ce:	f000 b92d 	b.w	800952c <__retarget_lock_release_recursive>
 80092d2:	bf00      	nop
 80092d4:	20002939 	.word	0x20002939

080092d8 <__sinit>:
 80092d8:	b510      	push	{r4, lr}
 80092da:	4604      	mov	r4, r0
 80092dc:	f7ff fff0 	bl	80092c0 <__sfp_lock_acquire>
 80092e0:	6a23      	ldr	r3, [r4, #32]
 80092e2:	b11b      	cbz	r3, 80092ec <__sinit+0x14>
 80092e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092e8:	f7ff bff0 	b.w	80092cc <__sfp_lock_release>
 80092ec:	4b04      	ldr	r3, [pc, #16]	@ (8009300 <__sinit+0x28>)
 80092ee:	6223      	str	r3, [r4, #32]
 80092f0:	4b04      	ldr	r3, [pc, #16]	@ (8009304 <__sinit+0x2c>)
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1f5      	bne.n	80092e4 <__sinit+0xc>
 80092f8:	f7ff ffc4 	bl	8009284 <global_stdio_init.part.0>
 80092fc:	e7f2      	b.n	80092e4 <__sinit+0xc>
 80092fe:	bf00      	nop
 8009300:	08009245 	.word	0x08009245
 8009304:	20002930 	.word	0x20002930

08009308 <_fwalk_sglue>:
 8009308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800930c:	4607      	mov	r7, r0
 800930e:	4688      	mov	r8, r1
 8009310:	4614      	mov	r4, r2
 8009312:	2600      	movs	r6, #0
 8009314:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009318:	f1b9 0901 	subs.w	r9, r9, #1
 800931c:	d505      	bpl.n	800932a <_fwalk_sglue+0x22>
 800931e:	6824      	ldr	r4, [r4, #0]
 8009320:	2c00      	cmp	r4, #0
 8009322:	d1f7      	bne.n	8009314 <_fwalk_sglue+0xc>
 8009324:	4630      	mov	r0, r6
 8009326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800932a:	89ab      	ldrh	r3, [r5, #12]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d907      	bls.n	8009340 <_fwalk_sglue+0x38>
 8009330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009334:	3301      	adds	r3, #1
 8009336:	d003      	beq.n	8009340 <_fwalk_sglue+0x38>
 8009338:	4629      	mov	r1, r5
 800933a:	4638      	mov	r0, r7
 800933c:	47c0      	blx	r8
 800933e:	4306      	orrs	r6, r0
 8009340:	3568      	adds	r5, #104	@ 0x68
 8009342:	e7e9      	b.n	8009318 <_fwalk_sglue+0x10>

08009344 <iprintf>:
 8009344:	b40f      	push	{r0, r1, r2, r3}
 8009346:	b507      	push	{r0, r1, r2, lr}
 8009348:	4906      	ldr	r1, [pc, #24]	@ (8009364 <iprintf+0x20>)
 800934a:	ab04      	add	r3, sp, #16
 800934c:	6808      	ldr	r0, [r1, #0]
 800934e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009352:	6881      	ldr	r1, [r0, #8]
 8009354:	9301      	str	r3, [sp, #4]
 8009356:	f002 fcf7 	bl	800bd48 <_vfiprintf_r>
 800935a:	b003      	add	sp, #12
 800935c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009360:	b004      	add	sp, #16
 8009362:	4770      	bx	lr
 8009364:	2000001c 	.word	0x2000001c

08009368 <siprintf>:
 8009368:	b40e      	push	{r1, r2, r3}
 800936a:	b500      	push	{lr}
 800936c:	b09c      	sub	sp, #112	@ 0x70
 800936e:	ab1d      	add	r3, sp, #116	@ 0x74
 8009370:	9002      	str	r0, [sp, #8]
 8009372:	9006      	str	r0, [sp, #24]
 8009374:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009378:	4809      	ldr	r0, [pc, #36]	@ (80093a0 <siprintf+0x38>)
 800937a:	9107      	str	r1, [sp, #28]
 800937c:	9104      	str	r1, [sp, #16]
 800937e:	4909      	ldr	r1, [pc, #36]	@ (80093a4 <siprintf+0x3c>)
 8009380:	f853 2b04 	ldr.w	r2, [r3], #4
 8009384:	9105      	str	r1, [sp, #20]
 8009386:	6800      	ldr	r0, [r0, #0]
 8009388:	9301      	str	r3, [sp, #4]
 800938a:	a902      	add	r1, sp, #8
 800938c:	f002 fbb6 	bl	800bafc <_svfiprintf_r>
 8009390:	9b02      	ldr	r3, [sp, #8]
 8009392:	2200      	movs	r2, #0
 8009394:	701a      	strb	r2, [r3, #0]
 8009396:	b01c      	add	sp, #112	@ 0x70
 8009398:	f85d eb04 	ldr.w	lr, [sp], #4
 800939c:	b003      	add	sp, #12
 800939e:	4770      	bx	lr
 80093a0:	2000001c 	.word	0x2000001c
 80093a4:	ffff0208 	.word	0xffff0208

080093a8 <__sread>:
 80093a8:	b510      	push	{r4, lr}
 80093aa:	460c      	mov	r4, r1
 80093ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093b0:	f000 f86c 	bl	800948c <_read_r>
 80093b4:	2800      	cmp	r0, #0
 80093b6:	bfab      	itete	ge
 80093b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80093ba:	89a3      	ldrhlt	r3, [r4, #12]
 80093bc:	181b      	addge	r3, r3, r0
 80093be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80093c2:	bfac      	ite	ge
 80093c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80093c6:	81a3      	strhlt	r3, [r4, #12]
 80093c8:	bd10      	pop	{r4, pc}

080093ca <__swrite>:
 80093ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093ce:	461f      	mov	r7, r3
 80093d0:	898b      	ldrh	r3, [r1, #12]
 80093d2:	05db      	lsls	r3, r3, #23
 80093d4:	4605      	mov	r5, r0
 80093d6:	460c      	mov	r4, r1
 80093d8:	4616      	mov	r6, r2
 80093da:	d505      	bpl.n	80093e8 <__swrite+0x1e>
 80093dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80093e0:	2302      	movs	r3, #2
 80093e2:	2200      	movs	r2, #0
 80093e4:	f000 f840 	bl	8009468 <_lseek_r>
 80093e8:	89a3      	ldrh	r3, [r4, #12]
 80093ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80093ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80093f2:	81a3      	strh	r3, [r4, #12]
 80093f4:	4632      	mov	r2, r6
 80093f6:	463b      	mov	r3, r7
 80093f8:	4628      	mov	r0, r5
 80093fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80093fe:	f000 b857 	b.w	80094b0 <_write_r>

08009402 <__sseek>:
 8009402:	b510      	push	{r4, lr}
 8009404:	460c      	mov	r4, r1
 8009406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800940a:	f000 f82d 	bl	8009468 <_lseek_r>
 800940e:	1c43      	adds	r3, r0, #1
 8009410:	89a3      	ldrh	r3, [r4, #12]
 8009412:	bf15      	itete	ne
 8009414:	6560      	strne	r0, [r4, #84]	@ 0x54
 8009416:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800941a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800941e:	81a3      	strheq	r3, [r4, #12]
 8009420:	bf18      	it	ne
 8009422:	81a3      	strhne	r3, [r4, #12]
 8009424:	bd10      	pop	{r4, pc}

08009426 <__sclose>:
 8009426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800942a:	f000 b80d 	b.w	8009448 <_close_r>

0800942e <memset>:
 800942e:	4402      	add	r2, r0
 8009430:	4603      	mov	r3, r0
 8009432:	4293      	cmp	r3, r2
 8009434:	d100      	bne.n	8009438 <memset+0xa>
 8009436:	4770      	bx	lr
 8009438:	f803 1b01 	strb.w	r1, [r3], #1
 800943c:	e7f9      	b.n	8009432 <memset+0x4>
	...

08009440 <_localeconv_r>:
 8009440:	4800      	ldr	r0, [pc, #0]	@ (8009444 <_localeconv_r+0x4>)
 8009442:	4770      	bx	lr
 8009444:	2000015c 	.word	0x2000015c

08009448 <_close_r>:
 8009448:	b538      	push	{r3, r4, r5, lr}
 800944a:	4d06      	ldr	r5, [pc, #24]	@ (8009464 <_close_r+0x1c>)
 800944c:	2300      	movs	r3, #0
 800944e:	4604      	mov	r4, r0
 8009450:	4608      	mov	r0, r1
 8009452:	602b      	str	r3, [r5, #0]
 8009454:	f7f9 fa84 	bl	8002960 <_close>
 8009458:	1c43      	adds	r3, r0, #1
 800945a:	d102      	bne.n	8009462 <_close_r+0x1a>
 800945c:	682b      	ldr	r3, [r5, #0]
 800945e:	b103      	cbz	r3, 8009462 <_close_r+0x1a>
 8009460:	6023      	str	r3, [r4, #0]
 8009462:	bd38      	pop	{r3, r4, r5, pc}
 8009464:	20002934 	.word	0x20002934

08009468 <_lseek_r>:
 8009468:	b538      	push	{r3, r4, r5, lr}
 800946a:	4d07      	ldr	r5, [pc, #28]	@ (8009488 <_lseek_r+0x20>)
 800946c:	4604      	mov	r4, r0
 800946e:	4608      	mov	r0, r1
 8009470:	4611      	mov	r1, r2
 8009472:	2200      	movs	r2, #0
 8009474:	602a      	str	r2, [r5, #0]
 8009476:	461a      	mov	r2, r3
 8009478:	f7f9 fa99 	bl	80029ae <_lseek>
 800947c:	1c43      	adds	r3, r0, #1
 800947e:	d102      	bne.n	8009486 <_lseek_r+0x1e>
 8009480:	682b      	ldr	r3, [r5, #0]
 8009482:	b103      	cbz	r3, 8009486 <_lseek_r+0x1e>
 8009484:	6023      	str	r3, [r4, #0]
 8009486:	bd38      	pop	{r3, r4, r5, pc}
 8009488:	20002934 	.word	0x20002934

0800948c <_read_r>:
 800948c:	b538      	push	{r3, r4, r5, lr}
 800948e:	4d07      	ldr	r5, [pc, #28]	@ (80094ac <_read_r+0x20>)
 8009490:	4604      	mov	r4, r0
 8009492:	4608      	mov	r0, r1
 8009494:	4611      	mov	r1, r2
 8009496:	2200      	movs	r2, #0
 8009498:	602a      	str	r2, [r5, #0]
 800949a:	461a      	mov	r2, r3
 800949c:	f7f9 fa27 	bl	80028ee <_read>
 80094a0:	1c43      	adds	r3, r0, #1
 80094a2:	d102      	bne.n	80094aa <_read_r+0x1e>
 80094a4:	682b      	ldr	r3, [r5, #0]
 80094a6:	b103      	cbz	r3, 80094aa <_read_r+0x1e>
 80094a8:	6023      	str	r3, [r4, #0]
 80094aa:	bd38      	pop	{r3, r4, r5, pc}
 80094ac:	20002934 	.word	0x20002934

080094b0 <_write_r>:
 80094b0:	b538      	push	{r3, r4, r5, lr}
 80094b2:	4d07      	ldr	r5, [pc, #28]	@ (80094d0 <_write_r+0x20>)
 80094b4:	4604      	mov	r4, r0
 80094b6:	4608      	mov	r0, r1
 80094b8:	4611      	mov	r1, r2
 80094ba:	2200      	movs	r2, #0
 80094bc:	602a      	str	r2, [r5, #0]
 80094be:	461a      	mov	r2, r3
 80094c0:	f7f9 fa32 	bl	8002928 <_write>
 80094c4:	1c43      	adds	r3, r0, #1
 80094c6:	d102      	bne.n	80094ce <_write_r+0x1e>
 80094c8:	682b      	ldr	r3, [r5, #0]
 80094ca:	b103      	cbz	r3, 80094ce <_write_r+0x1e>
 80094cc:	6023      	str	r3, [r4, #0]
 80094ce:	bd38      	pop	{r3, r4, r5, pc}
 80094d0:	20002934 	.word	0x20002934

080094d4 <__errno>:
 80094d4:	4b01      	ldr	r3, [pc, #4]	@ (80094dc <__errno+0x8>)
 80094d6:	6818      	ldr	r0, [r3, #0]
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	2000001c 	.word	0x2000001c

080094e0 <__libc_init_array>:
 80094e0:	b570      	push	{r4, r5, r6, lr}
 80094e2:	4d0d      	ldr	r5, [pc, #52]	@ (8009518 <__libc_init_array+0x38>)
 80094e4:	4c0d      	ldr	r4, [pc, #52]	@ (800951c <__libc_init_array+0x3c>)
 80094e6:	1b64      	subs	r4, r4, r5
 80094e8:	10a4      	asrs	r4, r4, #2
 80094ea:	2600      	movs	r6, #0
 80094ec:	42a6      	cmp	r6, r4
 80094ee:	d109      	bne.n	8009504 <__libc_init_array+0x24>
 80094f0:	4d0b      	ldr	r5, [pc, #44]	@ (8009520 <__libc_init_array+0x40>)
 80094f2:	4c0c      	ldr	r4, [pc, #48]	@ (8009524 <__libc_init_array+0x44>)
 80094f4:	f003 fb76 	bl	800cbe4 <_init>
 80094f8:	1b64      	subs	r4, r4, r5
 80094fa:	10a4      	asrs	r4, r4, #2
 80094fc:	2600      	movs	r6, #0
 80094fe:	42a6      	cmp	r6, r4
 8009500:	d105      	bne.n	800950e <__libc_init_array+0x2e>
 8009502:	bd70      	pop	{r4, r5, r6, pc}
 8009504:	f855 3b04 	ldr.w	r3, [r5], #4
 8009508:	4798      	blx	r3
 800950a:	3601      	adds	r6, #1
 800950c:	e7ee      	b.n	80094ec <__libc_init_array+0xc>
 800950e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009512:	4798      	blx	r3
 8009514:	3601      	adds	r6, #1
 8009516:	e7f2      	b.n	80094fe <__libc_init_array+0x1e>
 8009518:	0800d0e8 	.word	0x0800d0e8
 800951c:	0800d0e8 	.word	0x0800d0e8
 8009520:	0800d0e8 	.word	0x0800d0e8
 8009524:	0800d0ec 	.word	0x0800d0ec

08009528 <__retarget_lock_init_recursive>:
 8009528:	4770      	bx	lr

0800952a <__retarget_lock_acquire_recursive>:
 800952a:	4770      	bx	lr

0800952c <__retarget_lock_release_recursive>:
 800952c:	4770      	bx	lr
	...

08009530 <nanf>:
 8009530:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8009538 <nanf+0x8>
 8009534:	4770      	bx	lr
 8009536:	bf00      	nop
 8009538:	7fc00000 	.word	0x7fc00000

0800953c <quorem>:
 800953c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009540:	6903      	ldr	r3, [r0, #16]
 8009542:	690c      	ldr	r4, [r1, #16]
 8009544:	42a3      	cmp	r3, r4
 8009546:	4607      	mov	r7, r0
 8009548:	db7e      	blt.n	8009648 <quorem+0x10c>
 800954a:	3c01      	subs	r4, #1
 800954c:	f101 0814 	add.w	r8, r1, #20
 8009550:	00a3      	lsls	r3, r4, #2
 8009552:	f100 0514 	add.w	r5, r0, #20
 8009556:	9300      	str	r3, [sp, #0]
 8009558:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800955c:	9301      	str	r3, [sp, #4]
 800955e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009562:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009566:	3301      	adds	r3, #1
 8009568:	429a      	cmp	r2, r3
 800956a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800956e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009572:	d32e      	bcc.n	80095d2 <quorem+0x96>
 8009574:	f04f 0a00 	mov.w	sl, #0
 8009578:	46c4      	mov	ip, r8
 800957a:	46ae      	mov	lr, r5
 800957c:	46d3      	mov	fp, sl
 800957e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009582:	b298      	uxth	r0, r3
 8009584:	fb06 a000 	mla	r0, r6, r0, sl
 8009588:	0c02      	lsrs	r2, r0, #16
 800958a:	0c1b      	lsrs	r3, r3, #16
 800958c:	fb06 2303 	mla	r3, r6, r3, r2
 8009590:	f8de 2000 	ldr.w	r2, [lr]
 8009594:	b280      	uxth	r0, r0
 8009596:	b292      	uxth	r2, r2
 8009598:	1a12      	subs	r2, r2, r0
 800959a:	445a      	add	r2, fp
 800959c:	f8de 0000 	ldr.w	r0, [lr]
 80095a0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80095aa:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80095ae:	b292      	uxth	r2, r2
 80095b0:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80095b4:	45e1      	cmp	r9, ip
 80095b6:	f84e 2b04 	str.w	r2, [lr], #4
 80095ba:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80095be:	d2de      	bcs.n	800957e <quorem+0x42>
 80095c0:	9b00      	ldr	r3, [sp, #0]
 80095c2:	58eb      	ldr	r3, [r5, r3]
 80095c4:	b92b      	cbnz	r3, 80095d2 <quorem+0x96>
 80095c6:	9b01      	ldr	r3, [sp, #4]
 80095c8:	3b04      	subs	r3, #4
 80095ca:	429d      	cmp	r5, r3
 80095cc:	461a      	mov	r2, r3
 80095ce:	d32f      	bcc.n	8009630 <quorem+0xf4>
 80095d0:	613c      	str	r4, [r7, #16]
 80095d2:	4638      	mov	r0, r7
 80095d4:	f001 f9c4 	bl	800a960 <__mcmp>
 80095d8:	2800      	cmp	r0, #0
 80095da:	db25      	blt.n	8009628 <quorem+0xec>
 80095dc:	4629      	mov	r1, r5
 80095de:	2000      	movs	r0, #0
 80095e0:	f858 2b04 	ldr.w	r2, [r8], #4
 80095e4:	f8d1 c000 	ldr.w	ip, [r1]
 80095e8:	fa1f fe82 	uxth.w	lr, r2
 80095ec:	fa1f f38c 	uxth.w	r3, ip
 80095f0:	eba3 030e 	sub.w	r3, r3, lr
 80095f4:	4403      	add	r3, r0
 80095f6:	0c12      	lsrs	r2, r2, #16
 80095f8:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80095fc:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009600:	b29b      	uxth	r3, r3
 8009602:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009606:	45c1      	cmp	r9, r8
 8009608:	f841 3b04 	str.w	r3, [r1], #4
 800960c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009610:	d2e6      	bcs.n	80095e0 <quorem+0xa4>
 8009612:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009616:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800961a:	b922      	cbnz	r2, 8009626 <quorem+0xea>
 800961c:	3b04      	subs	r3, #4
 800961e:	429d      	cmp	r5, r3
 8009620:	461a      	mov	r2, r3
 8009622:	d30b      	bcc.n	800963c <quorem+0x100>
 8009624:	613c      	str	r4, [r7, #16]
 8009626:	3601      	adds	r6, #1
 8009628:	4630      	mov	r0, r6
 800962a:	b003      	add	sp, #12
 800962c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009630:	6812      	ldr	r2, [r2, #0]
 8009632:	3b04      	subs	r3, #4
 8009634:	2a00      	cmp	r2, #0
 8009636:	d1cb      	bne.n	80095d0 <quorem+0x94>
 8009638:	3c01      	subs	r4, #1
 800963a:	e7c6      	b.n	80095ca <quorem+0x8e>
 800963c:	6812      	ldr	r2, [r2, #0]
 800963e:	3b04      	subs	r3, #4
 8009640:	2a00      	cmp	r2, #0
 8009642:	d1ef      	bne.n	8009624 <quorem+0xe8>
 8009644:	3c01      	subs	r4, #1
 8009646:	e7ea      	b.n	800961e <quorem+0xe2>
 8009648:	2000      	movs	r0, #0
 800964a:	e7ee      	b.n	800962a <quorem+0xee>
 800964c:	0000      	movs	r0, r0
	...

08009650 <_dtoa_r>:
 8009650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009654:	69c7      	ldr	r7, [r0, #28]
 8009656:	b099      	sub	sp, #100	@ 0x64
 8009658:	ed8d 0b02 	vstr	d0, [sp, #8]
 800965c:	ec55 4b10 	vmov	r4, r5, d0
 8009660:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8009662:	9109      	str	r1, [sp, #36]	@ 0x24
 8009664:	4683      	mov	fp, r0
 8009666:	920e      	str	r2, [sp, #56]	@ 0x38
 8009668:	9313      	str	r3, [sp, #76]	@ 0x4c
 800966a:	b97f      	cbnz	r7, 800968c <_dtoa_r+0x3c>
 800966c:	2010      	movs	r0, #16
 800966e:	f000 fdfd 	bl	800a26c <malloc>
 8009672:	4602      	mov	r2, r0
 8009674:	f8cb 001c 	str.w	r0, [fp, #28]
 8009678:	b920      	cbnz	r0, 8009684 <_dtoa_r+0x34>
 800967a:	4ba7      	ldr	r3, [pc, #668]	@ (8009918 <_dtoa_r+0x2c8>)
 800967c:	21ef      	movs	r1, #239	@ 0xef
 800967e:	48a7      	ldr	r0, [pc, #668]	@ (800991c <_dtoa_r+0x2cc>)
 8009680:	f002 fe0e 	bl	800c2a0 <__assert_func>
 8009684:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009688:	6007      	str	r7, [r0, #0]
 800968a:	60c7      	str	r7, [r0, #12]
 800968c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009690:	6819      	ldr	r1, [r3, #0]
 8009692:	b159      	cbz	r1, 80096ac <_dtoa_r+0x5c>
 8009694:	685a      	ldr	r2, [r3, #4]
 8009696:	604a      	str	r2, [r1, #4]
 8009698:	2301      	movs	r3, #1
 800969a:	4093      	lsls	r3, r2
 800969c:	608b      	str	r3, [r1, #8]
 800969e:	4658      	mov	r0, fp
 80096a0:	f000 feda 	bl	800a458 <_Bfree>
 80096a4:	f8db 301c 	ldr.w	r3, [fp, #28]
 80096a8:	2200      	movs	r2, #0
 80096aa:	601a      	str	r2, [r3, #0]
 80096ac:	1e2b      	subs	r3, r5, #0
 80096ae:	bfb9      	ittee	lt
 80096b0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80096b4:	9303      	strlt	r3, [sp, #12]
 80096b6:	2300      	movge	r3, #0
 80096b8:	6033      	strge	r3, [r6, #0]
 80096ba:	9f03      	ldr	r7, [sp, #12]
 80096bc:	4b98      	ldr	r3, [pc, #608]	@ (8009920 <_dtoa_r+0x2d0>)
 80096be:	bfbc      	itt	lt
 80096c0:	2201      	movlt	r2, #1
 80096c2:	6032      	strlt	r2, [r6, #0]
 80096c4:	43bb      	bics	r3, r7
 80096c6:	d112      	bne.n	80096ee <_dtoa_r+0x9e>
 80096c8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80096ca:	f242 730f 	movw	r3, #9999	@ 0x270f
 80096ce:	6013      	str	r3, [r2, #0]
 80096d0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80096d4:	4323      	orrs	r3, r4
 80096d6:	f000 854d 	beq.w	800a174 <_dtoa_r+0xb24>
 80096da:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80096dc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8009934 <_dtoa_r+0x2e4>
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	f000 854f 	beq.w	800a184 <_dtoa_r+0xb34>
 80096e6:	f10a 0303 	add.w	r3, sl, #3
 80096ea:	f000 bd49 	b.w	800a180 <_dtoa_r+0xb30>
 80096ee:	ed9d 7b02 	vldr	d7, [sp, #8]
 80096f2:	2200      	movs	r2, #0
 80096f4:	ec51 0b17 	vmov	r0, r1, d7
 80096f8:	2300      	movs	r3, #0
 80096fa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80096fe:	f7f7 fb2b 	bl	8000d58 <__aeabi_dcmpeq>
 8009702:	4680      	mov	r8, r0
 8009704:	b158      	cbz	r0, 800971e <_dtoa_r+0xce>
 8009706:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8009708:	2301      	movs	r3, #1
 800970a:	6013      	str	r3, [r2, #0]
 800970c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800970e:	b113      	cbz	r3, 8009716 <_dtoa_r+0xc6>
 8009710:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009712:	4b84      	ldr	r3, [pc, #528]	@ (8009924 <_dtoa_r+0x2d4>)
 8009714:	6013      	str	r3, [r2, #0]
 8009716:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009938 <_dtoa_r+0x2e8>
 800971a:	f000 bd33 	b.w	800a184 <_dtoa_r+0xb34>
 800971e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009722:	aa16      	add	r2, sp, #88	@ 0x58
 8009724:	a917      	add	r1, sp, #92	@ 0x5c
 8009726:	4658      	mov	r0, fp
 8009728:	f001 fa3a 	bl	800aba0 <__d2b>
 800972c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009730:	4681      	mov	r9, r0
 8009732:	2e00      	cmp	r6, #0
 8009734:	d077      	beq.n	8009826 <_dtoa_r+0x1d6>
 8009736:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009738:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800973c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009744:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009748:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800974c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009750:	4619      	mov	r1, r3
 8009752:	2200      	movs	r2, #0
 8009754:	4b74      	ldr	r3, [pc, #464]	@ (8009928 <_dtoa_r+0x2d8>)
 8009756:	f7f6 fedf 	bl	8000518 <__aeabi_dsub>
 800975a:	a369      	add	r3, pc, #420	@ (adr r3, 8009900 <_dtoa_r+0x2b0>)
 800975c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009760:	f7f7 f892 	bl	8000888 <__aeabi_dmul>
 8009764:	a368      	add	r3, pc, #416	@ (adr r3, 8009908 <_dtoa_r+0x2b8>)
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	f7f6 fed7 	bl	800051c <__adddf3>
 800976e:	4604      	mov	r4, r0
 8009770:	4630      	mov	r0, r6
 8009772:	460d      	mov	r5, r1
 8009774:	f7f7 f81e 	bl	80007b4 <__aeabi_i2d>
 8009778:	a365      	add	r3, pc, #404	@ (adr r3, 8009910 <_dtoa_r+0x2c0>)
 800977a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800977e:	f7f7 f883 	bl	8000888 <__aeabi_dmul>
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
 8009786:	4620      	mov	r0, r4
 8009788:	4629      	mov	r1, r5
 800978a:	f7f6 fec7 	bl	800051c <__adddf3>
 800978e:	4604      	mov	r4, r0
 8009790:	460d      	mov	r5, r1
 8009792:	f7f7 fb29 	bl	8000de8 <__aeabi_d2iz>
 8009796:	2200      	movs	r2, #0
 8009798:	4607      	mov	r7, r0
 800979a:	2300      	movs	r3, #0
 800979c:	4620      	mov	r0, r4
 800979e:	4629      	mov	r1, r5
 80097a0:	f7f7 fae4 	bl	8000d6c <__aeabi_dcmplt>
 80097a4:	b140      	cbz	r0, 80097b8 <_dtoa_r+0x168>
 80097a6:	4638      	mov	r0, r7
 80097a8:	f7f7 f804 	bl	80007b4 <__aeabi_i2d>
 80097ac:	4622      	mov	r2, r4
 80097ae:	462b      	mov	r3, r5
 80097b0:	f7f7 fad2 	bl	8000d58 <__aeabi_dcmpeq>
 80097b4:	b900      	cbnz	r0, 80097b8 <_dtoa_r+0x168>
 80097b6:	3f01      	subs	r7, #1
 80097b8:	2f16      	cmp	r7, #22
 80097ba:	d851      	bhi.n	8009860 <_dtoa_r+0x210>
 80097bc:	4b5b      	ldr	r3, [pc, #364]	@ (800992c <_dtoa_r+0x2dc>)
 80097be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80097c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80097ca:	f7f7 facf 	bl	8000d6c <__aeabi_dcmplt>
 80097ce:	2800      	cmp	r0, #0
 80097d0:	d048      	beq.n	8009864 <_dtoa_r+0x214>
 80097d2:	3f01      	subs	r7, #1
 80097d4:	2300      	movs	r3, #0
 80097d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80097d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80097da:	1b9b      	subs	r3, r3, r6
 80097dc:	1e5a      	subs	r2, r3, #1
 80097de:	bf44      	itt	mi
 80097e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80097e4:	2300      	movmi	r3, #0
 80097e6:	9208      	str	r2, [sp, #32]
 80097e8:	bf54      	ite	pl
 80097ea:	f04f 0800 	movpl.w	r8, #0
 80097ee:	9308      	strmi	r3, [sp, #32]
 80097f0:	2f00      	cmp	r7, #0
 80097f2:	db39      	blt.n	8009868 <_dtoa_r+0x218>
 80097f4:	9b08      	ldr	r3, [sp, #32]
 80097f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80097f8:	443b      	add	r3, r7
 80097fa:	9308      	str	r3, [sp, #32]
 80097fc:	2300      	movs	r3, #0
 80097fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8009800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009802:	2b09      	cmp	r3, #9
 8009804:	d864      	bhi.n	80098d0 <_dtoa_r+0x280>
 8009806:	2b05      	cmp	r3, #5
 8009808:	bfc4      	itt	gt
 800980a:	3b04      	subgt	r3, #4
 800980c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800980e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009810:	f1a3 0302 	sub.w	r3, r3, #2
 8009814:	bfcc      	ite	gt
 8009816:	2400      	movgt	r4, #0
 8009818:	2401      	movle	r4, #1
 800981a:	2b03      	cmp	r3, #3
 800981c:	d863      	bhi.n	80098e6 <_dtoa_r+0x296>
 800981e:	e8df f003 	tbb	[pc, r3]
 8009822:	372a      	.short	0x372a
 8009824:	5535      	.short	0x5535
 8009826:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800982a:	441e      	add	r6, r3
 800982c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009830:	2b20      	cmp	r3, #32
 8009832:	bfc1      	itttt	gt
 8009834:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009838:	409f      	lslgt	r7, r3
 800983a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800983e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009842:	bfd6      	itet	le
 8009844:	f1c3 0320 	rsble	r3, r3, #32
 8009848:	ea47 0003 	orrgt.w	r0, r7, r3
 800984c:	fa04 f003 	lslle.w	r0, r4, r3
 8009850:	f7f6 ffa0 	bl	8000794 <__aeabi_ui2d>
 8009854:	2201      	movs	r2, #1
 8009856:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800985a:	3e01      	subs	r6, #1
 800985c:	9214      	str	r2, [sp, #80]	@ 0x50
 800985e:	e777      	b.n	8009750 <_dtoa_r+0x100>
 8009860:	2301      	movs	r3, #1
 8009862:	e7b8      	b.n	80097d6 <_dtoa_r+0x186>
 8009864:	9012      	str	r0, [sp, #72]	@ 0x48
 8009866:	e7b7      	b.n	80097d8 <_dtoa_r+0x188>
 8009868:	427b      	negs	r3, r7
 800986a:	930a      	str	r3, [sp, #40]	@ 0x28
 800986c:	2300      	movs	r3, #0
 800986e:	eba8 0807 	sub.w	r8, r8, r7
 8009872:	930f      	str	r3, [sp, #60]	@ 0x3c
 8009874:	e7c4      	b.n	8009800 <_dtoa_r+0x1b0>
 8009876:	2300      	movs	r3, #0
 8009878:	930b      	str	r3, [sp, #44]	@ 0x2c
 800987a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800987c:	2b00      	cmp	r3, #0
 800987e:	dc35      	bgt.n	80098ec <_dtoa_r+0x29c>
 8009880:	2301      	movs	r3, #1
 8009882:	9300      	str	r3, [sp, #0]
 8009884:	9307      	str	r3, [sp, #28]
 8009886:	461a      	mov	r2, r3
 8009888:	920e      	str	r2, [sp, #56]	@ 0x38
 800988a:	e00b      	b.n	80098a4 <_dtoa_r+0x254>
 800988c:	2301      	movs	r3, #1
 800988e:	e7f3      	b.n	8009878 <_dtoa_r+0x228>
 8009890:	2300      	movs	r3, #0
 8009892:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009894:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009896:	18fb      	adds	r3, r7, r3
 8009898:	9300      	str	r3, [sp, #0]
 800989a:	3301      	adds	r3, #1
 800989c:	2b01      	cmp	r3, #1
 800989e:	9307      	str	r3, [sp, #28]
 80098a0:	bfb8      	it	lt
 80098a2:	2301      	movlt	r3, #1
 80098a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80098a8:	2100      	movs	r1, #0
 80098aa:	2204      	movs	r2, #4
 80098ac:	f102 0514 	add.w	r5, r2, #20
 80098b0:	429d      	cmp	r5, r3
 80098b2:	d91f      	bls.n	80098f4 <_dtoa_r+0x2a4>
 80098b4:	6041      	str	r1, [r0, #4]
 80098b6:	4658      	mov	r0, fp
 80098b8:	f000 fd8e 	bl	800a3d8 <_Balloc>
 80098bc:	4682      	mov	sl, r0
 80098be:	2800      	cmp	r0, #0
 80098c0:	d13c      	bne.n	800993c <_dtoa_r+0x2ec>
 80098c2:	4b1b      	ldr	r3, [pc, #108]	@ (8009930 <_dtoa_r+0x2e0>)
 80098c4:	4602      	mov	r2, r0
 80098c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80098ca:	e6d8      	b.n	800967e <_dtoa_r+0x2e>
 80098cc:	2301      	movs	r3, #1
 80098ce:	e7e0      	b.n	8009892 <_dtoa_r+0x242>
 80098d0:	2401      	movs	r4, #1
 80098d2:	2300      	movs	r3, #0
 80098d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80098d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80098d8:	f04f 33ff 	mov.w	r3, #4294967295
 80098dc:	9300      	str	r3, [sp, #0]
 80098de:	9307      	str	r3, [sp, #28]
 80098e0:	2200      	movs	r2, #0
 80098e2:	2312      	movs	r3, #18
 80098e4:	e7d0      	b.n	8009888 <_dtoa_r+0x238>
 80098e6:	2301      	movs	r3, #1
 80098e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80098ea:	e7f5      	b.n	80098d8 <_dtoa_r+0x288>
 80098ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80098ee:	9300      	str	r3, [sp, #0]
 80098f0:	9307      	str	r3, [sp, #28]
 80098f2:	e7d7      	b.n	80098a4 <_dtoa_r+0x254>
 80098f4:	3101      	adds	r1, #1
 80098f6:	0052      	lsls	r2, r2, #1
 80098f8:	e7d8      	b.n	80098ac <_dtoa_r+0x25c>
 80098fa:	bf00      	nop
 80098fc:	f3af 8000 	nop.w
 8009900:	636f4361 	.word	0x636f4361
 8009904:	3fd287a7 	.word	0x3fd287a7
 8009908:	8b60c8b3 	.word	0x8b60c8b3
 800990c:	3fc68a28 	.word	0x3fc68a28
 8009910:	509f79fb 	.word	0x509f79fb
 8009914:	3fd34413 	.word	0x3fd34413
 8009918:	0800ccfa 	.word	0x0800ccfa
 800991c:	0800cd11 	.word	0x0800cd11
 8009920:	7ff00000 	.word	0x7ff00000
 8009924:	0800ccc5 	.word	0x0800ccc5
 8009928:	3ff80000 	.word	0x3ff80000
 800992c:	0800ce08 	.word	0x0800ce08
 8009930:	0800cd69 	.word	0x0800cd69
 8009934:	0800ccf6 	.word	0x0800ccf6
 8009938:	0800ccc4 	.word	0x0800ccc4
 800993c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009940:	6018      	str	r0, [r3, #0]
 8009942:	9b07      	ldr	r3, [sp, #28]
 8009944:	2b0e      	cmp	r3, #14
 8009946:	f200 80a4 	bhi.w	8009a92 <_dtoa_r+0x442>
 800994a:	2c00      	cmp	r4, #0
 800994c:	f000 80a1 	beq.w	8009a92 <_dtoa_r+0x442>
 8009950:	2f00      	cmp	r7, #0
 8009952:	dd33      	ble.n	80099bc <_dtoa_r+0x36c>
 8009954:	4bad      	ldr	r3, [pc, #692]	@ (8009c0c <_dtoa_r+0x5bc>)
 8009956:	f007 020f 	and.w	r2, r7, #15
 800995a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800995e:	ed93 7b00 	vldr	d7, [r3]
 8009962:	05f8      	lsls	r0, r7, #23
 8009964:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009968:	ea4f 1427 	mov.w	r4, r7, asr #4
 800996c:	d516      	bpl.n	800999c <_dtoa_r+0x34c>
 800996e:	4ba8      	ldr	r3, [pc, #672]	@ (8009c10 <_dtoa_r+0x5c0>)
 8009970:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009974:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009978:	f7f7 f8b0 	bl	8000adc <__aeabi_ddiv>
 800997c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009980:	f004 040f 	and.w	r4, r4, #15
 8009984:	2603      	movs	r6, #3
 8009986:	4da2      	ldr	r5, [pc, #648]	@ (8009c10 <_dtoa_r+0x5c0>)
 8009988:	b954      	cbnz	r4, 80099a0 <_dtoa_r+0x350>
 800998a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800998e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009992:	f7f7 f8a3 	bl	8000adc <__aeabi_ddiv>
 8009996:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800999a:	e028      	b.n	80099ee <_dtoa_r+0x39e>
 800999c:	2602      	movs	r6, #2
 800999e:	e7f2      	b.n	8009986 <_dtoa_r+0x336>
 80099a0:	07e1      	lsls	r1, r4, #31
 80099a2:	d508      	bpl.n	80099b6 <_dtoa_r+0x366>
 80099a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80099a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80099ac:	f7f6 ff6c 	bl	8000888 <__aeabi_dmul>
 80099b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80099b4:	3601      	adds	r6, #1
 80099b6:	1064      	asrs	r4, r4, #1
 80099b8:	3508      	adds	r5, #8
 80099ba:	e7e5      	b.n	8009988 <_dtoa_r+0x338>
 80099bc:	f000 80d2 	beq.w	8009b64 <_dtoa_r+0x514>
 80099c0:	427c      	negs	r4, r7
 80099c2:	4b92      	ldr	r3, [pc, #584]	@ (8009c0c <_dtoa_r+0x5bc>)
 80099c4:	4d92      	ldr	r5, [pc, #584]	@ (8009c10 <_dtoa_r+0x5c0>)
 80099c6:	f004 020f 	and.w	r2, r4, #15
 80099ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80099d6:	f7f6 ff57 	bl	8000888 <__aeabi_dmul>
 80099da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80099de:	1124      	asrs	r4, r4, #4
 80099e0:	2300      	movs	r3, #0
 80099e2:	2602      	movs	r6, #2
 80099e4:	2c00      	cmp	r4, #0
 80099e6:	f040 80b2 	bne.w	8009b4e <_dtoa_r+0x4fe>
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d1d3      	bne.n	8009996 <_dtoa_r+0x346>
 80099ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80099f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	f000 80b7 	beq.w	8009b68 <_dtoa_r+0x518>
 80099fa:	4b86      	ldr	r3, [pc, #536]	@ (8009c14 <_dtoa_r+0x5c4>)
 80099fc:	2200      	movs	r2, #0
 80099fe:	4620      	mov	r0, r4
 8009a00:	4629      	mov	r1, r5
 8009a02:	f7f7 f9b3 	bl	8000d6c <__aeabi_dcmplt>
 8009a06:	2800      	cmp	r0, #0
 8009a08:	f000 80ae 	beq.w	8009b68 <_dtoa_r+0x518>
 8009a0c:	9b07      	ldr	r3, [sp, #28]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	f000 80aa 	beq.w	8009b68 <_dtoa_r+0x518>
 8009a14:	9b00      	ldr	r3, [sp, #0]
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	dd37      	ble.n	8009a8a <_dtoa_r+0x43a>
 8009a1a:	1e7b      	subs	r3, r7, #1
 8009a1c:	9304      	str	r3, [sp, #16]
 8009a1e:	4620      	mov	r0, r4
 8009a20:	4b7d      	ldr	r3, [pc, #500]	@ (8009c18 <_dtoa_r+0x5c8>)
 8009a22:	2200      	movs	r2, #0
 8009a24:	4629      	mov	r1, r5
 8009a26:	f7f6 ff2f 	bl	8000888 <__aeabi_dmul>
 8009a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009a2e:	9c00      	ldr	r4, [sp, #0]
 8009a30:	3601      	adds	r6, #1
 8009a32:	4630      	mov	r0, r6
 8009a34:	f7f6 febe 	bl	80007b4 <__aeabi_i2d>
 8009a38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009a3c:	f7f6 ff24 	bl	8000888 <__aeabi_dmul>
 8009a40:	4b76      	ldr	r3, [pc, #472]	@ (8009c1c <_dtoa_r+0x5cc>)
 8009a42:	2200      	movs	r2, #0
 8009a44:	f7f6 fd6a 	bl	800051c <__adddf3>
 8009a48:	4605      	mov	r5, r0
 8009a4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009a4e:	2c00      	cmp	r4, #0
 8009a50:	f040 808d 	bne.w	8009b6e <_dtoa_r+0x51e>
 8009a54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a58:	4b71      	ldr	r3, [pc, #452]	@ (8009c20 <_dtoa_r+0x5d0>)
 8009a5a:	2200      	movs	r2, #0
 8009a5c:	f7f6 fd5c 	bl	8000518 <__aeabi_dsub>
 8009a60:	4602      	mov	r2, r0
 8009a62:	460b      	mov	r3, r1
 8009a64:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009a68:	462a      	mov	r2, r5
 8009a6a:	4633      	mov	r3, r6
 8009a6c:	f7f7 f99c 	bl	8000da8 <__aeabi_dcmpgt>
 8009a70:	2800      	cmp	r0, #0
 8009a72:	f040 828b 	bne.w	8009f8c <_dtoa_r+0x93c>
 8009a76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009a7a:	462a      	mov	r2, r5
 8009a7c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009a80:	f7f7 f974 	bl	8000d6c <__aeabi_dcmplt>
 8009a84:	2800      	cmp	r0, #0
 8009a86:	f040 8128 	bne.w	8009cda <_dtoa_r+0x68a>
 8009a8a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009a8e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8009a92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f2c0 815a 	blt.w	8009d4e <_dtoa_r+0x6fe>
 8009a9a:	2f0e      	cmp	r7, #14
 8009a9c:	f300 8157 	bgt.w	8009d4e <_dtoa_r+0x6fe>
 8009aa0:	4b5a      	ldr	r3, [pc, #360]	@ (8009c0c <_dtoa_r+0x5bc>)
 8009aa2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009aa6:	ed93 7b00 	vldr	d7, [r3]
 8009aaa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009aac:	2b00      	cmp	r3, #0
 8009aae:	ed8d 7b00 	vstr	d7, [sp]
 8009ab2:	da03      	bge.n	8009abc <_dtoa_r+0x46c>
 8009ab4:	9b07      	ldr	r3, [sp, #28]
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	f340 8101 	ble.w	8009cbe <_dtoa_r+0x66e>
 8009abc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8009ac0:	4656      	mov	r6, sl
 8009ac2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ac6:	4620      	mov	r0, r4
 8009ac8:	4629      	mov	r1, r5
 8009aca:	f7f7 f807 	bl	8000adc <__aeabi_ddiv>
 8009ace:	f7f7 f98b 	bl	8000de8 <__aeabi_d2iz>
 8009ad2:	4680      	mov	r8, r0
 8009ad4:	f7f6 fe6e 	bl	80007b4 <__aeabi_i2d>
 8009ad8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009adc:	f7f6 fed4 	bl	8000888 <__aeabi_dmul>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4620      	mov	r0, r4
 8009ae6:	4629      	mov	r1, r5
 8009ae8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009aec:	f7f6 fd14 	bl	8000518 <__aeabi_dsub>
 8009af0:	f806 4b01 	strb.w	r4, [r6], #1
 8009af4:	9d07      	ldr	r5, [sp, #28]
 8009af6:	eba6 040a 	sub.w	r4, r6, sl
 8009afa:	42a5      	cmp	r5, r4
 8009afc:	4602      	mov	r2, r0
 8009afe:	460b      	mov	r3, r1
 8009b00:	f040 8117 	bne.w	8009d32 <_dtoa_r+0x6e2>
 8009b04:	f7f6 fd0a 	bl	800051c <__adddf3>
 8009b08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b0c:	4604      	mov	r4, r0
 8009b0e:	460d      	mov	r5, r1
 8009b10:	f7f7 f94a 	bl	8000da8 <__aeabi_dcmpgt>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	f040 80f9 	bne.w	8009d0c <_dtoa_r+0x6bc>
 8009b1a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b1e:	4620      	mov	r0, r4
 8009b20:	4629      	mov	r1, r5
 8009b22:	f7f7 f919 	bl	8000d58 <__aeabi_dcmpeq>
 8009b26:	b118      	cbz	r0, 8009b30 <_dtoa_r+0x4e0>
 8009b28:	f018 0f01 	tst.w	r8, #1
 8009b2c:	f040 80ee 	bne.w	8009d0c <_dtoa_r+0x6bc>
 8009b30:	4649      	mov	r1, r9
 8009b32:	4658      	mov	r0, fp
 8009b34:	f000 fc90 	bl	800a458 <_Bfree>
 8009b38:	2300      	movs	r3, #0
 8009b3a:	7033      	strb	r3, [r6, #0]
 8009b3c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009b3e:	3701      	adds	r7, #1
 8009b40:	601f      	str	r7, [r3, #0]
 8009b42:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	f000 831d 	beq.w	800a184 <_dtoa_r+0xb34>
 8009b4a:	601e      	str	r6, [r3, #0]
 8009b4c:	e31a      	b.n	800a184 <_dtoa_r+0xb34>
 8009b4e:	07e2      	lsls	r2, r4, #31
 8009b50:	d505      	bpl.n	8009b5e <_dtoa_r+0x50e>
 8009b52:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b56:	f7f6 fe97 	bl	8000888 <__aeabi_dmul>
 8009b5a:	3601      	adds	r6, #1
 8009b5c:	2301      	movs	r3, #1
 8009b5e:	1064      	asrs	r4, r4, #1
 8009b60:	3508      	adds	r5, #8
 8009b62:	e73f      	b.n	80099e4 <_dtoa_r+0x394>
 8009b64:	2602      	movs	r6, #2
 8009b66:	e742      	b.n	80099ee <_dtoa_r+0x39e>
 8009b68:	9c07      	ldr	r4, [sp, #28]
 8009b6a:	9704      	str	r7, [sp, #16]
 8009b6c:	e761      	b.n	8009a32 <_dtoa_r+0x3e2>
 8009b6e:	4b27      	ldr	r3, [pc, #156]	@ (8009c0c <_dtoa_r+0x5bc>)
 8009b70:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009b72:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009b76:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b7a:	4454      	add	r4, sl
 8009b7c:	2900      	cmp	r1, #0
 8009b7e:	d053      	beq.n	8009c28 <_dtoa_r+0x5d8>
 8009b80:	4928      	ldr	r1, [pc, #160]	@ (8009c24 <_dtoa_r+0x5d4>)
 8009b82:	2000      	movs	r0, #0
 8009b84:	f7f6 ffaa 	bl	8000adc <__aeabi_ddiv>
 8009b88:	4633      	mov	r3, r6
 8009b8a:	462a      	mov	r2, r5
 8009b8c:	f7f6 fcc4 	bl	8000518 <__aeabi_dsub>
 8009b90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009b94:	4656      	mov	r6, sl
 8009b96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009b9a:	f7f7 f925 	bl	8000de8 <__aeabi_d2iz>
 8009b9e:	4605      	mov	r5, r0
 8009ba0:	f7f6 fe08 	bl	80007b4 <__aeabi_i2d>
 8009ba4:	4602      	mov	r2, r0
 8009ba6:	460b      	mov	r3, r1
 8009ba8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009bac:	f7f6 fcb4 	bl	8000518 <__aeabi_dsub>
 8009bb0:	3530      	adds	r5, #48	@ 0x30
 8009bb2:	4602      	mov	r2, r0
 8009bb4:	460b      	mov	r3, r1
 8009bb6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009bba:	f806 5b01 	strb.w	r5, [r6], #1
 8009bbe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bc2:	f7f7 f8d3 	bl	8000d6c <__aeabi_dcmplt>
 8009bc6:	2800      	cmp	r0, #0
 8009bc8:	d171      	bne.n	8009cae <_dtoa_r+0x65e>
 8009bca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009bce:	4911      	ldr	r1, [pc, #68]	@ (8009c14 <_dtoa_r+0x5c4>)
 8009bd0:	2000      	movs	r0, #0
 8009bd2:	f7f6 fca1 	bl	8000518 <__aeabi_dsub>
 8009bd6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009bda:	f7f7 f8c7 	bl	8000d6c <__aeabi_dcmplt>
 8009bde:	2800      	cmp	r0, #0
 8009be0:	f040 8095 	bne.w	8009d0e <_dtoa_r+0x6be>
 8009be4:	42a6      	cmp	r6, r4
 8009be6:	f43f af50 	beq.w	8009a8a <_dtoa_r+0x43a>
 8009bea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009bee:	4b0a      	ldr	r3, [pc, #40]	@ (8009c18 <_dtoa_r+0x5c8>)
 8009bf0:	2200      	movs	r2, #0
 8009bf2:	f7f6 fe49 	bl	8000888 <__aeabi_dmul>
 8009bf6:	4b08      	ldr	r3, [pc, #32]	@ (8009c18 <_dtoa_r+0x5c8>)
 8009bf8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c02:	f7f6 fe41 	bl	8000888 <__aeabi_dmul>
 8009c06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c0a:	e7c4      	b.n	8009b96 <_dtoa_r+0x546>
 8009c0c:	0800ce08 	.word	0x0800ce08
 8009c10:	0800cde0 	.word	0x0800cde0
 8009c14:	3ff00000 	.word	0x3ff00000
 8009c18:	40240000 	.word	0x40240000
 8009c1c:	401c0000 	.word	0x401c0000
 8009c20:	40140000 	.word	0x40140000
 8009c24:	3fe00000 	.word	0x3fe00000
 8009c28:	4631      	mov	r1, r6
 8009c2a:	4628      	mov	r0, r5
 8009c2c:	f7f6 fe2c 	bl	8000888 <__aeabi_dmul>
 8009c30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8009c34:	9415      	str	r4, [sp, #84]	@ 0x54
 8009c36:	4656      	mov	r6, sl
 8009c38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c3c:	f7f7 f8d4 	bl	8000de8 <__aeabi_d2iz>
 8009c40:	4605      	mov	r5, r0
 8009c42:	f7f6 fdb7 	bl	80007b4 <__aeabi_i2d>
 8009c46:	4602      	mov	r2, r0
 8009c48:	460b      	mov	r3, r1
 8009c4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c4e:	f7f6 fc63 	bl	8000518 <__aeabi_dsub>
 8009c52:	3530      	adds	r5, #48	@ 0x30
 8009c54:	f806 5b01 	strb.w	r5, [r6], #1
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	42a6      	cmp	r6, r4
 8009c5e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009c62:	f04f 0200 	mov.w	r2, #0
 8009c66:	d124      	bne.n	8009cb2 <_dtoa_r+0x662>
 8009c68:	4bac      	ldr	r3, [pc, #688]	@ (8009f1c <_dtoa_r+0x8cc>)
 8009c6a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009c6e:	f7f6 fc55 	bl	800051c <__adddf3>
 8009c72:	4602      	mov	r2, r0
 8009c74:	460b      	mov	r3, r1
 8009c76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c7a:	f7f7 f895 	bl	8000da8 <__aeabi_dcmpgt>
 8009c7e:	2800      	cmp	r0, #0
 8009c80:	d145      	bne.n	8009d0e <_dtoa_r+0x6be>
 8009c82:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8009c86:	49a5      	ldr	r1, [pc, #660]	@ (8009f1c <_dtoa_r+0x8cc>)
 8009c88:	2000      	movs	r0, #0
 8009c8a:	f7f6 fc45 	bl	8000518 <__aeabi_dsub>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009c96:	f7f7 f869 	bl	8000d6c <__aeabi_dcmplt>
 8009c9a:	2800      	cmp	r0, #0
 8009c9c:	f43f aef5 	beq.w	8009a8a <_dtoa_r+0x43a>
 8009ca0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8009ca2:	1e73      	subs	r3, r6, #1
 8009ca4:	9315      	str	r3, [sp, #84]	@ 0x54
 8009ca6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009caa:	2b30      	cmp	r3, #48	@ 0x30
 8009cac:	d0f8      	beq.n	8009ca0 <_dtoa_r+0x650>
 8009cae:	9f04      	ldr	r7, [sp, #16]
 8009cb0:	e73e      	b.n	8009b30 <_dtoa_r+0x4e0>
 8009cb2:	4b9b      	ldr	r3, [pc, #620]	@ (8009f20 <_dtoa_r+0x8d0>)
 8009cb4:	f7f6 fde8 	bl	8000888 <__aeabi_dmul>
 8009cb8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009cbc:	e7bc      	b.n	8009c38 <_dtoa_r+0x5e8>
 8009cbe:	d10c      	bne.n	8009cda <_dtoa_r+0x68a>
 8009cc0:	4b98      	ldr	r3, [pc, #608]	@ (8009f24 <_dtoa_r+0x8d4>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009cc8:	f7f6 fdde 	bl	8000888 <__aeabi_dmul>
 8009ccc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009cd0:	f7f7 f860 	bl	8000d94 <__aeabi_dcmpge>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	f000 8157 	beq.w	8009f88 <_dtoa_r+0x938>
 8009cda:	2400      	movs	r4, #0
 8009cdc:	4625      	mov	r5, r4
 8009cde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009ce0:	43db      	mvns	r3, r3
 8009ce2:	9304      	str	r3, [sp, #16]
 8009ce4:	4656      	mov	r6, sl
 8009ce6:	2700      	movs	r7, #0
 8009ce8:	4621      	mov	r1, r4
 8009cea:	4658      	mov	r0, fp
 8009cec:	f000 fbb4 	bl	800a458 <_Bfree>
 8009cf0:	2d00      	cmp	r5, #0
 8009cf2:	d0dc      	beq.n	8009cae <_dtoa_r+0x65e>
 8009cf4:	b12f      	cbz	r7, 8009d02 <_dtoa_r+0x6b2>
 8009cf6:	42af      	cmp	r7, r5
 8009cf8:	d003      	beq.n	8009d02 <_dtoa_r+0x6b2>
 8009cfa:	4639      	mov	r1, r7
 8009cfc:	4658      	mov	r0, fp
 8009cfe:	f000 fbab 	bl	800a458 <_Bfree>
 8009d02:	4629      	mov	r1, r5
 8009d04:	4658      	mov	r0, fp
 8009d06:	f000 fba7 	bl	800a458 <_Bfree>
 8009d0a:	e7d0      	b.n	8009cae <_dtoa_r+0x65e>
 8009d0c:	9704      	str	r7, [sp, #16]
 8009d0e:	4633      	mov	r3, r6
 8009d10:	461e      	mov	r6, r3
 8009d12:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d16:	2a39      	cmp	r2, #57	@ 0x39
 8009d18:	d107      	bne.n	8009d2a <_dtoa_r+0x6da>
 8009d1a:	459a      	cmp	sl, r3
 8009d1c:	d1f8      	bne.n	8009d10 <_dtoa_r+0x6c0>
 8009d1e:	9a04      	ldr	r2, [sp, #16]
 8009d20:	3201      	adds	r2, #1
 8009d22:	9204      	str	r2, [sp, #16]
 8009d24:	2230      	movs	r2, #48	@ 0x30
 8009d26:	f88a 2000 	strb.w	r2, [sl]
 8009d2a:	781a      	ldrb	r2, [r3, #0]
 8009d2c:	3201      	adds	r2, #1
 8009d2e:	701a      	strb	r2, [r3, #0]
 8009d30:	e7bd      	b.n	8009cae <_dtoa_r+0x65e>
 8009d32:	4b7b      	ldr	r3, [pc, #492]	@ (8009f20 <_dtoa_r+0x8d0>)
 8009d34:	2200      	movs	r2, #0
 8009d36:	f7f6 fda7 	bl	8000888 <__aeabi_dmul>
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	4604      	mov	r4, r0
 8009d40:	460d      	mov	r5, r1
 8009d42:	f7f7 f809 	bl	8000d58 <__aeabi_dcmpeq>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	f43f aebb 	beq.w	8009ac2 <_dtoa_r+0x472>
 8009d4c:	e6f0      	b.n	8009b30 <_dtoa_r+0x4e0>
 8009d4e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009d50:	2a00      	cmp	r2, #0
 8009d52:	f000 80db 	beq.w	8009f0c <_dtoa_r+0x8bc>
 8009d56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009d58:	2a01      	cmp	r2, #1
 8009d5a:	f300 80bf 	bgt.w	8009edc <_dtoa_r+0x88c>
 8009d5e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009d60:	2a00      	cmp	r2, #0
 8009d62:	f000 80b7 	beq.w	8009ed4 <_dtoa_r+0x884>
 8009d66:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009d6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009d6c:	4646      	mov	r6, r8
 8009d6e:	9a08      	ldr	r2, [sp, #32]
 8009d70:	2101      	movs	r1, #1
 8009d72:	441a      	add	r2, r3
 8009d74:	4658      	mov	r0, fp
 8009d76:	4498      	add	r8, r3
 8009d78:	9208      	str	r2, [sp, #32]
 8009d7a:	f000 fc6b 	bl	800a654 <__i2b>
 8009d7e:	4605      	mov	r5, r0
 8009d80:	b15e      	cbz	r6, 8009d9a <_dtoa_r+0x74a>
 8009d82:	9b08      	ldr	r3, [sp, #32]
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	dd08      	ble.n	8009d9a <_dtoa_r+0x74a>
 8009d88:	42b3      	cmp	r3, r6
 8009d8a:	9a08      	ldr	r2, [sp, #32]
 8009d8c:	bfa8      	it	ge
 8009d8e:	4633      	movge	r3, r6
 8009d90:	eba8 0803 	sub.w	r8, r8, r3
 8009d94:	1af6      	subs	r6, r6, r3
 8009d96:	1ad3      	subs	r3, r2, r3
 8009d98:	9308      	str	r3, [sp, #32]
 8009d9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d9c:	b1f3      	cbz	r3, 8009ddc <_dtoa_r+0x78c>
 8009d9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f000 80b7 	beq.w	8009f14 <_dtoa_r+0x8c4>
 8009da6:	b18c      	cbz	r4, 8009dcc <_dtoa_r+0x77c>
 8009da8:	4629      	mov	r1, r5
 8009daa:	4622      	mov	r2, r4
 8009dac:	4658      	mov	r0, fp
 8009dae:	f000 fd11 	bl	800a7d4 <__pow5mult>
 8009db2:	464a      	mov	r2, r9
 8009db4:	4601      	mov	r1, r0
 8009db6:	4605      	mov	r5, r0
 8009db8:	4658      	mov	r0, fp
 8009dba:	f000 fc61 	bl	800a680 <__multiply>
 8009dbe:	4649      	mov	r1, r9
 8009dc0:	9004      	str	r0, [sp, #16]
 8009dc2:	4658      	mov	r0, fp
 8009dc4:	f000 fb48 	bl	800a458 <_Bfree>
 8009dc8:	9b04      	ldr	r3, [sp, #16]
 8009dca:	4699      	mov	r9, r3
 8009dcc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009dce:	1b1a      	subs	r2, r3, r4
 8009dd0:	d004      	beq.n	8009ddc <_dtoa_r+0x78c>
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	4658      	mov	r0, fp
 8009dd6:	f000 fcfd 	bl	800a7d4 <__pow5mult>
 8009dda:	4681      	mov	r9, r0
 8009ddc:	2101      	movs	r1, #1
 8009dde:	4658      	mov	r0, fp
 8009de0:	f000 fc38 	bl	800a654 <__i2b>
 8009de4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009de6:	4604      	mov	r4, r0
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	f000 81cf 	beq.w	800a18c <_dtoa_r+0xb3c>
 8009dee:	461a      	mov	r2, r3
 8009df0:	4601      	mov	r1, r0
 8009df2:	4658      	mov	r0, fp
 8009df4:	f000 fcee 	bl	800a7d4 <__pow5mult>
 8009df8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dfa:	2b01      	cmp	r3, #1
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	f300 8095 	bgt.w	8009f2c <_dtoa_r+0x8dc>
 8009e02:	9b02      	ldr	r3, [sp, #8]
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	f040 8087 	bne.w	8009f18 <_dtoa_r+0x8c8>
 8009e0a:	9b03      	ldr	r3, [sp, #12]
 8009e0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	f040 8089 	bne.w	8009f28 <_dtoa_r+0x8d8>
 8009e16:	9b03      	ldr	r3, [sp, #12]
 8009e18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009e1c:	0d1b      	lsrs	r3, r3, #20
 8009e1e:	051b      	lsls	r3, r3, #20
 8009e20:	b12b      	cbz	r3, 8009e2e <_dtoa_r+0x7de>
 8009e22:	9b08      	ldr	r3, [sp, #32]
 8009e24:	3301      	adds	r3, #1
 8009e26:	9308      	str	r3, [sp, #32]
 8009e28:	f108 0801 	add.w	r8, r8, #1
 8009e2c:	2301      	movs	r3, #1
 8009e2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009e30:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009e32:	2b00      	cmp	r3, #0
 8009e34:	f000 81b0 	beq.w	800a198 <_dtoa_r+0xb48>
 8009e38:	6923      	ldr	r3, [r4, #16]
 8009e3a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009e3e:	6918      	ldr	r0, [r3, #16]
 8009e40:	f000 fbbc 	bl	800a5bc <__hi0bits>
 8009e44:	f1c0 0020 	rsb	r0, r0, #32
 8009e48:	9b08      	ldr	r3, [sp, #32]
 8009e4a:	4418      	add	r0, r3
 8009e4c:	f010 001f 	ands.w	r0, r0, #31
 8009e50:	d077      	beq.n	8009f42 <_dtoa_r+0x8f2>
 8009e52:	f1c0 0320 	rsb	r3, r0, #32
 8009e56:	2b04      	cmp	r3, #4
 8009e58:	dd6b      	ble.n	8009f32 <_dtoa_r+0x8e2>
 8009e5a:	9b08      	ldr	r3, [sp, #32]
 8009e5c:	f1c0 001c 	rsb	r0, r0, #28
 8009e60:	4403      	add	r3, r0
 8009e62:	4480      	add	r8, r0
 8009e64:	4406      	add	r6, r0
 8009e66:	9308      	str	r3, [sp, #32]
 8009e68:	f1b8 0f00 	cmp.w	r8, #0
 8009e6c:	dd05      	ble.n	8009e7a <_dtoa_r+0x82a>
 8009e6e:	4649      	mov	r1, r9
 8009e70:	4642      	mov	r2, r8
 8009e72:	4658      	mov	r0, fp
 8009e74:	f000 fd08 	bl	800a888 <__lshift>
 8009e78:	4681      	mov	r9, r0
 8009e7a:	9b08      	ldr	r3, [sp, #32]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	dd05      	ble.n	8009e8c <_dtoa_r+0x83c>
 8009e80:	4621      	mov	r1, r4
 8009e82:	461a      	mov	r2, r3
 8009e84:	4658      	mov	r0, fp
 8009e86:	f000 fcff 	bl	800a888 <__lshift>
 8009e8a:	4604      	mov	r4, r0
 8009e8c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d059      	beq.n	8009f46 <_dtoa_r+0x8f6>
 8009e92:	4621      	mov	r1, r4
 8009e94:	4648      	mov	r0, r9
 8009e96:	f000 fd63 	bl	800a960 <__mcmp>
 8009e9a:	2800      	cmp	r0, #0
 8009e9c:	da53      	bge.n	8009f46 <_dtoa_r+0x8f6>
 8009e9e:	1e7b      	subs	r3, r7, #1
 8009ea0:	9304      	str	r3, [sp, #16]
 8009ea2:	4649      	mov	r1, r9
 8009ea4:	2300      	movs	r3, #0
 8009ea6:	220a      	movs	r2, #10
 8009ea8:	4658      	mov	r0, fp
 8009eaa:	f000 faf7 	bl	800a49c <__multadd>
 8009eae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009eb0:	4681      	mov	r9, r0
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f000 8172 	beq.w	800a19c <_dtoa_r+0xb4c>
 8009eb8:	2300      	movs	r3, #0
 8009eba:	4629      	mov	r1, r5
 8009ebc:	220a      	movs	r2, #10
 8009ebe:	4658      	mov	r0, fp
 8009ec0:	f000 faec 	bl	800a49c <__multadd>
 8009ec4:	9b00      	ldr	r3, [sp, #0]
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	4605      	mov	r5, r0
 8009eca:	dc67      	bgt.n	8009f9c <_dtoa_r+0x94c>
 8009ecc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ece:	2b02      	cmp	r3, #2
 8009ed0:	dc41      	bgt.n	8009f56 <_dtoa_r+0x906>
 8009ed2:	e063      	b.n	8009f9c <_dtoa_r+0x94c>
 8009ed4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8009ed6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009eda:	e746      	b.n	8009d6a <_dtoa_r+0x71a>
 8009edc:	9b07      	ldr	r3, [sp, #28]
 8009ede:	1e5c      	subs	r4, r3, #1
 8009ee0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ee2:	42a3      	cmp	r3, r4
 8009ee4:	bfbf      	itttt	lt
 8009ee6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8009ee8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8009eea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8009eec:	1ae3      	sublt	r3, r4, r3
 8009eee:	bfb4      	ite	lt
 8009ef0:	18d2      	addlt	r2, r2, r3
 8009ef2:	1b1c      	subge	r4, r3, r4
 8009ef4:	9b07      	ldr	r3, [sp, #28]
 8009ef6:	bfbc      	itt	lt
 8009ef8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8009efa:	2400      	movlt	r4, #0
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	bfb5      	itete	lt
 8009f00:	eba8 0603 	sublt.w	r6, r8, r3
 8009f04:	9b07      	ldrge	r3, [sp, #28]
 8009f06:	2300      	movlt	r3, #0
 8009f08:	4646      	movge	r6, r8
 8009f0a:	e730      	b.n	8009d6e <_dtoa_r+0x71e>
 8009f0c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009f0e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8009f10:	4646      	mov	r6, r8
 8009f12:	e735      	b.n	8009d80 <_dtoa_r+0x730>
 8009f14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009f16:	e75c      	b.n	8009dd2 <_dtoa_r+0x782>
 8009f18:	2300      	movs	r3, #0
 8009f1a:	e788      	b.n	8009e2e <_dtoa_r+0x7de>
 8009f1c:	3fe00000 	.word	0x3fe00000
 8009f20:	40240000 	.word	0x40240000
 8009f24:	40140000 	.word	0x40140000
 8009f28:	9b02      	ldr	r3, [sp, #8]
 8009f2a:	e780      	b.n	8009e2e <_dtoa_r+0x7de>
 8009f2c:	2300      	movs	r3, #0
 8009f2e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009f30:	e782      	b.n	8009e38 <_dtoa_r+0x7e8>
 8009f32:	d099      	beq.n	8009e68 <_dtoa_r+0x818>
 8009f34:	9a08      	ldr	r2, [sp, #32]
 8009f36:	331c      	adds	r3, #28
 8009f38:	441a      	add	r2, r3
 8009f3a:	4498      	add	r8, r3
 8009f3c:	441e      	add	r6, r3
 8009f3e:	9208      	str	r2, [sp, #32]
 8009f40:	e792      	b.n	8009e68 <_dtoa_r+0x818>
 8009f42:	4603      	mov	r3, r0
 8009f44:	e7f6      	b.n	8009f34 <_dtoa_r+0x8e4>
 8009f46:	9b07      	ldr	r3, [sp, #28]
 8009f48:	9704      	str	r7, [sp, #16]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	dc20      	bgt.n	8009f90 <_dtoa_r+0x940>
 8009f4e:	9300      	str	r3, [sp, #0]
 8009f50:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f52:	2b02      	cmp	r3, #2
 8009f54:	dd1e      	ble.n	8009f94 <_dtoa_r+0x944>
 8009f56:	9b00      	ldr	r3, [sp, #0]
 8009f58:	2b00      	cmp	r3, #0
 8009f5a:	f47f aec0 	bne.w	8009cde <_dtoa_r+0x68e>
 8009f5e:	4621      	mov	r1, r4
 8009f60:	2205      	movs	r2, #5
 8009f62:	4658      	mov	r0, fp
 8009f64:	f000 fa9a 	bl	800a49c <__multadd>
 8009f68:	4601      	mov	r1, r0
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	4648      	mov	r0, r9
 8009f6e:	f000 fcf7 	bl	800a960 <__mcmp>
 8009f72:	2800      	cmp	r0, #0
 8009f74:	f77f aeb3 	ble.w	8009cde <_dtoa_r+0x68e>
 8009f78:	4656      	mov	r6, sl
 8009f7a:	2331      	movs	r3, #49	@ 0x31
 8009f7c:	f806 3b01 	strb.w	r3, [r6], #1
 8009f80:	9b04      	ldr	r3, [sp, #16]
 8009f82:	3301      	adds	r3, #1
 8009f84:	9304      	str	r3, [sp, #16]
 8009f86:	e6ae      	b.n	8009ce6 <_dtoa_r+0x696>
 8009f88:	9c07      	ldr	r4, [sp, #28]
 8009f8a:	9704      	str	r7, [sp, #16]
 8009f8c:	4625      	mov	r5, r4
 8009f8e:	e7f3      	b.n	8009f78 <_dtoa_r+0x928>
 8009f90:	9b07      	ldr	r3, [sp, #28]
 8009f92:	9300      	str	r3, [sp, #0]
 8009f94:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009f96:	2b00      	cmp	r3, #0
 8009f98:	f000 8104 	beq.w	800a1a4 <_dtoa_r+0xb54>
 8009f9c:	2e00      	cmp	r6, #0
 8009f9e:	dd05      	ble.n	8009fac <_dtoa_r+0x95c>
 8009fa0:	4629      	mov	r1, r5
 8009fa2:	4632      	mov	r2, r6
 8009fa4:	4658      	mov	r0, fp
 8009fa6:	f000 fc6f 	bl	800a888 <__lshift>
 8009faa:	4605      	mov	r5, r0
 8009fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d05a      	beq.n	800a068 <_dtoa_r+0xa18>
 8009fb2:	6869      	ldr	r1, [r5, #4]
 8009fb4:	4658      	mov	r0, fp
 8009fb6:	f000 fa0f 	bl	800a3d8 <_Balloc>
 8009fba:	4606      	mov	r6, r0
 8009fbc:	b928      	cbnz	r0, 8009fca <_dtoa_r+0x97a>
 8009fbe:	4b84      	ldr	r3, [pc, #528]	@ (800a1d0 <_dtoa_r+0xb80>)
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009fc6:	f7ff bb5a 	b.w	800967e <_dtoa_r+0x2e>
 8009fca:	692a      	ldr	r2, [r5, #16]
 8009fcc:	3202      	adds	r2, #2
 8009fce:	0092      	lsls	r2, r2, #2
 8009fd0:	f105 010c 	add.w	r1, r5, #12
 8009fd4:	300c      	adds	r0, #12
 8009fd6:	f002 f94b 	bl	800c270 <memcpy>
 8009fda:	2201      	movs	r2, #1
 8009fdc:	4631      	mov	r1, r6
 8009fde:	4658      	mov	r0, fp
 8009fe0:	f000 fc52 	bl	800a888 <__lshift>
 8009fe4:	f10a 0301 	add.w	r3, sl, #1
 8009fe8:	9307      	str	r3, [sp, #28]
 8009fea:	9b00      	ldr	r3, [sp, #0]
 8009fec:	4453      	add	r3, sl
 8009fee:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009ff0:	9b02      	ldr	r3, [sp, #8]
 8009ff2:	f003 0301 	and.w	r3, r3, #1
 8009ff6:	462f      	mov	r7, r5
 8009ff8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009ffa:	4605      	mov	r5, r0
 8009ffc:	9b07      	ldr	r3, [sp, #28]
 8009ffe:	4621      	mov	r1, r4
 800a000:	3b01      	subs	r3, #1
 800a002:	4648      	mov	r0, r9
 800a004:	9300      	str	r3, [sp, #0]
 800a006:	f7ff fa99 	bl	800953c <quorem>
 800a00a:	4639      	mov	r1, r7
 800a00c:	9002      	str	r0, [sp, #8]
 800a00e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a012:	4648      	mov	r0, r9
 800a014:	f000 fca4 	bl	800a960 <__mcmp>
 800a018:	462a      	mov	r2, r5
 800a01a:	9008      	str	r0, [sp, #32]
 800a01c:	4621      	mov	r1, r4
 800a01e:	4658      	mov	r0, fp
 800a020:	f000 fcba 	bl	800a998 <__mdiff>
 800a024:	68c2      	ldr	r2, [r0, #12]
 800a026:	4606      	mov	r6, r0
 800a028:	bb02      	cbnz	r2, 800a06c <_dtoa_r+0xa1c>
 800a02a:	4601      	mov	r1, r0
 800a02c:	4648      	mov	r0, r9
 800a02e:	f000 fc97 	bl	800a960 <__mcmp>
 800a032:	4602      	mov	r2, r0
 800a034:	4631      	mov	r1, r6
 800a036:	4658      	mov	r0, fp
 800a038:	920e      	str	r2, [sp, #56]	@ 0x38
 800a03a:	f000 fa0d 	bl	800a458 <_Bfree>
 800a03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a040:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a042:	9e07      	ldr	r6, [sp, #28]
 800a044:	ea43 0102 	orr.w	r1, r3, r2
 800a048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a04a:	4319      	orrs	r1, r3
 800a04c:	d110      	bne.n	800a070 <_dtoa_r+0xa20>
 800a04e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a052:	d029      	beq.n	800a0a8 <_dtoa_r+0xa58>
 800a054:	9b08      	ldr	r3, [sp, #32]
 800a056:	2b00      	cmp	r3, #0
 800a058:	dd02      	ble.n	800a060 <_dtoa_r+0xa10>
 800a05a:	9b02      	ldr	r3, [sp, #8]
 800a05c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800a060:	9b00      	ldr	r3, [sp, #0]
 800a062:	f883 8000 	strb.w	r8, [r3]
 800a066:	e63f      	b.n	8009ce8 <_dtoa_r+0x698>
 800a068:	4628      	mov	r0, r5
 800a06a:	e7bb      	b.n	8009fe4 <_dtoa_r+0x994>
 800a06c:	2201      	movs	r2, #1
 800a06e:	e7e1      	b.n	800a034 <_dtoa_r+0x9e4>
 800a070:	9b08      	ldr	r3, [sp, #32]
 800a072:	2b00      	cmp	r3, #0
 800a074:	db04      	blt.n	800a080 <_dtoa_r+0xa30>
 800a076:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800a078:	430b      	orrs	r3, r1
 800a07a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800a07c:	430b      	orrs	r3, r1
 800a07e:	d120      	bne.n	800a0c2 <_dtoa_r+0xa72>
 800a080:	2a00      	cmp	r2, #0
 800a082:	dded      	ble.n	800a060 <_dtoa_r+0xa10>
 800a084:	4649      	mov	r1, r9
 800a086:	2201      	movs	r2, #1
 800a088:	4658      	mov	r0, fp
 800a08a:	f000 fbfd 	bl	800a888 <__lshift>
 800a08e:	4621      	mov	r1, r4
 800a090:	4681      	mov	r9, r0
 800a092:	f000 fc65 	bl	800a960 <__mcmp>
 800a096:	2800      	cmp	r0, #0
 800a098:	dc03      	bgt.n	800a0a2 <_dtoa_r+0xa52>
 800a09a:	d1e1      	bne.n	800a060 <_dtoa_r+0xa10>
 800a09c:	f018 0f01 	tst.w	r8, #1
 800a0a0:	d0de      	beq.n	800a060 <_dtoa_r+0xa10>
 800a0a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0a6:	d1d8      	bne.n	800a05a <_dtoa_r+0xa0a>
 800a0a8:	9a00      	ldr	r2, [sp, #0]
 800a0aa:	2339      	movs	r3, #57	@ 0x39
 800a0ac:	7013      	strb	r3, [r2, #0]
 800a0ae:	4633      	mov	r3, r6
 800a0b0:	461e      	mov	r6, r3
 800a0b2:	3b01      	subs	r3, #1
 800a0b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a0b8:	2a39      	cmp	r2, #57	@ 0x39
 800a0ba:	d052      	beq.n	800a162 <_dtoa_r+0xb12>
 800a0bc:	3201      	adds	r2, #1
 800a0be:	701a      	strb	r2, [r3, #0]
 800a0c0:	e612      	b.n	8009ce8 <_dtoa_r+0x698>
 800a0c2:	2a00      	cmp	r2, #0
 800a0c4:	dd07      	ble.n	800a0d6 <_dtoa_r+0xa86>
 800a0c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800a0ca:	d0ed      	beq.n	800a0a8 <_dtoa_r+0xa58>
 800a0cc:	9a00      	ldr	r2, [sp, #0]
 800a0ce:	f108 0301 	add.w	r3, r8, #1
 800a0d2:	7013      	strb	r3, [r2, #0]
 800a0d4:	e608      	b.n	8009ce8 <_dtoa_r+0x698>
 800a0d6:	9b07      	ldr	r3, [sp, #28]
 800a0d8:	9a07      	ldr	r2, [sp, #28]
 800a0da:	f803 8c01 	strb.w	r8, [r3, #-1]
 800a0de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a0e0:	4293      	cmp	r3, r2
 800a0e2:	d028      	beq.n	800a136 <_dtoa_r+0xae6>
 800a0e4:	4649      	mov	r1, r9
 800a0e6:	2300      	movs	r3, #0
 800a0e8:	220a      	movs	r2, #10
 800a0ea:	4658      	mov	r0, fp
 800a0ec:	f000 f9d6 	bl	800a49c <__multadd>
 800a0f0:	42af      	cmp	r7, r5
 800a0f2:	4681      	mov	r9, r0
 800a0f4:	f04f 0300 	mov.w	r3, #0
 800a0f8:	f04f 020a 	mov.w	r2, #10
 800a0fc:	4639      	mov	r1, r7
 800a0fe:	4658      	mov	r0, fp
 800a100:	d107      	bne.n	800a112 <_dtoa_r+0xac2>
 800a102:	f000 f9cb 	bl	800a49c <__multadd>
 800a106:	4607      	mov	r7, r0
 800a108:	4605      	mov	r5, r0
 800a10a:	9b07      	ldr	r3, [sp, #28]
 800a10c:	3301      	adds	r3, #1
 800a10e:	9307      	str	r3, [sp, #28]
 800a110:	e774      	b.n	8009ffc <_dtoa_r+0x9ac>
 800a112:	f000 f9c3 	bl	800a49c <__multadd>
 800a116:	4629      	mov	r1, r5
 800a118:	4607      	mov	r7, r0
 800a11a:	2300      	movs	r3, #0
 800a11c:	220a      	movs	r2, #10
 800a11e:	4658      	mov	r0, fp
 800a120:	f000 f9bc 	bl	800a49c <__multadd>
 800a124:	4605      	mov	r5, r0
 800a126:	e7f0      	b.n	800a10a <_dtoa_r+0xaba>
 800a128:	9b00      	ldr	r3, [sp, #0]
 800a12a:	2b00      	cmp	r3, #0
 800a12c:	bfcc      	ite	gt
 800a12e:	461e      	movgt	r6, r3
 800a130:	2601      	movle	r6, #1
 800a132:	4456      	add	r6, sl
 800a134:	2700      	movs	r7, #0
 800a136:	4649      	mov	r1, r9
 800a138:	2201      	movs	r2, #1
 800a13a:	4658      	mov	r0, fp
 800a13c:	f000 fba4 	bl	800a888 <__lshift>
 800a140:	4621      	mov	r1, r4
 800a142:	4681      	mov	r9, r0
 800a144:	f000 fc0c 	bl	800a960 <__mcmp>
 800a148:	2800      	cmp	r0, #0
 800a14a:	dcb0      	bgt.n	800a0ae <_dtoa_r+0xa5e>
 800a14c:	d102      	bne.n	800a154 <_dtoa_r+0xb04>
 800a14e:	f018 0f01 	tst.w	r8, #1
 800a152:	d1ac      	bne.n	800a0ae <_dtoa_r+0xa5e>
 800a154:	4633      	mov	r3, r6
 800a156:	461e      	mov	r6, r3
 800a158:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a15c:	2a30      	cmp	r2, #48	@ 0x30
 800a15e:	d0fa      	beq.n	800a156 <_dtoa_r+0xb06>
 800a160:	e5c2      	b.n	8009ce8 <_dtoa_r+0x698>
 800a162:	459a      	cmp	sl, r3
 800a164:	d1a4      	bne.n	800a0b0 <_dtoa_r+0xa60>
 800a166:	9b04      	ldr	r3, [sp, #16]
 800a168:	3301      	adds	r3, #1
 800a16a:	9304      	str	r3, [sp, #16]
 800a16c:	2331      	movs	r3, #49	@ 0x31
 800a16e:	f88a 3000 	strb.w	r3, [sl]
 800a172:	e5b9      	b.n	8009ce8 <_dtoa_r+0x698>
 800a174:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800a176:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800a1d4 <_dtoa_r+0xb84>
 800a17a:	b11b      	cbz	r3, 800a184 <_dtoa_r+0xb34>
 800a17c:	f10a 0308 	add.w	r3, sl, #8
 800a180:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800a182:	6013      	str	r3, [r2, #0]
 800a184:	4650      	mov	r0, sl
 800a186:	b019      	add	sp, #100	@ 0x64
 800a188:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a18c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a18e:	2b01      	cmp	r3, #1
 800a190:	f77f ae37 	ble.w	8009e02 <_dtoa_r+0x7b2>
 800a194:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a196:	930a      	str	r3, [sp, #40]	@ 0x28
 800a198:	2001      	movs	r0, #1
 800a19a:	e655      	b.n	8009e48 <_dtoa_r+0x7f8>
 800a19c:	9b00      	ldr	r3, [sp, #0]
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f77f aed6 	ble.w	8009f50 <_dtoa_r+0x900>
 800a1a4:	4656      	mov	r6, sl
 800a1a6:	4621      	mov	r1, r4
 800a1a8:	4648      	mov	r0, r9
 800a1aa:	f7ff f9c7 	bl	800953c <quorem>
 800a1ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800a1b2:	f806 8b01 	strb.w	r8, [r6], #1
 800a1b6:	9b00      	ldr	r3, [sp, #0]
 800a1b8:	eba6 020a 	sub.w	r2, r6, sl
 800a1bc:	4293      	cmp	r3, r2
 800a1be:	ddb3      	ble.n	800a128 <_dtoa_r+0xad8>
 800a1c0:	4649      	mov	r1, r9
 800a1c2:	2300      	movs	r3, #0
 800a1c4:	220a      	movs	r2, #10
 800a1c6:	4658      	mov	r0, fp
 800a1c8:	f000 f968 	bl	800a49c <__multadd>
 800a1cc:	4681      	mov	r9, r0
 800a1ce:	e7ea      	b.n	800a1a6 <_dtoa_r+0xb56>
 800a1d0:	0800cd69 	.word	0x0800cd69
 800a1d4:	0800cced 	.word	0x0800cced

0800a1d8 <_free_r>:
 800a1d8:	b538      	push	{r3, r4, r5, lr}
 800a1da:	4605      	mov	r5, r0
 800a1dc:	2900      	cmp	r1, #0
 800a1de:	d041      	beq.n	800a264 <_free_r+0x8c>
 800a1e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a1e4:	1f0c      	subs	r4, r1, #4
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	bfb8      	it	lt
 800a1ea:	18e4      	addlt	r4, r4, r3
 800a1ec:	f000 f8e8 	bl	800a3c0 <__malloc_lock>
 800a1f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a268 <_free_r+0x90>)
 800a1f2:	6813      	ldr	r3, [r2, #0]
 800a1f4:	b933      	cbnz	r3, 800a204 <_free_r+0x2c>
 800a1f6:	6063      	str	r3, [r4, #4]
 800a1f8:	6014      	str	r4, [r2, #0]
 800a1fa:	4628      	mov	r0, r5
 800a1fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a200:	f000 b8e4 	b.w	800a3cc <__malloc_unlock>
 800a204:	42a3      	cmp	r3, r4
 800a206:	d908      	bls.n	800a21a <_free_r+0x42>
 800a208:	6820      	ldr	r0, [r4, #0]
 800a20a:	1821      	adds	r1, r4, r0
 800a20c:	428b      	cmp	r3, r1
 800a20e:	bf01      	itttt	eq
 800a210:	6819      	ldreq	r1, [r3, #0]
 800a212:	685b      	ldreq	r3, [r3, #4]
 800a214:	1809      	addeq	r1, r1, r0
 800a216:	6021      	streq	r1, [r4, #0]
 800a218:	e7ed      	b.n	800a1f6 <_free_r+0x1e>
 800a21a:	461a      	mov	r2, r3
 800a21c:	685b      	ldr	r3, [r3, #4]
 800a21e:	b10b      	cbz	r3, 800a224 <_free_r+0x4c>
 800a220:	42a3      	cmp	r3, r4
 800a222:	d9fa      	bls.n	800a21a <_free_r+0x42>
 800a224:	6811      	ldr	r1, [r2, #0]
 800a226:	1850      	adds	r0, r2, r1
 800a228:	42a0      	cmp	r0, r4
 800a22a:	d10b      	bne.n	800a244 <_free_r+0x6c>
 800a22c:	6820      	ldr	r0, [r4, #0]
 800a22e:	4401      	add	r1, r0
 800a230:	1850      	adds	r0, r2, r1
 800a232:	4283      	cmp	r3, r0
 800a234:	6011      	str	r1, [r2, #0]
 800a236:	d1e0      	bne.n	800a1fa <_free_r+0x22>
 800a238:	6818      	ldr	r0, [r3, #0]
 800a23a:	685b      	ldr	r3, [r3, #4]
 800a23c:	6053      	str	r3, [r2, #4]
 800a23e:	4408      	add	r0, r1
 800a240:	6010      	str	r0, [r2, #0]
 800a242:	e7da      	b.n	800a1fa <_free_r+0x22>
 800a244:	d902      	bls.n	800a24c <_free_r+0x74>
 800a246:	230c      	movs	r3, #12
 800a248:	602b      	str	r3, [r5, #0]
 800a24a:	e7d6      	b.n	800a1fa <_free_r+0x22>
 800a24c:	6820      	ldr	r0, [r4, #0]
 800a24e:	1821      	adds	r1, r4, r0
 800a250:	428b      	cmp	r3, r1
 800a252:	bf04      	itt	eq
 800a254:	6819      	ldreq	r1, [r3, #0]
 800a256:	685b      	ldreq	r3, [r3, #4]
 800a258:	6063      	str	r3, [r4, #4]
 800a25a:	bf04      	itt	eq
 800a25c:	1809      	addeq	r1, r1, r0
 800a25e:	6021      	streq	r1, [r4, #0]
 800a260:	6054      	str	r4, [r2, #4]
 800a262:	e7ca      	b.n	800a1fa <_free_r+0x22>
 800a264:	bd38      	pop	{r3, r4, r5, pc}
 800a266:	bf00      	nop
 800a268:	20002940 	.word	0x20002940

0800a26c <malloc>:
 800a26c:	4b02      	ldr	r3, [pc, #8]	@ (800a278 <malloc+0xc>)
 800a26e:	4601      	mov	r1, r0
 800a270:	6818      	ldr	r0, [r3, #0]
 800a272:	f000 b825 	b.w	800a2c0 <_malloc_r>
 800a276:	bf00      	nop
 800a278:	2000001c 	.word	0x2000001c

0800a27c <sbrk_aligned>:
 800a27c:	b570      	push	{r4, r5, r6, lr}
 800a27e:	4e0f      	ldr	r6, [pc, #60]	@ (800a2bc <sbrk_aligned+0x40>)
 800a280:	460c      	mov	r4, r1
 800a282:	6831      	ldr	r1, [r6, #0]
 800a284:	4605      	mov	r5, r0
 800a286:	b911      	cbnz	r1, 800a28e <sbrk_aligned+0x12>
 800a288:	f001 ffe2 	bl	800c250 <_sbrk_r>
 800a28c:	6030      	str	r0, [r6, #0]
 800a28e:	4621      	mov	r1, r4
 800a290:	4628      	mov	r0, r5
 800a292:	f001 ffdd 	bl	800c250 <_sbrk_r>
 800a296:	1c43      	adds	r3, r0, #1
 800a298:	d103      	bne.n	800a2a2 <sbrk_aligned+0x26>
 800a29a:	f04f 34ff 	mov.w	r4, #4294967295
 800a29e:	4620      	mov	r0, r4
 800a2a0:	bd70      	pop	{r4, r5, r6, pc}
 800a2a2:	1cc4      	adds	r4, r0, #3
 800a2a4:	f024 0403 	bic.w	r4, r4, #3
 800a2a8:	42a0      	cmp	r0, r4
 800a2aa:	d0f8      	beq.n	800a29e <sbrk_aligned+0x22>
 800a2ac:	1a21      	subs	r1, r4, r0
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f001 ffce 	bl	800c250 <_sbrk_r>
 800a2b4:	3001      	adds	r0, #1
 800a2b6:	d1f2      	bne.n	800a29e <sbrk_aligned+0x22>
 800a2b8:	e7ef      	b.n	800a29a <sbrk_aligned+0x1e>
 800a2ba:	bf00      	nop
 800a2bc:	2000293c 	.word	0x2000293c

0800a2c0 <_malloc_r>:
 800a2c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a2c4:	1ccd      	adds	r5, r1, #3
 800a2c6:	f025 0503 	bic.w	r5, r5, #3
 800a2ca:	3508      	adds	r5, #8
 800a2cc:	2d0c      	cmp	r5, #12
 800a2ce:	bf38      	it	cc
 800a2d0:	250c      	movcc	r5, #12
 800a2d2:	2d00      	cmp	r5, #0
 800a2d4:	4606      	mov	r6, r0
 800a2d6:	db01      	blt.n	800a2dc <_malloc_r+0x1c>
 800a2d8:	42a9      	cmp	r1, r5
 800a2da:	d904      	bls.n	800a2e6 <_malloc_r+0x26>
 800a2dc:	230c      	movs	r3, #12
 800a2de:	6033      	str	r3, [r6, #0]
 800a2e0:	2000      	movs	r0, #0
 800a2e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a2e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a3bc <_malloc_r+0xfc>
 800a2ea:	f000 f869 	bl	800a3c0 <__malloc_lock>
 800a2ee:	f8d8 3000 	ldr.w	r3, [r8]
 800a2f2:	461c      	mov	r4, r3
 800a2f4:	bb44      	cbnz	r4, 800a348 <_malloc_r+0x88>
 800a2f6:	4629      	mov	r1, r5
 800a2f8:	4630      	mov	r0, r6
 800a2fa:	f7ff ffbf 	bl	800a27c <sbrk_aligned>
 800a2fe:	1c43      	adds	r3, r0, #1
 800a300:	4604      	mov	r4, r0
 800a302:	d158      	bne.n	800a3b6 <_malloc_r+0xf6>
 800a304:	f8d8 4000 	ldr.w	r4, [r8]
 800a308:	4627      	mov	r7, r4
 800a30a:	2f00      	cmp	r7, #0
 800a30c:	d143      	bne.n	800a396 <_malloc_r+0xd6>
 800a30e:	2c00      	cmp	r4, #0
 800a310:	d04b      	beq.n	800a3aa <_malloc_r+0xea>
 800a312:	6823      	ldr	r3, [r4, #0]
 800a314:	4639      	mov	r1, r7
 800a316:	4630      	mov	r0, r6
 800a318:	eb04 0903 	add.w	r9, r4, r3
 800a31c:	f001 ff98 	bl	800c250 <_sbrk_r>
 800a320:	4581      	cmp	r9, r0
 800a322:	d142      	bne.n	800a3aa <_malloc_r+0xea>
 800a324:	6821      	ldr	r1, [r4, #0]
 800a326:	1a6d      	subs	r5, r5, r1
 800a328:	4629      	mov	r1, r5
 800a32a:	4630      	mov	r0, r6
 800a32c:	f7ff ffa6 	bl	800a27c <sbrk_aligned>
 800a330:	3001      	adds	r0, #1
 800a332:	d03a      	beq.n	800a3aa <_malloc_r+0xea>
 800a334:	6823      	ldr	r3, [r4, #0]
 800a336:	442b      	add	r3, r5
 800a338:	6023      	str	r3, [r4, #0]
 800a33a:	f8d8 3000 	ldr.w	r3, [r8]
 800a33e:	685a      	ldr	r2, [r3, #4]
 800a340:	bb62      	cbnz	r2, 800a39c <_malloc_r+0xdc>
 800a342:	f8c8 7000 	str.w	r7, [r8]
 800a346:	e00f      	b.n	800a368 <_malloc_r+0xa8>
 800a348:	6822      	ldr	r2, [r4, #0]
 800a34a:	1b52      	subs	r2, r2, r5
 800a34c:	d420      	bmi.n	800a390 <_malloc_r+0xd0>
 800a34e:	2a0b      	cmp	r2, #11
 800a350:	d917      	bls.n	800a382 <_malloc_r+0xc2>
 800a352:	1961      	adds	r1, r4, r5
 800a354:	42a3      	cmp	r3, r4
 800a356:	6025      	str	r5, [r4, #0]
 800a358:	bf18      	it	ne
 800a35a:	6059      	strne	r1, [r3, #4]
 800a35c:	6863      	ldr	r3, [r4, #4]
 800a35e:	bf08      	it	eq
 800a360:	f8c8 1000 	streq.w	r1, [r8]
 800a364:	5162      	str	r2, [r4, r5]
 800a366:	604b      	str	r3, [r1, #4]
 800a368:	4630      	mov	r0, r6
 800a36a:	f000 f82f 	bl	800a3cc <__malloc_unlock>
 800a36e:	f104 000b 	add.w	r0, r4, #11
 800a372:	1d23      	adds	r3, r4, #4
 800a374:	f020 0007 	bic.w	r0, r0, #7
 800a378:	1ac2      	subs	r2, r0, r3
 800a37a:	bf1c      	itt	ne
 800a37c:	1a1b      	subne	r3, r3, r0
 800a37e:	50a3      	strne	r3, [r4, r2]
 800a380:	e7af      	b.n	800a2e2 <_malloc_r+0x22>
 800a382:	6862      	ldr	r2, [r4, #4]
 800a384:	42a3      	cmp	r3, r4
 800a386:	bf0c      	ite	eq
 800a388:	f8c8 2000 	streq.w	r2, [r8]
 800a38c:	605a      	strne	r2, [r3, #4]
 800a38e:	e7eb      	b.n	800a368 <_malloc_r+0xa8>
 800a390:	4623      	mov	r3, r4
 800a392:	6864      	ldr	r4, [r4, #4]
 800a394:	e7ae      	b.n	800a2f4 <_malloc_r+0x34>
 800a396:	463c      	mov	r4, r7
 800a398:	687f      	ldr	r7, [r7, #4]
 800a39a:	e7b6      	b.n	800a30a <_malloc_r+0x4a>
 800a39c:	461a      	mov	r2, r3
 800a39e:	685b      	ldr	r3, [r3, #4]
 800a3a0:	42a3      	cmp	r3, r4
 800a3a2:	d1fb      	bne.n	800a39c <_malloc_r+0xdc>
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	6053      	str	r3, [r2, #4]
 800a3a8:	e7de      	b.n	800a368 <_malloc_r+0xa8>
 800a3aa:	230c      	movs	r3, #12
 800a3ac:	6033      	str	r3, [r6, #0]
 800a3ae:	4630      	mov	r0, r6
 800a3b0:	f000 f80c 	bl	800a3cc <__malloc_unlock>
 800a3b4:	e794      	b.n	800a2e0 <_malloc_r+0x20>
 800a3b6:	6005      	str	r5, [r0, #0]
 800a3b8:	e7d6      	b.n	800a368 <_malloc_r+0xa8>
 800a3ba:	bf00      	nop
 800a3bc:	20002940 	.word	0x20002940

0800a3c0 <__malloc_lock>:
 800a3c0:	4801      	ldr	r0, [pc, #4]	@ (800a3c8 <__malloc_lock+0x8>)
 800a3c2:	f7ff b8b2 	b.w	800952a <__retarget_lock_acquire_recursive>
 800a3c6:	bf00      	nop
 800a3c8:	20002938 	.word	0x20002938

0800a3cc <__malloc_unlock>:
 800a3cc:	4801      	ldr	r0, [pc, #4]	@ (800a3d4 <__malloc_unlock+0x8>)
 800a3ce:	f7ff b8ad 	b.w	800952c <__retarget_lock_release_recursive>
 800a3d2:	bf00      	nop
 800a3d4:	20002938 	.word	0x20002938

0800a3d8 <_Balloc>:
 800a3d8:	b570      	push	{r4, r5, r6, lr}
 800a3da:	69c6      	ldr	r6, [r0, #28]
 800a3dc:	4604      	mov	r4, r0
 800a3de:	460d      	mov	r5, r1
 800a3e0:	b976      	cbnz	r6, 800a400 <_Balloc+0x28>
 800a3e2:	2010      	movs	r0, #16
 800a3e4:	f7ff ff42 	bl	800a26c <malloc>
 800a3e8:	4602      	mov	r2, r0
 800a3ea:	61e0      	str	r0, [r4, #28]
 800a3ec:	b920      	cbnz	r0, 800a3f8 <_Balloc+0x20>
 800a3ee:	4b18      	ldr	r3, [pc, #96]	@ (800a450 <_Balloc+0x78>)
 800a3f0:	4818      	ldr	r0, [pc, #96]	@ (800a454 <_Balloc+0x7c>)
 800a3f2:	216b      	movs	r1, #107	@ 0x6b
 800a3f4:	f001 ff54 	bl	800c2a0 <__assert_func>
 800a3f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3fc:	6006      	str	r6, [r0, #0]
 800a3fe:	60c6      	str	r6, [r0, #12]
 800a400:	69e6      	ldr	r6, [r4, #28]
 800a402:	68f3      	ldr	r3, [r6, #12]
 800a404:	b183      	cbz	r3, 800a428 <_Balloc+0x50>
 800a406:	69e3      	ldr	r3, [r4, #28]
 800a408:	68db      	ldr	r3, [r3, #12]
 800a40a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a40e:	b9b8      	cbnz	r0, 800a440 <_Balloc+0x68>
 800a410:	2101      	movs	r1, #1
 800a412:	fa01 f605 	lsl.w	r6, r1, r5
 800a416:	1d72      	adds	r2, r6, #5
 800a418:	0092      	lsls	r2, r2, #2
 800a41a:	4620      	mov	r0, r4
 800a41c:	f001 ff5e 	bl	800c2dc <_calloc_r>
 800a420:	b160      	cbz	r0, 800a43c <_Balloc+0x64>
 800a422:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a426:	e00e      	b.n	800a446 <_Balloc+0x6e>
 800a428:	2221      	movs	r2, #33	@ 0x21
 800a42a:	2104      	movs	r1, #4
 800a42c:	4620      	mov	r0, r4
 800a42e:	f001 ff55 	bl	800c2dc <_calloc_r>
 800a432:	69e3      	ldr	r3, [r4, #28]
 800a434:	60f0      	str	r0, [r6, #12]
 800a436:	68db      	ldr	r3, [r3, #12]
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d1e4      	bne.n	800a406 <_Balloc+0x2e>
 800a43c:	2000      	movs	r0, #0
 800a43e:	bd70      	pop	{r4, r5, r6, pc}
 800a440:	6802      	ldr	r2, [r0, #0]
 800a442:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a446:	2300      	movs	r3, #0
 800a448:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a44c:	e7f7      	b.n	800a43e <_Balloc+0x66>
 800a44e:	bf00      	nop
 800a450:	0800ccfa 	.word	0x0800ccfa
 800a454:	0800cd7a 	.word	0x0800cd7a

0800a458 <_Bfree>:
 800a458:	b570      	push	{r4, r5, r6, lr}
 800a45a:	69c6      	ldr	r6, [r0, #28]
 800a45c:	4605      	mov	r5, r0
 800a45e:	460c      	mov	r4, r1
 800a460:	b976      	cbnz	r6, 800a480 <_Bfree+0x28>
 800a462:	2010      	movs	r0, #16
 800a464:	f7ff ff02 	bl	800a26c <malloc>
 800a468:	4602      	mov	r2, r0
 800a46a:	61e8      	str	r0, [r5, #28]
 800a46c:	b920      	cbnz	r0, 800a478 <_Bfree+0x20>
 800a46e:	4b09      	ldr	r3, [pc, #36]	@ (800a494 <_Bfree+0x3c>)
 800a470:	4809      	ldr	r0, [pc, #36]	@ (800a498 <_Bfree+0x40>)
 800a472:	218f      	movs	r1, #143	@ 0x8f
 800a474:	f001 ff14 	bl	800c2a0 <__assert_func>
 800a478:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a47c:	6006      	str	r6, [r0, #0]
 800a47e:	60c6      	str	r6, [r0, #12]
 800a480:	b13c      	cbz	r4, 800a492 <_Bfree+0x3a>
 800a482:	69eb      	ldr	r3, [r5, #28]
 800a484:	6862      	ldr	r2, [r4, #4]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a48c:	6021      	str	r1, [r4, #0]
 800a48e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a492:	bd70      	pop	{r4, r5, r6, pc}
 800a494:	0800ccfa 	.word	0x0800ccfa
 800a498:	0800cd7a 	.word	0x0800cd7a

0800a49c <__multadd>:
 800a49c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4a0:	690d      	ldr	r5, [r1, #16]
 800a4a2:	4607      	mov	r7, r0
 800a4a4:	460c      	mov	r4, r1
 800a4a6:	461e      	mov	r6, r3
 800a4a8:	f101 0c14 	add.w	ip, r1, #20
 800a4ac:	2000      	movs	r0, #0
 800a4ae:	f8dc 3000 	ldr.w	r3, [ip]
 800a4b2:	b299      	uxth	r1, r3
 800a4b4:	fb02 6101 	mla	r1, r2, r1, r6
 800a4b8:	0c1e      	lsrs	r6, r3, #16
 800a4ba:	0c0b      	lsrs	r3, r1, #16
 800a4bc:	fb02 3306 	mla	r3, r2, r6, r3
 800a4c0:	b289      	uxth	r1, r1
 800a4c2:	3001      	adds	r0, #1
 800a4c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a4c8:	4285      	cmp	r5, r0
 800a4ca:	f84c 1b04 	str.w	r1, [ip], #4
 800a4ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a4d2:	dcec      	bgt.n	800a4ae <__multadd+0x12>
 800a4d4:	b30e      	cbz	r6, 800a51a <__multadd+0x7e>
 800a4d6:	68a3      	ldr	r3, [r4, #8]
 800a4d8:	42ab      	cmp	r3, r5
 800a4da:	dc19      	bgt.n	800a510 <__multadd+0x74>
 800a4dc:	6861      	ldr	r1, [r4, #4]
 800a4de:	4638      	mov	r0, r7
 800a4e0:	3101      	adds	r1, #1
 800a4e2:	f7ff ff79 	bl	800a3d8 <_Balloc>
 800a4e6:	4680      	mov	r8, r0
 800a4e8:	b928      	cbnz	r0, 800a4f6 <__multadd+0x5a>
 800a4ea:	4602      	mov	r2, r0
 800a4ec:	4b0c      	ldr	r3, [pc, #48]	@ (800a520 <__multadd+0x84>)
 800a4ee:	480d      	ldr	r0, [pc, #52]	@ (800a524 <__multadd+0x88>)
 800a4f0:	21ba      	movs	r1, #186	@ 0xba
 800a4f2:	f001 fed5 	bl	800c2a0 <__assert_func>
 800a4f6:	6922      	ldr	r2, [r4, #16]
 800a4f8:	3202      	adds	r2, #2
 800a4fa:	f104 010c 	add.w	r1, r4, #12
 800a4fe:	0092      	lsls	r2, r2, #2
 800a500:	300c      	adds	r0, #12
 800a502:	f001 feb5 	bl	800c270 <memcpy>
 800a506:	4621      	mov	r1, r4
 800a508:	4638      	mov	r0, r7
 800a50a:	f7ff ffa5 	bl	800a458 <_Bfree>
 800a50e:	4644      	mov	r4, r8
 800a510:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a514:	3501      	adds	r5, #1
 800a516:	615e      	str	r6, [r3, #20]
 800a518:	6125      	str	r5, [r4, #16]
 800a51a:	4620      	mov	r0, r4
 800a51c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a520:	0800cd69 	.word	0x0800cd69
 800a524:	0800cd7a 	.word	0x0800cd7a

0800a528 <__s2b>:
 800a528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a52c:	460c      	mov	r4, r1
 800a52e:	4615      	mov	r5, r2
 800a530:	461f      	mov	r7, r3
 800a532:	2209      	movs	r2, #9
 800a534:	3308      	adds	r3, #8
 800a536:	4606      	mov	r6, r0
 800a538:	fb93 f3f2 	sdiv	r3, r3, r2
 800a53c:	2100      	movs	r1, #0
 800a53e:	2201      	movs	r2, #1
 800a540:	429a      	cmp	r2, r3
 800a542:	db09      	blt.n	800a558 <__s2b+0x30>
 800a544:	4630      	mov	r0, r6
 800a546:	f7ff ff47 	bl	800a3d8 <_Balloc>
 800a54a:	b940      	cbnz	r0, 800a55e <__s2b+0x36>
 800a54c:	4602      	mov	r2, r0
 800a54e:	4b19      	ldr	r3, [pc, #100]	@ (800a5b4 <__s2b+0x8c>)
 800a550:	4819      	ldr	r0, [pc, #100]	@ (800a5b8 <__s2b+0x90>)
 800a552:	21d3      	movs	r1, #211	@ 0xd3
 800a554:	f001 fea4 	bl	800c2a0 <__assert_func>
 800a558:	0052      	lsls	r2, r2, #1
 800a55a:	3101      	adds	r1, #1
 800a55c:	e7f0      	b.n	800a540 <__s2b+0x18>
 800a55e:	9b08      	ldr	r3, [sp, #32]
 800a560:	6143      	str	r3, [r0, #20]
 800a562:	2d09      	cmp	r5, #9
 800a564:	f04f 0301 	mov.w	r3, #1
 800a568:	6103      	str	r3, [r0, #16]
 800a56a:	dd16      	ble.n	800a59a <__s2b+0x72>
 800a56c:	f104 0909 	add.w	r9, r4, #9
 800a570:	46c8      	mov	r8, r9
 800a572:	442c      	add	r4, r5
 800a574:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a578:	4601      	mov	r1, r0
 800a57a:	3b30      	subs	r3, #48	@ 0x30
 800a57c:	220a      	movs	r2, #10
 800a57e:	4630      	mov	r0, r6
 800a580:	f7ff ff8c 	bl	800a49c <__multadd>
 800a584:	45a0      	cmp	r8, r4
 800a586:	d1f5      	bne.n	800a574 <__s2b+0x4c>
 800a588:	f1a5 0408 	sub.w	r4, r5, #8
 800a58c:	444c      	add	r4, r9
 800a58e:	1b2d      	subs	r5, r5, r4
 800a590:	1963      	adds	r3, r4, r5
 800a592:	42bb      	cmp	r3, r7
 800a594:	db04      	blt.n	800a5a0 <__s2b+0x78>
 800a596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a59a:	340a      	adds	r4, #10
 800a59c:	2509      	movs	r5, #9
 800a59e:	e7f6      	b.n	800a58e <__s2b+0x66>
 800a5a0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a5a4:	4601      	mov	r1, r0
 800a5a6:	3b30      	subs	r3, #48	@ 0x30
 800a5a8:	220a      	movs	r2, #10
 800a5aa:	4630      	mov	r0, r6
 800a5ac:	f7ff ff76 	bl	800a49c <__multadd>
 800a5b0:	e7ee      	b.n	800a590 <__s2b+0x68>
 800a5b2:	bf00      	nop
 800a5b4:	0800cd69 	.word	0x0800cd69
 800a5b8:	0800cd7a 	.word	0x0800cd7a

0800a5bc <__hi0bits>:
 800a5bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	bf36      	itet	cc
 800a5c4:	0403      	lslcc	r3, r0, #16
 800a5c6:	2000      	movcs	r0, #0
 800a5c8:	2010      	movcc	r0, #16
 800a5ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5ce:	bf3c      	itt	cc
 800a5d0:	021b      	lslcc	r3, r3, #8
 800a5d2:	3008      	addcc	r0, #8
 800a5d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5d8:	bf3c      	itt	cc
 800a5da:	011b      	lslcc	r3, r3, #4
 800a5dc:	3004      	addcc	r0, #4
 800a5de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5e2:	bf3c      	itt	cc
 800a5e4:	009b      	lslcc	r3, r3, #2
 800a5e6:	3002      	addcc	r0, #2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	db05      	blt.n	800a5f8 <__hi0bits+0x3c>
 800a5ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a5f0:	f100 0001 	add.w	r0, r0, #1
 800a5f4:	bf08      	it	eq
 800a5f6:	2020      	moveq	r0, #32
 800a5f8:	4770      	bx	lr

0800a5fa <__lo0bits>:
 800a5fa:	6803      	ldr	r3, [r0, #0]
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	f013 0007 	ands.w	r0, r3, #7
 800a602:	d00b      	beq.n	800a61c <__lo0bits+0x22>
 800a604:	07d9      	lsls	r1, r3, #31
 800a606:	d421      	bmi.n	800a64c <__lo0bits+0x52>
 800a608:	0798      	lsls	r0, r3, #30
 800a60a:	bf49      	itett	mi
 800a60c:	085b      	lsrmi	r3, r3, #1
 800a60e:	089b      	lsrpl	r3, r3, #2
 800a610:	2001      	movmi	r0, #1
 800a612:	6013      	strmi	r3, [r2, #0]
 800a614:	bf5c      	itt	pl
 800a616:	6013      	strpl	r3, [r2, #0]
 800a618:	2002      	movpl	r0, #2
 800a61a:	4770      	bx	lr
 800a61c:	b299      	uxth	r1, r3
 800a61e:	b909      	cbnz	r1, 800a624 <__lo0bits+0x2a>
 800a620:	0c1b      	lsrs	r3, r3, #16
 800a622:	2010      	movs	r0, #16
 800a624:	b2d9      	uxtb	r1, r3
 800a626:	b909      	cbnz	r1, 800a62c <__lo0bits+0x32>
 800a628:	3008      	adds	r0, #8
 800a62a:	0a1b      	lsrs	r3, r3, #8
 800a62c:	0719      	lsls	r1, r3, #28
 800a62e:	bf04      	itt	eq
 800a630:	091b      	lsreq	r3, r3, #4
 800a632:	3004      	addeq	r0, #4
 800a634:	0799      	lsls	r1, r3, #30
 800a636:	bf04      	itt	eq
 800a638:	089b      	lsreq	r3, r3, #2
 800a63a:	3002      	addeq	r0, #2
 800a63c:	07d9      	lsls	r1, r3, #31
 800a63e:	d403      	bmi.n	800a648 <__lo0bits+0x4e>
 800a640:	085b      	lsrs	r3, r3, #1
 800a642:	f100 0001 	add.w	r0, r0, #1
 800a646:	d003      	beq.n	800a650 <__lo0bits+0x56>
 800a648:	6013      	str	r3, [r2, #0]
 800a64a:	4770      	bx	lr
 800a64c:	2000      	movs	r0, #0
 800a64e:	4770      	bx	lr
 800a650:	2020      	movs	r0, #32
 800a652:	4770      	bx	lr

0800a654 <__i2b>:
 800a654:	b510      	push	{r4, lr}
 800a656:	460c      	mov	r4, r1
 800a658:	2101      	movs	r1, #1
 800a65a:	f7ff febd 	bl	800a3d8 <_Balloc>
 800a65e:	4602      	mov	r2, r0
 800a660:	b928      	cbnz	r0, 800a66e <__i2b+0x1a>
 800a662:	4b05      	ldr	r3, [pc, #20]	@ (800a678 <__i2b+0x24>)
 800a664:	4805      	ldr	r0, [pc, #20]	@ (800a67c <__i2b+0x28>)
 800a666:	f240 1145 	movw	r1, #325	@ 0x145
 800a66a:	f001 fe19 	bl	800c2a0 <__assert_func>
 800a66e:	2301      	movs	r3, #1
 800a670:	6144      	str	r4, [r0, #20]
 800a672:	6103      	str	r3, [r0, #16]
 800a674:	bd10      	pop	{r4, pc}
 800a676:	bf00      	nop
 800a678:	0800cd69 	.word	0x0800cd69
 800a67c:	0800cd7a 	.word	0x0800cd7a

0800a680 <__multiply>:
 800a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	4614      	mov	r4, r2
 800a686:	690a      	ldr	r2, [r1, #16]
 800a688:	6923      	ldr	r3, [r4, #16]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	bfa8      	it	ge
 800a68e:	4623      	movge	r3, r4
 800a690:	460f      	mov	r7, r1
 800a692:	bfa4      	itt	ge
 800a694:	460c      	movge	r4, r1
 800a696:	461f      	movge	r7, r3
 800a698:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800a69c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800a6a0:	68a3      	ldr	r3, [r4, #8]
 800a6a2:	6861      	ldr	r1, [r4, #4]
 800a6a4:	eb0a 0609 	add.w	r6, sl, r9
 800a6a8:	42b3      	cmp	r3, r6
 800a6aa:	b085      	sub	sp, #20
 800a6ac:	bfb8      	it	lt
 800a6ae:	3101      	addlt	r1, #1
 800a6b0:	f7ff fe92 	bl	800a3d8 <_Balloc>
 800a6b4:	b930      	cbnz	r0, 800a6c4 <__multiply+0x44>
 800a6b6:	4602      	mov	r2, r0
 800a6b8:	4b44      	ldr	r3, [pc, #272]	@ (800a7cc <__multiply+0x14c>)
 800a6ba:	4845      	ldr	r0, [pc, #276]	@ (800a7d0 <__multiply+0x150>)
 800a6bc:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a6c0:	f001 fdee 	bl	800c2a0 <__assert_func>
 800a6c4:	f100 0514 	add.w	r5, r0, #20
 800a6c8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a6cc:	462b      	mov	r3, r5
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	4543      	cmp	r3, r8
 800a6d2:	d321      	bcc.n	800a718 <__multiply+0x98>
 800a6d4:	f107 0114 	add.w	r1, r7, #20
 800a6d8:	f104 0214 	add.w	r2, r4, #20
 800a6dc:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a6e0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a6e4:	9302      	str	r3, [sp, #8]
 800a6e6:	1b13      	subs	r3, r2, r4
 800a6e8:	3b15      	subs	r3, #21
 800a6ea:	f023 0303 	bic.w	r3, r3, #3
 800a6ee:	3304      	adds	r3, #4
 800a6f0:	f104 0715 	add.w	r7, r4, #21
 800a6f4:	42ba      	cmp	r2, r7
 800a6f6:	bf38      	it	cc
 800a6f8:	2304      	movcc	r3, #4
 800a6fa:	9301      	str	r3, [sp, #4]
 800a6fc:	9b02      	ldr	r3, [sp, #8]
 800a6fe:	9103      	str	r1, [sp, #12]
 800a700:	428b      	cmp	r3, r1
 800a702:	d80c      	bhi.n	800a71e <__multiply+0x9e>
 800a704:	2e00      	cmp	r6, #0
 800a706:	dd03      	ble.n	800a710 <__multiply+0x90>
 800a708:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d05b      	beq.n	800a7c8 <__multiply+0x148>
 800a710:	6106      	str	r6, [r0, #16]
 800a712:	b005      	add	sp, #20
 800a714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a718:	f843 2b04 	str.w	r2, [r3], #4
 800a71c:	e7d8      	b.n	800a6d0 <__multiply+0x50>
 800a71e:	f8b1 a000 	ldrh.w	sl, [r1]
 800a722:	f1ba 0f00 	cmp.w	sl, #0
 800a726:	d024      	beq.n	800a772 <__multiply+0xf2>
 800a728:	f104 0e14 	add.w	lr, r4, #20
 800a72c:	46a9      	mov	r9, r5
 800a72e:	f04f 0c00 	mov.w	ip, #0
 800a732:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a736:	f8d9 3000 	ldr.w	r3, [r9]
 800a73a:	fa1f fb87 	uxth.w	fp, r7
 800a73e:	b29b      	uxth	r3, r3
 800a740:	fb0a 330b 	mla	r3, sl, fp, r3
 800a744:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a748:	f8d9 7000 	ldr.w	r7, [r9]
 800a74c:	4463      	add	r3, ip
 800a74e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a752:	fb0a c70b 	mla	r7, sl, fp, ip
 800a756:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a760:	4572      	cmp	r2, lr
 800a762:	f849 3b04 	str.w	r3, [r9], #4
 800a766:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a76a:	d8e2      	bhi.n	800a732 <__multiply+0xb2>
 800a76c:	9b01      	ldr	r3, [sp, #4]
 800a76e:	f845 c003 	str.w	ip, [r5, r3]
 800a772:	9b03      	ldr	r3, [sp, #12]
 800a774:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a778:	3104      	adds	r1, #4
 800a77a:	f1b9 0f00 	cmp.w	r9, #0
 800a77e:	d021      	beq.n	800a7c4 <__multiply+0x144>
 800a780:	682b      	ldr	r3, [r5, #0]
 800a782:	f104 0c14 	add.w	ip, r4, #20
 800a786:	46ae      	mov	lr, r5
 800a788:	f04f 0a00 	mov.w	sl, #0
 800a78c:	f8bc b000 	ldrh.w	fp, [ip]
 800a790:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a794:	fb09 770b 	mla	r7, r9, fp, r7
 800a798:	4457      	add	r7, sl
 800a79a:	b29b      	uxth	r3, r3
 800a79c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a7a0:	f84e 3b04 	str.w	r3, [lr], #4
 800a7a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a7a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7ac:	f8be 3000 	ldrh.w	r3, [lr]
 800a7b0:	fb09 330a 	mla	r3, r9, sl, r3
 800a7b4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a7b8:	4562      	cmp	r2, ip
 800a7ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7be:	d8e5      	bhi.n	800a78c <__multiply+0x10c>
 800a7c0:	9f01      	ldr	r7, [sp, #4]
 800a7c2:	51eb      	str	r3, [r5, r7]
 800a7c4:	3504      	adds	r5, #4
 800a7c6:	e799      	b.n	800a6fc <__multiply+0x7c>
 800a7c8:	3e01      	subs	r6, #1
 800a7ca:	e79b      	b.n	800a704 <__multiply+0x84>
 800a7cc:	0800cd69 	.word	0x0800cd69
 800a7d0:	0800cd7a 	.word	0x0800cd7a

0800a7d4 <__pow5mult>:
 800a7d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7d8:	4615      	mov	r5, r2
 800a7da:	f012 0203 	ands.w	r2, r2, #3
 800a7de:	4607      	mov	r7, r0
 800a7e0:	460e      	mov	r6, r1
 800a7e2:	d007      	beq.n	800a7f4 <__pow5mult+0x20>
 800a7e4:	4c25      	ldr	r4, [pc, #148]	@ (800a87c <__pow5mult+0xa8>)
 800a7e6:	3a01      	subs	r2, #1
 800a7e8:	2300      	movs	r3, #0
 800a7ea:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7ee:	f7ff fe55 	bl	800a49c <__multadd>
 800a7f2:	4606      	mov	r6, r0
 800a7f4:	10ad      	asrs	r5, r5, #2
 800a7f6:	d03d      	beq.n	800a874 <__pow5mult+0xa0>
 800a7f8:	69fc      	ldr	r4, [r7, #28]
 800a7fa:	b97c      	cbnz	r4, 800a81c <__pow5mult+0x48>
 800a7fc:	2010      	movs	r0, #16
 800a7fe:	f7ff fd35 	bl	800a26c <malloc>
 800a802:	4602      	mov	r2, r0
 800a804:	61f8      	str	r0, [r7, #28]
 800a806:	b928      	cbnz	r0, 800a814 <__pow5mult+0x40>
 800a808:	4b1d      	ldr	r3, [pc, #116]	@ (800a880 <__pow5mult+0xac>)
 800a80a:	481e      	ldr	r0, [pc, #120]	@ (800a884 <__pow5mult+0xb0>)
 800a80c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a810:	f001 fd46 	bl	800c2a0 <__assert_func>
 800a814:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a818:	6004      	str	r4, [r0, #0]
 800a81a:	60c4      	str	r4, [r0, #12]
 800a81c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a820:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a824:	b94c      	cbnz	r4, 800a83a <__pow5mult+0x66>
 800a826:	f240 2171 	movw	r1, #625	@ 0x271
 800a82a:	4638      	mov	r0, r7
 800a82c:	f7ff ff12 	bl	800a654 <__i2b>
 800a830:	2300      	movs	r3, #0
 800a832:	f8c8 0008 	str.w	r0, [r8, #8]
 800a836:	4604      	mov	r4, r0
 800a838:	6003      	str	r3, [r0, #0]
 800a83a:	f04f 0900 	mov.w	r9, #0
 800a83e:	07eb      	lsls	r3, r5, #31
 800a840:	d50a      	bpl.n	800a858 <__pow5mult+0x84>
 800a842:	4631      	mov	r1, r6
 800a844:	4622      	mov	r2, r4
 800a846:	4638      	mov	r0, r7
 800a848:	f7ff ff1a 	bl	800a680 <__multiply>
 800a84c:	4631      	mov	r1, r6
 800a84e:	4680      	mov	r8, r0
 800a850:	4638      	mov	r0, r7
 800a852:	f7ff fe01 	bl	800a458 <_Bfree>
 800a856:	4646      	mov	r6, r8
 800a858:	106d      	asrs	r5, r5, #1
 800a85a:	d00b      	beq.n	800a874 <__pow5mult+0xa0>
 800a85c:	6820      	ldr	r0, [r4, #0]
 800a85e:	b938      	cbnz	r0, 800a870 <__pow5mult+0x9c>
 800a860:	4622      	mov	r2, r4
 800a862:	4621      	mov	r1, r4
 800a864:	4638      	mov	r0, r7
 800a866:	f7ff ff0b 	bl	800a680 <__multiply>
 800a86a:	6020      	str	r0, [r4, #0]
 800a86c:	f8c0 9000 	str.w	r9, [r0]
 800a870:	4604      	mov	r4, r0
 800a872:	e7e4      	b.n	800a83e <__pow5mult+0x6a>
 800a874:	4630      	mov	r0, r6
 800a876:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a87a:	bf00      	nop
 800a87c:	0800cdd4 	.word	0x0800cdd4
 800a880:	0800ccfa 	.word	0x0800ccfa
 800a884:	0800cd7a 	.word	0x0800cd7a

0800a888 <__lshift>:
 800a888:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a88c:	460c      	mov	r4, r1
 800a88e:	6849      	ldr	r1, [r1, #4]
 800a890:	6923      	ldr	r3, [r4, #16]
 800a892:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a896:	68a3      	ldr	r3, [r4, #8]
 800a898:	4607      	mov	r7, r0
 800a89a:	4691      	mov	r9, r2
 800a89c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a8a0:	f108 0601 	add.w	r6, r8, #1
 800a8a4:	42b3      	cmp	r3, r6
 800a8a6:	db0b      	blt.n	800a8c0 <__lshift+0x38>
 800a8a8:	4638      	mov	r0, r7
 800a8aa:	f7ff fd95 	bl	800a3d8 <_Balloc>
 800a8ae:	4605      	mov	r5, r0
 800a8b0:	b948      	cbnz	r0, 800a8c6 <__lshift+0x3e>
 800a8b2:	4602      	mov	r2, r0
 800a8b4:	4b28      	ldr	r3, [pc, #160]	@ (800a958 <__lshift+0xd0>)
 800a8b6:	4829      	ldr	r0, [pc, #164]	@ (800a95c <__lshift+0xd4>)
 800a8b8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a8bc:	f001 fcf0 	bl	800c2a0 <__assert_func>
 800a8c0:	3101      	adds	r1, #1
 800a8c2:	005b      	lsls	r3, r3, #1
 800a8c4:	e7ee      	b.n	800a8a4 <__lshift+0x1c>
 800a8c6:	2300      	movs	r3, #0
 800a8c8:	f100 0114 	add.w	r1, r0, #20
 800a8cc:	f100 0210 	add.w	r2, r0, #16
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	4553      	cmp	r3, sl
 800a8d4:	db33      	blt.n	800a93e <__lshift+0xb6>
 800a8d6:	6920      	ldr	r0, [r4, #16]
 800a8d8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8dc:	f104 0314 	add.w	r3, r4, #20
 800a8e0:	f019 091f 	ands.w	r9, r9, #31
 800a8e4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8e8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8ec:	d02b      	beq.n	800a946 <__lshift+0xbe>
 800a8ee:	f1c9 0e20 	rsb	lr, r9, #32
 800a8f2:	468a      	mov	sl, r1
 800a8f4:	2200      	movs	r2, #0
 800a8f6:	6818      	ldr	r0, [r3, #0]
 800a8f8:	fa00 f009 	lsl.w	r0, r0, r9
 800a8fc:	4310      	orrs	r0, r2
 800a8fe:	f84a 0b04 	str.w	r0, [sl], #4
 800a902:	f853 2b04 	ldr.w	r2, [r3], #4
 800a906:	459c      	cmp	ip, r3
 800a908:	fa22 f20e 	lsr.w	r2, r2, lr
 800a90c:	d8f3      	bhi.n	800a8f6 <__lshift+0x6e>
 800a90e:	ebac 0304 	sub.w	r3, ip, r4
 800a912:	3b15      	subs	r3, #21
 800a914:	f023 0303 	bic.w	r3, r3, #3
 800a918:	3304      	adds	r3, #4
 800a91a:	f104 0015 	add.w	r0, r4, #21
 800a91e:	4584      	cmp	ip, r0
 800a920:	bf38      	it	cc
 800a922:	2304      	movcc	r3, #4
 800a924:	50ca      	str	r2, [r1, r3]
 800a926:	b10a      	cbz	r2, 800a92c <__lshift+0xa4>
 800a928:	f108 0602 	add.w	r6, r8, #2
 800a92c:	3e01      	subs	r6, #1
 800a92e:	4638      	mov	r0, r7
 800a930:	612e      	str	r6, [r5, #16]
 800a932:	4621      	mov	r1, r4
 800a934:	f7ff fd90 	bl	800a458 <_Bfree>
 800a938:	4628      	mov	r0, r5
 800a93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a93e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a942:	3301      	adds	r3, #1
 800a944:	e7c5      	b.n	800a8d2 <__lshift+0x4a>
 800a946:	3904      	subs	r1, #4
 800a948:	f853 2b04 	ldr.w	r2, [r3], #4
 800a94c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a950:	459c      	cmp	ip, r3
 800a952:	d8f9      	bhi.n	800a948 <__lshift+0xc0>
 800a954:	e7ea      	b.n	800a92c <__lshift+0xa4>
 800a956:	bf00      	nop
 800a958:	0800cd69 	.word	0x0800cd69
 800a95c:	0800cd7a 	.word	0x0800cd7a

0800a960 <__mcmp>:
 800a960:	690a      	ldr	r2, [r1, #16]
 800a962:	4603      	mov	r3, r0
 800a964:	6900      	ldr	r0, [r0, #16]
 800a966:	1a80      	subs	r0, r0, r2
 800a968:	b530      	push	{r4, r5, lr}
 800a96a:	d10e      	bne.n	800a98a <__mcmp+0x2a>
 800a96c:	3314      	adds	r3, #20
 800a96e:	3114      	adds	r1, #20
 800a970:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a974:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a978:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a97c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a980:	4295      	cmp	r5, r2
 800a982:	d003      	beq.n	800a98c <__mcmp+0x2c>
 800a984:	d205      	bcs.n	800a992 <__mcmp+0x32>
 800a986:	f04f 30ff 	mov.w	r0, #4294967295
 800a98a:	bd30      	pop	{r4, r5, pc}
 800a98c:	42a3      	cmp	r3, r4
 800a98e:	d3f3      	bcc.n	800a978 <__mcmp+0x18>
 800a990:	e7fb      	b.n	800a98a <__mcmp+0x2a>
 800a992:	2001      	movs	r0, #1
 800a994:	e7f9      	b.n	800a98a <__mcmp+0x2a>
	...

0800a998 <__mdiff>:
 800a998:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a99c:	4689      	mov	r9, r1
 800a99e:	4606      	mov	r6, r0
 800a9a0:	4611      	mov	r1, r2
 800a9a2:	4648      	mov	r0, r9
 800a9a4:	4614      	mov	r4, r2
 800a9a6:	f7ff ffdb 	bl	800a960 <__mcmp>
 800a9aa:	1e05      	subs	r5, r0, #0
 800a9ac:	d112      	bne.n	800a9d4 <__mdiff+0x3c>
 800a9ae:	4629      	mov	r1, r5
 800a9b0:	4630      	mov	r0, r6
 800a9b2:	f7ff fd11 	bl	800a3d8 <_Balloc>
 800a9b6:	4602      	mov	r2, r0
 800a9b8:	b928      	cbnz	r0, 800a9c6 <__mdiff+0x2e>
 800a9ba:	4b3f      	ldr	r3, [pc, #252]	@ (800aab8 <__mdiff+0x120>)
 800a9bc:	f240 2137 	movw	r1, #567	@ 0x237
 800a9c0:	483e      	ldr	r0, [pc, #248]	@ (800aabc <__mdiff+0x124>)
 800a9c2:	f001 fc6d 	bl	800c2a0 <__assert_func>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9cc:	4610      	mov	r0, r2
 800a9ce:	b003      	add	sp, #12
 800a9d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9d4:	bfbc      	itt	lt
 800a9d6:	464b      	movlt	r3, r9
 800a9d8:	46a1      	movlt	r9, r4
 800a9da:	4630      	mov	r0, r6
 800a9dc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a9e0:	bfba      	itte	lt
 800a9e2:	461c      	movlt	r4, r3
 800a9e4:	2501      	movlt	r5, #1
 800a9e6:	2500      	movge	r5, #0
 800a9e8:	f7ff fcf6 	bl	800a3d8 <_Balloc>
 800a9ec:	4602      	mov	r2, r0
 800a9ee:	b918      	cbnz	r0, 800a9f8 <__mdiff+0x60>
 800a9f0:	4b31      	ldr	r3, [pc, #196]	@ (800aab8 <__mdiff+0x120>)
 800a9f2:	f240 2145 	movw	r1, #581	@ 0x245
 800a9f6:	e7e3      	b.n	800a9c0 <__mdiff+0x28>
 800a9f8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a9fc:	6926      	ldr	r6, [r4, #16]
 800a9fe:	60c5      	str	r5, [r0, #12]
 800aa00:	f109 0310 	add.w	r3, r9, #16
 800aa04:	f109 0514 	add.w	r5, r9, #20
 800aa08:	f104 0e14 	add.w	lr, r4, #20
 800aa0c:	f100 0b14 	add.w	fp, r0, #20
 800aa10:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aa14:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aa18:	9301      	str	r3, [sp, #4]
 800aa1a:	46d9      	mov	r9, fp
 800aa1c:	f04f 0c00 	mov.w	ip, #0
 800aa20:	9b01      	ldr	r3, [sp, #4]
 800aa22:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aa26:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aa2a:	9301      	str	r3, [sp, #4]
 800aa2c:	fa1f f38a 	uxth.w	r3, sl
 800aa30:	4619      	mov	r1, r3
 800aa32:	b283      	uxth	r3, r0
 800aa34:	1acb      	subs	r3, r1, r3
 800aa36:	0c00      	lsrs	r0, r0, #16
 800aa38:	4463      	add	r3, ip
 800aa3a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aa3e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aa42:	b29b      	uxth	r3, r3
 800aa44:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aa48:	4576      	cmp	r6, lr
 800aa4a:	f849 3b04 	str.w	r3, [r9], #4
 800aa4e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa52:	d8e5      	bhi.n	800aa20 <__mdiff+0x88>
 800aa54:	1b33      	subs	r3, r6, r4
 800aa56:	3b15      	subs	r3, #21
 800aa58:	f023 0303 	bic.w	r3, r3, #3
 800aa5c:	3415      	adds	r4, #21
 800aa5e:	3304      	adds	r3, #4
 800aa60:	42a6      	cmp	r6, r4
 800aa62:	bf38      	it	cc
 800aa64:	2304      	movcc	r3, #4
 800aa66:	441d      	add	r5, r3
 800aa68:	445b      	add	r3, fp
 800aa6a:	461e      	mov	r6, r3
 800aa6c:	462c      	mov	r4, r5
 800aa6e:	4544      	cmp	r4, r8
 800aa70:	d30e      	bcc.n	800aa90 <__mdiff+0xf8>
 800aa72:	f108 0103 	add.w	r1, r8, #3
 800aa76:	1b49      	subs	r1, r1, r5
 800aa78:	f021 0103 	bic.w	r1, r1, #3
 800aa7c:	3d03      	subs	r5, #3
 800aa7e:	45a8      	cmp	r8, r5
 800aa80:	bf38      	it	cc
 800aa82:	2100      	movcc	r1, #0
 800aa84:	440b      	add	r3, r1
 800aa86:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa8a:	b191      	cbz	r1, 800aab2 <__mdiff+0x11a>
 800aa8c:	6117      	str	r7, [r2, #16]
 800aa8e:	e79d      	b.n	800a9cc <__mdiff+0x34>
 800aa90:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa94:	46e6      	mov	lr, ip
 800aa96:	0c08      	lsrs	r0, r1, #16
 800aa98:	fa1c fc81 	uxtah	ip, ip, r1
 800aa9c:	4471      	add	r1, lr
 800aa9e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aaa2:	b289      	uxth	r1, r1
 800aaa4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aaa8:	f846 1b04 	str.w	r1, [r6], #4
 800aaac:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aab0:	e7dd      	b.n	800aa6e <__mdiff+0xd6>
 800aab2:	3f01      	subs	r7, #1
 800aab4:	e7e7      	b.n	800aa86 <__mdiff+0xee>
 800aab6:	bf00      	nop
 800aab8:	0800cd69 	.word	0x0800cd69
 800aabc:	0800cd7a 	.word	0x0800cd7a

0800aac0 <__ulp>:
 800aac0:	b082      	sub	sp, #8
 800aac2:	ed8d 0b00 	vstr	d0, [sp]
 800aac6:	9a01      	ldr	r2, [sp, #4]
 800aac8:	4b0f      	ldr	r3, [pc, #60]	@ (800ab08 <__ulp+0x48>)
 800aaca:	4013      	ands	r3, r2
 800aacc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	dc08      	bgt.n	800aae6 <__ulp+0x26>
 800aad4:	425b      	negs	r3, r3
 800aad6:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800aada:	ea4f 5223 	mov.w	r2, r3, asr #20
 800aade:	da04      	bge.n	800aaea <__ulp+0x2a>
 800aae0:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800aae4:	4113      	asrs	r3, r2
 800aae6:	2200      	movs	r2, #0
 800aae8:	e008      	b.n	800aafc <__ulp+0x3c>
 800aaea:	f1a2 0314 	sub.w	r3, r2, #20
 800aaee:	2b1e      	cmp	r3, #30
 800aaf0:	bfda      	itte	le
 800aaf2:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800aaf6:	40da      	lsrle	r2, r3
 800aaf8:	2201      	movgt	r2, #1
 800aafa:	2300      	movs	r3, #0
 800aafc:	4619      	mov	r1, r3
 800aafe:	4610      	mov	r0, r2
 800ab00:	ec41 0b10 	vmov	d0, r0, r1
 800ab04:	b002      	add	sp, #8
 800ab06:	4770      	bx	lr
 800ab08:	7ff00000 	.word	0x7ff00000

0800ab0c <__b2d>:
 800ab0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ab10:	6906      	ldr	r6, [r0, #16]
 800ab12:	f100 0814 	add.w	r8, r0, #20
 800ab16:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ab1a:	1f37      	subs	r7, r6, #4
 800ab1c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ab20:	4610      	mov	r0, r2
 800ab22:	f7ff fd4b 	bl	800a5bc <__hi0bits>
 800ab26:	f1c0 0320 	rsb	r3, r0, #32
 800ab2a:	280a      	cmp	r0, #10
 800ab2c:	600b      	str	r3, [r1, #0]
 800ab2e:	491b      	ldr	r1, [pc, #108]	@ (800ab9c <__b2d+0x90>)
 800ab30:	dc15      	bgt.n	800ab5e <__b2d+0x52>
 800ab32:	f1c0 0c0b 	rsb	ip, r0, #11
 800ab36:	fa22 f30c 	lsr.w	r3, r2, ip
 800ab3a:	45b8      	cmp	r8, r7
 800ab3c:	ea43 0501 	orr.w	r5, r3, r1
 800ab40:	bf34      	ite	cc
 800ab42:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab46:	2300      	movcs	r3, #0
 800ab48:	3015      	adds	r0, #21
 800ab4a:	fa02 f000 	lsl.w	r0, r2, r0
 800ab4e:	fa23 f30c 	lsr.w	r3, r3, ip
 800ab52:	4303      	orrs	r3, r0
 800ab54:	461c      	mov	r4, r3
 800ab56:	ec45 4b10 	vmov	d0, r4, r5
 800ab5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ab5e:	45b8      	cmp	r8, r7
 800ab60:	bf3a      	itte	cc
 800ab62:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800ab66:	f1a6 0708 	subcc.w	r7, r6, #8
 800ab6a:	2300      	movcs	r3, #0
 800ab6c:	380b      	subs	r0, #11
 800ab6e:	d012      	beq.n	800ab96 <__b2d+0x8a>
 800ab70:	f1c0 0120 	rsb	r1, r0, #32
 800ab74:	fa23 f401 	lsr.w	r4, r3, r1
 800ab78:	4082      	lsls	r2, r0
 800ab7a:	4322      	orrs	r2, r4
 800ab7c:	4547      	cmp	r7, r8
 800ab7e:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800ab82:	bf8c      	ite	hi
 800ab84:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800ab88:	2200      	movls	r2, #0
 800ab8a:	4083      	lsls	r3, r0
 800ab8c:	40ca      	lsrs	r2, r1
 800ab8e:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ab92:	4313      	orrs	r3, r2
 800ab94:	e7de      	b.n	800ab54 <__b2d+0x48>
 800ab96:	ea42 0501 	orr.w	r5, r2, r1
 800ab9a:	e7db      	b.n	800ab54 <__b2d+0x48>
 800ab9c:	3ff00000 	.word	0x3ff00000

0800aba0 <__d2b>:
 800aba0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aba4:	460f      	mov	r7, r1
 800aba6:	2101      	movs	r1, #1
 800aba8:	ec59 8b10 	vmov	r8, r9, d0
 800abac:	4616      	mov	r6, r2
 800abae:	f7ff fc13 	bl	800a3d8 <_Balloc>
 800abb2:	4604      	mov	r4, r0
 800abb4:	b930      	cbnz	r0, 800abc4 <__d2b+0x24>
 800abb6:	4602      	mov	r2, r0
 800abb8:	4b23      	ldr	r3, [pc, #140]	@ (800ac48 <__d2b+0xa8>)
 800abba:	4824      	ldr	r0, [pc, #144]	@ (800ac4c <__d2b+0xac>)
 800abbc:	f240 310f 	movw	r1, #783	@ 0x30f
 800abc0:	f001 fb6e 	bl	800c2a0 <__assert_func>
 800abc4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800abc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abcc:	b10d      	cbz	r5, 800abd2 <__d2b+0x32>
 800abce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800abd2:	9301      	str	r3, [sp, #4]
 800abd4:	f1b8 0300 	subs.w	r3, r8, #0
 800abd8:	d023      	beq.n	800ac22 <__d2b+0x82>
 800abda:	4668      	mov	r0, sp
 800abdc:	9300      	str	r3, [sp, #0]
 800abde:	f7ff fd0c 	bl	800a5fa <__lo0bits>
 800abe2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800abe6:	b1d0      	cbz	r0, 800ac1e <__d2b+0x7e>
 800abe8:	f1c0 0320 	rsb	r3, r0, #32
 800abec:	fa02 f303 	lsl.w	r3, r2, r3
 800abf0:	430b      	orrs	r3, r1
 800abf2:	40c2      	lsrs	r2, r0
 800abf4:	6163      	str	r3, [r4, #20]
 800abf6:	9201      	str	r2, [sp, #4]
 800abf8:	9b01      	ldr	r3, [sp, #4]
 800abfa:	61a3      	str	r3, [r4, #24]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	bf0c      	ite	eq
 800ac00:	2201      	moveq	r2, #1
 800ac02:	2202      	movne	r2, #2
 800ac04:	6122      	str	r2, [r4, #16]
 800ac06:	b1a5      	cbz	r5, 800ac32 <__d2b+0x92>
 800ac08:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ac0c:	4405      	add	r5, r0
 800ac0e:	603d      	str	r5, [r7, #0]
 800ac10:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ac14:	6030      	str	r0, [r6, #0]
 800ac16:	4620      	mov	r0, r4
 800ac18:	b003      	add	sp, #12
 800ac1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ac1e:	6161      	str	r1, [r4, #20]
 800ac20:	e7ea      	b.n	800abf8 <__d2b+0x58>
 800ac22:	a801      	add	r0, sp, #4
 800ac24:	f7ff fce9 	bl	800a5fa <__lo0bits>
 800ac28:	9b01      	ldr	r3, [sp, #4]
 800ac2a:	6163      	str	r3, [r4, #20]
 800ac2c:	3020      	adds	r0, #32
 800ac2e:	2201      	movs	r2, #1
 800ac30:	e7e8      	b.n	800ac04 <__d2b+0x64>
 800ac32:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ac36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ac3a:	6038      	str	r0, [r7, #0]
 800ac3c:	6918      	ldr	r0, [r3, #16]
 800ac3e:	f7ff fcbd 	bl	800a5bc <__hi0bits>
 800ac42:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ac46:	e7e5      	b.n	800ac14 <__d2b+0x74>
 800ac48:	0800cd69 	.word	0x0800cd69
 800ac4c:	0800cd7a 	.word	0x0800cd7a

0800ac50 <__ratio>:
 800ac50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac54:	b085      	sub	sp, #20
 800ac56:	e9cd 1000 	strd	r1, r0, [sp]
 800ac5a:	a902      	add	r1, sp, #8
 800ac5c:	f7ff ff56 	bl	800ab0c <__b2d>
 800ac60:	9800      	ldr	r0, [sp, #0]
 800ac62:	a903      	add	r1, sp, #12
 800ac64:	ec55 4b10 	vmov	r4, r5, d0
 800ac68:	f7ff ff50 	bl	800ab0c <__b2d>
 800ac6c:	9b01      	ldr	r3, [sp, #4]
 800ac6e:	6919      	ldr	r1, [r3, #16]
 800ac70:	9b00      	ldr	r3, [sp, #0]
 800ac72:	691b      	ldr	r3, [r3, #16]
 800ac74:	1ac9      	subs	r1, r1, r3
 800ac76:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800ac7a:	1a9b      	subs	r3, r3, r2
 800ac7c:	ec5b ab10 	vmov	sl, fp, d0
 800ac80:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	bfce      	itee	gt
 800ac88:	462a      	movgt	r2, r5
 800ac8a:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ac8e:	465a      	movle	r2, fp
 800ac90:	462f      	mov	r7, r5
 800ac92:	46d9      	mov	r9, fp
 800ac94:	bfcc      	ite	gt
 800ac96:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ac9a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800ac9e:	464b      	mov	r3, r9
 800aca0:	4652      	mov	r2, sl
 800aca2:	4620      	mov	r0, r4
 800aca4:	4639      	mov	r1, r7
 800aca6:	f7f5 ff19 	bl	8000adc <__aeabi_ddiv>
 800acaa:	ec41 0b10 	vmov	d0, r0, r1
 800acae:	b005      	add	sp, #20
 800acb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800acb4 <__copybits>:
 800acb4:	3901      	subs	r1, #1
 800acb6:	b570      	push	{r4, r5, r6, lr}
 800acb8:	1149      	asrs	r1, r1, #5
 800acba:	6914      	ldr	r4, [r2, #16]
 800acbc:	3101      	adds	r1, #1
 800acbe:	f102 0314 	add.w	r3, r2, #20
 800acc2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800acc6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800acca:	1f05      	subs	r5, r0, #4
 800accc:	42a3      	cmp	r3, r4
 800acce:	d30c      	bcc.n	800acea <__copybits+0x36>
 800acd0:	1aa3      	subs	r3, r4, r2
 800acd2:	3b11      	subs	r3, #17
 800acd4:	f023 0303 	bic.w	r3, r3, #3
 800acd8:	3211      	adds	r2, #17
 800acda:	42a2      	cmp	r2, r4
 800acdc:	bf88      	it	hi
 800acde:	2300      	movhi	r3, #0
 800ace0:	4418      	add	r0, r3
 800ace2:	2300      	movs	r3, #0
 800ace4:	4288      	cmp	r0, r1
 800ace6:	d305      	bcc.n	800acf4 <__copybits+0x40>
 800ace8:	bd70      	pop	{r4, r5, r6, pc}
 800acea:	f853 6b04 	ldr.w	r6, [r3], #4
 800acee:	f845 6f04 	str.w	r6, [r5, #4]!
 800acf2:	e7eb      	b.n	800accc <__copybits+0x18>
 800acf4:	f840 3b04 	str.w	r3, [r0], #4
 800acf8:	e7f4      	b.n	800ace4 <__copybits+0x30>

0800acfa <__any_on>:
 800acfa:	f100 0214 	add.w	r2, r0, #20
 800acfe:	6900      	ldr	r0, [r0, #16]
 800ad00:	114b      	asrs	r3, r1, #5
 800ad02:	4298      	cmp	r0, r3
 800ad04:	b510      	push	{r4, lr}
 800ad06:	db11      	blt.n	800ad2c <__any_on+0x32>
 800ad08:	dd0a      	ble.n	800ad20 <__any_on+0x26>
 800ad0a:	f011 011f 	ands.w	r1, r1, #31
 800ad0e:	d007      	beq.n	800ad20 <__any_on+0x26>
 800ad10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ad14:	fa24 f001 	lsr.w	r0, r4, r1
 800ad18:	fa00 f101 	lsl.w	r1, r0, r1
 800ad1c:	428c      	cmp	r4, r1
 800ad1e:	d10b      	bne.n	800ad38 <__any_on+0x3e>
 800ad20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ad24:	4293      	cmp	r3, r2
 800ad26:	d803      	bhi.n	800ad30 <__any_on+0x36>
 800ad28:	2000      	movs	r0, #0
 800ad2a:	bd10      	pop	{r4, pc}
 800ad2c:	4603      	mov	r3, r0
 800ad2e:	e7f7      	b.n	800ad20 <__any_on+0x26>
 800ad30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ad34:	2900      	cmp	r1, #0
 800ad36:	d0f5      	beq.n	800ad24 <__any_on+0x2a>
 800ad38:	2001      	movs	r0, #1
 800ad3a:	e7f6      	b.n	800ad2a <__any_on+0x30>

0800ad3c <sulp>:
 800ad3c:	b570      	push	{r4, r5, r6, lr}
 800ad3e:	4604      	mov	r4, r0
 800ad40:	460d      	mov	r5, r1
 800ad42:	ec45 4b10 	vmov	d0, r4, r5
 800ad46:	4616      	mov	r6, r2
 800ad48:	f7ff feba 	bl	800aac0 <__ulp>
 800ad4c:	ec51 0b10 	vmov	r0, r1, d0
 800ad50:	b17e      	cbz	r6, 800ad72 <sulp+0x36>
 800ad52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ad56:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	dd09      	ble.n	800ad72 <sulp+0x36>
 800ad5e:	051b      	lsls	r3, r3, #20
 800ad60:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800ad64:	2400      	movs	r4, #0
 800ad66:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800ad6a:	4622      	mov	r2, r4
 800ad6c:	462b      	mov	r3, r5
 800ad6e:	f7f5 fd8b 	bl	8000888 <__aeabi_dmul>
 800ad72:	ec41 0b10 	vmov	d0, r0, r1
 800ad76:	bd70      	pop	{r4, r5, r6, pc}

0800ad78 <_strtod_l>:
 800ad78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad7c:	b09f      	sub	sp, #124	@ 0x7c
 800ad7e:	460c      	mov	r4, r1
 800ad80:	9217      	str	r2, [sp, #92]	@ 0x5c
 800ad82:	2200      	movs	r2, #0
 800ad84:	921a      	str	r2, [sp, #104]	@ 0x68
 800ad86:	9005      	str	r0, [sp, #20]
 800ad88:	f04f 0a00 	mov.w	sl, #0
 800ad8c:	f04f 0b00 	mov.w	fp, #0
 800ad90:	460a      	mov	r2, r1
 800ad92:	9219      	str	r2, [sp, #100]	@ 0x64
 800ad94:	7811      	ldrb	r1, [r2, #0]
 800ad96:	292b      	cmp	r1, #43	@ 0x2b
 800ad98:	d04a      	beq.n	800ae30 <_strtod_l+0xb8>
 800ad9a:	d838      	bhi.n	800ae0e <_strtod_l+0x96>
 800ad9c:	290d      	cmp	r1, #13
 800ad9e:	d832      	bhi.n	800ae06 <_strtod_l+0x8e>
 800ada0:	2908      	cmp	r1, #8
 800ada2:	d832      	bhi.n	800ae0a <_strtod_l+0x92>
 800ada4:	2900      	cmp	r1, #0
 800ada6:	d03b      	beq.n	800ae20 <_strtod_l+0xa8>
 800ada8:	2200      	movs	r2, #0
 800adaa:	920b      	str	r2, [sp, #44]	@ 0x2c
 800adac:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800adae:	782a      	ldrb	r2, [r5, #0]
 800adb0:	2a30      	cmp	r2, #48	@ 0x30
 800adb2:	f040 80b3 	bne.w	800af1c <_strtod_l+0x1a4>
 800adb6:	786a      	ldrb	r2, [r5, #1]
 800adb8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800adbc:	2a58      	cmp	r2, #88	@ 0x58
 800adbe:	d16e      	bne.n	800ae9e <_strtod_l+0x126>
 800adc0:	9302      	str	r3, [sp, #8]
 800adc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adc4:	9301      	str	r3, [sp, #4]
 800adc6:	ab1a      	add	r3, sp, #104	@ 0x68
 800adc8:	9300      	str	r3, [sp, #0]
 800adca:	4a8e      	ldr	r2, [pc, #568]	@ (800b004 <_strtod_l+0x28c>)
 800adcc:	9805      	ldr	r0, [sp, #20]
 800adce:	ab1b      	add	r3, sp, #108	@ 0x6c
 800add0:	a919      	add	r1, sp, #100	@ 0x64
 800add2:	f001 faff 	bl	800c3d4 <__gethex>
 800add6:	f010 060f 	ands.w	r6, r0, #15
 800adda:	4604      	mov	r4, r0
 800addc:	d005      	beq.n	800adea <_strtod_l+0x72>
 800adde:	2e06      	cmp	r6, #6
 800ade0:	d128      	bne.n	800ae34 <_strtod_l+0xbc>
 800ade2:	3501      	adds	r5, #1
 800ade4:	2300      	movs	r3, #0
 800ade6:	9519      	str	r5, [sp, #100]	@ 0x64
 800ade8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800adea:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800adec:	2b00      	cmp	r3, #0
 800adee:	f040 858e 	bne.w	800b90e <_strtod_l+0xb96>
 800adf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800adf4:	b1cb      	cbz	r3, 800ae2a <_strtod_l+0xb2>
 800adf6:	4652      	mov	r2, sl
 800adf8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800adfc:	ec43 2b10 	vmov	d0, r2, r3
 800ae00:	b01f      	add	sp, #124	@ 0x7c
 800ae02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae06:	2920      	cmp	r1, #32
 800ae08:	d1ce      	bne.n	800ada8 <_strtod_l+0x30>
 800ae0a:	3201      	adds	r2, #1
 800ae0c:	e7c1      	b.n	800ad92 <_strtod_l+0x1a>
 800ae0e:	292d      	cmp	r1, #45	@ 0x2d
 800ae10:	d1ca      	bne.n	800ada8 <_strtod_l+0x30>
 800ae12:	2101      	movs	r1, #1
 800ae14:	910b      	str	r1, [sp, #44]	@ 0x2c
 800ae16:	1c51      	adds	r1, r2, #1
 800ae18:	9119      	str	r1, [sp, #100]	@ 0x64
 800ae1a:	7852      	ldrb	r2, [r2, #1]
 800ae1c:	2a00      	cmp	r2, #0
 800ae1e:	d1c5      	bne.n	800adac <_strtod_l+0x34>
 800ae20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800ae22:	9419      	str	r4, [sp, #100]	@ 0x64
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	f040 8570 	bne.w	800b90a <_strtod_l+0xb92>
 800ae2a:	4652      	mov	r2, sl
 800ae2c:	465b      	mov	r3, fp
 800ae2e:	e7e5      	b.n	800adfc <_strtod_l+0x84>
 800ae30:	2100      	movs	r1, #0
 800ae32:	e7ef      	b.n	800ae14 <_strtod_l+0x9c>
 800ae34:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800ae36:	b13a      	cbz	r2, 800ae48 <_strtod_l+0xd0>
 800ae38:	2135      	movs	r1, #53	@ 0x35
 800ae3a:	a81c      	add	r0, sp, #112	@ 0x70
 800ae3c:	f7ff ff3a 	bl	800acb4 <__copybits>
 800ae40:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800ae42:	9805      	ldr	r0, [sp, #20]
 800ae44:	f7ff fb08 	bl	800a458 <_Bfree>
 800ae48:	3e01      	subs	r6, #1
 800ae4a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800ae4c:	2e04      	cmp	r6, #4
 800ae4e:	d806      	bhi.n	800ae5e <_strtod_l+0xe6>
 800ae50:	e8df f006 	tbb	[pc, r6]
 800ae54:	201d0314 	.word	0x201d0314
 800ae58:	14          	.byte	0x14
 800ae59:	00          	.byte	0x00
 800ae5a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800ae5e:	05e1      	lsls	r1, r4, #23
 800ae60:	bf48      	it	mi
 800ae62:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800ae66:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800ae6a:	0d1b      	lsrs	r3, r3, #20
 800ae6c:	051b      	lsls	r3, r3, #20
 800ae6e:	2b00      	cmp	r3, #0
 800ae70:	d1bb      	bne.n	800adea <_strtod_l+0x72>
 800ae72:	f7fe fb2f 	bl	80094d4 <__errno>
 800ae76:	2322      	movs	r3, #34	@ 0x22
 800ae78:	6003      	str	r3, [r0, #0]
 800ae7a:	e7b6      	b.n	800adea <_strtod_l+0x72>
 800ae7c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800ae80:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800ae84:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800ae88:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae8c:	e7e7      	b.n	800ae5e <_strtod_l+0xe6>
 800ae8e:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 800b00c <_strtod_l+0x294>
 800ae92:	e7e4      	b.n	800ae5e <_strtod_l+0xe6>
 800ae94:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800ae98:	f04f 3aff 	mov.w	sl, #4294967295
 800ae9c:	e7df      	b.n	800ae5e <_strtod_l+0xe6>
 800ae9e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aea0:	1c5a      	adds	r2, r3, #1
 800aea2:	9219      	str	r2, [sp, #100]	@ 0x64
 800aea4:	785b      	ldrb	r3, [r3, #1]
 800aea6:	2b30      	cmp	r3, #48	@ 0x30
 800aea8:	d0f9      	beq.n	800ae9e <_strtod_l+0x126>
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d09d      	beq.n	800adea <_strtod_l+0x72>
 800aeae:	2301      	movs	r3, #1
 800aeb0:	9309      	str	r3, [sp, #36]	@ 0x24
 800aeb2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800aeb4:	930c      	str	r3, [sp, #48]	@ 0x30
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	9308      	str	r3, [sp, #32]
 800aeba:	930a      	str	r3, [sp, #40]	@ 0x28
 800aebc:	461f      	mov	r7, r3
 800aebe:	220a      	movs	r2, #10
 800aec0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800aec2:	7805      	ldrb	r5, [r0, #0]
 800aec4:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800aec8:	b2d9      	uxtb	r1, r3
 800aeca:	2909      	cmp	r1, #9
 800aecc:	d928      	bls.n	800af20 <_strtod_l+0x1a8>
 800aece:	494e      	ldr	r1, [pc, #312]	@ (800b008 <_strtod_l+0x290>)
 800aed0:	2201      	movs	r2, #1
 800aed2:	f001 f9ab 	bl	800c22c <strncmp>
 800aed6:	2800      	cmp	r0, #0
 800aed8:	d032      	beq.n	800af40 <_strtod_l+0x1c8>
 800aeda:	2000      	movs	r0, #0
 800aedc:	462a      	mov	r2, r5
 800aede:	4681      	mov	r9, r0
 800aee0:	463d      	mov	r5, r7
 800aee2:	4603      	mov	r3, r0
 800aee4:	2a65      	cmp	r2, #101	@ 0x65
 800aee6:	d001      	beq.n	800aeec <_strtod_l+0x174>
 800aee8:	2a45      	cmp	r2, #69	@ 0x45
 800aeea:	d114      	bne.n	800af16 <_strtod_l+0x19e>
 800aeec:	b91d      	cbnz	r5, 800aef6 <_strtod_l+0x17e>
 800aeee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aef0:	4302      	orrs	r2, r0
 800aef2:	d095      	beq.n	800ae20 <_strtod_l+0xa8>
 800aef4:	2500      	movs	r5, #0
 800aef6:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800aef8:	1c62      	adds	r2, r4, #1
 800aefa:	9219      	str	r2, [sp, #100]	@ 0x64
 800aefc:	7862      	ldrb	r2, [r4, #1]
 800aefe:	2a2b      	cmp	r2, #43	@ 0x2b
 800af00:	d077      	beq.n	800aff2 <_strtod_l+0x27a>
 800af02:	2a2d      	cmp	r2, #45	@ 0x2d
 800af04:	d07b      	beq.n	800affe <_strtod_l+0x286>
 800af06:	f04f 0c00 	mov.w	ip, #0
 800af0a:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800af0e:	2909      	cmp	r1, #9
 800af10:	f240 8082 	bls.w	800b018 <_strtod_l+0x2a0>
 800af14:	9419      	str	r4, [sp, #100]	@ 0x64
 800af16:	f04f 0800 	mov.w	r8, #0
 800af1a:	e0a2      	b.n	800b062 <_strtod_l+0x2ea>
 800af1c:	2300      	movs	r3, #0
 800af1e:	e7c7      	b.n	800aeb0 <_strtod_l+0x138>
 800af20:	2f08      	cmp	r7, #8
 800af22:	bfd5      	itete	le
 800af24:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 800af26:	9908      	ldrgt	r1, [sp, #32]
 800af28:	fb02 3301 	mlale	r3, r2, r1, r3
 800af2c:	fb02 3301 	mlagt	r3, r2, r1, r3
 800af30:	f100 0001 	add.w	r0, r0, #1
 800af34:	bfd4      	ite	le
 800af36:	930a      	strle	r3, [sp, #40]	@ 0x28
 800af38:	9308      	strgt	r3, [sp, #32]
 800af3a:	3701      	adds	r7, #1
 800af3c:	9019      	str	r0, [sp, #100]	@ 0x64
 800af3e:	e7bf      	b.n	800aec0 <_strtod_l+0x148>
 800af40:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af42:	1c5a      	adds	r2, r3, #1
 800af44:	9219      	str	r2, [sp, #100]	@ 0x64
 800af46:	785a      	ldrb	r2, [r3, #1]
 800af48:	b37f      	cbz	r7, 800afaa <_strtod_l+0x232>
 800af4a:	4681      	mov	r9, r0
 800af4c:	463d      	mov	r5, r7
 800af4e:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800af52:	2b09      	cmp	r3, #9
 800af54:	d912      	bls.n	800af7c <_strtod_l+0x204>
 800af56:	2301      	movs	r3, #1
 800af58:	e7c4      	b.n	800aee4 <_strtod_l+0x16c>
 800af5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af5c:	1c5a      	adds	r2, r3, #1
 800af5e:	9219      	str	r2, [sp, #100]	@ 0x64
 800af60:	785a      	ldrb	r2, [r3, #1]
 800af62:	3001      	adds	r0, #1
 800af64:	2a30      	cmp	r2, #48	@ 0x30
 800af66:	d0f8      	beq.n	800af5a <_strtod_l+0x1e2>
 800af68:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800af6c:	2b08      	cmp	r3, #8
 800af6e:	f200 84d3 	bhi.w	800b918 <_strtod_l+0xba0>
 800af72:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800af74:	930c      	str	r3, [sp, #48]	@ 0x30
 800af76:	4681      	mov	r9, r0
 800af78:	2000      	movs	r0, #0
 800af7a:	4605      	mov	r5, r0
 800af7c:	3a30      	subs	r2, #48	@ 0x30
 800af7e:	f100 0301 	add.w	r3, r0, #1
 800af82:	d02a      	beq.n	800afda <_strtod_l+0x262>
 800af84:	4499      	add	r9, r3
 800af86:	eb00 0c05 	add.w	ip, r0, r5
 800af8a:	462b      	mov	r3, r5
 800af8c:	210a      	movs	r1, #10
 800af8e:	4563      	cmp	r3, ip
 800af90:	d10d      	bne.n	800afae <_strtod_l+0x236>
 800af92:	1c69      	adds	r1, r5, #1
 800af94:	4401      	add	r1, r0
 800af96:	4428      	add	r0, r5
 800af98:	2808      	cmp	r0, #8
 800af9a:	dc16      	bgt.n	800afca <_strtod_l+0x252>
 800af9c:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800af9e:	230a      	movs	r3, #10
 800afa0:	fb03 2300 	mla	r3, r3, r0, r2
 800afa4:	930a      	str	r3, [sp, #40]	@ 0x28
 800afa6:	2300      	movs	r3, #0
 800afa8:	e018      	b.n	800afdc <_strtod_l+0x264>
 800afaa:	4638      	mov	r0, r7
 800afac:	e7da      	b.n	800af64 <_strtod_l+0x1ec>
 800afae:	2b08      	cmp	r3, #8
 800afb0:	f103 0301 	add.w	r3, r3, #1
 800afb4:	dc03      	bgt.n	800afbe <_strtod_l+0x246>
 800afb6:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800afb8:	434e      	muls	r6, r1
 800afba:	960a      	str	r6, [sp, #40]	@ 0x28
 800afbc:	e7e7      	b.n	800af8e <_strtod_l+0x216>
 800afbe:	2b10      	cmp	r3, #16
 800afc0:	bfde      	ittt	le
 800afc2:	9e08      	ldrle	r6, [sp, #32]
 800afc4:	434e      	mulle	r6, r1
 800afc6:	9608      	strle	r6, [sp, #32]
 800afc8:	e7e1      	b.n	800af8e <_strtod_l+0x216>
 800afca:	280f      	cmp	r0, #15
 800afcc:	dceb      	bgt.n	800afa6 <_strtod_l+0x22e>
 800afce:	9808      	ldr	r0, [sp, #32]
 800afd0:	230a      	movs	r3, #10
 800afd2:	fb03 2300 	mla	r3, r3, r0, r2
 800afd6:	9308      	str	r3, [sp, #32]
 800afd8:	e7e5      	b.n	800afa6 <_strtod_l+0x22e>
 800afda:	4629      	mov	r1, r5
 800afdc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800afde:	1c50      	adds	r0, r2, #1
 800afe0:	9019      	str	r0, [sp, #100]	@ 0x64
 800afe2:	7852      	ldrb	r2, [r2, #1]
 800afe4:	4618      	mov	r0, r3
 800afe6:	460d      	mov	r5, r1
 800afe8:	e7b1      	b.n	800af4e <_strtod_l+0x1d6>
 800afea:	f04f 0900 	mov.w	r9, #0
 800afee:	2301      	movs	r3, #1
 800aff0:	e77d      	b.n	800aeee <_strtod_l+0x176>
 800aff2:	f04f 0c00 	mov.w	ip, #0
 800aff6:	1ca2      	adds	r2, r4, #2
 800aff8:	9219      	str	r2, [sp, #100]	@ 0x64
 800affa:	78a2      	ldrb	r2, [r4, #2]
 800affc:	e785      	b.n	800af0a <_strtod_l+0x192>
 800affe:	f04f 0c01 	mov.w	ip, #1
 800b002:	e7f8      	b.n	800aff6 <_strtod_l+0x27e>
 800b004:	0800cee8 	.word	0x0800cee8
 800b008:	0800ced0 	.word	0x0800ced0
 800b00c:	7ff00000 	.word	0x7ff00000
 800b010:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b012:	1c51      	adds	r1, r2, #1
 800b014:	9119      	str	r1, [sp, #100]	@ 0x64
 800b016:	7852      	ldrb	r2, [r2, #1]
 800b018:	2a30      	cmp	r2, #48	@ 0x30
 800b01a:	d0f9      	beq.n	800b010 <_strtod_l+0x298>
 800b01c:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800b020:	2908      	cmp	r1, #8
 800b022:	f63f af78 	bhi.w	800af16 <_strtod_l+0x19e>
 800b026:	3a30      	subs	r2, #48	@ 0x30
 800b028:	920e      	str	r2, [sp, #56]	@ 0x38
 800b02a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b02c:	920f      	str	r2, [sp, #60]	@ 0x3c
 800b02e:	f04f 080a 	mov.w	r8, #10
 800b032:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800b034:	1c56      	adds	r6, r2, #1
 800b036:	9619      	str	r6, [sp, #100]	@ 0x64
 800b038:	7852      	ldrb	r2, [r2, #1]
 800b03a:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800b03e:	f1be 0f09 	cmp.w	lr, #9
 800b042:	d939      	bls.n	800b0b8 <_strtod_l+0x340>
 800b044:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800b046:	1a76      	subs	r6, r6, r1
 800b048:	2e08      	cmp	r6, #8
 800b04a:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800b04e:	dc03      	bgt.n	800b058 <_strtod_l+0x2e0>
 800b050:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b052:	4588      	cmp	r8, r1
 800b054:	bfa8      	it	ge
 800b056:	4688      	movge	r8, r1
 800b058:	f1bc 0f00 	cmp.w	ip, #0
 800b05c:	d001      	beq.n	800b062 <_strtod_l+0x2ea>
 800b05e:	f1c8 0800 	rsb	r8, r8, #0
 800b062:	2d00      	cmp	r5, #0
 800b064:	d14e      	bne.n	800b104 <_strtod_l+0x38c>
 800b066:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b068:	4308      	orrs	r0, r1
 800b06a:	f47f aebe 	bne.w	800adea <_strtod_l+0x72>
 800b06e:	2b00      	cmp	r3, #0
 800b070:	f47f aed6 	bne.w	800ae20 <_strtod_l+0xa8>
 800b074:	2a69      	cmp	r2, #105	@ 0x69
 800b076:	d028      	beq.n	800b0ca <_strtod_l+0x352>
 800b078:	dc25      	bgt.n	800b0c6 <_strtod_l+0x34e>
 800b07a:	2a49      	cmp	r2, #73	@ 0x49
 800b07c:	d025      	beq.n	800b0ca <_strtod_l+0x352>
 800b07e:	2a4e      	cmp	r2, #78	@ 0x4e
 800b080:	f47f aece 	bne.w	800ae20 <_strtod_l+0xa8>
 800b084:	499b      	ldr	r1, [pc, #620]	@ (800b2f4 <_strtod_l+0x57c>)
 800b086:	a819      	add	r0, sp, #100	@ 0x64
 800b088:	f001 fbc6 	bl	800c818 <__match>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	f43f aec7 	beq.w	800ae20 <_strtod_l+0xa8>
 800b092:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b094:	781b      	ldrb	r3, [r3, #0]
 800b096:	2b28      	cmp	r3, #40	@ 0x28
 800b098:	d12e      	bne.n	800b0f8 <_strtod_l+0x380>
 800b09a:	4997      	ldr	r1, [pc, #604]	@ (800b2f8 <_strtod_l+0x580>)
 800b09c:	aa1c      	add	r2, sp, #112	@ 0x70
 800b09e:	a819      	add	r0, sp, #100	@ 0x64
 800b0a0:	f001 fbce 	bl	800c840 <__hexnan>
 800b0a4:	2805      	cmp	r0, #5
 800b0a6:	d127      	bne.n	800b0f8 <_strtod_l+0x380>
 800b0a8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800b0aa:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800b0ae:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800b0b2:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800b0b6:	e698      	b.n	800adea <_strtod_l+0x72>
 800b0b8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 800b0ba:	fb08 2101 	mla	r1, r8, r1, r2
 800b0be:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800b0c2:	920e      	str	r2, [sp, #56]	@ 0x38
 800b0c4:	e7b5      	b.n	800b032 <_strtod_l+0x2ba>
 800b0c6:	2a6e      	cmp	r2, #110	@ 0x6e
 800b0c8:	e7da      	b.n	800b080 <_strtod_l+0x308>
 800b0ca:	498c      	ldr	r1, [pc, #560]	@ (800b2fc <_strtod_l+0x584>)
 800b0cc:	a819      	add	r0, sp, #100	@ 0x64
 800b0ce:	f001 fba3 	bl	800c818 <__match>
 800b0d2:	2800      	cmp	r0, #0
 800b0d4:	f43f aea4 	beq.w	800ae20 <_strtod_l+0xa8>
 800b0d8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0da:	4989      	ldr	r1, [pc, #548]	@ (800b300 <_strtod_l+0x588>)
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	a819      	add	r0, sp, #100	@ 0x64
 800b0e0:	9319      	str	r3, [sp, #100]	@ 0x64
 800b0e2:	f001 fb99 	bl	800c818 <__match>
 800b0e6:	b910      	cbnz	r0, 800b0ee <_strtod_l+0x376>
 800b0e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b0ea:	3301      	adds	r3, #1
 800b0ec:	9319      	str	r3, [sp, #100]	@ 0x64
 800b0ee:	f8df b220 	ldr.w	fp, [pc, #544]	@ 800b310 <_strtod_l+0x598>
 800b0f2:	f04f 0a00 	mov.w	sl, #0
 800b0f6:	e678      	b.n	800adea <_strtod_l+0x72>
 800b0f8:	4882      	ldr	r0, [pc, #520]	@ (800b304 <_strtod_l+0x58c>)
 800b0fa:	f001 f8c9 	bl	800c290 <nan>
 800b0fe:	ec5b ab10 	vmov	sl, fp, d0
 800b102:	e672      	b.n	800adea <_strtod_l+0x72>
 800b104:	eba8 0309 	sub.w	r3, r8, r9
 800b108:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b10a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b10c:	2f00      	cmp	r7, #0
 800b10e:	bf08      	it	eq
 800b110:	462f      	moveq	r7, r5
 800b112:	2d10      	cmp	r5, #16
 800b114:	462c      	mov	r4, r5
 800b116:	bfa8      	it	ge
 800b118:	2410      	movge	r4, #16
 800b11a:	f7f5 fb3b 	bl	8000794 <__aeabi_ui2d>
 800b11e:	2d09      	cmp	r5, #9
 800b120:	4682      	mov	sl, r0
 800b122:	468b      	mov	fp, r1
 800b124:	dc13      	bgt.n	800b14e <_strtod_l+0x3d6>
 800b126:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b128:	2b00      	cmp	r3, #0
 800b12a:	f43f ae5e 	beq.w	800adea <_strtod_l+0x72>
 800b12e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b130:	dd78      	ble.n	800b224 <_strtod_l+0x4ac>
 800b132:	2b16      	cmp	r3, #22
 800b134:	dc5f      	bgt.n	800b1f6 <_strtod_l+0x47e>
 800b136:	4974      	ldr	r1, [pc, #464]	@ (800b308 <_strtod_l+0x590>)
 800b138:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b13c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b140:	4652      	mov	r2, sl
 800b142:	465b      	mov	r3, fp
 800b144:	f7f5 fba0 	bl	8000888 <__aeabi_dmul>
 800b148:	4682      	mov	sl, r0
 800b14a:	468b      	mov	fp, r1
 800b14c:	e64d      	b.n	800adea <_strtod_l+0x72>
 800b14e:	4b6e      	ldr	r3, [pc, #440]	@ (800b308 <_strtod_l+0x590>)
 800b150:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b154:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800b158:	f7f5 fb96 	bl	8000888 <__aeabi_dmul>
 800b15c:	4682      	mov	sl, r0
 800b15e:	9808      	ldr	r0, [sp, #32]
 800b160:	468b      	mov	fp, r1
 800b162:	f7f5 fb17 	bl	8000794 <__aeabi_ui2d>
 800b166:	4602      	mov	r2, r0
 800b168:	460b      	mov	r3, r1
 800b16a:	4650      	mov	r0, sl
 800b16c:	4659      	mov	r1, fp
 800b16e:	f7f5 f9d5 	bl	800051c <__adddf3>
 800b172:	2d0f      	cmp	r5, #15
 800b174:	4682      	mov	sl, r0
 800b176:	468b      	mov	fp, r1
 800b178:	ddd5      	ble.n	800b126 <_strtod_l+0x3ae>
 800b17a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b17c:	1b2c      	subs	r4, r5, r4
 800b17e:	441c      	add	r4, r3
 800b180:	2c00      	cmp	r4, #0
 800b182:	f340 8096 	ble.w	800b2b2 <_strtod_l+0x53a>
 800b186:	f014 030f 	ands.w	r3, r4, #15
 800b18a:	d00a      	beq.n	800b1a2 <_strtod_l+0x42a>
 800b18c:	495e      	ldr	r1, [pc, #376]	@ (800b308 <_strtod_l+0x590>)
 800b18e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b192:	4652      	mov	r2, sl
 800b194:	465b      	mov	r3, fp
 800b196:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b19a:	f7f5 fb75 	bl	8000888 <__aeabi_dmul>
 800b19e:	4682      	mov	sl, r0
 800b1a0:	468b      	mov	fp, r1
 800b1a2:	f034 040f 	bics.w	r4, r4, #15
 800b1a6:	d073      	beq.n	800b290 <_strtod_l+0x518>
 800b1a8:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800b1ac:	dd48      	ble.n	800b240 <_strtod_l+0x4c8>
 800b1ae:	2400      	movs	r4, #0
 800b1b0:	46a0      	mov	r8, r4
 800b1b2:	940a      	str	r4, [sp, #40]	@ 0x28
 800b1b4:	46a1      	mov	r9, r4
 800b1b6:	9a05      	ldr	r2, [sp, #20]
 800b1b8:	f8df b154 	ldr.w	fp, [pc, #340]	@ 800b310 <_strtod_l+0x598>
 800b1bc:	2322      	movs	r3, #34	@ 0x22
 800b1be:	6013      	str	r3, [r2, #0]
 800b1c0:	f04f 0a00 	mov.w	sl, #0
 800b1c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1c6:	2b00      	cmp	r3, #0
 800b1c8:	f43f ae0f 	beq.w	800adea <_strtod_l+0x72>
 800b1cc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b1ce:	9805      	ldr	r0, [sp, #20]
 800b1d0:	f7ff f942 	bl	800a458 <_Bfree>
 800b1d4:	9805      	ldr	r0, [sp, #20]
 800b1d6:	4649      	mov	r1, r9
 800b1d8:	f7ff f93e 	bl	800a458 <_Bfree>
 800b1dc:	9805      	ldr	r0, [sp, #20]
 800b1de:	4641      	mov	r1, r8
 800b1e0:	f7ff f93a 	bl	800a458 <_Bfree>
 800b1e4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b1e6:	9805      	ldr	r0, [sp, #20]
 800b1e8:	f7ff f936 	bl	800a458 <_Bfree>
 800b1ec:	9805      	ldr	r0, [sp, #20]
 800b1ee:	4621      	mov	r1, r4
 800b1f0:	f7ff f932 	bl	800a458 <_Bfree>
 800b1f4:	e5f9      	b.n	800adea <_strtod_l+0x72>
 800b1f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1f8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	dbbc      	blt.n	800b17a <_strtod_l+0x402>
 800b200:	4c41      	ldr	r4, [pc, #260]	@ (800b308 <_strtod_l+0x590>)
 800b202:	f1c5 050f 	rsb	r5, r5, #15
 800b206:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b20a:	4652      	mov	r2, sl
 800b20c:	465b      	mov	r3, fp
 800b20e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b212:	f7f5 fb39 	bl	8000888 <__aeabi_dmul>
 800b216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b218:	1b5d      	subs	r5, r3, r5
 800b21a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b21e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b222:	e78f      	b.n	800b144 <_strtod_l+0x3cc>
 800b224:	3316      	adds	r3, #22
 800b226:	dba8      	blt.n	800b17a <_strtod_l+0x402>
 800b228:	4b37      	ldr	r3, [pc, #220]	@ (800b308 <_strtod_l+0x590>)
 800b22a:	eba9 0808 	sub.w	r8, r9, r8
 800b22e:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800b232:	e9d8 2300 	ldrd	r2, r3, [r8]
 800b236:	4650      	mov	r0, sl
 800b238:	4659      	mov	r1, fp
 800b23a:	f7f5 fc4f 	bl	8000adc <__aeabi_ddiv>
 800b23e:	e783      	b.n	800b148 <_strtod_l+0x3d0>
 800b240:	4b32      	ldr	r3, [pc, #200]	@ (800b30c <_strtod_l+0x594>)
 800b242:	9308      	str	r3, [sp, #32]
 800b244:	2300      	movs	r3, #0
 800b246:	1124      	asrs	r4, r4, #4
 800b248:	4650      	mov	r0, sl
 800b24a:	4659      	mov	r1, fp
 800b24c:	461e      	mov	r6, r3
 800b24e:	2c01      	cmp	r4, #1
 800b250:	dc21      	bgt.n	800b296 <_strtod_l+0x51e>
 800b252:	b10b      	cbz	r3, 800b258 <_strtod_l+0x4e0>
 800b254:	4682      	mov	sl, r0
 800b256:	468b      	mov	fp, r1
 800b258:	492c      	ldr	r1, [pc, #176]	@ (800b30c <_strtod_l+0x594>)
 800b25a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800b25e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800b262:	4652      	mov	r2, sl
 800b264:	465b      	mov	r3, fp
 800b266:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b26a:	f7f5 fb0d 	bl	8000888 <__aeabi_dmul>
 800b26e:	4b28      	ldr	r3, [pc, #160]	@ (800b310 <_strtod_l+0x598>)
 800b270:	460a      	mov	r2, r1
 800b272:	400b      	ands	r3, r1
 800b274:	4927      	ldr	r1, [pc, #156]	@ (800b314 <_strtod_l+0x59c>)
 800b276:	428b      	cmp	r3, r1
 800b278:	4682      	mov	sl, r0
 800b27a:	d898      	bhi.n	800b1ae <_strtod_l+0x436>
 800b27c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800b280:	428b      	cmp	r3, r1
 800b282:	bf86      	itte	hi
 800b284:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 800b318 <_strtod_l+0x5a0>
 800b288:	f04f 3aff 	movhi.w	sl, #4294967295
 800b28c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800b290:	2300      	movs	r3, #0
 800b292:	9308      	str	r3, [sp, #32]
 800b294:	e07a      	b.n	800b38c <_strtod_l+0x614>
 800b296:	07e2      	lsls	r2, r4, #31
 800b298:	d505      	bpl.n	800b2a6 <_strtod_l+0x52e>
 800b29a:	9b08      	ldr	r3, [sp, #32]
 800b29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2a0:	f7f5 faf2 	bl	8000888 <__aeabi_dmul>
 800b2a4:	2301      	movs	r3, #1
 800b2a6:	9a08      	ldr	r2, [sp, #32]
 800b2a8:	3208      	adds	r2, #8
 800b2aa:	3601      	adds	r6, #1
 800b2ac:	1064      	asrs	r4, r4, #1
 800b2ae:	9208      	str	r2, [sp, #32]
 800b2b0:	e7cd      	b.n	800b24e <_strtod_l+0x4d6>
 800b2b2:	d0ed      	beq.n	800b290 <_strtod_l+0x518>
 800b2b4:	4264      	negs	r4, r4
 800b2b6:	f014 020f 	ands.w	r2, r4, #15
 800b2ba:	d00a      	beq.n	800b2d2 <_strtod_l+0x55a>
 800b2bc:	4b12      	ldr	r3, [pc, #72]	@ (800b308 <_strtod_l+0x590>)
 800b2be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2c2:	4650      	mov	r0, sl
 800b2c4:	4659      	mov	r1, fp
 800b2c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2ca:	f7f5 fc07 	bl	8000adc <__aeabi_ddiv>
 800b2ce:	4682      	mov	sl, r0
 800b2d0:	468b      	mov	fp, r1
 800b2d2:	1124      	asrs	r4, r4, #4
 800b2d4:	d0dc      	beq.n	800b290 <_strtod_l+0x518>
 800b2d6:	2c1f      	cmp	r4, #31
 800b2d8:	dd20      	ble.n	800b31c <_strtod_l+0x5a4>
 800b2da:	2400      	movs	r4, #0
 800b2dc:	46a0      	mov	r8, r4
 800b2de:	940a      	str	r4, [sp, #40]	@ 0x28
 800b2e0:	46a1      	mov	r9, r4
 800b2e2:	9a05      	ldr	r2, [sp, #20]
 800b2e4:	2322      	movs	r3, #34	@ 0x22
 800b2e6:	f04f 0a00 	mov.w	sl, #0
 800b2ea:	f04f 0b00 	mov.w	fp, #0
 800b2ee:	6013      	str	r3, [r2, #0]
 800b2f0:	e768      	b.n	800b1c4 <_strtod_l+0x44c>
 800b2f2:	bf00      	nop
 800b2f4:	0800ccc1 	.word	0x0800ccc1
 800b2f8:	0800ced4 	.word	0x0800ced4
 800b2fc:	0800ccb9 	.word	0x0800ccb9
 800b300:	0800ccf0 	.word	0x0800ccf0
 800b304:	0800d07d 	.word	0x0800d07d
 800b308:	0800ce08 	.word	0x0800ce08
 800b30c:	0800cde0 	.word	0x0800cde0
 800b310:	7ff00000 	.word	0x7ff00000
 800b314:	7ca00000 	.word	0x7ca00000
 800b318:	7fefffff 	.word	0x7fefffff
 800b31c:	f014 0310 	ands.w	r3, r4, #16
 800b320:	bf18      	it	ne
 800b322:	236a      	movne	r3, #106	@ 0x6a
 800b324:	4ea9      	ldr	r6, [pc, #676]	@ (800b5cc <_strtod_l+0x854>)
 800b326:	9308      	str	r3, [sp, #32]
 800b328:	4650      	mov	r0, sl
 800b32a:	4659      	mov	r1, fp
 800b32c:	2300      	movs	r3, #0
 800b32e:	07e2      	lsls	r2, r4, #31
 800b330:	d504      	bpl.n	800b33c <_strtod_l+0x5c4>
 800b332:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b336:	f7f5 faa7 	bl	8000888 <__aeabi_dmul>
 800b33a:	2301      	movs	r3, #1
 800b33c:	1064      	asrs	r4, r4, #1
 800b33e:	f106 0608 	add.w	r6, r6, #8
 800b342:	d1f4      	bne.n	800b32e <_strtod_l+0x5b6>
 800b344:	b10b      	cbz	r3, 800b34a <_strtod_l+0x5d2>
 800b346:	4682      	mov	sl, r0
 800b348:	468b      	mov	fp, r1
 800b34a:	9b08      	ldr	r3, [sp, #32]
 800b34c:	b1b3      	cbz	r3, 800b37c <_strtod_l+0x604>
 800b34e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b352:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800b356:	2b00      	cmp	r3, #0
 800b358:	4659      	mov	r1, fp
 800b35a:	dd0f      	ble.n	800b37c <_strtod_l+0x604>
 800b35c:	2b1f      	cmp	r3, #31
 800b35e:	dd55      	ble.n	800b40c <_strtod_l+0x694>
 800b360:	2b34      	cmp	r3, #52	@ 0x34
 800b362:	bfde      	ittt	le
 800b364:	f04f 33ff 	movle.w	r3, #4294967295
 800b368:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800b36c:	4093      	lslle	r3, r2
 800b36e:	f04f 0a00 	mov.w	sl, #0
 800b372:	bfcc      	ite	gt
 800b374:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800b378:	ea03 0b01 	andle.w	fp, r3, r1
 800b37c:	2200      	movs	r2, #0
 800b37e:	2300      	movs	r3, #0
 800b380:	4650      	mov	r0, sl
 800b382:	4659      	mov	r1, fp
 800b384:	f7f5 fce8 	bl	8000d58 <__aeabi_dcmpeq>
 800b388:	2800      	cmp	r0, #0
 800b38a:	d1a6      	bne.n	800b2da <_strtod_l+0x562>
 800b38c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b38e:	9300      	str	r3, [sp, #0]
 800b390:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800b392:	9805      	ldr	r0, [sp, #20]
 800b394:	462b      	mov	r3, r5
 800b396:	463a      	mov	r2, r7
 800b398:	f7ff f8c6 	bl	800a528 <__s2b>
 800b39c:	900a      	str	r0, [sp, #40]	@ 0x28
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	f43f af05 	beq.w	800b1ae <_strtod_l+0x436>
 800b3a4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b3a6:	2a00      	cmp	r2, #0
 800b3a8:	eba9 0308 	sub.w	r3, r9, r8
 800b3ac:	bfa8      	it	ge
 800b3ae:	2300      	movge	r3, #0
 800b3b0:	9312      	str	r3, [sp, #72]	@ 0x48
 800b3b2:	2400      	movs	r4, #0
 800b3b4:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b3b8:	9316      	str	r3, [sp, #88]	@ 0x58
 800b3ba:	46a0      	mov	r8, r4
 800b3bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3be:	9805      	ldr	r0, [sp, #20]
 800b3c0:	6859      	ldr	r1, [r3, #4]
 800b3c2:	f7ff f809 	bl	800a3d8 <_Balloc>
 800b3c6:	4681      	mov	r9, r0
 800b3c8:	2800      	cmp	r0, #0
 800b3ca:	f43f aef4 	beq.w	800b1b6 <_strtod_l+0x43e>
 800b3ce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b3d0:	691a      	ldr	r2, [r3, #16]
 800b3d2:	3202      	adds	r2, #2
 800b3d4:	f103 010c 	add.w	r1, r3, #12
 800b3d8:	0092      	lsls	r2, r2, #2
 800b3da:	300c      	adds	r0, #12
 800b3dc:	f000 ff48 	bl	800c270 <memcpy>
 800b3e0:	ec4b ab10 	vmov	d0, sl, fp
 800b3e4:	9805      	ldr	r0, [sp, #20]
 800b3e6:	aa1c      	add	r2, sp, #112	@ 0x70
 800b3e8:	a91b      	add	r1, sp, #108	@ 0x6c
 800b3ea:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800b3ee:	f7ff fbd7 	bl	800aba0 <__d2b>
 800b3f2:	901a      	str	r0, [sp, #104]	@ 0x68
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	f43f aede 	beq.w	800b1b6 <_strtod_l+0x43e>
 800b3fa:	9805      	ldr	r0, [sp, #20]
 800b3fc:	2101      	movs	r1, #1
 800b3fe:	f7ff f929 	bl	800a654 <__i2b>
 800b402:	4680      	mov	r8, r0
 800b404:	b948      	cbnz	r0, 800b41a <_strtod_l+0x6a2>
 800b406:	f04f 0800 	mov.w	r8, #0
 800b40a:	e6d4      	b.n	800b1b6 <_strtod_l+0x43e>
 800b40c:	f04f 32ff 	mov.w	r2, #4294967295
 800b410:	fa02 f303 	lsl.w	r3, r2, r3
 800b414:	ea03 0a0a 	and.w	sl, r3, sl
 800b418:	e7b0      	b.n	800b37c <_strtod_l+0x604>
 800b41a:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800b41c:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800b41e:	2d00      	cmp	r5, #0
 800b420:	bfab      	itete	ge
 800b422:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800b424:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800b426:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800b428:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800b42a:	bfac      	ite	ge
 800b42c:	18ef      	addge	r7, r5, r3
 800b42e:	1b5e      	sublt	r6, r3, r5
 800b430:	9b08      	ldr	r3, [sp, #32]
 800b432:	1aed      	subs	r5, r5, r3
 800b434:	4415      	add	r5, r2
 800b436:	4b66      	ldr	r3, [pc, #408]	@ (800b5d0 <_strtod_l+0x858>)
 800b438:	3d01      	subs	r5, #1
 800b43a:	429d      	cmp	r5, r3
 800b43c:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800b440:	da50      	bge.n	800b4e4 <_strtod_l+0x76c>
 800b442:	1b5b      	subs	r3, r3, r5
 800b444:	2b1f      	cmp	r3, #31
 800b446:	eba2 0203 	sub.w	r2, r2, r3
 800b44a:	f04f 0101 	mov.w	r1, #1
 800b44e:	dc3d      	bgt.n	800b4cc <_strtod_l+0x754>
 800b450:	fa01 f303 	lsl.w	r3, r1, r3
 800b454:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b456:	2300      	movs	r3, #0
 800b458:	9310      	str	r3, [sp, #64]	@ 0x40
 800b45a:	18bd      	adds	r5, r7, r2
 800b45c:	9b08      	ldr	r3, [sp, #32]
 800b45e:	42af      	cmp	r7, r5
 800b460:	4416      	add	r6, r2
 800b462:	441e      	add	r6, r3
 800b464:	463b      	mov	r3, r7
 800b466:	bfa8      	it	ge
 800b468:	462b      	movge	r3, r5
 800b46a:	42b3      	cmp	r3, r6
 800b46c:	bfa8      	it	ge
 800b46e:	4633      	movge	r3, r6
 800b470:	2b00      	cmp	r3, #0
 800b472:	bfc2      	ittt	gt
 800b474:	1aed      	subgt	r5, r5, r3
 800b476:	1af6      	subgt	r6, r6, r3
 800b478:	1aff      	subgt	r7, r7, r3
 800b47a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	dd16      	ble.n	800b4ae <_strtod_l+0x736>
 800b480:	4641      	mov	r1, r8
 800b482:	9805      	ldr	r0, [sp, #20]
 800b484:	461a      	mov	r2, r3
 800b486:	f7ff f9a5 	bl	800a7d4 <__pow5mult>
 800b48a:	4680      	mov	r8, r0
 800b48c:	2800      	cmp	r0, #0
 800b48e:	d0ba      	beq.n	800b406 <_strtod_l+0x68e>
 800b490:	4601      	mov	r1, r0
 800b492:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800b494:	9805      	ldr	r0, [sp, #20]
 800b496:	f7ff f8f3 	bl	800a680 <__multiply>
 800b49a:	900e      	str	r0, [sp, #56]	@ 0x38
 800b49c:	2800      	cmp	r0, #0
 800b49e:	f43f ae8a 	beq.w	800b1b6 <_strtod_l+0x43e>
 800b4a2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4a4:	9805      	ldr	r0, [sp, #20]
 800b4a6:	f7fe ffd7 	bl	800a458 <_Bfree>
 800b4aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b4ac:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4ae:	2d00      	cmp	r5, #0
 800b4b0:	dc1d      	bgt.n	800b4ee <_strtod_l+0x776>
 800b4b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	dd23      	ble.n	800b500 <_strtod_l+0x788>
 800b4b8:	4649      	mov	r1, r9
 800b4ba:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800b4bc:	9805      	ldr	r0, [sp, #20]
 800b4be:	f7ff f989 	bl	800a7d4 <__pow5mult>
 800b4c2:	4681      	mov	r9, r0
 800b4c4:	b9e0      	cbnz	r0, 800b500 <_strtod_l+0x788>
 800b4c6:	f04f 0900 	mov.w	r9, #0
 800b4ca:	e674      	b.n	800b1b6 <_strtod_l+0x43e>
 800b4cc:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800b4d0:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800b4d4:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800b4d8:	35e2      	adds	r5, #226	@ 0xe2
 800b4da:	fa01 f305 	lsl.w	r3, r1, r5
 800b4de:	9310      	str	r3, [sp, #64]	@ 0x40
 800b4e0:	9113      	str	r1, [sp, #76]	@ 0x4c
 800b4e2:	e7ba      	b.n	800b45a <_strtod_l+0x6e2>
 800b4e4:	2300      	movs	r3, #0
 800b4e6:	9310      	str	r3, [sp, #64]	@ 0x40
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	9313      	str	r3, [sp, #76]	@ 0x4c
 800b4ec:	e7b5      	b.n	800b45a <_strtod_l+0x6e2>
 800b4ee:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b4f0:	9805      	ldr	r0, [sp, #20]
 800b4f2:	462a      	mov	r2, r5
 800b4f4:	f7ff f9c8 	bl	800a888 <__lshift>
 800b4f8:	901a      	str	r0, [sp, #104]	@ 0x68
 800b4fa:	2800      	cmp	r0, #0
 800b4fc:	d1d9      	bne.n	800b4b2 <_strtod_l+0x73a>
 800b4fe:	e65a      	b.n	800b1b6 <_strtod_l+0x43e>
 800b500:	2e00      	cmp	r6, #0
 800b502:	dd07      	ble.n	800b514 <_strtod_l+0x79c>
 800b504:	4649      	mov	r1, r9
 800b506:	9805      	ldr	r0, [sp, #20]
 800b508:	4632      	mov	r2, r6
 800b50a:	f7ff f9bd 	bl	800a888 <__lshift>
 800b50e:	4681      	mov	r9, r0
 800b510:	2800      	cmp	r0, #0
 800b512:	d0d8      	beq.n	800b4c6 <_strtod_l+0x74e>
 800b514:	2f00      	cmp	r7, #0
 800b516:	dd08      	ble.n	800b52a <_strtod_l+0x7b2>
 800b518:	4641      	mov	r1, r8
 800b51a:	9805      	ldr	r0, [sp, #20]
 800b51c:	463a      	mov	r2, r7
 800b51e:	f7ff f9b3 	bl	800a888 <__lshift>
 800b522:	4680      	mov	r8, r0
 800b524:	2800      	cmp	r0, #0
 800b526:	f43f ae46 	beq.w	800b1b6 <_strtod_l+0x43e>
 800b52a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b52c:	9805      	ldr	r0, [sp, #20]
 800b52e:	464a      	mov	r2, r9
 800b530:	f7ff fa32 	bl	800a998 <__mdiff>
 800b534:	4604      	mov	r4, r0
 800b536:	2800      	cmp	r0, #0
 800b538:	f43f ae3d 	beq.w	800b1b6 <_strtod_l+0x43e>
 800b53c:	68c3      	ldr	r3, [r0, #12]
 800b53e:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b540:	2300      	movs	r3, #0
 800b542:	60c3      	str	r3, [r0, #12]
 800b544:	4641      	mov	r1, r8
 800b546:	f7ff fa0b 	bl	800a960 <__mcmp>
 800b54a:	2800      	cmp	r0, #0
 800b54c:	da46      	bge.n	800b5dc <_strtod_l+0x864>
 800b54e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b550:	ea53 030a 	orrs.w	r3, r3, sl
 800b554:	d16c      	bne.n	800b630 <_strtod_l+0x8b8>
 800b556:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d168      	bne.n	800b630 <_strtod_l+0x8b8>
 800b55e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b562:	0d1b      	lsrs	r3, r3, #20
 800b564:	051b      	lsls	r3, r3, #20
 800b566:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b56a:	d961      	bls.n	800b630 <_strtod_l+0x8b8>
 800b56c:	6963      	ldr	r3, [r4, #20]
 800b56e:	b913      	cbnz	r3, 800b576 <_strtod_l+0x7fe>
 800b570:	6923      	ldr	r3, [r4, #16]
 800b572:	2b01      	cmp	r3, #1
 800b574:	dd5c      	ble.n	800b630 <_strtod_l+0x8b8>
 800b576:	4621      	mov	r1, r4
 800b578:	2201      	movs	r2, #1
 800b57a:	9805      	ldr	r0, [sp, #20]
 800b57c:	f7ff f984 	bl	800a888 <__lshift>
 800b580:	4641      	mov	r1, r8
 800b582:	4604      	mov	r4, r0
 800b584:	f7ff f9ec 	bl	800a960 <__mcmp>
 800b588:	2800      	cmp	r0, #0
 800b58a:	dd51      	ble.n	800b630 <_strtod_l+0x8b8>
 800b58c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b590:	9a08      	ldr	r2, [sp, #32]
 800b592:	0d1b      	lsrs	r3, r3, #20
 800b594:	051b      	lsls	r3, r3, #20
 800b596:	2a00      	cmp	r2, #0
 800b598:	d06b      	beq.n	800b672 <_strtod_l+0x8fa>
 800b59a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800b59e:	d868      	bhi.n	800b672 <_strtod_l+0x8fa>
 800b5a0:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800b5a4:	f67f ae9d 	bls.w	800b2e2 <_strtod_l+0x56a>
 800b5a8:	4b0a      	ldr	r3, [pc, #40]	@ (800b5d4 <_strtod_l+0x85c>)
 800b5aa:	4650      	mov	r0, sl
 800b5ac:	4659      	mov	r1, fp
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	f7f5 f96a 	bl	8000888 <__aeabi_dmul>
 800b5b4:	4b08      	ldr	r3, [pc, #32]	@ (800b5d8 <_strtod_l+0x860>)
 800b5b6:	400b      	ands	r3, r1
 800b5b8:	4682      	mov	sl, r0
 800b5ba:	468b      	mov	fp, r1
 800b5bc:	2b00      	cmp	r3, #0
 800b5be:	f47f ae05 	bne.w	800b1cc <_strtod_l+0x454>
 800b5c2:	9a05      	ldr	r2, [sp, #20]
 800b5c4:	2322      	movs	r3, #34	@ 0x22
 800b5c6:	6013      	str	r3, [r2, #0]
 800b5c8:	e600      	b.n	800b1cc <_strtod_l+0x454>
 800b5ca:	bf00      	nop
 800b5cc:	0800cf00 	.word	0x0800cf00
 800b5d0:	fffffc02 	.word	0xfffffc02
 800b5d4:	39500000 	.word	0x39500000
 800b5d8:	7ff00000 	.word	0x7ff00000
 800b5dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b5e0:	d165      	bne.n	800b6ae <_strtod_l+0x936>
 800b5e2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800b5e4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b5e8:	b35a      	cbz	r2, 800b642 <_strtod_l+0x8ca>
 800b5ea:	4a9f      	ldr	r2, [pc, #636]	@ (800b868 <_strtod_l+0xaf0>)
 800b5ec:	4293      	cmp	r3, r2
 800b5ee:	d12b      	bne.n	800b648 <_strtod_l+0x8d0>
 800b5f0:	9b08      	ldr	r3, [sp, #32]
 800b5f2:	4651      	mov	r1, sl
 800b5f4:	b303      	cbz	r3, 800b638 <_strtod_l+0x8c0>
 800b5f6:	4b9d      	ldr	r3, [pc, #628]	@ (800b86c <_strtod_l+0xaf4>)
 800b5f8:	465a      	mov	r2, fp
 800b5fa:	4013      	ands	r3, r2
 800b5fc:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800b600:	f04f 32ff 	mov.w	r2, #4294967295
 800b604:	d81b      	bhi.n	800b63e <_strtod_l+0x8c6>
 800b606:	0d1b      	lsrs	r3, r3, #20
 800b608:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800b60c:	fa02 f303 	lsl.w	r3, r2, r3
 800b610:	4299      	cmp	r1, r3
 800b612:	d119      	bne.n	800b648 <_strtod_l+0x8d0>
 800b614:	4b96      	ldr	r3, [pc, #600]	@ (800b870 <_strtod_l+0xaf8>)
 800b616:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b618:	429a      	cmp	r2, r3
 800b61a:	d102      	bne.n	800b622 <_strtod_l+0x8aa>
 800b61c:	3101      	adds	r1, #1
 800b61e:	f43f adca 	beq.w	800b1b6 <_strtod_l+0x43e>
 800b622:	4b92      	ldr	r3, [pc, #584]	@ (800b86c <_strtod_l+0xaf4>)
 800b624:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b626:	401a      	ands	r2, r3
 800b628:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800b62c:	f04f 0a00 	mov.w	sl, #0
 800b630:	9b08      	ldr	r3, [sp, #32]
 800b632:	2b00      	cmp	r3, #0
 800b634:	d1b8      	bne.n	800b5a8 <_strtod_l+0x830>
 800b636:	e5c9      	b.n	800b1cc <_strtod_l+0x454>
 800b638:	f04f 33ff 	mov.w	r3, #4294967295
 800b63c:	e7e8      	b.n	800b610 <_strtod_l+0x898>
 800b63e:	4613      	mov	r3, r2
 800b640:	e7e6      	b.n	800b610 <_strtod_l+0x898>
 800b642:	ea53 030a 	orrs.w	r3, r3, sl
 800b646:	d0a1      	beq.n	800b58c <_strtod_l+0x814>
 800b648:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800b64a:	b1db      	cbz	r3, 800b684 <_strtod_l+0x90c>
 800b64c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b64e:	4213      	tst	r3, r2
 800b650:	d0ee      	beq.n	800b630 <_strtod_l+0x8b8>
 800b652:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b654:	9a08      	ldr	r2, [sp, #32]
 800b656:	4650      	mov	r0, sl
 800b658:	4659      	mov	r1, fp
 800b65a:	b1bb      	cbz	r3, 800b68c <_strtod_l+0x914>
 800b65c:	f7ff fb6e 	bl	800ad3c <sulp>
 800b660:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b664:	ec53 2b10 	vmov	r2, r3, d0
 800b668:	f7f4 ff58 	bl	800051c <__adddf3>
 800b66c:	4682      	mov	sl, r0
 800b66e:	468b      	mov	fp, r1
 800b670:	e7de      	b.n	800b630 <_strtod_l+0x8b8>
 800b672:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800b676:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b67a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b67e:	f04f 3aff 	mov.w	sl, #4294967295
 800b682:	e7d5      	b.n	800b630 <_strtod_l+0x8b8>
 800b684:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800b686:	ea13 0f0a 	tst.w	r3, sl
 800b68a:	e7e1      	b.n	800b650 <_strtod_l+0x8d8>
 800b68c:	f7ff fb56 	bl	800ad3c <sulp>
 800b690:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b694:	ec53 2b10 	vmov	r2, r3, d0
 800b698:	f7f4 ff3e 	bl	8000518 <__aeabi_dsub>
 800b69c:	2200      	movs	r2, #0
 800b69e:	2300      	movs	r3, #0
 800b6a0:	4682      	mov	sl, r0
 800b6a2:	468b      	mov	fp, r1
 800b6a4:	f7f5 fb58 	bl	8000d58 <__aeabi_dcmpeq>
 800b6a8:	2800      	cmp	r0, #0
 800b6aa:	d0c1      	beq.n	800b630 <_strtod_l+0x8b8>
 800b6ac:	e619      	b.n	800b2e2 <_strtod_l+0x56a>
 800b6ae:	4641      	mov	r1, r8
 800b6b0:	4620      	mov	r0, r4
 800b6b2:	f7ff facd 	bl	800ac50 <__ratio>
 800b6b6:	ec57 6b10 	vmov	r6, r7, d0
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b6c0:	4630      	mov	r0, r6
 800b6c2:	4639      	mov	r1, r7
 800b6c4:	f7f5 fb5c 	bl	8000d80 <__aeabi_dcmple>
 800b6c8:	2800      	cmp	r0, #0
 800b6ca:	d06f      	beq.n	800b7ac <_strtod_l+0xa34>
 800b6cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d17a      	bne.n	800b7c8 <_strtod_l+0xa50>
 800b6d2:	f1ba 0f00 	cmp.w	sl, #0
 800b6d6:	d158      	bne.n	800b78a <_strtod_l+0xa12>
 800b6d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b6da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d15a      	bne.n	800b798 <_strtod_l+0xa20>
 800b6e2:	4b64      	ldr	r3, [pc, #400]	@ (800b874 <_strtod_l+0xafc>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	4630      	mov	r0, r6
 800b6e8:	4639      	mov	r1, r7
 800b6ea:	f7f5 fb3f 	bl	8000d6c <__aeabi_dcmplt>
 800b6ee:	2800      	cmp	r0, #0
 800b6f0:	d159      	bne.n	800b7a6 <_strtod_l+0xa2e>
 800b6f2:	4630      	mov	r0, r6
 800b6f4:	4639      	mov	r1, r7
 800b6f6:	4b60      	ldr	r3, [pc, #384]	@ (800b878 <_strtod_l+0xb00>)
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f7f5 f8c5 	bl	8000888 <__aeabi_dmul>
 800b6fe:	4606      	mov	r6, r0
 800b700:	460f      	mov	r7, r1
 800b702:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800b706:	9606      	str	r6, [sp, #24]
 800b708:	9307      	str	r3, [sp, #28]
 800b70a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b70e:	4d57      	ldr	r5, [pc, #348]	@ (800b86c <_strtod_l+0xaf4>)
 800b710:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b714:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b716:	401d      	ands	r5, r3
 800b718:	4b58      	ldr	r3, [pc, #352]	@ (800b87c <_strtod_l+0xb04>)
 800b71a:	429d      	cmp	r5, r3
 800b71c:	f040 80b2 	bne.w	800b884 <_strtod_l+0xb0c>
 800b720:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b722:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800b726:	ec4b ab10 	vmov	d0, sl, fp
 800b72a:	f7ff f9c9 	bl	800aac0 <__ulp>
 800b72e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b732:	ec51 0b10 	vmov	r0, r1, d0
 800b736:	f7f5 f8a7 	bl	8000888 <__aeabi_dmul>
 800b73a:	4652      	mov	r2, sl
 800b73c:	465b      	mov	r3, fp
 800b73e:	f7f4 feed 	bl	800051c <__adddf3>
 800b742:	460b      	mov	r3, r1
 800b744:	4949      	ldr	r1, [pc, #292]	@ (800b86c <_strtod_l+0xaf4>)
 800b746:	4a4e      	ldr	r2, [pc, #312]	@ (800b880 <_strtod_l+0xb08>)
 800b748:	4019      	ands	r1, r3
 800b74a:	4291      	cmp	r1, r2
 800b74c:	4682      	mov	sl, r0
 800b74e:	d942      	bls.n	800b7d6 <_strtod_l+0xa5e>
 800b750:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800b752:	4b47      	ldr	r3, [pc, #284]	@ (800b870 <_strtod_l+0xaf8>)
 800b754:	429a      	cmp	r2, r3
 800b756:	d103      	bne.n	800b760 <_strtod_l+0x9e8>
 800b758:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800b75a:	3301      	adds	r3, #1
 800b75c:	f43f ad2b 	beq.w	800b1b6 <_strtod_l+0x43e>
 800b760:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800b870 <_strtod_l+0xaf8>
 800b764:	f04f 3aff 	mov.w	sl, #4294967295
 800b768:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800b76a:	9805      	ldr	r0, [sp, #20]
 800b76c:	f7fe fe74 	bl	800a458 <_Bfree>
 800b770:	9805      	ldr	r0, [sp, #20]
 800b772:	4649      	mov	r1, r9
 800b774:	f7fe fe70 	bl	800a458 <_Bfree>
 800b778:	9805      	ldr	r0, [sp, #20]
 800b77a:	4641      	mov	r1, r8
 800b77c:	f7fe fe6c 	bl	800a458 <_Bfree>
 800b780:	9805      	ldr	r0, [sp, #20]
 800b782:	4621      	mov	r1, r4
 800b784:	f7fe fe68 	bl	800a458 <_Bfree>
 800b788:	e618      	b.n	800b3bc <_strtod_l+0x644>
 800b78a:	f1ba 0f01 	cmp.w	sl, #1
 800b78e:	d103      	bne.n	800b798 <_strtod_l+0xa20>
 800b790:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b792:	2b00      	cmp	r3, #0
 800b794:	f43f ada5 	beq.w	800b2e2 <_strtod_l+0x56a>
 800b798:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800b848 <_strtod_l+0xad0>
 800b79c:	4f35      	ldr	r7, [pc, #212]	@ (800b874 <_strtod_l+0xafc>)
 800b79e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b7a2:	2600      	movs	r6, #0
 800b7a4:	e7b1      	b.n	800b70a <_strtod_l+0x992>
 800b7a6:	4f34      	ldr	r7, [pc, #208]	@ (800b878 <_strtod_l+0xb00>)
 800b7a8:	2600      	movs	r6, #0
 800b7aa:	e7aa      	b.n	800b702 <_strtod_l+0x98a>
 800b7ac:	4b32      	ldr	r3, [pc, #200]	@ (800b878 <_strtod_l+0xb00>)
 800b7ae:	4630      	mov	r0, r6
 800b7b0:	4639      	mov	r1, r7
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	f7f5 f868 	bl	8000888 <__aeabi_dmul>
 800b7b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b7ba:	4606      	mov	r6, r0
 800b7bc:	460f      	mov	r7, r1
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d09f      	beq.n	800b702 <_strtod_l+0x98a>
 800b7c2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b7c6:	e7a0      	b.n	800b70a <_strtod_l+0x992>
 800b7c8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800b850 <_strtod_l+0xad8>
 800b7cc:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b7d0:	ec57 6b17 	vmov	r6, r7, d7
 800b7d4:	e799      	b.n	800b70a <_strtod_l+0x992>
 800b7d6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800b7da:	9b08      	ldr	r3, [sp, #32]
 800b7dc:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 800b7e0:	2b00      	cmp	r3, #0
 800b7e2:	d1c1      	bne.n	800b768 <_strtod_l+0x9f0>
 800b7e4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800b7e8:	0d1b      	lsrs	r3, r3, #20
 800b7ea:	051b      	lsls	r3, r3, #20
 800b7ec:	429d      	cmp	r5, r3
 800b7ee:	d1bb      	bne.n	800b768 <_strtod_l+0x9f0>
 800b7f0:	4630      	mov	r0, r6
 800b7f2:	4639      	mov	r1, r7
 800b7f4:	f7f5 fba8 	bl	8000f48 <__aeabi_d2lz>
 800b7f8:	f7f5 f818 	bl	800082c <__aeabi_l2d>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4630      	mov	r0, r6
 800b802:	4639      	mov	r1, r7
 800b804:	f7f4 fe88 	bl	8000518 <__aeabi_dsub>
 800b808:	460b      	mov	r3, r1
 800b80a:	4602      	mov	r2, r0
 800b80c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800b810:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800b814:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b816:	ea46 060a 	orr.w	r6, r6, sl
 800b81a:	431e      	orrs	r6, r3
 800b81c:	d06f      	beq.n	800b8fe <_strtod_l+0xb86>
 800b81e:	a30e      	add	r3, pc, #56	@ (adr r3, 800b858 <_strtod_l+0xae0>)
 800b820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b824:	f7f5 faa2 	bl	8000d6c <__aeabi_dcmplt>
 800b828:	2800      	cmp	r0, #0
 800b82a:	f47f accf 	bne.w	800b1cc <_strtod_l+0x454>
 800b82e:	a30c      	add	r3, pc, #48	@ (adr r3, 800b860 <_strtod_l+0xae8>)
 800b830:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b834:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800b838:	f7f5 fab6 	bl	8000da8 <__aeabi_dcmpgt>
 800b83c:	2800      	cmp	r0, #0
 800b83e:	d093      	beq.n	800b768 <_strtod_l+0x9f0>
 800b840:	e4c4      	b.n	800b1cc <_strtod_l+0x454>
 800b842:	bf00      	nop
 800b844:	f3af 8000 	nop.w
 800b848:	00000000 	.word	0x00000000
 800b84c:	bff00000 	.word	0xbff00000
 800b850:	00000000 	.word	0x00000000
 800b854:	3ff00000 	.word	0x3ff00000
 800b858:	94a03595 	.word	0x94a03595
 800b85c:	3fdfffff 	.word	0x3fdfffff
 800b860:	35afe535 	.word	0x35afe535
 800b864:	3fe00000 	.word	0x3fe00000
 800b868:	000fffff 	.word	0x000fffff
 800b86c:	7ff00000 	.word	0x7ff00000
 800b870:	7fefffff 	.word	0x7fefffff
 800b874:	3ff00000 	.word	0x3ff00000
 800b878:	3fe00000 	.word	0x3fe00000
 800b87c:	7fe00000 	.word	0x7fe00000
 800b880:	7c9fffff 	.word	0x7c9fffff
 800b884:	9b08      	ldr	r3, [sp, #32]
 800b886:	b323      	cbz	r3, 800b8d2 <_strtod_l+0xb5a>
 800b888:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800b88c:	d821      	bhi.n	800b8d2 <_strtod_l+0xb5a>
 800b88e:	a328      	add	r3, pc, #160	@ (adr r3, 800b930 <_strtod_l+0xbb8>)
 800b890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b894:	4630      	mov	r0, r6
 800b896:	4639      	mov	r1, r7
 800b898:	f7f5 fa72 	bl	8000d80 <__aeabi_dcmple>
 800b89c:	b1a0      	cbz	r0, 800b8c8 <_strtod_l+0xb50>
 800b89e:	4639      	mov	r1, r7
 800b8a0:	4630      	mov	r0, r6
 800b8a2:	f7f5 fac9 	bl	8000e38 <__aeabi_d2uiz>
 800b8a6:	2801      	cmp	r0, #1
 800b8a8:	bf38      	it	cc
 800b8aa:	2001      	movcc	r0, #1
 800b8ac:	f7f4 ff72 	bl	8000794 <__aeabi_ui2d>
 800b8b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b8b2:	4606      	mov	r6, r0
 800b8b4:	460f      	mov	r7, r1
 800b8b6:	b9fb      	cbnz	r3, 800b8f8 <_strtod_l+0xb80>
 800b8b8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b8bc:	9014      	str	r0, [sp, #80]	@ 0x50
 800b8be:	9315      	str	r3, [sp, #84]	@ 0x54
 800b8c0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800b8c4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800b8c8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800b8ca:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800b8ce:	1b5b      	subs	r3, r3, r5
 800b8d0:	9311      	str	r3, [sp, #68]	@ 0x44
 800b8d2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800b8d6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800b8da:	f7ff f8f1 	bl	800aac0 <__ulp>
 800b8de:	4650      	mov	r0, sl
 800b8e0:	ec53 2b10 	vmov	r2, r3, d0
 800b8e4:	4659      	mov	r1, fp
 800b8e6:	f7f4 ffcf 	bl	8000888 <__aeabi_dmul>
 800b8ea:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b8ee:	f7f4 fe15 	bl	800051c <__adddf3>
 800b8f2:	4682      	mov	sl, r0
 800b8f4:	468b      	mov	fp, r1
 800b8f6:	e770      	b.n	800b7da <_strtod_l+0xa62>
 800b8f8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800b8fc:	e7e0      	b.n	800b8c0 <_strtod_l+0xb48>
 800b8fe:	a30e      	add	r3, pc, #56	@ (adr r3, 800b938 <_strtod_l+0xbc0>)
 800b900:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b904:	f7f5 fa32 	bl	8000d6c <__aeabi_dcmplt>
 800b908:	e798      	b.n	800b83c <_strtod_l+0xac4>
 800b90a:	2300      	movs	r3, #0
 800b90c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b90e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800b910:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800b912:	6013      	str	r3, [r2, #0]
 800b914:	f7ff ba6d 	b.w	800adf2 <_strtod_l+0x7a>
 800b918:	2a65      	cmp	r2, #101	@ 0x65
 800b91a:	f43f ab66 	beq.w	800afea <_strtod_l+0x272>
 800b91e:	2a45      	cmp	r2, #69	@ 0x45
 800b920:	f43f ab63 	beq.w	800afea <_strtod_l+0x272>
 800b924:	2301      	movs	r3, #1
 800b926:	f7ff bb9e 	b.w	800b066 <_strtod_l+0x2ee>
 800b92a:	bf00      	nop
 800b92c:	f3af 8000 	nop.w
 800b930:	ffc00000 	.word	0xffc00000
 800b934:	41dfffff 	.word	0x41dfffff
 800b938:	94a03595 	.word	0x94a03595
 800b93c:	3fcfffff 	.word	0x3fcfffff

0800b940 <_strtod_r>:
 800b940:	4b01      	ldr	r3, [pc, #4]	@ (800b948 <_strtod_r+0x8>)
 800b942:	f7ff ba19 	b.w	800ad78 <_strtod_l>
 800b946:	bf00      	nop
 800b948:	2000006c 	.word	0x2000006c

0800b94c <_strtol_l.constprop.0>:
 800b94c:	2b24      	cmp	r3, #36	@ 0x24
 800b94e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b952:	4686      	mov	lr, r0
 800b954:	4690      	mov	r8, r2
 800b956:	d801      	bhi.n	800b95c <_strtol_l.constprop.0+0x10>
 800b958:	2b01      	cmp	r3, #1
 800b95a:	d106      	bne.n	800b96a <_strtol_l.constprop.0+0x1e>
 800b95c:	f7fd fdba 	bl	80094d4 <__errno>
 800b960:	2316      	movs	r3, #22
 800b962:	6003      	str	r3, [r0, #0]
 800b964:	2000      	movs	r0, #0
 800b966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96a:	4834      	ldr	r0, [pc, #208]	@ (800ba3c <_strtol_l.constprop.0+0xf0>)
 800b96c:	460d      	mov	r5, r1
 800b96e:	462a      	mov	r2, r5
 800b970:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b974:	5d06      	ldrb	r6, [r0, r4]
 800b976:	f016 0608 	ands.w	r6, r6, #8
 800b97a:	d1f8      	bne.n	800b96e <_strtol_l.constprop.0+0x22>
 800b97c:	2c2d      	cmp	r4, #45	@ 0x2d
 800b97e:	d12d      	bne.n	800b9dc <_strtol_l.constprop.0+0x90>
 800b980:	782c      	ldrb	r4, [r5, #0]
 800b982:	2601      	movs	r6, #1
 800b984:	1c95      	adds	r5, r2, #2
 800b986:	f033 0210 	bics.w	r2, r3, #16
 800b98a:	d109      	bne.n	800b9a0 <_strtol_l.constprop.0+0x54>
 800b98c:	2c30      	cmp	r4, #48	@ 0x30
 800b98e:	d12a      	bne.n	800b9e6 <_strtol_l.constprop.0+0x9a>
 800b990:	782a      	ldrb	r2, [r5, #0]
 800b992:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800b996:	2a58      	cmp	r2, #88	@ 0x58
 800b998:	d125      	bne.n	800b9e6 <_strtol_l.constprop.0+0x9a>
 800b99a:	786c      	ldrb	r4, [r5, #1]
 800b99c:	2310      	movs	r3, #16
 800b99e:	3502      	adds	r5, #2
 800b9a0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800b9a4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b9a8:	2200      	movs	r2, #0
 800b9aa:	fbbc f9f3 	udiv	r9, ip, r3
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	fb03 ca19 	mls	sl, r3, r9, ip
 800b9b4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800b9b8:	2f09      	cmp	r7, #9
 800b9ba:	d81b      	bhi.n	800b9f4 <_strtol_l.constprop.0+0xa8>
 800b9bc:	463c      	mov	r4, r7
 800b9be:	42a3      	cmp	r3, r4
 800b9c0:	dd27      	ble.n	800ba12 <_strtol_l.constprop.0+0xc6>
 800b9c2:	1c57      	adds	r7, r2, #1
 800b9c4:	d007      	beq.n	800b9d6 <_strtol_l.constprop.0+0x8a>
 800b9c6:	4581      	cmp	r9, r0
 800b9c8:	d320      	bcc.n	800ba0c <_strtol_l.constprop.0+0xc0>
 800b9ca:	d101      	bne.n	800b9d0 <_strtol_l.constprop.0+0x84>
 800b9cc:	45a2      	cmp	sl, r4
 800b9ce:	db1d      	blt.n	800ba0c <_strtol_l.constprop.0+0xc0>
 800b9d0:	fb00 4003 	mla	r0, r0, r3, r4
 800b9d4:	2201      	movs	r2, #1
 800b9d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9da:	e7eb      	b.n	800b9b4 <_strtol_l.constprop.0+0x68>
 800b9dc:	2c2b      	cmp	r4, #43	@ 0x2b
 800b9de:	bf04      	itt	eq
 800b9e0:	782c      	ldrbeq	r4, [r5, #0]
 800b9e2:	1c95      	addeq	r5, r2, #2
 800b9e4:	e7cf      	b.n	800b986 <_strtol_l.constprop.0+0x3a>
 800b9e6:	2b00      	cmp	r3, #0
 800b9e8:	d1da      	bne.n	800b9a0 <_strtol_l.constprop.0+0x54>
 800b9ea:	2c30      	cmp	r4, #48	@ 0x30
 800b9ec:	bf0c      	ite	eq
 800b9ee:	2308      	moveq	r3, #8
 800b9f0:	230a      	movne	r3, #10
 800b9f2:	e7d5      	b.n	800b9a0 <_strtol_l.constprop.0+0x54>
 800b9f4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800b9f8:	2f19      	cmp	r7, #25
 800b9fa:	d801      	bhi.n	800ba00 <_strtol_l.constprop.0+0xb4>
 800b9fc:	3c37      	subs	r4, #55	@ 0x37
 800b9fe:	e7de      	b.n	800b9be <_strtol_l.constprop.0+0x72>
 800ba00:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ba04:	2f19      	cmp	r7, #25
 800ba06:	d804      	bhi.n	800ba12 <_strtol_l.constprop.0+0xc6>
 800ba08:	3c57      	subs	r4, #87	@ 0x57
 800ba0a:	e7d8      	b.n	800b9be <_strtol_l.constprop.0+0x72>
 800ba0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ba10:	e7e1      	b.n	800b9d6 <_strtol_l.constprop.0+0x8a>
 800ba12:	1c53      	adds	r3, r2, #1
 800ba14:	d108      	bne.n	800ba28 <_strtol_l.constprop.0+0xdc>
 800ba16:	2322      	movs	r3, #34	@ 0x22
 800ba18:	f8ce 3000 	str.w	r3, [lr]
 800ba1c:	4660      	mov	r0, ip
 800ba1e:	f1b8 0f00 	cmp.w	r8, #0
 800ba22:	d0a0      	beq.n	800b966 <_strtol_l.constprop.0+0x1a>
 800ba24:	1e69      	subs	r1, r5, #1
 800ba26:	e006      	b.n	800ba36 <_strtol_l.constprop.0+0xea>
 800ba28:	b106      	cbz	r6, 800ba2c <_strtol_l.constprop.0+0xe0>
 800ba2a:	4240      	negs	r0, r0
 800ba2c:	f1b8 0f00 	cmp.w	r8, #0
 800ba30:	d099      	beq.n	800b966 <_strtol_l.constprop.0+0x1a>
 800ba32:	2a00      	cmp	r2, #0
 800ba34:	d1f6      	bne.n	800ba24 <_strtol_l.constprop.0+0xd8>
 800ba36:	f8c8 1000 	str.w	r1, [r8]
 800ba3a:	e794      	b.n	800b966 <_strtol_l.constprop.0+0x1a>
 800ba3c:	0800cf29 	.word	0x0800cf29

0800ba40 <_strtol_r>:
 800ba40:	f7ff bf84 	b.w	800b94c <_strtol_l.constprop.0>

0800ba44 <__ssputs_r>:
 800ba44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ba48:	688e      	ldr	r6, [r1, #8]
 800ba4a:	461f      	mov	r7, r3
 800ba4c:	42be      	cmp	r6, r7
 800ba4e:	680b      	ldr	r3, [r1, #0]
 800ba50:	4682      	mov	sl, r0
 800ba52:	460c      	mov	r4, r1
 800ba54:	4690      	mov	r8, r2
 800ba56:	d82d      	bhi.n	800bab4 <__ssputs_r+0x70>
 800ba58:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba5c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ba60:	d026      	beq.n	800bab0 <__ssputs_r+0x6c>
 800ba62:	6965      	ldr	r5, [r4, #20]
 800ba64:	6909      	ldr	r1, [r1, #16]
 800ba66:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ba6a:	eba3 0901 	sub.w	r9, r3, r1
 800ba6e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ba72:	1c7b      	adds	r3, r7, #1
 800ba74:	444b      	add	r3, r9
 800ba76:	106d      	asrs	r5, r5, #1
 800ba78:	429d      	cmp	r5, r3
 800ba7a:	bf38      	it	cc
 800ba7c:	461d      	movcc	r5, r3
 800ba7e:	0553      	lsls	r3, r2, #21
 800ba80:	d527      	bpl.n	800bad2 <__ssputs_r+0x8e>
 800ba82:	4629      	mov	r1, r5
 800ba84:	f7fe fc1c 	bl	800a2c0 <_malloc_r>
 800ba88:	4606      	mov	r6, r0
 800ba8a:	b360      	cbz	r0, 800bae6 <__ssputs_r+0xa2>
 800ba8c:	6921      	ldr	r1, [r4, #16]
 800ba8e:	464a      	mov	r2, r9
 800ba90:	f000 fbee 	bl	800c270 <memcpy>
 800ba94:	89a3      	ldrh	r3, [r4, #12]
 800ba96:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ba9a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ba9e:	81a3      	strh	r3, [r4, #12]
 800baa0:	6126      	str	r6, [r4, #16]
 800baa2:	6165      	str	r5, [r4, #20]
 800baa4:	444e      	add	r6, r9
 800baa6:	eba5 0509 	sub.w	r5, r5, r9
 800baaa:	6026      	str	r6, [r4, #0]
 800baac:	60a5      	str	r5, [r4, #8]
 800baae:	463e      	mov	r6, r7
 800bab0:	42be      	cmp	r6, r7
 800bab2:	d900      	bls.n	800bab6 <__ssputs_r+0x72>
 800bab4:	463e      	mov	r6, r7
 800bab6:	6820      	ldr	r0, [r4, #0]
 800bab8:	4632      	mov	r2, r6
 800baba:	4641      	mov	r1, r8
 800babc:	f000 fb9c 	bl	800c1f8 <memmove>
 800bac0:	68a3      	ldr	r3, [r4, #8]
 800bac2:	1b9b      	subs	r3, r3, r6
 800bac4:	60a3      	str	r3, [r4, #8]
 800bac6:	6823      	ldr	r3, [r4, #0]
 800bac8:	4433      	add	r3, r6
 800baca:	6023      	str	r3, [r4, #0]
 800bacc:	2000      	movs	r0, #0
 800bace:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bad2:	462a      	mov	r2, r5
 800bad4:	f000 ff61 	bl	800c99a <_realloc_r>
 800bad8:	4606      	mov	r6, r0
 800bada:	2800      	cmp	r0, #0
 800badc:	d1e0      	bne.n	800baa0 <__ssputs_r+0x5c>
 800bade:	6921      	ldr	r1, [r4, #16]
 800bae0:	4650      	mov	r0, sl
 800bae2:	f7fe fb79 	bl	800a1d8 <_free_r>
 800bae6:	230c      	movs	r3, #12
 800bae8:	f8ca 3000 	str.w	r3, [sl]
 800baec:	89a3      	ldrh	r3, [r4, #12]
 800baee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800baf2:	81a3      	strh	r3, [r4, #12]
 800baf4:	f04f 30ff 	mov.w	r0, #4294967295
 800baf8:	e7e9      	b.n	800bace <__ssputs_r+0x8a>
	...

0800bafc <_svfiprintf_r>:
 800bafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb00:	4698      	mov	r8, r3
 800bb02:	898b      	ldrh	r3, [r1, #12]
 800bb04:	061b      	lsls	r3, r3, #24
 800bb06:	b09d      	sub	sp, #116	@ 0x74
 800bb08:	4607      	mov	r7, r0
 800bb0a:	460d      	mov	r5, r1
 800bb0c:	4614      	mov	r4, r2
 800bb0e:	d510      	bpl.n	800bb32 <_svfiprintf_r+0x36>
 800bb10:	690b      	ldr	r3, [r1, #16]
 800bb12:	b973      	cbnz	r3, 800bb32 <_svfiprintf_r+0x36>
 800bb14:	2140      	movs	r1, #64	@ 0x40
 800bb16:	f7fe fbd3 	bl	800a2c0 <_malloc_r>
 800bb1a:	6028      	str	r0, [r5, #0]
 800bb1c:	6128      	str	r0, [r5, #16]
 800bb1e:	b930      	cbnz	r0, 800bb2e <_svfiprintf_r+0x32>
 800bb20:	230c      	movs	r3, #12
 800bb22:	603b      	str	r3, [r7, #0]
 800bb24:	f04f 30ff 	mov.w	r0, #4294967295
 800bb28:	b01d      	add	sp, #116	@ 0x74
 800bb2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb2e:	2340      	movs	r3, #64	@ 0x40
 800bb30:	616b      	str	r3, [r5, #20]
 800bb32:	2300      	movs	r3, #0
 800bb34:	9309      	str	r3, [sp, #36]	@ 0x24
 800bb36:	2320      	movs	r3, #32
 800bb38:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bb3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bb40:	2330      	movs	r3, #48	@ 0x30
 800bb42:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800bce0 <_svfiprintf_r+0x1e4>
 800bb46:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bb4a:	f04f 0901 	mov.w	r9, #1
 800bb4e:	4623      	mov	r3, r4
 800bb50:	469a      	mov	sl, r3
 800bb52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bb56:	b10a      	cbz	r2, 800bb5c <_svfiprintf_r+0x60>
 800bb58:	2a25      	cmp	r2, #37	@ 0x25
 800bb5a:	d1f9      	bne.n	800bb50 <_svfiprintf_r+0x54>
 800bb5c:	ebba 0b04 	subs.w	fp, sl, r4
 800bb60:	d00b      	beq.n	800bb7a <_svfiprintf_r+0x7e>
 800bb62:	465b      	mov	r3, fp
 800bb64:	4622      	mov	r2, r4
 800bb66:	4629      	mov	r1, r5
 800bb68:	4638      	mov	r0, r7
 800bb6a:	f7ff ff6b 	bl	800ba44 <__ssputs_r>
 800bb6e:	3001      	adds	r0, #1
 800bb70:	f000 80a7 	beq.w	800bcc2 <_svfiprintf_r+0x1c6>
 800bb74:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bb76:	445a      	add	r2, fp
 800bb78:	9209      	str	r2, [sp, #36]	@ 0x24
 800bb7a:	f89a 3000 	ldrb.w	r3, [sl]
 800bb7e:	2b00      	cmp	r3, #0
 800bb80:	f000 809f 	beq.w	800bcc2 <_svfiprintf_r+0x1c6>
 800bb84:	2300      	movs	r3, #0
 800bb86:	f04f 32ff 	mov.w	r2, #4294967295
 800bb8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bb8e:	f10a 0a01 	add.w	sl, sl, #1
 800bb92:	9304      	str	r3, [sp, #16]
 800bb94:	9307      	str	r3, [sp, #28]
 800bb96:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bb9a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bb9c:	4654      	mov	r4, sl
 800bb9e:	2205      	movs	r2, #5
 800bba0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bba4:	484e      	ldr	r0, [pc, #312]	@ (800bce0 <_svfiprintf_r+0x1e4>)
 800bba6:	f7f4 fc5b 	bl	8000460 <memchr>
 800bbaa:	9a04      	ldr	r2, [sp, #16]
 800bbac:	b9d8      	cbnz	r0, 800bbe6 <_svfiprintf_r+0xea>
 800bbae:	06d0      	lsls	r0, r2, #27
 800bbb0:	bf44      	itt	mi
 800bbb2:	2320      	movmi	r3, #32
 800bbb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbb8:	0711      	lsls	r1, r2, #28
 800bbba:	bf44      	itt	mi
 800bbbc:	232b      	movmi	r3, #43	@ 0x2b
 800bbbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bbc2:	f89a 3000 	ldrb.w	r3, [sl]
 800bbc6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bbc8:	d015      	beq.n	800bbf6 <_svfiprintf_r+0xfa>
 800bbca:	9a07      	ldr	r2, [sp, #28]
 800bbcc:	4654      	mov	r4, sl
 800bbce:	2000      	movs	r0, #0
 800bbd0:	f04f 0c0a 	mov.w	ip, #10
 800bbd4:	4621      	mov	r1, r4
 800bbd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bbda:	3b30      	subs	r3, #48	@ 0x30
 800bbdc:	2b09      	cmp	r3, #9
 800bbde:	d94b      	bls.n	800bc78 <_svfiprintf_r+0x17c>
 800bbe0:	b1b0      	cbz	r0, 800bc10 <_svfiprintf_r+0x114>
 800bbe2:	9207      	str	r2, [sp, #28]
 800bbe4:	e014      	b.n	800bc10 <_svfiprintf_r+0x114>
 800bbe6:	eba0 0308 	sub.w	r3, r0, r8
 800bbea:	fa09 f303 	lsl.w	r3, r9, r3
 800bbee:	4313      	orrs	r3, r2
 800bbf0:	9304      	str	r3, [sp, #16]
 800bbf2:	46a2      	mov	sl, r4
 800bbf4:	e7d2      	b.n	800bb9c <_svfiprintf_r+0xa0>
 800bbf6:	9b03      	ldr	r3, [sp, #12]
 800bbf8:	1d19      	adds	r1, r3, #4
 800bbfa:	681b      	ldr	r3, [r3, #0]
 800bbfc:	9103      	str	r1, [sp, #12]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	bfbb      	ittet	lt
 800bc02:	425b      	neglt	r3, r3
 800bc04:	f042 0202 	orrlt.w	r2, r2, #2
 800bc08:	9307      	strge	r3, [sp, #28]
 800bc0a:	9307      	strlt	r3, [sp, #28]
 800bc0c:	bfb8      	it	lt
 800bc0e:	9204      	strlt	r2, [sp, #16]
 800bc10:	7823      	ldrb	r3, [r4, #0]
 800bc12:	2b2e      	cmp	r3, #46	@ 0x2e
 800bc14:	d10a      	bne.n	800bc2c <_svfiprintf_r+0x130>
 800bc16:	7863      	ldrb	r3, [r4, #1]
 800bc18:	2b2a      	cmp	r3, #42	@ 0x2a
 800bc1a:	d132      	bne.n	800bc82 <_svfiprintf_r+0x186>
 800bc1c:	9b03      	ldr	r3, [sp, #12]
 800bc1e:	1d1a      	adds	r2, r3, #4
 800bc20:	681b      	ldr	r3, [r3, #0]
 800bc22:	9203      	str	r2, [sp, #12]
 800bc24:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800bc28:	3402      	adds	r4, #2
 800bc2a:	9305      	str	r3, [sp, #20]
 800bc2c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800bcf0 <_svfiprintf_r+0x1f4>
 800bc30:	7821      	ldrb	r1, [r4, #0]
 800bc32:	2203      	movs	r2, #3
 800bc34:	4650      	mov	r0, sl
 800bc36:	f7f4 fc13 	bl	8000460 <memchr>
 800bc3a:	b138      	cbz	r0, 800bc4c <_svfiprintf_r+0x150>
 800bc3c:	9b04      	ldr	r3, [sp, #16]
 800bc3e:	eba0 000a 	sub.w	r0, r0, sl
 800bc42:	2240      	movs	r2, #64	@ 0x40
 800bc44:	4082      	lsls	r2, r0
 800bc46:	4313      	orrs	r3, r2
 800bc48:	3401      	adds	r4, #1
 800bc4a:	9304      	str	r3, [sp, #16]
 800bc4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bc50:	4824      	ldr	r0, [pc, #144]	@ (800bce4 <_svfiprintf_r+0x1e8>)
 800bc52:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bc56:	2206      	movs	r2, #6
 800bc58:	f7f4 fc02 	bl	8000460 <memchr>
 800bc5c:	2800      	cmp	r0, #0
 800bc5e:	d036      	beq.n	800bcce <_svfiprintf_r+0x1d2>
 800bc60:	4b21      	ldr	r3, [pc, #132]	@ (800bce8 <_svfiprintf_r+0x1ec>)
 800bc62:	bb1b      	cbnz	r3, 800bcac <_svfiprintf_r+0x1b0>
 800bc64:	9b03      	ldr	r3, [sp, #12]
 800bc66:	3307      	adds	r3, #7
 800bc68:	f023 0307 	bic.w	r3, r3, #7
 800bc6c:	3308      	adds	r3, #8
 800bc6e:	9303      	str	r3, [sp, #12]
 800bc70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bc72:	4433      	add	r3, r6
 800bc74:	9309      	str	r3, [sp, #36]	@ 0x24
 800bc76:	e76a      	b.n	800bb4e <_svfiprintf_r+0x52>
 800bc78:	fb0c 3202 	mla	r2, ip, r2, r3
 800bc7c:	460c      	mov	r4, r1
 800bc7e:	2001      	movs	r0, #1
 800bc80:	e7a8      	b.n	800bbd4 <_svfiprintf_r+0xd8>
 800bc82:	2300      	movs	r3, #0
 800bc84:	3401      	adds	r4, #1
 800bc86:	9305      	str	r3, [sp, #20]
 800bc88:	4619      	mov	r1, r3
 800bc8a:	f04f 0c0a 	mov.w	ip, #10
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bc94:	3a30      	subs	r2, #48	@ 0x30
 800bc96:	2a09      	cmp	r2, #9
 800bc98:	d903      	bls.n	800bca2 <_svfiprintf_r+0x1a6>
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d0c6      	beq.n	800bc2c <_svfiprintf_r+0x130>
 800bc9e:	9105      	str	r1, [sp, #20]
 800bca0:	e7c4      	b.n	800bc2c <_svfiprintf_r+0x130>
 800bca2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bca6:	4604      	mov	r4, r0
 800bca8:	2301      	movs	r3, #1
 800bcaa:	e7f0      	b.n	800bc8e <_svfiprintf_r+0x192>
 800bcac:	ab03      	add	r3, sp, #12
 800bcae:	9300      	str	r3, [sp, #0]
 800bcb0:	462a      	mov	r2, r5
 800bcb2:	4b0e      	ldr	r3, [pc, #56]	@ (800bcec <_svfiprintf_r+0x1f0>)
 800bcb4:	a904      	add	r1, sp, #16
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	f7fc fcb6 	bl	8008628 <_printf_float>
 800bcbc:	1c42      	adds	r2, r0, #1
 800bcbe:	4606      	mov	r6, r0
 800bcc0:	d1d6      	bne.n	800bc70 <_svfiprintf_r+0x174>
 800bcc2:	89ab      	ldrh	r3, [r5, #12]
 800bcc4:	065b      	lsls	r3, r3, #25
 800bcc6:	f53f af2d 	bmi.w	800bb24 <_svfiprintf_r+0x28>
 800bcca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bccc:	e72c      	b.n	800bb28 <_svfiprintf_r+0x2c>
 800bcce:	ab03      	add	r3, sp, #12
 800bcd0:	9300      	str	r3, [sp, #0]
 800bcd2:	462a      	mov	r2, r5
 800bcd4:	4b05      	ldr	r3, [pc, #20]	@ (800bcec <_svfiprintf_r+0x1f0>)
 800bcd6:	a904      	add	r1, sp, #16
 800bcd8:	4638      	mov	r0, r7
 800bcda:	f7fc ff3d 	bl	8008b58 <_printf_i>
 800bcde:	e7ed      	b.n	800bcbc <_svfiprintf_r+0x1c0>
 800bce0:	0800d029 	.word	0x0800d029
 800bce4:	0800d033 	.word	0x0800d033
 800bce8:	08008629 	.word	0x08008629
 800bcec:	0800ba45 	.word	0x0800ba45
 800bcf0:	0800d02f 	.word	0x0800d02f

0800bcf4 <__sfputc_r>:
 800bcf4:	6893      	ldr	r3, [r2, #8]
 800bcf6:	3b01      	subs	r3, #1
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	b410      	push	{r4}
 800bcfc:	6093      	str	r3, [r2, #8]
 800bcfe:	da08      	bge.n	800bd12 <__sfputc_r+0x1e>
 800bd00:	6994      	ldr	r4, [r2, #24]
 800bd02:	42a3      	cmp	r3, r4
 800bd04:	db01      	blt.n	800bd0a <__sfputc_r+0x16>
 800bd06:	290a      	cmp	r1, #10
 800bd08:	d103      	bne.n	800bd12 <__sfputc_r+0x1e>
 800bd0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd0e:	f000 b9df 	b.w	800c0d0 <__swbuf_r>
 800bd12:	6813      	ldr	r3, [r2, #0]
 800bd14:	1c58      	adds	r0, r3, #1
 800bd16:	6010      	str	r0, [r2, #0]
 800bd18:	7019      	strb	r1, [r3, #0]
 800bd1a:	4608      	mov	r0, r1
 800bd1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <__sfputs_r>:
 800bd22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd24:	4606      	mov	r6, r0
 800bd26:	460f      	mov	r7, r1
 800bd28:	4614      	mov	r4, r2
 800bd2a:	18d5      	adds	r5, r2, r3
 800bd2c:	42ac      	cmp	r4, r5
 800bd2e:	d101      	bne.n	800bd34 <__sfputs_r+0x12>
 800bd30:	2000      	movs	r0, #0
 800bd32:	e007      	b.n	800bd44 <__sfputs_r+0x22>
 800bd34:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd38:	463a      	mov	r2, r7
 800bd3a:	4630      	mov	r0, r6
 800bd3c:	f7ff ffda 	bl	800bcf4 <__sfputc_r>
 800bd40:	1c43      	adds	r3, r0, #1
 800bd42:	d1f3      	bne.n	800bd2c <__sfputs_r+0xa>
 800bd44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd48 <_vfiprintf_r>:
 800bd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4c:	460d      	mov	r5, r1
 800bd4e:	b09d      	sub	sp, #116	@ 0x74
 800bd50:	4614      	mov	r4, r2
 800bd52:	4698      	mov	r8, r3
 800bd54:	4606      	mov	r6, r0
 800bd56:	b118      	cbz	r0, 800bd60 <_vfiprintf_r+0x18>
 800bd58:	6a03      	ldr	r3, [r0, #32]
 800bd5a:	b90b      	cbnz	r3, 800bd60 <_vfiprintf_r+0x18>
 800bd5c:	f7fd fabc 	bl	80092d8 <__sinit>
 800bd60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd62:	07d9      	lsls	r1, r3, #31
 800bd64:	d405      	bmi.n	800bd72 <_vfiprintf_r+0x2a>
 800bd66:	89ab      	ldrh	r3, [r5, #12]
 800bd68:	059a      	lsls	r2, r3, #22
 800bd6a:	d402      	bmi.n	800bd72 <_vfiprintf_r+0x2a>
 800bd6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd6e:	f7fd fbdc 	bl	800952a <__retarget_lock_acquire_recursive>
 800bd72:	89ab      	ldrh	r3, [r5, #12]
 800bd74:	071b      	lsls	r3, r3, #28
 800bd76:	d501      	bpl.n	800bd7c <_vfiprintf_r+0x34>
 800bd78:	692b      	ldr	r3, [r5, #16]
 800bd7a:	b99b      	cbnz	r3, 800bda4 <_vfiprintf_r+0x5c>
 800bd7c:	4629      	mov	r1, r5
 800bd7e:	4630      	mov	r0, r6
 800bd80:	f000 f9e4 	bl	800c14c <__swsetup_r>
 800bd84:	b170      	cbz	r0, 800bda4 <_vfiprintf_r+0x5c>
 800bd86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bd88:	07dc      	lsls	r4, r3, #31
 800bd8a:	d504      	bpl.n	800bd96 <_vfiprintf_r+0x4e>
 800bd8c:	f04f 30ff 	mov.w	r0, #4294967295
 800bd90:	b01d      	add	sp, #116	@ 0x74
 800bd92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd96:	89ab      	ldrh	r3, [r5, #12]
 800bd98:	0598      	lsls	r0, r3, #22
 800bd9a:	d4f7      	bmi.n	800bd8c <_vfiprintf_r+0x44>
 800bd9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bd9e:	f7fd fbc5 	bl	800952c <__retarget_lock_release_recursive>
 800bda2:	e7f3      	b.n	800bd8c <_vfiprintf_r+0x44>
 800bda4:	2300      	movs	r3, #0
 800bda6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bda8:	2320      	movs	r3, #32
 800bdaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bdae:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdb2:	2330      	movs	r3, #48	@ 0x30
 800bdb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800bf64 <_vfiprintf_r+0x21c>
 800bdb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bdbc:	f04f 0901 	mov.w	r9, #1
 800bdc0:	4623      	mov	r3, r4
 800bdc2:	469a      	mov	sl, r3
 800bdc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdc8:	b10a      	cbz	r2, 800bdce <_vfiprintf_r+0x86>
 800bdca:	2a25      	cmp	r2, #37	@ 0x25
 800bdcc:	d1f9      	bne.n	800bdc2 <_vfiprintf_r+0x7a>
 800bdce:	ebba 0b04 	subs.w	fp, sl, r4
 800bdd2:	d00b      	beq.n	800bdec <_vfiprintf_r+0xa4>
 800bdd4:	465b      	mov	r3, fp
 800bdd6:	4622      	mov	r2, r4
 800bdd8:	4629      	mov	r1, r5
 800bdda:	4630      	mov	r0, r6
 800bddc:	f7ff ffa1 	bl	800bd22 <__sfputs_r>
 800bde0:	3001      	adds	r0, #1
 800bde2:	f000 80a7 	beq.w	800bf34 <_vfiprintf_r+0x1ec>
 800bde6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bde8:	445a      	add	r2, fp
 800bdea:	9209      	str	r2, [sp, #36]	@ 0x24
 800bdec:	f89a 3000 	ldrb.w	r3, [sl]
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	f000 809f 	beq.w	800bf34 <_vfiprintf_r+0x1ec>
 800bdf6:	2300      	movs	r3, #0
 800bdf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be00:	f10a 0a01 	add.w	sl, sl, #1
 800be04:	9304      	str	r3, [sp, #16]
 800be06:	9307      	str	r3, [sp, #28]
 800be08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800be0c:	931a      	str	r3, [sp, #104]	@ 0x68
 800be0e:	4654      	mov	r4, sl
 800be10:	2205      	movs	r2, #5
 800be12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be16:	4853      	ldr	r0, [pc, #332]	@ (800bf64 <_vfiprintf_r+0x21c>)
 800be18:	f7f4 fb22 	bl	8000460 <memchr>
 800be1c:	9a04      	ldr	r2, [sp, #16]
 800be1e:	b9d8      	cbnz	r0, 800be58 <_vfiprintf_r+0x110>
 800be20:	06d1      	lsls	r1, r2, #27
 800be22:	bf44      	itt	mi
 800be24:	2320      	movmi	r3, #32
 800be26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be2a:	0713      	lsls	r3, r2, #28
 800be2c:	bf44      	itt	mi
 800be2e:	232b      	movmi	r3, #43	@ 0x2b
 800be30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800be34:	f89a 3000 	ldrb.w	r3, [sl]
 800be38:	2b2a      	cmp	r3, #42	@ 0x2a
 800be3a:	d015      	beq.n	800be68 <_vfiprintf_r+0x120>
 800be3c:	9a07      	ldr	r2, [sp, #28]
 800be3e:	4654      	mov	r4, sl
 800be40:	2000      	movs	r0, #0
 800be42:	f04f 0c0a 	mov.w	ip, #10
 800be46:	4621      	mov	r1, r4
 800be48:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be4c:	3b30      	subs	r3, #48	@ 0x30
 800be4e:	2b09      	cmp	r3, #9
 800be50:	d94b      	bls.n	800beea <_vfiprintf_r+0x1a2>
 800be52:	b1b0      	cbz	r0, 800be82 <_vfiprintf_r+0x13a>
 800be54:	9207      	str	r2, [sp, #28]
 800be56:	e014      	b.n	800be82 <_vfiprintf_r+0x13a>
 800be58:	eba0 0308 	sub.w	r3, r0, r8
 800be5c:	fa09 f303 	lsl.w	r3, r9, r3
 800be60:	4313      	orrs	r3, r2
 800be62:	9304      	str	r3, [sp, #16]
 800be64:	46a2      	mov	sl, r4
 800be66:	e7d2      	b.n	800be0e <_vfiprintf_r+0xc6>
 800be68:	9b03      	ldr	r3, [sp, #12]
 800be6a:	1d19      	adds	r1, r3, #4
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	9103      	str	r1, [sp, #12]
 800be70:	2b00      	cmp	r3, #0
 800be72:	bfbb      	ittet	lt
 800be74:	425b      	neglt	r3, r3
 800be76:	f042 0202 	orrlt.w	r2, r2, #2
 800be7a:	9307      	strge	r3, [sp, #28]
 800be7c:	9307      	strlt	r3, [sp, #28]
 800be7e:	bfb8      	it	lt
 800be80:	9204      	strlt	r2, [sp, #16]
 800be82:	7823      	ldrb	r3, [r4, #0]
 800be84:	2b2e      	cmp	r3, #46	@ 0x2e
 800be86:	d10a      	bne.n	800be9e <_vfiprintf_r+0x156>
 800be88:	7863      	ldrb	r3, [r4, #1]
 800be8a:	2b2a      	cmp	r3, #42	@ 0x2a
 800be8c:	d132      	bne.n	800bef4 <_vfiprintf_r+0x1ac>
 800be8e:	9b03      	ldr	r3, [sp, #12]
 800be90:	1d1a      	adds	r2, r3, #4
 800be92:	681b      	ldr	r3, [r3, #0]
 800be94:	9203      	str	r2, [sp, #12]
 800be96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be9a:	3402      	adds	r4, #2
 800be9c:	9305      	str	r3, [sp, #20]
 800be9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800bf74 <_vfiprintf_r+0x22c>
 800bea2:	7821      	ldrb	r1, [r4, #0]
 800bea4:	2203      	movs	r2, #3
 800bea6:	4650      	mov	r0, sl
 800bea8:	f7f4 fada 	bl	8000460 <memchr>
 800beac:	b138      	cbz	r0, 800bebe <_vfiprintf_r+0x176>
 800beae:	9b04      	ldr	r3, [sp, #16]
 800beb0:	eba0 000a 	sub.w	r0, r0, sl
 800beb4:	2240      	movs	r2, #64	@ 0x40
 800beb6:	4082      	lsls	r2, r0
 800beb8:	4313      	orrs	r3, r2
 800beba:	3401      	adds	r4, #1
 800bebc:	9304      	str	r3, [sp, #16]
 800bebe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bec2:	4829      	ldr	r0, [pc, #164]	@ (800bf68 <_vfiprintf_r+0x220>)
 800bec4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800bec8:	2206      	movs	r2, #6
 800beca:	f7f4 fac9 	bl	8000460 <memchr>
 800bece:	2800      	cmp	r0, #0
 800bed0:	d03f      	beq.n	800bf52 <_vfiprintf_r+0x20a>
 800bed2:	4b26      	ldr	r3, [pc, #152]	@ (800bf6c <_vfiprintf_r+0x224>)
 800bed4:	bb1b      	cbnz	r3, 800bf1e <_vfiprintf_r+0x1d6>
 800bed6:	9b03      	ldr	r3, [sp, #12]
 800bed8:	3307      	adds	r3, #7
 800beda:	f023 0307 	bic.w	r3, r3, #7
 800bede:	3308      	adds	r3, #8
 800bee0:	9303      	str	r3, [sp, #12]
 800bee2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bee4:	443b      	add	r3, r7
 800bee6:	9309      	str	r3, [sp, #36]	@ 0x24
 800bee8:	e76a      	b.n	800bdc0 <_vfiprintf_r+0x78>
 800beea:	fb0c 3202 	mla	r2, ip, r2, r3
 800beee:	460c      	mov	r4, r1
 800bef0:	2001      	movs	r0, #1
 800bef2:	e7a8      	b.n	800be46 <_vfiprintf_r+0xfe>
 800bef4:	2300      	movs	r3, #0
 800bef6:	3401      	adds	r4, #1
 800bef8:	9305      	str	r3, [sp, #20]
 800befa:	4619      	mov	r1, r3
 800befc:	f04f 0c0a 	mov.w	ip, #10
 800bf00:	4620      	mov	r0, r4
 800bf02:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf06:	3a30      	subs	r2, #48	@ 0x30
 800bf08:	2a09      	cmp	r2, #9
 800bf0a:	d903      	bls.n	800bf14 <_vfiprintf_r+0x1cc>
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	d0c6      	beq.n	800be9e <_vfiprintf_r+0x156>
 800bf10:	9105      	str	r1, [sp, #20]
 800bf12:	e7c4      	b.n	800be9e <_vfiprintf_r+0x156>
 800bf14:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf18:	4604      	mov	r4, r0
 800bf1a:	2301      	movs	r3, #1
 800bf1c:	e7f0      	b.n	800bf00 <_vfiprintf_r+0x1b8>
 800bf1e:	ab03      	add	r3, sp, #12
 800bf20:	9300      	str	r3, [sp, #0]
 800bf22:	462a      	mov	r2, r5
 800bf24:	4b12      	ldr	r3, [pc, #72]	@ (800bf70 <_vfiprintf_r+0x228>)
 800bf26:	a904      	add	r1, sp, #16
 800bf28:	4630      	mov	r0, r6
 800bf2a:	f7fc fb7d 	bl	8008628 <_printf_float>
 800bf2e:	4607      	mov	r7, r0
 800bf30:	1c78      	adds	r0, r7, #1
 800bf32:	d1d6      	bne.n	800bee2 <_vfiprintf_r+0x19a>
 800bf34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bf36:	07d9      	lsls	r1, r3, #31
 800bf38:	d405      	bmi.n	800bf46 <_vfiprintf_r+0x1fe>
 800bf3a:	89ab      	ldrh	r3, [r5, #12]
 800bf3c:	059a      	lsls	r2, r3, #22
 800bf3e:	d402      	bmi.n	800bf46 <_vfiprintf_r+0x1fe>
 800bf40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800bf42:	f7fd faf3 	bl	800952c <__retarget_lock_release_recursive>
 800bf46:	89ab      	ldrh	r3, [r5, #12]
 800bf48:	065b      	lsls	r3, r3, #25
 800bf4a:	f53f af1f 	bmi.w	800bd8c <_vfiprintf_r+0x44>
 800bf4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bf50:	e71e      	b.n	800bd90 <_vfiprintf_r+0x48>
 800bf52:	ab03      	add	r3, sp, #12
 800bf54:	9300      	str	r3, [sp, #0]
 800bf56:	462a      	mov	r2, r5
 800bf58:	4b05      	ldr	r3, [pc, #20]	@ (800bf70 <_vfiprintf_r+0x228>)
 800bf5a:	a904      	add	r1, sp, #16
 800bf5c:	4630      	mov	r0, r6
 800bf5e:	f7fc fdfb 	bl	8008b58 <_printf_i>
 800bf62:	e7e4      	b.n	800bf2e <_vfiprintf_r+0x1e6>
 800bf64:	0800d029 	.word	0x0800d029
 800bf68:	0800d033 	.word	0x0800d033
 800bf6c:	08008629 	.word	0x08008629
 800bf70:	0800bd23 	.word	0x0800bd23
 800bf74:	0800d02f 	.word	0x0800d02f

0800bf78 <__sflush_r>:
 800bf78:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bf7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf80:	0716      	lsls	r6, r2, #28
 800bf82:	4605      	mov	r5, r0
 800bf84:	460c      	mov	r4, r1
 800bf86:	d454      	bmi.n	800c032 <__sflush_r+0xba>
 800bf88:	684b      	ldr	r3, [r1, #4]
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	dc02      	bgt.n	800bf94 <__sflush_r+0x1c>
 800bf8e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	dd48      	ble.n	800c026 <__sflush_r+0xae>
 800bf94:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bf96:	2e00      	cmp	r6, #0
 800bf98:	d045      	beq.n	800c026 <__sflush_r+0xae>
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800bfa0:	682f      	ldr	r7, [r5, #0]
 800bfa2:	6a21      	ldr	r1, [r4, #32]
 800bfa4:	602b      	str	r3, [r5, #0]
 800bfa6:	d030      	beq.n	800c00a <__sflush_r+0x92>
 800bfa8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bfaa:	89a3      	ldrh	r3, [r4, #12]
 800bfac:	0759      	lsls	r1, r3, #29
 800bfae:	d505      	bpl.n	800bfbc <__sflush_r+0x44>
 800bfb0:	6863      	ldr	r3, [r4, #4]
 800bfb2:	1ad2      	subs	r2, r2, r3
 800bfb4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800bfb6:	b10b      	cbz	r3, 800bfbc <__sflush_r+0x44>
 800bfb8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bfba:	1ad2      	subs	r2, r2, r3
 800bfbc:	2300      	movs	r3, #0
 800bfbe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bfc0:	6a21      	ldr	r1, [r4, #32]
 800bfc2:	4628      	mov	r0, r5
 800bfc4:	47b0      	blx	r6
 800bfc6:	1c43      	adds	r3, r0, #1
 800bfc8:	89a3      	ldrh	r3, [r4, #12]
 800bfca:	d106      	bne.n	800bfda <__sflush_r+0x62>
 800bfcc:	6829      	ldr	r1, [r5, #0]
 800bfce:	291d      	cmp	r1, #29
 800bfd0:	d82b      	bhi.n	800c02a <__sflush_r+0xb2>
 800bfd2:	4a2a      	ldr	r2, [pc, #168]	@ (800c07c <__sflush_r+0x104>)
 800bfd4:	410a      	asrs	r2, r1
 800bfd6:	07d6      	lsls	r6, r2, #31
 800bfd8:	d427      	bmi.n	800c02a <__sflush_r+0xb2>
 800bfda:	2200      	movs	r2, #0
 800bfdc:	6062      	str	r2, [r4, #4]
 800bfde:	04d9      	lsls	r1, r3, #19
 800bfe0:	6922      	ldr	r2, [r4, #16]
 800bfe2:	6022      	str	r2, [r4, #0]
 800bfe4:	d504      	bpl.n	800bff0 <__sflush_r+0x78>
 800bfe6:	1c42      	adds	r2, r0, #1
 800bfe8:	d101      	bne.n	800bfee <__sflush_r+0x76>
 800bfea:	682b      	ldr	r3, [r5, #0]
 800bfec:	b903      	cbnz	r3, 800bff0 <__sflush_r+0x78>
 800bfee:	6560      	str	r0, [r4, #84]	@ 0x54
 800bff0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bff2:	602f      	str	r7, [r5, #0]
 800bff4:	b1b9      	cbz	r1, 800c026 <__sflush_r+0xae>
 800bff6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bffa:	4299      	cmp	r1, r3
 800bffc:	d002      	beq.n	800c004 <__sflush_r+0x8c>
 800bffe:	4628      	mov	r0, r5
 800c000:	f7fe f8ea 	bl	800a1d8 <_free_r>
 800c004:	2300      	movs	r3, #0
 800c006:	6363      	str	r3, [r4, #52]	@ 0x34
 800c008:	e00d      	b.n	800c026 <__sflush_r+0xae>
 800c00a:	2301      	movs	r3, #1
 800c00c:	4628      	mov	r0, r5
 800c00e:	47b0      	blx	r6
 800c010:	4602      	mov	r2, r0
 800c012:	1c50      	adds	r0, r2, #1
 800c014:	d1c9      	bne.n	800bfaa <__sflush_r+0x32>
 800c016:	682b      	ldr	r3, [r5, #0]
 800c018:	2b00      	cmp	r3, #0
 800c01a:	d0c6      	beq.n	800bfaa <__sflush_r+0x32>
 800c01c:	2b1d      	cmp	r3, #29
 800c01e:	d001      	beq.n	800c024 <__sflush_r+0xac>
 800c020:	2b16      	cmp	r3, #22
 800c022:	d11e      	bne.n	800c062 <__sflush_r+0xea>
 800c024:	602f      	str	r7, [r5, #0]
 800c026:	2000      	movs	r0, #0
 800c028:	e022      	b.n	800c070 <__sflush_r+0xf8>
 800c02a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c02e:	b21b      	sxth	r3, r3
 800c030:	e01b      	b.n	800c06a <__sflush_r+0xf2>
 800c032:	690f      	ldr	r7, [r1, #16]
 800c034:	2f00      	cmp	r7, #0
 800c036:	d0f6      	beq.n	800c026 <__sflush_r+0xae>
 800c038:	0793      	lsls	r3, r2, #30
 800c03a:	680e      	ldr	r6, [r1, #0]
 800c03c:	bf08      	it	eq
 800c03e:	694b      	ldreq	r3, [r1, #20]
 800c040:	600f      	str	r7, [r1, #0]
 800c042:	bf18      	it	ne
 800c044:	2300      	movne	r3, #0
 800c046:	eba6 0807 	sub.w	r8, r6, r7
 800c04a:	608b      	str	r3, [r1, #8]
 800c04c:	f1b8 0f00 	cmp.w	r8, #0
 800c050:	dde9      	ble.n	800c026 <__sflush_r+0xae>
 800c052:	6a21      	ldr	r1, [r4, #32]
 800c054:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800c056:	4643      	mov	r3, r8
 800c058:	463a      	mov	r2, r7
 800c05a:	4628      	mov	r0, r5
 800c05c:	47b0      	blx	r6
 800c05e:	2800      	cmp	r0, #0
 800c060:	dc08      	bgt.n	800c074 <__sflush_r+0xfc>
 800c062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c066:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c06a:	81a3      	strh	r3, [r4, #12]
 800c06c:	f04f 30ff 	mov.w	r0, #4294967295
 800c070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c074:	4407      	add	r7, r0
 800c076:	eba8 0800 	sub.w	r8, r8, r0
 800c07a:	e7e7      	b.n	800c04c <__sflush_r+0xd4>
 800c07c:	dfbffffe 	.word	0xdfbffffe

0800c080 <_fflush_r>:
 800c080:	b538      	push	{r3, r4, r5, lr}
 800c082:	690b      	ldr	r3, [r1, #16]
 800c084:	4605      	mov	r5, r0
 800c086:	460c      	mov	r4, r1
 800c088:	b913      	cbnz	r3, 800c090 <_fflush_r+0x10>
 800c08a:	2500      	movs	r5, #0
 800c08c:	4628      	mov	r0, r5
 800c08e:	bd38      	pop	{r3, r4, r5, pc}
 800c090:	b118      	cbz	r0, 800c09a <_fflush_r+0x1a>
 800c092:	6a03      	ldr	r3, [r0, #32]
 800c094:	b90b      	cbnz	r3, 800c09a <_fflush_r+0x1a>
 800c096:	f7fd f91f 	bl	80092d8 <__sinit>
 800c09a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d0f3      	beq.n	800c08a <_fflush_r+0xa>
 800c0a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c0a4:	07d0      	lsls	r0, r2, #31
 800c0a6:	d404      	bmi.n	800c0b2 <_fflush_r+0x32>
 800c0a8:	0599      	lsls	r1, r3, #22
 800c0aa:	d402      	bmi.n	800c0b2 <_fflush_r+0x32>
 800c0ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0ae:	f7fd fa3c 	bl	800952a <__retarget_lock_acquire_recursive>
 800c0b2:	4628      	mov	r0, r5
 800c0b4:	4621      	mov	r1, r4
 800c0b6:	f7ff ff5f 	bl	800bf78 <__sflush_r>
 800c0ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c0bc:	07da      	lsls	r2, r3, #31
 800c0be:	4605      	mov	r5, r0
 800c0c0:	d4e4      	bmi.n	800c08c <_fflush_r+0xc>
 800c0c2:	89a3      	ldrh	r3, [r4, #12]
 800c0c4:	059b      	lsls	r3, r3, #22
 800c0c6:	d4e1      	bmi.n	800c08c <_fflush_r+0xc>
 800c0c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c0ca:	f7fd fa2f 	bl	800952c <__retarget_lock_release_recursive>
 800c0ce:	e7dd      	b.n	800c08c <_fflush_r+0xc>

0800c0d0 <__swbuf_r>:
 800c0d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c0d2:	460e      	mov	r6, r1
 800c0d4:	4614      	mov	r4, r2
 800c0d6:	4605      	mov	r5, r0
 800c0d8:	b118      	cbz	r0, 800c0e2 <__swbuf_r+0x12>
 800c0da:	6a03      	ldr	r3, [r0, #32]
 800c0dc:	b90b      	cbnz	r3, 800c0e2 <__swbuf_r+0x12>
 800c0de:	f7fd f8fb 	bl	80092d8 <__sinit>
 800c0e2:	69a3      	ldr	r3, [r4, #24]
 800c0e4:	60a3      	str	r3, [r4, #8]
 800c0e6:	89a3      	ldrh	r3, [r4, #12]
 800c0e8:	071a      	lsls	r2, r3, #28
 800c0ea:	d501      	bpl.n	800c0f0 <__swbuf_r+0x20>
 800c0ec:	6923      	ldr	r3, [r4, #16]
 800c0ee:	b943      	cbnz	r3, 800c102 <__swbuf_r+0x32>
 800c0f0:	4621      	mov	r1, r4
 800c0f2:	4628      	mov	r0, r5
 800c0f4:	f000 f82a 	bl	800c14c <__swsetup_r>
 800c0f8:	b118      	cbz	r0, 800c102 <__swbuf_r+0x32>
 800c0fa:	f04f 37ff 	mov.w	r7, #4294967295
 800c0fe:	4638      	mov	r0, r7
 800c100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c102:	6823      	ldr	r3, [r4, #0]
 800c104:	6922      	ldr	r2, [r4, #16]
 800c106:	1a98      	subs	r0, r3, r2
 800c108:	6963      	ldr	r3, [r4, #20]
 800c10a:	b2f6      	uxtb	r6, r6
 800c10c:	4283      	cmp	r3, r0
 800c10e:	4637      	mov	r7, r6
 800c110:	dc05      	bgt.n	800c11e <__swbuf_r+0x4e>
 800c112:	4621      	mov	r1, r4
 800c114:	4628      	mov	r0, r5
 800c116:	f7ff ffb3 	bl	800c080 <_fflush_r>
 800c11a:	2800      	cmp	r0, #0
 800c11c:	d1ed      	bne.n	800c0fa <__swbuf_r+0x2a>
 800c11e:	68a3      	ldr	r3, [r4, #8]
 800c120:	3b01      	subs	r3, #1
 800c122:	60a3      	str	r3, [r4, #8]
 800c124:	6823      	ldr	r3, [r4, #0]
 800c126:	1c5a      	adds	r2, r3, #1
 800c128:	6022      	str	r2, [r4, #0]
 800c12a:	701e      	strb	r6, [r3, #0]
 800c12c:	6962      	ldr	r2, [r4, #20]
 800c12e:	1c43      	adds	r3, r0, #1
 800c130:	429a      	cmp	r2, r3
 800c132:	d004      	beq.n	800c13e <__swbuf_r+0x6e>
 800c134:	89a3      	ldrh	r3, [r4, #12]
 800c136:	07db      	lsls	r3, r3, #31
 800c138:	d5e1      	bpl.n	800c0fe <__swbuf_r+0x2e>
 800c13a:	2e0a      	cmp	r6, #10
 800c13c:	d1df      	bne.n	800c0fe <__swbuf_r+0x2e>
 800c13e:	4621      	mov	r1, r4
 800c140:	4628      	mov	r0, r5
 800c142:	f7ff ff9d 	bl	800c080 <_fflush_r>
 800c146:	2800      	cmp	r0, #0
 800c148:	d0d9      	beq.n	800c0fe <__swbuf_r+0x2e>
 800c14a:	e7d6      	b.n	800c0fa <__swbuf_r+0x2a>

0800c14c <__swsetup_r>:
 800c14c:	b538      	push	{r3, r4, r5, lr}
 800c14e:	4b29      	ldr	r3, [pc, #164]	@ (800c1f4 <__swsetup_r+0xa8>)
 800c150:	4605      	mov	r5, r0
 800c152:	6818      	ldr	r0, [r3, #0]
 800c154:	460c      	mov	r4, r1
 800c156:	b118      	cbz	r0, 800c160 <__swsetup_r+0x14>
 800c158:	6a03      	ldr	r3, [r0, #32]
 800c15a:	b90b      	cbnz	r3, 800c160 <__swsetup_r+0x14>
 800c15c:	f7fd f8bc 	bl	80092d8 <__sinit>
 800c160:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c164:	0719      	lsls	r1, r3, #28
 800c166:	d422      	bmi.n	800c1ae <__swsetup_r+0x62>
 800c168:	06da      	lsls	r2, r3, #27
 800c16a:	d407      	bmi.n	800c17c <__swsetup_r+0x30>
 800c16c:	2209      	movs	r2, #9
 800c16e:	602a      	str	r2, [r5, #0]
 800c170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c174:	81a3      	strh	r3, [r4, #12]
 800c176:	f04f 30ff 	mov.w	r0, #4294967295
 800c17a:	e033      	b.n	800c1e4 <__swsetup_r+0x98>
 800c17c:	0758      	lsls	r0, r3, #29
 800c17e:	d512      	bpl.n	800c1a6 <__swsetup_r+0x5a>
 800c180:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c182:	b141      	cbz	r1, 800c196 <__swsetup_r+0x4a>
 800c184:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c188:	4299      	cmp	r1, r3
 800c18a:	d002      	beq.n	800c192 <__swsetup_r+0x46>
 800c18c:	4628      	mov	r0, r5
 800c18e:	f7fe f823 	bl	800a1d8 <_free_r>
 800c192:	2300      	movs	r3, #0
 800c194:	6363      	str	r3, [r4, #52]	@ 0x34
 800c196:	89a3      	ldrh	r3, [r4, #12]
 800c198:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800c19c:	81a3      	strh	r3, [r4, #12]
 800c19e:	2300      	movs	r3, #0
 800c1a0:	6063      	str	r3, [r4, #4]
 800c1a2:	6923      	ldr	r3, [r4, #16]
 800c1a4:	6023      	str	r3, [r4, #0]
 800c1a6:	89a3      	ldrh	r3, [r4, #12]
 800c1a8:	f043 0308 	orr.w	r3, r3, #8
 800c1ac:	81a3      	strh	r3, [r4, #12]
 800c1ae:	6923      	ldr	r3, [r4, #16]
 800c1b0:	b94b      	cbnz	r3, 800c1c6 <__swsetup_r+0x7a>
 800c1b2:	89a3      	ldrh	r3, [r4, #12]
 800c1b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800c1b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1bc:	d003      	beq.n	800c1c6 <__swsetup_r+0x7a>
 800c1be:	4621      	mov	r1, r4
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	f000 fc5d 	bl	800ca80 <__smakebuf_r>
 800c1c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c1ca:	f013 0201 	ands.w	r2, r3, #1
 800c1ce:	d00a      	beq.n	800c1e6 <__swsetup_r+0x9a>
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	60a2      	str	r2, [r4, #8]
 800c1d4:	6962      	ldr	r2, [r4, #20]
 800c1d6:	4252      	negs	r2, r2
 800c1d8:	61a2      	str	r2, [r4, #24]
 800c1da:	6922      	ldr	r2, [r4, #16]
 800c1dc:	b942      	cbnz	r2, 800c1f0 <__swsetup_r+0xa4>
 800c1de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800c1e2:	d1c5      	bne.n	800c170 <__swsetup_r+0x24>
 800c1e4:	bd38      	pop	{r3, r4, r5, pc}
 800c1e6:	0799      	lsls	r1, r3, #30
 800c1e8:	bf58      	it	pl
 800c1ea:	6962      	ldrpl	r2, [r4, #20]
 800c1ec:	60a2      	str	r2, [r4, #8]
 800c1ee:	e7f4      	b.n	800c1da <__swsetup_r+0x8e>
 800c1f0:	2000      	movs	r0, #0
 800c1f2:	e7f7      	b.n	800c1e4 <__swsetup_r+0x98>
 800c1f4:	2000001c 	.word	0x2000001c

0800c1f8 <memmove>:
 800c1f8:	4288      	cmp	r0, r1
 800c1fa:	b510      	push	{r4, lr}
 800c1fc:	eb01 0402 	add.w	r4, r1, r2
 800c200:	d902      	bls.n	800c208 <memmove+0x10>
 800c202:	4284      	cmp	r4, r0
 800c204:	4623      	mov	r3, r4
 800c206:	d807      	bhi.n	800c218 <memmove+0x20>
 800c208:	1e43      	subs	r3, r0, #1
 800c20a:	42a1      	cmp	r1, r4
 800c20c:	d008      	beq.n	800c220 <memmove+0x28>
 800c20e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c212:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c216:	e7f8      	b.n	800c20a <memmove+0x12>
 800c218:	4402      	add	r2, r0
 800c21a:	4601      	mov	r1, r0
 800c21c:	428a      	cmp	r2, r1
 800c21e:	d100      	bne.n	800c222 <memmove+0x2a>
 800c220:	bd10      	pop	{r4, pc}
 800c222:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c226:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c22a:	e7f7      	b.n	800c21c <memmove+0x24>

0800c22c <strncmp>:
 800c22c:	b510      	push	{r4, lr}
 800c22e:	b16a      	cbz	r2, 800c24c <strncmp+0x20>
 800c230:	3901      	subs	r1, #1
 800c232:	1884      	adds	r4, r0, r2
 800c234:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c238:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c23c:	429a      	cmp	r2, r3
 800c23e:	d103      	bne.n	800c248 <strncmp+0x1c>
 800c240:	42a0      	cmp	r0, r4
 800c242:	d001      	beq.n	800c248 <strncmp+0x1c>
 800c244:	2a00      	cmp	r2, #0
 800c246:	d1f5      	bne.n	800c234 <strncmp+0x8>
 800c248:	1ad0      	subs	r0, r2, r3
 800c24a:	bd10      	pop	{r4, pc}
 800c24c:	4610      	mov	r0, r2
 800c24e:	e7fc      	b.n	800c24a <strncmp+0x1e>

0800c250 <_sbrk_r>:
 800c250:	b538      	push	{r3, r4, r5, lr}
 800c252:	4d06      	ldr	r5, [pc, #24]	@ (800c26c <_sbrk_r+0x1c>)
 800c254:	2300      	movs	r3, #0
 800c256:	4604      	mov	r4, r0
 800c258:	4608      	mov	r0, r1
 800c25a:	602b      	str	r3, [r5, #0]
 800c25c:	f7f6 fbb4 	bl	80029c8 <_sbrk>
 800c260:	1c43      	adds	r3, r0, #1
 800c262:	d102      	bne.n	800c26a <_sbrk_r+0x1a>
 800c264:	682b      	ldr	r3, [r5, #0]
 800c266:	b103      	cbz	r3, 800c26a <_sbrk_r+0x1a>
 800c268:	6023      	str	r3, [r4, #0]
 800c26a:	bd38      	pop	{r3, r4, r5, pc}
 800c26c:	20002934 	.word	0x20002934

0800c270 <memcpy>:
 800c270:	440a      	add	r2, r1
 800c272:	4291      	cmp	r1, r2
 800c274:	f100 33ff 	add.w	r3, r0, #4294967295
 800c278:	d100      	bne.n	800c27c <memcpy+0xc>
 800c27a:	4770      	bx	lr
 800c27c:	b510      	push	{r4, lr}
 800c27e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c282:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c286:	4291      	cmp	r1, r2
 800c288:	d1f9      	bne.n	800c27e <memcpy+0xe>
 800c28a:	bd10      	pop	{r4, pc}
 800c28c:	0000      	movs	r0, r0
	...

0800c290 <nan>:
 800c290:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c298 <nan+0x8>
 800c294:	4770      	bx	lr
 800c296:	bf00      	nop
 800c298:	00000000 	.word	0x00000000
 800c29c:	7ff80000 	.word	0x7ff80000

0800c2a0 <__assert_func>:
 800c2a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2a2:	4614      	mov	r4, r2
 800c2a4:	461a      	mov	r2, r3
 800c2a6:	4b09      	ldr	r3, [pc, #36]	@ (800c2cc <__assert_func+0x2c>)
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4605      	mov	r5, r0
 800c2ac:	68d8      	ldr	r0, [r3, #12]
 800c2ae:	b954      	cbnz	r4, 800c2c6 <__assert_func+0x26>
 800c2b0:	4b07      	ldr	r3, [pc, #28]	@ (800c2d0 <__assert_func+0x30>)
 800c2b2:	461c      	mov	r4, r3
 800c2b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2b8:	9100      	str	r1, [sp, #0]
 800c2ba:	462b      	mov	r3, r5
 800c2bc:	4905      	ldr	r1, [pc, #20]	@ (800c2d4 <__assert_func+0x34>)
 800c2be:	f000 fba7 	bl	800ca10 <fiprintf>
 800c2c2:	f000 fc3b 	bl	800cb3c <abort>
 800c2c6:	4b04      	ldr	r3, [pc, #16]	@ (800c2d8 <__assert_func+0x38>)
 800c2c8:	e7f4      	b.n	800c2b4 <__assert_func+0x14>
 800c2ca:	bf00      	nop
 800c2cc:	2000001c 	.word	0x2000001c
 800c2d0:	0800d07d 	.word	0x0800d07d
 800c2d4:	0800d04f 	.word	0x0800d04f
 800c2d8:	0800d042 	.word	0x0800d042

0800c2dc <_calloc_r>:
 800c2dc:	b570      	push	{r4, r5, r6, lr}
 800c2de:	fba1 5402 	umull	r5, r4, r1, r2
 800c2e2:	b93c      	cbnz	r4, 800c2f4 <_calloc_r+0x18>
 800c2e4:	4629      	mov	r1, r5
 800c2e6:	f7fd ffeb 	bl	800a2c0 <_malloc_r>
 800c2ea:	4606      	mov	r6, r0
 800c2ec:	b928      	cbnz	r0, 800c2fa <_calloc_r+0x1e>
 800c2ee:	2600      	movs	r6, #0
 800c2f0:	4630      	mov	r0, r6
 800c2f2:	bd70      	pop	{r4, r5, r6, pc}
 800c2f4:	220c      	movs	r2, #12
 800c2f6:	6002      	str	r2, [r0, #0]
 800c2f8:	e7f9      	b.n	800c2ee <_calloc_r+0x12>
 800c2fa:	462a      	mov	r2, r5
 800c2fc:	4621      	mov	r1, r4
 800c2fe:	f7fd f896 	bl	800942e <memset>
 800c302:	e7f5      	b.n	800c2f0 <_calloc_r+0x14>

0800c304 <rshift>:
 800c304:	6903      	ldr	r3, [r0, #16]
 800c306:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c30a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c30e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c312:	f100 0414 	add.w	r4, r0, #20
 800c316:	dd45      	ble.n	800c3a4 <rshift+0xa0>
 800c318:	f011 011f 	ands.w	r1, r1, #31
 800c31c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c320:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c324:	d10c      	bne.n	800c340 <rshift+0x3c>
 800c326:	f100 0710 	add.w	r7, r0, #16
 800c32a:	4629      	mov	r1, r5
 800c32c:	42b1      	cmp	r1, r6
 800c32e:	d334      	bcc.n	800c39a <rshift+0x96>
 800c330:	1a9b      	subs	r3, r3, r2
 800c332:	009b      	lsls	r3, r3, #2
 800c334:	1eea      	subs	r2, r5, #3
 800c336:	4296      	cmp	r6, r2
 800c338:	bf38      	it	cc
 800c33a:	2300      	movcc	r3, #0
 800c33c:	4423      	add	r3, r4
 800c33e:	e015      	b.n	800c36c <rshift+0x68>
 800c340:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c344:	f1c1 0820 	rsb	r8, r1, #32
 800c348:	40cf      	lsrs	r7, r1
 800c34a:	f105 0e04 	add.w	lr, r5, #4
 800c34e:	46a1      	mov	r9, r4
 800c350:	4576      	cmp	r6, lr
 800c352:	46f4      	mov	ip, lr
 800c354:	d815      	bhi.n	800c382 <rshift+0x7e>
 800c356:	1a9a      	subs	r2, r3, r2
 800c358:	0092      	lsls	r2, r2, #2
 800c35a:	3a04      	subs	r2, #4
 800c35c:	3501      	adds	r5, #1
 800c35e:	42ae      	cmp	r6, r5
 800c360:	bf38      	it	cc
 800c362:	2200      	movcc	r2, #0
 800c364:	18a3      	adds	r3, r4, r2
 800c366:	50a7      	str	r7, [r4, r2]
 800c368:	b107      	cbz	r7, 800c36c <rshift+0x68>
 800c36a:	3304      	adds	r3, #4
 800c36c:	1b1a      	subs	r2, r3, r4
 800c36e:	42a3      	cmp	r3, r4
 800c370:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c374:	bf08      	it	eq
 800c376:	2300      	moveq	r3, #0
 800c378:	6102      	str	r2, [r0, #16]
 800c37a:	bf08      	it	eq
 800c37c:	6143      	streq	r3, [r0, #20]
 800c37e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c382:	f8dc c000 	ldr.w	ip, [ip]
 800c386:	fa0c fc08 	lsl.w	ip, ip, r8
 800c38a:	ea4c 0707 	orr.w	r7, ip, r7
 800c38e:	f849 7b04 	str.w	r7, [r9], #4
 800c392:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c396:	40cf      	lsrs	r7, r1
 800c398:	e7da      	b.n	800c350 <rshift+0x4c>
 800c39a:	f851 cb04 	ldr.w	ip, [r1], #4
 800c39e:	f847 cf04 	str.w	ip, [r7, #4]!
 800c3a2:	e7c3      	b.n	800c32c <rshift+0x28>
 800c3a4:	4623      	mov	r3, r4
 800c3a6:	e7e1      	b.n	800c36c <rshift+0x68>

0800c3a8 <__hexdig_fun>:
 800c3a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800c3ac:	2b09      	cmp	r3, #9
 800c3ae:	d802      	bhi.n	800c3b6 <__hexdig_fun+0xe>
 800c3b0:	3820      	subs	r0, #32
 800c3b2:	b2c0      	uxtb	r0, r0
 800c3b4:	4770      	bx	lr
 800c3b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800c3ba:	2b05      	cmp	r3, #5
 800c3bc:	d801      	bhi.n	800c3c2 <__hexdig_fun+0x1a>
 800c3be:	3847      	subs	r0, #71	@ 0x47
 800c3c0:	e7f7      	b.n	800c3b2 <__hexdig_fun+0xa>
 800c3c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800c3c6:	2b05      	cmp	r3, #5
 800c3c8:	d801      	bhi.n	800c3ce <__hexdig_fun+0x26>
 800c3ca:	3827      	subs	r0, #39	@ 0x27
 800c3cc:	e7f1      	b.n	800c3b2 <__hexdig_fun+0xa>
 800c3ce:	2000      	movs	r0, #0
 800c3d0:	4770      	bx	lr
	...

0800c3d4 <__gethex>:
 800c3d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3d8:	b085      	sub	sp, #20
 800c3da:	468a      	mov	sl, r1
 800c3dc:	9302      	str	r3, [sp, #8]
 800c3de:	680b      	ldr	r3, [r1, #0]
 800c3e0:	9001      	str	r0, [sp, #4]
 800c3e2:	4690      	mov	r8, r2
 800c3e4:	1c9c      	adds	r4, r3, #2
 800c3e6:	46a1      	mov	r9, r4
 800c3e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 800c3ec:	2830      	cmp	r0, #48	@ 0x30
 800c3ee:	d0fa      	beq.n	800c3e6 <__gethex+0x12>
 800c3f0:	eba9 0303 	sub.w	r3, r9, r3
 800c3f4:	f1a3 0b02 	sub.w	fp, r3, #2
 800c3f8:	f7ff ffd6 	bl	800c3a8 <__hexdig_fun>
 800c3fc:	4605      	mov	r5, r0
 800c3fe:	2800      	cmp	r0, #0
 800c400:	d168      	bne.n	800c4d4 <__gethex+0x100>
 800c402:	49a0      	ldr	r1, [pc, #640]	@ (800c684 <__gethex+0x2b0>)
 800c404:	2201      	movs	r2, #1
 800c406:	4648      	mov	r0, r9
 800c408:	f7ff ff10 	bl	800c22c <strncmp>
 800c40c:	4607      	mov	r7, r0
 800c40e:	2800      	cmp	r0, #0
 800c410:	d167      	bne.n	800c4e2 <__gethex+0x10e>
 800c412:	f899 0001 	ldrb.w	r0, [r9, #1]
 800c416:	4626      	mov	r6, r4
 800c418:	f7ff ffc6 	bl	800c3a8 <__hexdig_fun>
 800c41c:	2800      	cmp	r0, #0
 800c41e:	d062      	beq.n	800c4e6 <__gethex+0x112>
 800c420:	4623      	mov	r3, r4
 800c422:	7818      	ldrb	r0, [r3, #0]
 800c424:	2830      	cmp	r0, #48	@ 0x30
 800c426:	4699      	mov	r9, r3
 800c428:	f103 0301 	add.w	r3, r3, #1
 800c42c:	d0f9      	beq.n	800c422 <__gethex+0x4e>
 800c42e:	f7ff ffbb 	bl	800c3a8 <__hexdig_fun>
 800c432:	fab0 f580 	clz	r5, r0
 800c436:	096d      	lsrs	r5, r5, #5
 800c438:	f04f 0b01 	mov.w	fp, #1
 800c43c:	464a      	mov	r2, r9
 800c43e:	4616      	mov	r6, r2
 800c440:	3201      	adds	r2, #1
 800c442:	7830      	ldrb	r0, [r6, #0]
 800c444:	f7ff ffb0 	bl	800c3a8 <__hexdig_fun>
 800c448:	2800      	cmp	r0, #0
 800c44a:	d1f8      	bne.n	800c43e <__gethex+0x6a>
 800c44c:	498d      	ldr	r1, [pc, #564]	@ (800c684 <__gethex+0x2b0>)
 800c44e:	2201      	movs	r2, #1
 800c450:	4630      	mov	r0, r6
 800c452:	f7ff feeb 	bl	800c22c <strncmp>
 800c456:	2800      	cmp	r0, #0
 800c458:	d13f      	bne.n	800c4da <__gethex+0x106>
 800c45a:	b944      	cbnz	r4, 800c46e <__gethex+0x9a>
 800c45c:	1c74      	adds	r4, r6, #1
 800c45e:	4622      	mov	r2, r4
 800c460:	4616      	mov	r6, r2
 800c462:	3201      	adds	r2, #1
 800c464:	7830      	ldrb	r0, [r6, #0]
 800c466:	f7ff ff9f 	bl	800c3a8 <__hexdig_fun>
 800c46a:	2800      	cmp	r0, #0
 800c46c:	d1f8      	bne.n	800c460 <__gethex+0x8c>
 800c46e:	1ba4      	subs	r4, r4, r6
 800c470:	00a7      	lsls	r7, r4, #2
 800c472:	7833      	ldrb	r3, [r6, #0]
 800c474:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800c478:	2b50      	cmp	r3, #80	@ 0x50
 800c47a:	d13e      	bne.n	800c4fa <__gethex+0x126>
 800c47c:	7873      	ldrb	r3, [r6, #1]
 800c47e:	2b2b      	cmp	r3, #43	@ 0x2b
 800c480:	d033      	beq.n	800c4ea <__gethex+0x116>
 800c482:	2b2d      	cmp	r3, #45	@ 0x2d
 800c484:	d034      	beq.n	800c4f0 <__gethex+0x11c>
 800c486:	1c71      	adds	r1, r6, #1
 800c488:	2400      	movs	r4, #0
 800c48a:	7808      	ldrb	r0, [r1, #0]
 800c48c:	f7ff ff8c 	bl	800c3a8 <__hexdig_fun>
 800c490:	1e43      	subs	r3, r0, #1
 800c492:	b2db      	uxtb	r3, r3
 800c494:	2b18      	cmp	r3, #24
 800c496:	d830      	bhi.n	800c4fa <__gethex+0x126>
 800c498:	f1a0 0210 	sub.w	r2, r0, #16
 800c49c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c4a0:	f7ff ff82 	bl	800c3a8 <__hexdig_fun>
 800c4a4:	f100 3cff 	add.w	ip, r0, #4294967295
 800c4a8:	fa5f fc8c 	uxtb.w	ip, ip
 800c4ac:	f1bc 0f18 	cmp.w	ip, #24
 800c4b0:	f04f 030a 	mov.w	r3, #10
 800c4b4:	d91e      	bls.n	800c4f4 <__gethex+0x120>
 800c4b6:	b104      	cbz	r4, 800c4ba <__gethex+0xe6>
 800c4b8:	4252      	negs	r2, r2
 800c4ba:	4417      	add	r7, r2
 800c4bc:	f8ca 1000 	str.w	r1, [sl]
 800c4c0:	b1ed      	cbz	r5, 800c4fe <__gethex+0x12a>
 800c4c2:	f1bb 0f00 	cmp.w	fp, #0
 800c4c6:	bf0c      	ite	eq
 800c4c8:	2506      	moveq	r5, #6
 800c4ca:	2500      	movne	r5, #0
 800c4cc:	4628      	mov	r0, r5
 800c4ce:	b005      	add	sp, #20
 800c4d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4d4:	2500      	movs	r5, #0
 800c4d6:	462c      	mov	r4, r5
 800c4d8:	e7b0      	b.n	800c43c <__gethex+0x68>
 800c4da:	2c00      	cmp	r4, #0
 800c4dc:	d1c7      	bne.n	800c46e <__gethex+0x9a>
 800c4de:	4627      	mov	r7, r4
 800c4e0:	e7c7      	b.n	800c472 <__gethex+0x9e>
 800c4e2:	464e      	mov	r6, r9
 800c4e4:	462f      	mov	r7, r5
 800c4e6:	2501      	movs	r5, #1
 800c4e8:	e7c3      	b.n	800c472 <__gethex+0x9e>
 800c4ea:	2400      	movs	r4, #0
 800c4ec:	1cb1      	adds	r1, r6, #2
 800c4ee:	e7cc      	b.n	800c48a <__gethex+0xb6>
 800c4f0:	2401      	movs	r4, #1
 800c4f2:	e7fb      	b.n	800c4ec <__gethex+0x118>
 800c4f4:	fb03 0002 	mla	r0, r3, r2, r0
 800c4f8:	e7ce      	b.n	800c498 <__gethex+0xc4>
 800c4fa:	4631      	mov	r1, r6
 800c4fc:	e7de      	b.n	800c4bc <__gethex+0xe8>
 800c4fe:	eba6 0309 	sub.w	r3, r6, r9
 800c502:	3b01      	subs	r3, #1
 800c504:	4629      	mov	r1, r5
 800c506:	2b07      	cmp	r3, #7
 800c508:	dc0a      	bgt.n	800c520 <__gethex+0x14c>
 800c50a:	9801      	ldr	r0, [sp, #4]
 800c50c:	f7fd ff64 	bl	800a3d8 <_Balloc>
 800c510:	4604      	mov	r4, r0
 800c512:	b940      	cbnz	r0, 800c526 <__gethex+0x152>
 800c514:	4b5c      	ldr	r3, [pc, #368]	@ (800c688 <__gethex+0x2b4>)
 800c516:	4602      	mov	r2, r0
 800c518:	21e4      	movs	r1, #228	@ 0xe4
 800c51a:	485c      	ldr	r0, [pc, #368]	@ (800c68c <__gethex+0x2b8>)
 800c51c:	f7ff fec0 	bl	800c2a0 <__assert_func>
 800c520:	3101      	adds	r1, #1
 800c522:	105b      	asrs	r3, r3, #1
 800c524:	e7ef      	b.n	800c506 <__gethex+0x132>
 800c526:	f100 0a14 	add.w	sl, r0, #20
 800c52a:	2300      	movs	r3, #0
 800c52c:	4655      	mov	r5, sl
 800c52e:	469b      	mov	fp, r3
 800c530:	45b1      	cmp	r9, r6
 800c532:	d337      	bcc.n	800c5a4 <__gethex+0x1d0>
 800c534:	f845 bb04 	str.w	fp, [r5], #4
 800c538:	eba5 050a 	sub.w	r5, r5, sl
 800c53c:	10ad      	asrs	r5, r5, #2
 800c53e:	6125      	str	r5, [r4, #16]
 800c540:	4658      	mov	r0, fp
 800c542:	f7fe f83b 	bl	800a5bc <__hi0bits>
 800c546:	016d      	lsls	r5, r5, #5
 800c548:	f8d8 6000 	ldr.w	r6, [r8]
 800c54c:	1a2d      	subs	r5, r5, r0
 800c54e:	42b5      	cmp	r5, r6
 800c550:	dd54      	ble.n	800c5fc <__gethex+0x228>
 800c552:	1bad      	subs	r5, r5, r6
 800c554:	4629      	mov	r1, r5
 800c556:	4620      	mov	r0, r4
 800c558:	f7fe fbcf 	bl	800acfa <__any_on>
 800c55c:	4681      	mov	r9, r0
 800c55e:	b178      	cbz	r0, 800c580 <__gethex+0x1ac>
 800c560:	1e6b      	subs	r3, r5, #1
 800c562:	1159      	asrs	r1, r3, #5
 800c564:	f003 021f 	and.w	r2, r3, #31
 800c568:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c56c:	f04f 0901 	mov.w	r9, #1
 800c570:	fa09 f202 	lsl.w	r2, r9, r2
 800c574:	420a      	tst	r2, r1
 800c576:	d003      	beq.n	800c580 <__gethex+0x1ac>
 800c578:	454b      	cmp	r3, r9
 800c57a:	dc36      	bgt.n	800c5ea <__gethex+0x216>
 800c57c:	f04f 0902 	mov.w	r9, #2
 800c580:	4629      	mov	r1, r5
 800c582:	4620      	mov	r0, r4
 800c584:	f7ff febe 	bl	800c304 <rshift>
 800c588:	442f      	add	r7, r5
 800c58a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c58e:	42bb      	cmp	r3, r7
 800c590:	da42      	bge.n	800c618 <__gethex+0x244>
 800c592:	9801      	ldr	r0, [sp, #4]
 800c594:	4621      	mov	r1, r4
 800c596:	f7fd ff5f 	bl	800a458 <_Bfree>
 800c59a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c59c:	2300      	movs	r3, #0
 800c59e:	6013      	str	r3, [r2, #0]
 800c5a0:	25a3      	movs	r5, #163	@ 0xa3
 800c5a2:	e793      	b.n	800c4cc <__gethex+0xf8>
 800c5a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800c5a8:	2a2e      	cmp	r2, #46	@ 0x2e
 800c5aa:	d012      	beq.n	800c5d2 <__gethex+0x1fe>
 800c5ac:	2b20      	cmp	r3, #32
 800c5ae:	d104      	bne.n	800c5ba <__gethex+0x1e6>
 800c5b0:	f845 bb04 	str.w	fp, [r5], #4
 800c5b4:	f04f 0b00 	mov.w	fp, #0
 800c5b8:	465b      	mov	r3, fp
 800c5ba:	7830      	ldrb	r0, [r6, #0]
 800c5bc:	9303      	str	r3, [sp, #12]
 800c5be:	f7ff fef3 	bl	800c3a8 <__hexdig_fun>
 800c5c2:	9b03      	ldr	r3, [sp, #12]
 800c5c4:	f000 000f 	and.w	r0, r0, #15
 800c5c8:	4098      	lsls	r0, r3
 800c5ca:	ea4b 0b00 	orr.w	fp, fp, r0
 800c5ce:	3304      	adds	r3, #4
 800c5d0:	e7ae      	b.n	800c530 <__gethex+0x15c>
 800c5d2:	45b1      	cmp	r9, r6
 800c5d4:	d8ea      	bhi.n	800c5ac <__gethex+0x1d8>
 800c5d6:	492b      	ldr	r1, [pc, #172]	@ (800c684 <__gethex+0x2b0>)
 800c5d8:	9303      	str	r3, [sp, #12]
 800c5da:	2201      	movs	r2, #1
 800c5dc:	4630      	mov	r0, r6
 800c5de:	f7ff fe25 	bl	800c22c <strncmp>
 800c5e2:	9b03      	ldr	r3, [sp, #12]
 800c5e4:	2800      	cmp	r0, #0
 800c5e6:	d1e1      	bne.n	800c5ac <__gethex+0x1d8>
 800c5e8:	e7a2      	b.n	800c530 <__gethex+0x15c>
 800c5ea:	1ea9      	subs	r1, r5, #2
 800c5ec:	4620      	mov	r0, r4
 800c5ee:	f7fe fb84 	bl	800acfa <__any_on>
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	d0c2      	beq.n	800c57c <__gethex+0x1a8>
 800c5f6:	f04f 0903 	mov.w	r9, #3
 800c5fa:	e7c1      	b.n	800c580 <__gethex+0x1ac>
 800c5fc:	da09      	bge.n	800c612 <__gethex+0x23e>
 800c5fe:	1b75      	subs	r5, r6, r5
 800c600:	4621      	mov	r1, r4
 800c602:	9801      	ldr	r0, [sp, #4]
 800c604:	462a      	mov	r2, r5
 800c606:	f7fe f93f 	bl	800a888 <__lshift>
 800c60a:	1b7f      	subs	r7, r7, r5
 800c60c:	4604      	mov	r4, r0
 800c60e:	f100 0a14 	add.w	sl, r0, #20
 800c612:	f04f 0900 	mov.w	r9, #0
 800c616:	e7b8      	b.n	800c58a <__gethex+0x1b6>
 800c618:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c61c:	42bd      	cmp	r5, r7
 800c61e:	dd6f      	ble.n	800c700 <__gethex+0x32c>
 800c620:	1bed      	subs	r5, r5, r7
 800c622:	42ae      	cmp	r6, r5
 800c624:	dc34      	bgt.n	800c690 <__gethex+0x2bc>
 800c626:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c62a:	2b02      	cmp	r3, #2
 800c62c:	d022      	beq.n	800c674 <__gethex+0x2a0>
 800c62e:	2b03      	cmp	r3, #3
 800c630:	d024      	beq.n	800c67c <__gethex+0x2a8>
 800c632:	2b01      	cmp	r3, #1
 800c634:	d115      	bne.n	800c662 <__gethex+0x28e>
 800c636:	42ae      	cmp	r6, r5
 800c638:	d113      	bne.n	800c662 <__gethex+0x28e>
 800c63a:	2e01      	cmp	r6, #1
 800c63c:	d10b      	bne.n	800c656 <__gethex+0x282>
 800c63e:	9a02      	ldr	r2, [sp, #8]
 800c640:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c644:	6013      	str	r3, [r2, #0]
 800c646:	2301      	movs	r3, #1
 800c648:	6123      	str	r3, [r4, #16]
 800c64a:	f8ca 3000 	str.w	r3, [sl]
 800c64e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c650:	2562      	movs	r5, #98	@ 0x62
 800c652:	601c      	str	r4, [r3, #0]
 800c654:	e73a      	b.n	800c4cc <__gethex+0xf8>
 800c656:	1e71      	subs	r1, r6, #1
 800c658:	4620      	mov	r0, r4
 800c65a:	f7fe fb4e 	bl	800acfa <__any_on>
 800c65e:	2800      	cmp	r0, #0
 800c660:	d1ed      	bne.n	800c63e <__gethex+0x26a>
 800c662:	9801      	ldr	r0, [sp, #4]
 800c664:	4621      	mov	r1, r4
 800c666:	f7fd fef7 	bl	800a458 <_Bfree>
 800c66a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c66c:	2300      	movs	r3, #0
 800c66e:	6013      	str	r3, [r2, #0]
 800c670:	2550      	movs	r5, #80	@ 0x50
 800c672:	e72b      	b.n	800c4cc <__gethex+0xf8>
 800c674:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c676:	2b00      	cmp	r3, #0
 800c678:	d1f3      	bne.n	800c662 <__gethex+0x28e>
 800c67a:	e7e0      	b.n	800c63e <__gethex+0x26a>
 800c67c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d1dd      	bne.n	800c63e <__gethex+0x26a>
 800c682:	e7ee      	b.n	800c662 <__gethex+0x28e>
 800c684:	0800ced0 	.word	0x0800ced0
 800c688:	0800cd69 	.word	0x0800cd69
 800c68c:	0800d07e 	.word	0x0800d07e
 800c690:	1e6f      	subs	r7, r5, #1
 800c692:	f1b9 0f00 	cmp.w	r9, #0
 800c696:	d130      	bne.n	800c6fa <__gethex+0x326>
 800c698:	b127      	cbz	r7, 800c6a4 <__gethex+0x2d0>
 800c69a:	4639      	mov	r1, r7
 800c69c:	4620      	mov	r0, r4
 800c69e:	f7fe fb2c 	bl	800acfa <__any_on>
 800c6a2:	4681      	mov	r9, r0
 800c6a4:	117a      	asrs	r2, r7, #5
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c6ac:	f007 071f 	and.w	r7, r7, #31
 800c6b0:	40bb      	lsls	r3, r7
 800c6b2:	4213      	tst	r3, r2
 800c6b4:	4629      	mov	r1, r5
 800c6b6:	4620      	mov	r0, r4
 800c6b8:	bf18      	it	ne
 800c6ba:	f049 0902 	orrne.w	r9, r9, #2
 800c6be:	f7ff fe21 	bl	800c304 <rshift>
 800c6c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800c6c6:	1b76      	subs	r6, r6, r5
 800c6c8:	2502      	movs	r5, #2
 800c6ca:	f1b9 0f00 	cmp.w	r9, #0
 800c6ce:	d047      	beq.n	800c760 <__gethex+0x38c>
 800c6d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c6d4:	2b02      	cmp	r3, #2
 800c6d6:	d015      	beq.n	800c704 <__gethex+0x330>
 800c6d8:	2b03      	cmp	r3, #3
 800c6da:	d017      	beq.n	800c70c <__gethex+0x338>
 800c6dc:	2b01      	cmp	r3, #1
 800c6de:	d109      	bne.n	800c6f4 <__gethex+0x320>
 800c6e0:	f019 0f02 	tst.w	r9, #2
 800c6e4:	d006      	beq.n	800c6f4 <__gethex+0x320>
 800c6e6:	f8da 3000 	ldr.w	r3, [sl]
 800c6ea:	ea49 0903 	orr.w	r9, r9, r3
 800c6ee:	f019 0f01 	tst.w	r9, #1
 800c6f2:	d10e      	bne.n	800c712 <__gethex+0x33e>
 800c6f4:	f045 0510 	orr.w	r5, r5, #16
 800c6f8:	e032      	b.n	800c760 <__gethex+0x38c>
 800c6fa:	f04f 0901 	mov.w	r9, #1
 800c6fe:	e7d1      	b.n	800c6a4 <__gethex+0x2d0>
 800c700:	2501      	movs	r5, #1
 800c702:	e7e2      	b.n	800c6ca <__gethex+0x2f6>
 800c704:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c706:	f1c3 0301 	rsb	r3, r3, #1
 800c70a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800c70c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d0f0      	beq.n	800c6f4 <__gethex+0x320>
 800c712:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c716:	f104 0314 	add.w	r3, r4, #20
 800c71a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c71e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c722:	f04f 0c00 	mov.w	ip, #0
 800c726:	4618      	mov	r0, r3
 800c728:	f853 2b04 	ldr.w	r2, [r3], #4
 800c72c:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c730:	d01b      	beq.n	800c76a <__gethex+0x396>
 800c732:	3201      	adds	r2, #1
 800c734:	6002      	str	r2, [r0, #0]
 800c736:	2d02      	cmp	r5, #2
 800c738:	f104 0314 	add.w	r3, r4, #20
 800c73c:	d13c      	bne.n	800c7b8 <__gethex+0x3e4>
 800c73e:	f8d8 2000 	ldr.w	r2, [r8]
 800c742:	3a01      	subs	r2, #1
 800c744:	42b2      	cmp	r2, r6
 800c746:	d109      	bne.n	800c75c <__gethex+0x388>
 800c748:	1171      	asrs	r1, r6, #5
 800c74a:	2201      	movs	r2, #1
 800c74c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c750:	f006 061f 	and.w	r6, r6, #31
 800c754:	fa02 f606 	lsl.w	r6, r2, r6
 800c758:	421e      	tst	r6, r3
 800c75a:	d13a      	bne.n	800c7d2 <__gethex+0x3fe>
 800c75c:	f045 0520 	orr.w	r5, r5, #32
 800c760:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c762:	601c      	str	r4, [r3, #0]
 800c764:	9b02      	ldr	r3, [sp, #8]
 800c766:	601f      	str	r7, [r3, #0]
 800c768:	e6b0      	b.n	800c4cc <__gethex+0xf8>
 800c76a:	4299      	cmp	r1, r3
 800c76c:	f843 cc04 	str.w	ip, [r3, #-4]
 800c770:	d8d9      	bhi.n	800c726 <__gethex+0x352>
 800c772:	68a3      	ldr	r3, [r4, #8]
 800c774:	459b      	cmp	fp, r3
 800c776:	db17      	blt.n	800c7a8 <__gethex+0x3d4>
 800c778:	6861      	ldr	r1, [r4, #4]
 800c77a:	9801      	ldr	r0, [sp, #4]
 800c77c:	3101      	adds	r1, #1
 800c77e:	f7fd fe2b 	bl	800a3d8 <_Balloc>
 800c782:	4681      	mov	r9, r0
 800c784:	b918      	cbnz	r0, 800c78e <__gethex+0x3ba>
 800c786:	4b1a      	ldr	r3, [pc, #104]	@ (800c7f0 <__gethex+0x41c>)
 800c788:	4602      	mov	r2, r0
 800c78a:	2184      	movs	r1, #132	@ 0x84
 800c78c:	e6c5      	b.n	800c51a <__gethex+0x146>
 800c78e:	6922      	ldr	r2, [r4, #16]
 800c790:	3202      	adds	r2, #2
 800c792:	f104 010c 	add.w	r1, r4, #12
 800c796:	0092      	lsls	r2, r2, #2
 800c798:	300c      	adds	r0, #12
 800c79a:	f7ff fd69 	bl	800c270 <memcpy>
 800c79e:	4621      	mov	r1, r4
 800c7a0:	9801      	ldr	r0, [sp, #4]
 800c7a2:	f7fd fe59 	bl	800a458 <_Bfree>
 800c7a6:	464c      	mov	r4, r9
 800c7a8:	6923      	ldr	r3, [r4, #16]
 800c7aa:	1c5a      	adds	r2, r3, #1
 800c7ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c7b0:	6122      	str	r2, [r4, #16]
 800c7b2:	2201      	movs	r2, #1
 800c7b4:	615a      	str	r2, [r3, #20]
 800c7b6:	e7be      	b.n	800c736 <__gethex+0x362>
 800c7b8:	6922      	ldr	r2, [r4, #16]
 800c7ba:	455a      	cmp	r2, fp
 800c7bc:	dd0b      	ble.n	800c7d6 <__gethex+0x402>
 800c7be:	2101      	movs	r1, #1
 800c7c0:	4620      	mov	r0, r4
 800c7c2:	f7ff fd9f 	bl	800c304 <rshift>
 800c7c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c7ca:	3701      	adds	r7, #1
 800c7cc:	42bb      	cmp	r3, r7
 800c7ce:	f6ff aee0 	blt.w	800c592 <__gethex+0x1be>
 800c7d2:	2501      	movs	r5, #1
 800c7d4:	e7c2      	b.n	800c75c <__gethex+0x388>
 800c7d6:	f016 061f 	ands.w	r6, r6, #31
 800c7da:	d0fa      	beq.n	800c7d2 <__gethex+0x3fe>
 800c7dc:	4453      	add	r3, sl
 800c7de:	f1c6 0620 	rsb	r6, r6, #32
 800c7e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c7e6:	f7fd fee9 	bl	800a5bc <__hi0bits>
 800c7ea:	42b0      	cmp	r0, r6
 800c7ec:	dbe7      	blt.n	800c7be <__gethex+0x3ea>
 800c7ee:	e7f0      	b.n	800c7d2 <__gethex+0x3fe>
 800c7f0:	0800cd69 	.word	0x0800cd69

0800c7f4 <L_shift>:
 800c7f4:	f1c2 0208 	rsb	r2, r2, #8
 800c7f8:	0092      	lsls	r2, r2, #2
 800c7fa:	b570      	push	{r4, r5, r6, lr}
 800c7fc:	f1c2 0620 	rsb	r6, r2, #32
 800c800:	6843      	ldr	r3, [r0, #4]
 800c802:	6804      	ldr	r4, [r0, #0]
 800c804:	fa03 f506 	lsl.w	r5, r3, r6
 800c808:	432c      	orrs	r4, r5
 800c80a:	40d3      	lsrs	r3, r2
 800c80c:	6004      	str	r4, [r0, #0]
 800c80e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c812:	4288      	cmp	r0, r1
 800c814:	d3f4      	bcc.n	800c800 <L_shift+0xc>
 800c816:	bd70      	pop	{r4, r5, r6, pc}

0800c818 <__match>:
 800c818:	b530      	push	{r4, r5, lr}
 800c81a:	6803      	ldr	r3, [r0, #0]
 800c81c:	3301      	adds	r3, #1
 800c81e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c822:	b914      	cbnz	r4, 800c82a <__match+0x12>
 800c824:	6003      	str	r3, [r0, #0]
 800c826:	2001      	movs	r0, #1
 800c828:	bd30      	pop	{r4, r5, pc}
 800c82a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c82e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800c832:	2d19      	cmp	r5, #25
 800c834:	bf98      	it	ls
 800c836:	3220      	addls	r2, #32
 800c838:	42a2      	cmp	r2, r4
 800c83a:	d0f0      	beq.n	800c81e <__match+0x6>
 800c83c:	2000      	movs	r0, #0
 800c83e:	e7f3      	b.n	800c828 <__match+0x10>

0800c840 <__hexnan>:
 800c840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c844:	680b      	ldr	r3, [r1, #0]
 800c846:	6801      	ldr	r1, [r0, #0]
 800c848:	115e      	asrs	r6, r3, #5
 800c84a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c84e:	f013 031f 	ands.w	r3, r3, #31
 800c852:	b087      	sub	sp, #28
 800c854:	bf18      	it	ne
 800c856:	3604      	addne	r6, #4
 800c858:	2500      	movs	r5, #0
 800c85a:	1f37      	subs	r7, r6, #4
 800c85c:	4682      	mov	sl, r0
 800c85e:	4690      	mov	r8, r2
 800c860:	9301      	str	r3, [sp, #4]
 800c862:	f846 5c04 	str.w	r5, [r6, #-4]
 800c866:	46b9      	mov	r9, r7
 800c868:	463c      	mov	r4, r7
 800c86a:	9502      	str	r5, [sp, #8]
 800c86c:	46ab      	mov	fp, r5
 800c86e:	784a      	ldrb	r2, [r1, #1]
 800c870:	1c4b      	adds	r3, r1, #1
 800c872:	9303      	str	r3, [sp, #12]
 800c874:	b342      	cbz	r2, 800c8c8 <__hexnan+0x88>
 800c876:	4610      	mov	r0, r2
 800c878:	9105      	str	r1, [sp, #20]
 800c87a:	9204      	str	r2, [sp, #16]
 800c87c:	f7ff fd94 	bl	800c3a8 <__hexdig_fun>
 800c880:	2800      	cmp	r0, #0
 800c882:	d151      	bne.n	800c928 <__hexnan+0xe8>
 800c884:	9a04      	ldr	r2, [sp, #16]
 800c886:	9905      	ldr	r1, [sp, #20]
 800c888:	2a20      	cmp	r2, #32
 800c88a:	d818      	bhi.n	800c8be <__hexnan+0x7e>
 800c88c:	9b02      	ldr	r3, [sp, #8]
 800c88e:	459b      	cmp	fp, r3
 800c890:	dd13      	ble.n	800c8ba <__hexnan+0x7a>
 800c892:	454c      	cmp	r4, r9
 800c894:	d206      	bcs.n	800c8a4 <__hexnan+0x64>
 800c896:	2d07      	cmp	r5, #7
 800c898:	dc04      	bgt.n	800c8a4 <__hexnan+0x64>
 800c89a:	462a      	mov	r2, r5
 800c89c:	4649      	mov	r1, r9
 800c89e:	4620      	mov	r0, r4
 800c8a0:	f7ff ffa8 	bl	800c7f4 <L_shift>
 800c8a4:	4544      	cmp	r4, r8
 800c8a6:	d952      	bls.n	800c94e <__hexnan+0x10e>
 800c8a8:	2300      	movs	r3, #0
 800c8aa:	f1a4 0904 	sub.w	r9, r4, #4
 800c8ae:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8b2:	f8cd b008 	str.w	fp, [sp, #8]
 800c8b6:	464c      	mov	r4, r9
 800c8b8:	461d      	mov	r5, r3
 800c8ba:	9903      	ldr	r1, [sp, #12]
 800c8bc:	e7d7      	b.n	800c86e <__hexnan+0x2e>
 800c8be:	2a29      	cmp	r2, #41	@ 0x29
 800c8c0:	d157      	bne.n	800c972 <__hexnan+0x132>
 800c8c2:	3102      	adds	r1, #2
 800c8c4:	f8ca 1000 	str.w	r1, [sl]
 800c8c8:	f1bb 0f00 	cmp.w	fp, #0
 800c8cc:	d051      	beq.n	800c972 <__hexnan+0x132>
 800c8ce:	454c      	cmp	r4, r9
 800c8d0:	d206      	bcs.n	800c8e0 <__hexnan+0xa0>
 800c8d2:	2d07      	cmp	r5, #7
 800c8d4:	dc04      	bgt.n	800c8e0 <__hexnan+0xa0>
 800c8d6:	462a      	mov	r2, r5
 800c8d8:	4649      	mov	r1, r9
 800c8da:	4620      	mov	r0, r4
 800c8dc:	f7ff ff8a 	bl	800c7f4 <L_shift>
 800c8e0:	4544      	cmp	r4, r8
 800c8e2:	d936      	bls.n	800c952 <__hexnan+0x112>
 800c8e4:	f1a8 0204 	sub.w	r2, r8, #4
 800c8e8:	4623      	mov	r3, r4
 800c8ea:	f853 1b04 	ldr.w	r1, [r3], #4
 800c8ee:	f842 1f04 	str.w	r1, [r2, #4]!
 800c8f2:	429f      	cmp	r7, r3
 800c8f4:	d2f9      	bcs.n	800c8ea <__hexnan+0xaa>
 800c8f6:	1b3b      	subs	r3, r7, r4
 800c8f8:	f023 0303 	bic.w	r3, r3, #3
 800c8fc:	3304      	adds	r3, #4
 800c8fe:	3401      	adds	r4, #1
 800c900:	3e03      	subs	r6, #3
 800c902:	42b4      	cmp	r4, r6
 800c904:	bf88      	it	hi
 800c906:	2304      	movhi	r3, #4
 800c908:	4443      	add	r3, r8
 800c90a:	2200      	movs	r2, #0
 800c90c:	f843 2b04 	str.w	r2, [r3], #4
 800c910:	429f      	cmp	r7, r3
 800c912:	d2fb      	bcs.n	800c90c <__hexnan+0xcc>
 800c914:	683b      	ldr	r3, [r7, #0]
 800c916:	b91b      	cbnz	r3, 800c920 <__hexnan+0xe0>
 800c918:	4547      	cmp	r7, r8
 800c91a:	d128      	bne.n	800c96e <__hexnan+0x12e>
 800c91c:	2301      	movs	r3, #1
 800c91e:	603b      	str	r3, [r7, #0]
 800c920:	2005      	movs	r0, #5
 800c922:	b007      	add	sp, #28
 800c924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c928:	3501      	adds	r5, #1
 800c92a:	2d08      	cmp	r5, #8
 800c92c:	f10b 0b01 	add.w	fp, fp, #1
 800c930:	dd06      	ble.n	800c940 <__hexnan+0x100>
 800c932:	4544      	cmp	r4, r8
 800c934:	d9c1      	bls.n	800c8ba <__hexnan+0x7a>
 800c936:	2300      	movs	r3, #0
 800c938:	f844 3c04 	str.w	r3, [r4, #-4]
 800c93c:	2501      	movs	r5, #1
 800c93e:	3c04      	subs	r4, #4
 800c940:	6822      	ldr	r2, [r4, #0]
 800c942:	f000 000f 	and.w	r0, r0, #15
 800c946:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c94a:	6020      	str	r0, [r4, #0]
 800c94c:	e7b5      	b.n	800c8ba <__hexnan+0x7a>
 800c94e:	2508      	movs	r5, #8
 800c950:	e7b3      	b.n	800c8ba <__hexnan+0x7a>
 800c952:	9b01      	ldr	r3, [sp, #4]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d0dd      	beq.n	800c914 <__hexnan+0xd4>
 800c958:	f1c3 0320 	rsb	r3, r3, #32
 800c95c:	f04f 32ff 	mov.w	r2, #4294967295
 800c960:	40da      	lsrs	r2, r3
 800c962:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c966:	4013      	ands	r3, r2
 800c968:	f846 3c04 	str.w	r3, [r6, #-4]
 800c96c:	e7d2      	b.n	800c914 <__hexnan+0xd4>
 800c96e:	3f04      	subs	r7, #4
 800c970:	e7d0      	b.n	800c914 <__hexnan+0xd4>
 800c972:	2004      	movs	r0, #4
 800c974:	e7d5      	b.n	800c922 <__hexnan+0xe2>

0800c976 <__ascii_mbtowc>:
 800c976:	b082      	sub	sp, #8
 800c978:	b901      	cbnz	r1, 800c97c <__ascii_mbtowc+0x6>
 800c97a:	a901      	add	r1, sp, #4
 800c97c:	b142      	cbz	r2, 800c990 <__ascii_mbtowc+0x1a>
 800c97e:	b14b      	cbz	r3, 800c994 <__ascii_mbtowc+0x1e>
 800c980:	7813      	ldrb	r3, [r2, #0]
 800c982:	600b      	str	r3, [r1, #0]
 800c984:	7812      	ldrb	r2, [r2, #0]
 800c986:	1e10      	subs	r0, r2, #0
 800c988:	bf18      	it	ne
 800c98a:	2001      	movne	r0, #1
 800c98c:	b002      	add	sp, #8
 800c98e:	4770      	bx	lr
 800c990:	4610      	mov	r0, r2
 800c992:	e7fb      	b.n	800c98c <__ascii_mbtowc+0x16>
 800c994:	f06f 0001 	mvn.w	r0, #1
 800c998:	e7f8      	b.n	800c98c <__ascii_mbtowc+0x16>

0800c99a <_realloc_r>:
 800c99a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c99e:	4680      	mov	r8, r0
 800c9a0:	4615      	mov	r5, r2
 800c9a2:	460c      	mov	r4, r1
 800c9a4:	b921      	cbnz	r1, 800c9b0 <_realloc_r+0x16>
 800c9a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c9aa:	4611      	mov	r1, r2
 800c9ac:	f7fd bc88 	b.w	800a2c0 <_malloc_r>
 800c9b0:	b92a      	cbnz	r2, 800c9be <_realloc_r+0x24>
 800c9b2:	f7fd fc11 	bl	800a1d8 <_free_r>
 800c9b6:	2400      	movs	r4, #0
 800c9b8:	4620      	mov	r0, r4
 800c9ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9be:	f000 f8c4 	bl	800cb4a <_malloc_usable_size_r>
 800c9c2:	4285      	cmp	r5, r0
 800c9c4:	4606      	mov	r6, r0
 800c9c6:	d802      	bhi.n	800c9ce <_realloc_r+0x34>
 800c9c8:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c9cc:	d8f4      	bhi.n	800c9b8 <_realloc_r+0x1e>
 800c9ce:	4629      	mov	r1, r5
 800c9d0:	4640      	mov	r0, r8
 800c9d2:	f7fd fc75 	bl	800a2c0 <_malloc_r>
 800c9d6:	4607      	mov	r7, r0
 800c9d8:	2800      	cmp	r0, #0
 800c9da:	d0ec      	beq.n	800c9b6 <_realloc_r+0x1c>
 800c9dc:	42b5      	cmp	r5, r6
 800c9de:	462a      	mov	r2, r5
 800c9e0:	4621      	mov	r1, r4
 800c9e2:	bf28      	it	cs
 800c9e4:	4632      	movcs	r2, r6
 800c9e6:	f7ff fc43 	bl	800c270 <memcpy>
 800c9ea:	4621      	mov	r1, r4
 800c9ec:	4640      	mov	r0, r8
 800c9ee:	f7fd fbf3 	bl	800a1d8 <_free_r>
 800c9f2:	463c      	mov	r4, r7
 800c9f4:	e7e0      	b.n	800c9b8 <_realloc_r+0x1e>

0800c9f6 <__ascii_wctomb>:
 800c9f6:	4603      	mov	r3, r0
 800c9f8:	4608      	mov	r0, r1
 800c9fa:	b141      	cbz	r1, 800ca0e <__ascii_wctomb+0x18>
 800c9fc:	2aff      	cmp	r2, #255	@ 0xff
 800c9fe:	d904      	bls.n	800ca0a <__ascii_wctomb+0x14>
 800ca00:	228a      	movs	r2, #138	@ 0x8a
 800ca02:	601a      	str	r2, [r3, #0]
 800ca04:	f04f 30ff 	mov.w	r0, #4294967295
 800ca08:	4770      	bx	lr
 800ca0a:	700a      	strb	r2, [r1, #0]
 800ca0c:	2001      	movs	r0, #1
 800ca0e:	4770      	bx	lr

0800ca10 <fiprintf>:
 800ca10:	b40e      	push	{r1, r2, r3}
 800ca12:	b503      	push	{r0, r1, lr}
 800ca14:	4601      	mov	r1, r0
 800ca16:	ab03      	add	r3, sp, #12
 800ca18:	4805      	ldr	r0, [pc, #20]	@ (800ca30 <fiprintf+0x20>)
 800ca1a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca1e:	6800      	ldr	r0, [r0, #0]
 800ca20:	9301      	str	r3, [sp, #4]
 800ca22:	f7ff f991 	bl	800bd48 <_vfiprintf_r>
 800ca26:	b002      	add	sp, #8
 800ca28:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca2c:	b003      	add	sp, #12
 800ca2e:	4770      	bx	lr
 800ca30:	2000001c 	.word	0x2000001c

0800ca34 <__swhatbuf_r>:
 800ca34:	b570      	push	{r4, r5, r6, lr}
 800ca36:	460c      	mov	r4, r1
 800ca38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca3c:	2900      	cmp	r1, #0
 800ca3e:	b096      	sub	sp, #88	@ 0x58
 800ca40:	4615      	mov	r5, r2
 800ca42:	461e      	mov	r6, r3
 800ca44:	da0d      	bge.n	800ca62 <__swhatbuf_r+0x2e>
 800ca46:	89a3      	ldrh	r3, [r4, #12]
 800ca48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ca4c:	f04f 0100 	mov.w	r1, #0
 800ca50:	bf14      	ite	ne
 800ca52:	2340      	movne	r3, #64	@ 0x40
 800ca54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ca58:	2000      	movs	r0, #0
 800ca5a:	6031      	str	r1, [r6, #0]
 800ca5c:	602b      	str	r3, [r5, #0]
 800ca5e:	b016      	add	sp, #88	@ 0x58
 800ca60:	bd70      	pop	{r4, r5, r6, pc}
 800ca62:	466a      	mov	r2, sp
 800ca64:	f000 f848 	bl	800caf8 <_fstat_r>
 800ca68:	2800      	cmp	r0, #0
 800ca6a:	dbec      	blt.n	800ca46 <__swhatbuf_r+0x12>
 800ca6c:	9901      	ldr	r1, [sp, #4]
 800ca6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ca72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ca76:	4259      	negs	r1, r3
 800ca78:	4159      	adcs	r1, r3
 800ca7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ca7e:	e7eb      	b.n	800ca58 <__swhatbuf_r+0x24>

0800ca80 <__smakebuf_r>:
 800ca80:	898b      	ldrh	r3, [r1, #12]
 800ca82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ca84:	079d      	lsls	r5, r3, #30
 800ca86:	4606      	mov	r6, r0
 800ca88:	460c      	mov	r4, r1
 800ca8a:	d507      	bpl.n	800ca9c <__smakebuf_r+0x1c>
 800ca8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ca90:	6023      	str	r3, [r4, #0]
 800ca92:	6123      	str	r3, [r4, #16]
 800ca94:	2301      	movs	r3, #1
 800ca96:	6163      	str	r3, [r4, #20]
 800ca98:	b003      	add	sp, #12
 800ca9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ca9c:	ab01      	add	r3, sp, #4
 800ca9e:	466a      	mov	r2, sp
 800caa0:	f7ff ffc8 	bl	800ca34 <__swhatbuf_r>
 800caa4:	9f00      	ldr	r7, [sp, #0]
 800caa6:	4605      	mov	r5, r0
 800caa8:	4639      	mov	r1, r7
 800caaa:	4630      	mov	r0, r6
 800caac:	f7fd fc08 	bl	800a2c0 <_malloc_r>
 800cab0:	b948      	cbnz	r0, 800cac6 <__smakebuf_r+0x46>
 800cab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cab6:	059a      	lsls	r2, r3, #22
 800cab8:	d4ee      	bmi.n	800ca98 <__smakebuf_r+0x18>
 800caba:	f023 0303 	bic.w	r3, r3, #3
 800cabe:	f043 0302 	orr.w	r3, r3, #2
 800cac2:	81a3      	strh	r3, [r4, #12]
 800cac4:	e7e2      	b.n	800ca8c <__smakebuf_r+0xc>
 800cac6:	89a3      	ldrh	r3, [r4, #12]
 800cac8:	6020      	str	r0, [r4, #0]
 800caca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cace:	81a3      	strh	r3, [r4, #12]
 800cad0:	9b01      	ldr	r3, [sp, #4]
 800cad2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cad6:	b15b      	cbz	r3, 800caf0 <__smakebuf_r+0x70>
 800cad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cadc:	4630      	mov	r0, r6
 800cade:	f000 f81d 	bl	800cb1c <_isatty_r>
 800cae2:	b128      	cbz	r0, 800caf0 <__smakebuf_r+0x70>
 800cae4:	89a3      	ldrh	r3, [r4, #12]
 800cae6:	f023 0303 	bic.w	r3, r3, #3
 800caea:	f043 0301 	orr.w	r3, r3, #1
 800caee:	81a3      	strh	r3, [r4, #12]
 800caf0:	89a3      	ldrh	r3, [r4, #12]
 800caf2:	431d      	orrs	r5, r3
 800caf4:	81a5      	strh	r5, [r4, #12]
 800caf6:	e7cf      	b.n	800ca98 <__smakebuf_r+0x18>

0800caf8 <_fstat_r>:
 800caf8:	b538      	push	{r3, r4, r5, lr}
 800cafa:	4d07      	ldr	r5, [pc, #28]	@ (800cb18 <_fstat_r+0x20>)
 800cafc:	2300      	movs	r3, #0
 800cafe:	4604      	mov	r4, r0
 800cb00:	4608      	mov	r0, r1
 800cb02:	4611      	mov	r1, r2
 800cb04:	602b      	str	r3, [r5, #0]
 800cb06:	f7f5 ff37 	bl	8002978 <_fstat>
 800cb0a:	1c43      	adds	r3, r0, #1
 800cb0c:	d102      	bne.n	800cb14 <_fstat_r+0x1c>
 800cb0e:	682b      	ldr	r3, [r5, #0]
 800cb10:	b103      	cbz	r3, 800cb14 <_fstat_r+0x1c>
 800cb12:	6023      	str	r3, [r4, #0]
 800cb14:	bd38      	pop	{r3, r4, r5, pc}
 800cb16:	bf00      	nop
 800cb18:	20002934 	.word	0x20002934

0800cb1c <_isatty_r>:
 800cb1c:	b538      	push	{r3, r4, r5, lr}
 800cb1e:	4d06      	ldr	r5, [pc, #24]	@ (800cb38 <_isatty_r+0x1c>)
 800cb20:	2300      	movs	r3, #0
 800cb22:	4604      	mov	r4, r0
 800cb24:	4608      	mov	r0, r1
 800cb26:	602b      	str	r3, [r5, #0]
 800cb28:	f7f5 ff36 	bl	8002998 <_isatty>
 800cb2c:	1c43      	adds	r3, r0, #1
 800cb2e:	d102      	bne.n	800cb36 <_isatty_r+0x1a>
 800cb30:	682b      	ldr	r3, [r5, #0]
 800cb32:	b103      	cbz	r3, 800cb36 <_isatty_r+0x1a>
 800cb34:	6023      	str	r3, [r4, #0]
 800cb36:	bd38      	pop	{r3, r4, r5, pc}
 800cb38:	20002934 	.word	0x20002934

0800cb3c <abort>:
 800cb3c:	b508      	push	{r3, lr}
 800cb3e:	2006      	movs	r0, #6
 800cb40:	f000 f834 	bl	800cbac <raise>
 800cb44:	2001      	movs	r0, #1
 800cb46:	f7f5 fec7 	bl	80028d8 <_exit>

0800cb4a <_malloc_usable_size_r>:
 800cb4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb4e:	1f18      	subs	r0, r3, #4
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	bfbc      	itt	lt
 800cb54:	580b      	ldrlt	r3, [r1, r0]
 800cb56:	18c0      	addlt	r0, r0, r3
 800cb58:	4770      	bx	lr

0800cb5a <_raise_r>:
 800cb5a:	291f      	cmp	r1, #31
 800cb5c:	b538      	push	{r3, r4, r5, lr}
 800cb5e:	4605      	mov	r5, r0
 800cb60:	460c      	mov	r4, r1
 800cb62:	d904      	bls.n	800cb6e <_raise_r+0x14>
 800cb64:	2316      	movs	r3, #22
 800cb66:	6003      	str	r3, [r0, #0]
 800cb68:	f04f 30ff 	mov.w	r0, #4294967295
 800cb6c:	bd38      	pop	{r3, r4, r5, pc}
 800cb6e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800cb70:	b112      	cbz	r2, 800cb78 <_raise_r+0x1e>
 800cb72:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cb76:	b94b      	cbnz	r3, 800cb8c <_raise_r+0x32>
 800cb78:	4628      	mov	r0, r5
 800cb7a:	f000 f831 	bl	800cbe0 <_getpid_r>
 800cb7e:	4622      	mov	r2, r4
 800cb80:	4601      	mov	r1, r0
 800cb82:	4628      	mov	r0, r5
 800cb84:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cb88:	f000 b818 	b.w	800cbbc <_kill_r>
 800cb8c:	2b01      	cmp	r3, #1
 800cb8e:	d00a      	beq.n	800cba6 <_raise_r+0x4c>
 800cb90:	1c59      	adds	r1, r3, #1
 800cb92:	d103      	bne.n	800cb9c <_raise_r+0x42>
 800cb94:	2316      	movs	r3, #22
 800cb96:	6003      	str	r3, [r0, #0]
 800cb98:	2001      	movs	r0, #1
 800cb9a:	e7e7      	b.n	800cb6c <_raise_r+0x12>
 800cb9c:	2100      	movs	r1, #0
 800cb9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cba2:	4620      	mov	r0, r4
 800cba4:	4798      	blx	r3
 800cba6:	2000      	movs	r0, #0
 800cba8:	e7e0      	b.n	800cb6c <_raise_r+0x12>
	...

0800cbac <raise>:
 800cbac:	4b02      	ldr	r3, [pc, #8]	@ (800cbb8 <raise+0xc>)
 800cbae:	4601      	mov	r1, r0
 800cbb0:	6818      	ldr	r0, [r3, #0]
 800cbb2:	f7ff bfd2 	b.w	800cb5a <_raise_r>
 800cbb6:	bf00      	nop
 800cbb8:	2000001c 	.word	0x2000001c

0800cbbc <_kill_r>:
 800cbbc:	b538      	push	{r3, r4, r5, lr}
 800cbbe:	4d07      	ldr	r5, [pc, #28]	@ (800cbdc <_kill_r+0x20>)
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	4608      	mov	r0, r1
 800cbc6:	4611      	mov	r1, r2
 800cbc8:	602b      	str	r3, [r5, #0]
 800cbca:	f7f5 fe75 	bl	80028b8 <_kill>
 800cbce:	1c43      	adds	r3, r0, #1
 800cbd0:	d102      	bne.n	800cbd8 <_kill_r+0x1c>
 800cbd2:	682b      	ldr	r3, [r5, #0]
 800cbd4:	b103      	cbz	r3, 800cbd8 <_kill_r+0x1c>
 800cbd6:	6023      	str	r3, [r4, #0]
 800cbd8:	bd38      	pop	{r3, r4, r5, pc}
 800cbda:	bf00      	nop
 800cbdc:	20002934 	.word	0x20002934

0800cbe0 <_getpid_r>:
 800cbe0:	f7f5 be62 	b.w	80028a8 <_getpid>

0800cbe4 <_init>:
 800cbe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbe6:	bf00      	nop
 800cbe8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbea:	bc08      	pop	{r3}
 800cbec:	469e      	mov	lr, r3
 800cbee:	4770      	bx	lr

0800cbf0 <_fini>:
 800cbf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cbf2:	bf00      	nop
 800cbf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cbf6:	bc08      	pop	{r3}
 800cbf8:	469e      	mov	lr, r3
 800cbfa:	4770      	bx	lr
