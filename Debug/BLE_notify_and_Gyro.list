
BLE_notify_and_Gyro.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c88  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000428  08007e68  08007e68  00008e68  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008290  08008290  0000a1e8  2**0
                  CONTENTS
  4 .ARM          00000008  08008290  08008290  00009290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008298  08008298  0000a1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008298  08008298  00009298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800829c  0800829c  0000929c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080082a0  0000a000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000258  200001e8  08008488  0000a1e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08008488  0000a440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001036c  00000000  00000000  0000a218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002325  00000000  00000000  0001a584  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  0001c8b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a51  00000000  00000000  0001d608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00020b40  00000000  00000000  0001e059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011b9d  00000000  00000000  0003eb99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cb7d6  00000000  00000000  00050736  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011bf0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004964  00000000  00000000  0011bf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001208b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001e8 	.word	0x200001e8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08007e50 	.word	0x08007e50

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001ec 	.word	0x200001ec
 800021c:	08007e50 	.word	0x08007e50

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <strlen>:
 80002c0:	4603      	mov	r3, r0
 80002c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002c6:	2a00      	cmp	r2, #0
 80002c8:	d1fb      	bne.n	80002c2 <strlen+0x2>
 80002ca:	1a18      	subs	r0, r3, r0
 80002cc:	3801      	subs	r0, #1
 80002ce:	4770      	bx	lr

080002d0 <__aeabi_drsub>:
 80002d0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002d4:	e002      	b.n	80002dc <__adddf3>
 80002d6:	bf00      	nop

080002d8 <__aeabi_dsub>:
 80002d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002dc <__adddf3>:
 80002dc:	b530      	push	{r4, r5, lr}
 80002de:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002e2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002e6:	ea94 0f05 	teq	r4, r5
 80002ea:	bf08      	it	eq
 80002ec:	ea90 0f02 	teqeq	r0, r2
 80002f0:	bf1f      	itttt	ne
 80002f2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002f6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002fa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002fe:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000302:	f000 80e2 	beq.w	80004ca <__adddf3+0x1ee>
 8000306:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800030a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800030e:	bfb8      	it	lt
 8000310:	426d      	neglt	r5, r5
 8000312:	dd0c      	ble.n	800032e <__adddf3+0x52>
 8000314:	442c      	add	r4, r5
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	ea82 0000 	eor.w	r0, r2, r0
 8000322:	ea83 0101 	eor.w	r1, r3, r1
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	2d36      	cmp	r5, #54	@ 0x36
 8000330:	bf88      	it	hi
 8000332:	bd30      	pophi	{r4, r5, pc}
 8000334:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000338:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800033c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000340:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000344:	d002      	beq.n	800034c <__adddf3+0x70>
 8000346:	4240      	negs	r0, r0
 8000348:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800034c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000350:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000354:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000358:	d002      	beq.n	8000360 <__adddf3+0x84>
 800035a:	4252      	negs	r2, r2
 800035c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000360:	ea94 0f05 	teq	r4, r5
 8000364:	f000 80a7 	beq.w	80004b6 <__adddf3+0x1da>
 8000368:	f1a4 0401 	sub.w	r4, r4, #1
 800036c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000370:	db0d      	blt.n	800038e <__adddf3+0xb2>
 8000372:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000376:	fa22 f205 	lsr.w	r2, r2, r5
 800037a:	1880      	adds	r0, r0, r2
 800037c:	f141 0100 	adc.w	r1, r1, #0
 8000380:	fa03 f20e 	lsl.w	r2, r3, lr
 8000384:	1880      	adds	r0, r0, r2
 8000386:	fa43 f305 	asr.w	r3, r3, r5
 800038a:	4159      	adcs	r1, r3
 800038c:	e00e      	b.n	80003ac <__adddf3+0xd0>
 800038e:	f1a5 0520 	sub.w	r5, r5, #32
 8000392:	f10e 0e20 	add.w	lr, lr, #32
 8000396:	2a01      	cmp	r2, #1
 8000398:	fa03 fc0e 	lsl.w	ip, r3, lr
 800039c:	bf28      	it	cs
 800039e:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003a2:	fa43 f305 	asr.w	r3, r3, r5
 80003a6:	18c0      	adds	r0, r0, r3
 80003a8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003ac:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003b0:	d507      	bpl.n	80003c2 <__adddf3+0xe6>
 80003b2:	f04f 0e00 	mov.w	lr, #0
 80003b6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ba:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003be:	eb6e 0101 	sbc.w	r1, lr, r1
 80003c2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003c6:	d31b      	bcc.n	8000400 <__adddf3+0x124>
 80003c8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003cc:	d30c      	bcc.n	80003e8 <__adddf3+0x10c>
 80003ce:	0849      	lsrs	r1, r1, #1
 80003d0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003d4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d8:	f104 0401 	add.w	r4, r4, #1
 80003dc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003e0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003e4:	f080 809a 	bcs.w	800051c <__adddf3+0x240>
 80003e8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ec:	bf08      	it	eq
 80003ee:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003f2:	f150 0000 	adcs.w	r0, r0, #0
 80003f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003fa:	ea41 0105 	orr.w	r1, r1, r5
 80003fe:	bd30      	pop	{r4, r5, pc}
 8000400:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000404:	4140      	adcs	r0, r0
 8000406:	eb41 0101 	adc.w	r1, r1, r1
 800040a:	3c01      	subs	r4, #1
 800040c:	bf28      	it	cs
 800040e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000412:	d2e9      	bcs.n	80003e8 <__adddf3+0x10c>
 8000414:	f091 0f00 	teq	r1, #0
 8000418:	bf04      	itt	eq
 800041a:	4601      	moveq	r1, r0
 800041c:	2000      	moveq	r0, #0
 800041e:	fab1 f381 	clz	r3, r1
 8000422:	bf08      	it	eq
 8000424:	3320      	addeq	r3, #32
 8000426:	f1a3 030b 	sub.w	r3, r3, #11
 800042a:	f1b3 0220 	subs.w	r2, r3, #32
 800042e:	da0c      	bge.n	800044a <__adddf3+0x16e>
 8000430:	320c      	adds	r2, #12
 8000432:	dd08      	ble.n	8000446 <__adddf3+0x16a>
 8000434:	f102 0c14 	add.w	ip, r2, #20
 8000438:	f1c2 020c 	rsb	r2, r2, #12
 800043c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000440:	fa21 f102 	lsr.w	r1, r1, r2
 8000444:	e00c      	b.n	8000460 <__adddf3+0x184>
 8000446:	f102 0214 	add.w	r2, r2, #20
 800044a:	bfd8      	it	le
 800044c:	f1c2 0c20 	rsble	ip, r2, #32
 8000450:	fa01 f102 	lsl.w	r1, r1, r2
 8000454:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000458:	bfdc      	itt	le
 800045a:	ea41 010c 	orrle.w	r1, r1, ip
 800045e:	4090      	lslle	r0, r2
 8000460:	1ae4      	subs	r4, r4, r3
 8000462:	bfa2      	ittt	ge
 8000464:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000468:	4329      	orrge	r1, r5
 800046a:	bd30      	popge	{r4, r5, pc}
 800046c:	ea6f 0404 	mvn.w	r4, r4
 8000470:	3c1f      	subs	r4, #31
 8000472:	da1c      	bge.n	80004ae <__adddf3+0x1d2>
 8000474:	340c      	adds	r4, #12
 8000476:	dc0e      	bgt.n	8000496 <__adddf3+0x1ba>
 8000478:	f104 0414 	add.w	r4, r4, #20
 800047c:	f1c4 0220 	rsb	r2, r4, #32
 8000480:	fa20 f004 	lsr.w	r0, r0, r4
 8000484:	fa01 f302 	lsl.w	r3, r1, r2
 8000488:	ea40 0003 	orr.w	r0, r0, r3
 800048c:	fa21 f304 	lsr.w	r3, r1, r4
 8000490:	ea45 0103 	orr.w	r1, r5, r3
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f1c4 040c 	rsb	r4, r4, #12
 800049a:	f1c4 0220 	rsb	r2, r4, #32
 800049e:	fa20 f002 	lsr.w	r0, r0, r2
 80004a2:	fa01 f304 	lsl.w	r3, r1, r4
 80004a6:	ea40 0003 	orr.w	r0, r0, r3
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	fa21 f004 	lsr.w	r0, r1, r4
 80004b2:	4629      	mov	r1, r5
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f094 0f00 	teq	r4, #0
 80004ba:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80004be:	bf06      	itte	eq
 80004c0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004c4:	3401      	addeq	r4, #1
 80004c6:	3d01      	subne	r5, #1
 80004c8:	e74e      	b.n	8000368 <__adddf3+0x8c>
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf18      	it	ne
 80004d0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004d4:	d029      	beq.n	800052a <__adddf3+0x24e>
 80004d6:	ea94 0f05 	teq	r4, r5
 80004da:	bf08      	it	eq
 80004dc:	ea90 0f02 	teqeq	r0, r2
 80004e0:	d005      	beq.n	80004ee <__adddf3+0x212>
 80004e2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004e6:	bf04      	itt	eq
 80004e8:	4619      	moveq	r1, r3
 80004ea:	4610      	moveq	r0, r2
 80004ec:	bd30      	pop	{r4, r5, pc}
 80004ee:	ea91 0f03 	teq	r1, r3
 80004f2:	bf1e      	ittt	ne
 80004f4:	2100      	movne	r1, #0
 80004f6:	2000      	movne	r0, #0
 80004f8:	bd30      	popne	{r4, r5, pc}
 80004fa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004fe:	d105      	bne.n	800050c <__adddf3+0x230>
 8000500:	0040      	lsls	r0, r0, #1
 8000502:	4149      	adcs	r1, r1
 8000504:	bf28      	it	cs
 8000506:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800050a:	bd30      	pop	{r4, r5, pc}
 800050c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000510:	bf3c      	itt	cc
 8000512:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000516:	bd30      	popcc	{r4, r5, pc}
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000520:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000524:	f04f 0000 	mov.w	r0, #0
 8000528:	bd30      	pop	{r4, r5, pc}
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf1a      	itte	ne
 8000530:	4619      	movne	r1, r3
 8000532:	4610      	movne	r0, r2
 8000534:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000538:	bf1c      	itt	ne
 800053a:	460b      	movne	r3, r1
 800053c:	4602      	movne	r2, r0
 800053e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000542:	bf06      	itte	eq
 8000544:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000548:	ea91 0f03 	teqeq	r1, r3
 800054c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000550:	bd30      	pop	{r4, r5, pc}
 8000552:	bf00      	nop

08000554 <__aeabi_ui2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f04f 0500 	mov.w	r5, #0
 800056c:	f04f 0100 	mov.w	r1, #0
 8000570:	e750      	b.n	8000414 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_i2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000588:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800058c:	bf48      	it	mi
 800058e:	4240      	negmi	r0, r0
 8000590:	f04f 0100 	mov.w	r1, #0
 8000594:	e73e      	b.n	8000414 <__adddf3+0x138>
 8000596:	bf00      	nop

08000598 <__aeabi_f2d>:
 8000598:	0042      	lsls	r2, r0, #1
 800059a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800059e:	ea4f 0131 	mov.w	r1, r1, rrx
 80005a2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005a6:	bf1f      	itttt	ne
 80005a8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005ac:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80005b0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80005b4:	4770      	bxne	lr
 80005b6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80005ba:	bf08      	it	eq
 80005bc:	4770      	bxeq	lr
 80005be:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005c2:	bf04      	itt	eq
 80005c4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005c8:	4770      	bxeq	lr
 80005ca:	b530      	push	{r4, r5, lr}
 80005cc:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005d0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005d4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005d8:	e71c      	b.n	8000414 <__adddf3+0x138>
 80005da:	bf00      	nop

080005dc <__aeabi_ul2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f04f 0500 	mov.w	r5, #0
 80005ea:	e00a      	b.n	8000602 <__aeabi_l2d+0x16>

080005ec <__aeabi_l2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005fa:	d502      	bpl.n	8000602 <__aeabi_l2d+0x16>
 80005fc:	4240      	negs	r0, r0
 80005fe:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000602:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000606:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800060a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800060e:	f43f aed8 	beq.w	80003c2 <__adddf3+0xe6>
 8000612:	f04f 0203 	mov.w	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000622:	bf18      	it	ne
 8000624:	3203      	addne	r2, #3
 8000626:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800062a:	f1c2 0320 	rsb	r3, r2, #32
 800062e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000632:	fa20 f002 	lsr.w	r0, r0, r2
 8000636:	fa01 fe03 	lsl.w	lr, r1, r3
 800063a:	ea40 000e 	orr.w	r0, r0, lr
 800063e:	fa21 f102 	lsr.w	r1, r1, r2
 8000642:	4414      	add	r4, r2
 8000644:	e6bd      	b.n	80003c2 <__adddf3+0xe6>
 8000646:	bf00      	nop

08000648 <__aeabi_dmul>:
 8000648:	b570      	push	{r4, r5, r6, lr}
 800064a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800064e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000652:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000656:	bf1d      	ittte	ne
 8000658:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800065c:	ea94 0f0c 	teqne	r4, ip
 8000660:	ea95 0f0c 	teqne	r5, ip
 8000664:	f000 f8de 	bleq	8000824 <__aeabi_dmul+0x1dc>
 8000668:	442c      	add	r4, r5
 800066a:	ea81 0603 	eor.w	r6, r1, r3
 800066e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000672:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000676:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800067a:	bf18      	it	ne
 800067c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000680:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000684:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000688:	d038      	beq.n	80006fc <__aeabi_dmul+0xb4>
 800068a:	fba0 ce02 	umull	ip, lr, r0, r2
 800068e:	f04f 0500 	mov.w	r5, #0
 8000692:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000696:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800069a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800069e:	f04f 0600 	mov.w	r6, #0
 80006a2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006a6:	f09c 0f00 	teq	ip, #0
 80006aa:	bf18      	it	ne
 80006ac:	f04e 0e01 	orrne.w	lr, lr, #1
 80006b0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80006b4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80006b8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80006bc:	d204      	bcs.n	80006c8 <__aeabi_dmul+0x80>
 80006be:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006c2:	416d      	adcs	r5, r5
 80006c4:	eb46 0606 	adc.w	r6, r6, r6
 80006c8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006cc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006d0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006d4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006dc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006e0:	bf88      	it	hi
 80006e2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006e6:	d81e      	bhi.n	8000726 <__aeabi_dmul+0xde>
 80006e8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ec:	bf08      	it	eq
 80006ee:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006f2:	f150 0000 	adcs.w	r0, r0, #0
 80006f6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000700:	ea46 0101 	orr.w	r1, r6, r1
 8000704:	ea40 0002 	orr.w	r0, r0, r2
 8000708:	ea81 0103 	eor.w	r1, r1, r3
 800070c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000710:	bfc2      	ittt	gt
 8000712:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000716:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800071a:	bd70      	popgt	{r4, r5, r6, pc}
 800071c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000720:	f04f 0e00 	mov.w	lr, #0
 8000724:	3c01      	subs	r4, #1
 8000726:	f300 80ab 	bgt.w	8000880 <__aeabi_dmul+0x238>
 800072a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800072e:	bfde      	ittt	le
 8000730:	2000      	movle	r0, #0
 8000732:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000736:	bd70      	pople	{r4, r5, r6, pc}
 8000738:	f1c4 0400 	rsb	r4, r4, #0
 800073c:	3c20      	subs	r4, #32
 800073e:	da35      	bge.n	80007ac <__aeabi_dmul+0x164>
 8000740:	340c      	adds	r4, #12
 8000742:	dc1b      	bgt.n	800077c <__aeabi_dmul+0x134>
 8000744:	f104 0414 	add.w	r4, r4, #20
 8000748:	f1c4 0520 	rsb	r5, r4, #32
 800074c:	fa00 f305 	lsl.w	r3, r0, r5
 8000750:	fa20 f004 	lsr.w	r0, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea40 0002 	orr.w	r0, r0, r2
 800075c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000760:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000764:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000768:	fa21 f604 	lsr.w	r6, r1, r4
 800076c:	eb42 0106 	adc.w	r1, r2, r6
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 040c 	rsb	r4, r4, #12
 8000780:	f1c4 0520 	rsb	r5, r4, #32
 8000784:	fa00 f304 	lsl.w	r3, r0, r4
 8000788:	fa20 f005 	lsr.w	r0, r0, r5
 800078c:	fa01 f204 	lsl.w	r2, r1, r4
 8000790:	ea40 0002 	orr.w	r0, r0, r2
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000798:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800079c:	f141 0100 	adc.w	r1, r1, #0
 80007a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007a4:	bf08      	it	eq
 80007a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007aa:	bd70      	pop	{r4, r5, r6, pc}
 80007ac:	f1c4 0520 	rsb	r5, r4, #32
 80007b0:	fa00 f205 	lsl.w	r2, r0, r5
 80007b4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b8:	fa20 f304 	lsr.w	r3, r0, r4
 80007bc:	fa01 f205 	lsl.w	r2, r1, r5
 80007c0:	ea43 0302 	orr.w	r3, r3, r2
 80007c4:	fa21 f004 	lsr.w	r0, r1, r4
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	fa21 f204 	lsr.w	r2, r1, r4
 80007d0:	ea20 0002 	bic.w	r0, r0, r2
 80007d4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007dc:	bf08      	it	eq
 80007de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007e2:	bd70      	pop	{r4, r5, r6, pc}
 80007e4:	f094 0f00 	teq	r4, #0
 80007e8:	d10f      	bne.n	800080a <__aeabi_dmul+0x1c2>
 80007ea:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ee:	0040      	lsls	r0, r0, #1
 80007f0:	eb41 0101 	adc.w	r1, r1, r1
 80007f4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3c01      	subeq	r4, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1a6>
 80007fe:	ea41 0106 	orr.w	r1, r1, r6
 8000802:	f095 0f00 	teq	r5, #0
 8000806:	bf18      	it	ne
 8000808:	4770      	bxne	lr
 800080a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800080e:	0052      	lsls	r2, r2, #1
 8000810:	eb43 0303 	adc.w	r3, r3, r3
 8000814:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000818:	bf08      	it	eq
 800081a:	3d01      	subeq	r5, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1c6>
 800081e:	ea43 0306 	orr.w	r3, r3, r6
 8000822:	4770      	bx	lr
 8000824:	ea94 0f0c 	teq	r4, ip
 8000828:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800082c:	bf18      	it	ne
 800082e:	ea95 0f0c 	teqne	r5, ip
 8000832:	d00c      	beq.n	800084e <__aeabi_dmul+0x206>
 8000834:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000838:	bf18      	it	ne
 800083a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083e:	d1d1      	bne.n	80007e4 <__aeabi_dmul+0x19c>
 8000840:	ea81 0103 	eor.w	r1, r1, r3
 8000844:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000848:	f04f 0000 	mov.w	r0, #0
 800084c:	bd70      	pop	{r4, r5, r6, pc}
 800084e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000852:	bf06      	itte	eq
 8000854:	4610      	moveq	r0, r2
 8000856:	4619      	moveq	r1, r3
 8000858:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085c:	d019      	beq.n	8000892 <__aeabi_dmul+0x24a>
 800085e:	ea94 0f0c 	teq	r4, ip
 8000862:	d102      	bne.n	800086a <__aeabi_dmul+0x222>
 8000864:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000868:	d113      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800086a:	ea95 0f0c 	teq	r5, ip
 800086e:	d105      	bne.n	800087c <__aeabi_dmul+0x234>
 8000870:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000874:	bf1c      	itt	ne
 8000876:	4610      	movne	r0, r2
 8000878:	4619      	movne	r1, r3
 800087a:	d10a      	bne.n	8000892 <__aeabi_dmul+0x24a>
 800087c:	ea81 0103 	eor.w	r1, r1, r3
 8000880:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000884:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000888:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800088c:	f04f 0000 	mov.w	r0, #0
 8000890:	bd70      	pop	{r4, r5, r6, pc}
 8000892:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000896:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800089a:	bd70      	pop	{r4, r5, r6, pc}

0800089c <__aeabi_ddiv>:
 800089c:	b570      	push	{r4, r5, r6, lr}
 800089e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008a2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008a6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008aa:	bf1d      	ittte	ne
 80008ac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008b0:	ea94 0f0c 	teqne	r4, ip
 80008b4:	ea95 0f0c 	teqne	r5, ip
 80008b8:	f000 f8a7 	bleq	8000a0a <__aeabi_ddiv+0x16e>
 80008bc:	eba4 0405 	sub.w	r4, r4, r5
 80008c0:	ea81 0e03 	eor.w	lr, r1, r3
 80008c4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008cc:	f000 8088 	beq.w	80009e0 <__aeabi_ddiv+0x144>
 80008d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008d4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008d8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008dc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008e0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008e4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ec:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008f0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008f4:	429d      	cmp	r5, r3
 80008f6:	bf08      	it	eq
 80008f8:	4296      	cmpeq	r6, r2
 80008fa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008fe:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000902:	d202      	bcs.n	800090a <__aeabi_ddiv+0x6e>
 8000904:	085b      	lsrs	r3, r3, #1
 8000906:	ea4f 0232 	mov.w	r2, r2, rrx
 800090a:	1ab6      	subs	r6, r6, r2
 800090c:	eb65 0503 	sbc.w	r5, r5, r3
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800091a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000948:	085b      	lsrs	r3, r3, #1
 800094a:	ea4f 0232 	mov.w	r2, r2, rrx
 800094e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000952:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000956:	bf22      	ittt	cs
 8000958:	1ab6      	subcs	r6, r6, r2
 800095a:	4675      	movcs	r5, lr
 800095c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	ebb6 0e02 	subs.w	lr, r6, r2
 800096a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800096e:	bf22      	ittt	cs
 8000970:	1ab6      	subcs	r6, r6, r2
 8000972:	4675      	movcs	r5, lr
 8000974:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000978:	ea55 0e06 	orrs.w	lr, r5, r6
 800097c:	d018      	beq.n	80009b0 <__aeabi_ddiv+0x114>
 800097e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000982:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000986:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800098a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800098e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000992:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000996:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800099a:	d1c0      	bne.n	800091e <__aeabi_ddiv+0x82>
 800099c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009a0:	d10b      	bne.n	80009ba <__aeabi_ddiv+0x11e>
 80009a2:	ea41 0100 	orr.w	r1, r1, r0
 80009a6:	f04f 0000 	mov.w	r0, #0
 80009aa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009ae:	e7b6      	b.n	800091e <__aeabi_ddiv+0x82>
 80009b0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009b4:	bf04      	itt	eq
 80009b6:	4301      	orreq	r1, r0
 80009b8:	2000      	moveq	r0, #0
 80009ba:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80009be:	bf88      	it	hi
 80009c0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009c4:	f63f aeaf 	bhi.w	8000726 <__aeabi_dmul+0xde>
 80009c8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009cc:	bf04      	itt	eq
 80009ce:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009d6:	f150 0000 	adcs.w	r0, r0, #0
 80009da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009de:	bd70      	pop	{r4, r5, r6, pc}
 80009e0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009e4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ec:	bfc2      	ittt	gt
 80009ee:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009f2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009f6:	bd70      	popgt	{r4, r5, r6, pc}
 80009f8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009fc:	f04f 0e00 	mov.w	lr, #0
 8000a00:	3c01      	subs	r4, #1
 8000a02:	e690      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a04:	ea45 0e06 	orr.w	lr, r5, r6
 8000a08:	e68d      	b.n	8000726 <__aeabi_dmul+0xde>
 8000a0a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a0e:	ea94 0f0c 	teq	r4, ip
 8000a12:	bf08      	it	eq
 8000a14:	ea95 0f0c 	teqeq	r5, ip
 8000a18:	f43f af3b 	beq.w	8000892 <__aeabi_dmul+0x24a>
 8000a1c:	ea94 0f0c 	teq	r4, ip
 8000a20:	d10a      	bne.n	8000a38 <__aeabi_ddiv+0x19c>
 8000a22:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a26:	f47f af34 	bne.w	8000892 <__aeabi_dmul+0x24a>
 8000a2a:	ea95 0f0c 	teq	r5, ip
 8000a2e:	f47f af25 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a32:	4610      	mov	r0, r2
 8000a34:	4619      	mov	r1, r3
 8000a36:	e72c      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a38:	ea95 0f0c 	teq	r5, ip
 8000a3c:	d106      	bne.n	8000a4c <__aeabi_ddiv+0x1b0>
 8000a3e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a42:	f43f aefd 	beq.w	8000840 <__aeabi_dmul+0x1f8>
 8000a46:	4610      	mov	r0, r2
 8000a48:	4619      	mov	r1, r3
 8000a4a:	e722      	b.n	8000892 <__aeabi_dmul+0x24a>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	f47f aec5 	bne.w	80007e4 <__aeabi_dmul+0x19c>
 8000a5a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a5e:	f47f af0d 	bne.w	800087c <__aeabi_dmul+0x234>
 8000a62:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a66:	f47f aeeb 	bne.w	8000840 <__aeabi_dmul+0x1f8>
 8000a6a:	e712      	b.n	8000892 <__aeabi_dmul+0x24a>

08000a6c <__gedf2>:
 8000a6c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a70:	e006      	b.n	8000a80 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__ledf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	e002      	b.n	8000a80 <__cmpdf2+0x4>
 8000a7a:	bf00      	nop

08000a7c <__cmpdf2>:
 8000a7c:	f04f 0c01 	mov.w	ip, #1
 8000a80:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a90:	bf18      	it	ne
 8000a92:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a96:	d01b      	beq.n	8000ad0 <__cmpdf2+0x54>
 8000a98:	b001      	add	sp, #4
 8000a9a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a9e:	bf0c      	ite	eq
 8000aa0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000aa4:	ea91 0f03 	teqne	r1, r3
 8000aa8:	bf02      	ittt	eq
 8000aaa:	ea90 0f02 	teqeq	r0, r2
 8000aae:	2000      	moveq	r0, #0
 8000ab0:	4770      	bxeq	lr
 8000ab2:	f110 0f00 	cmn.w	r0, #0
 8000ab6:	ea91 0f03 	teq	r1, r3
 8000aba:	bf58      	it	pl
 8000abc:	4299      	cmppl	r1, r3
 8000abe:	bf08      	it	eq
 8000ac0:	4290      	cmpeq	r0, r2
 8000ac2:	bf2c      	ite	cs
 8000ac4:	17d8      	asrcs	r0, r3, #31
 8000ac6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aca:	f040 0001 	orr.w	r0, r0, #1
 8000ace:	4770      	bx	lr
 8000ad0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d102      	bne.n	8000ae0 <__cmpdf2+0x64>
 8000ada:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ade:	d107      	bne.n	8000af0 <__cmpdf2+0x74>
 8000ae0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d1d6      	bne.n	8000a98 <__cmpdf2+0x1c>
 8000aea:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aee:	d0d3      	beq.n	8000a98 <__cmpdf2+0x1c>
 8000af0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdrcmple>:
 8000af8:	4684      	mov	ip, r0
 8000afa:	4610      	mov	r0, r2
 8000afc:	4662      	mov	r2, ip
 8000afe:	468c      	mov	ip, r1
 8000b00:	4619      	mov	r1, r3
 8000b02:	4663      	mov	r3, ip
 8000b04:	e000      	b.n	8000b08 <__aeabi_cdcmpeq>
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdcmpeq>:
 8000b08:	b501      	push	{r0, lr}
 8000b0a:	f7ff ffb7 	bl	8000a7c <__cmpdf2>
 8000b0e:	2800      	cmp	r0, #0
 8000b10:	bf48      	it	mi
 8000b12:	f110 0f00 	cmnmi.w	r0, #0
 8000b16:	bd01      	pop	{r0, pc}

08000b18 <__aeabi_dcmpeq>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff fff4 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b20:	bf0c      	ite	eq
 8000b22:	2001      	moveq	r0, #1
 8000b24:	2000      	movne	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmplt>:
 8000b2c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b30:	f7ff ffea 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b34:	bf34      	ite	cc
 8000b36:	2001      	movcc	r0, #1
 8000b38:	2000      	movcs	r0, #0
 8000b3a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3e:	bf00      	nop

08000b40 <__aeabi_dcmple>:
 8000b40:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b44:	f7ff ffe0 	bl	8000b08 <__aeabi_cdcmpeq>
 8000b48:	bf94      	ite	ls
 8000b4a:	2001      	movls	r0, #1
 8000b4c:	2000      	movhi	r0, #0
 8000b4e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b52:	bf00      	nop

08000b54 <__aeabi_dcmpge>:
 8000b54:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b58:	f7ff ffce 	bl	8000af8 <__aeabi_cdrcmple>
 8000b5c:	bf94      	ite	ls
 8000b5e:	2001      	movls	r0, #1
 8000b60:	2000      	movhi	r0, #0
 8000b62:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b66:	bf00      	nop

08000b68 <__aeabi_dcmpgt>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff ffc4 	bl	8000af8 <__aeabi_cdrcmple>
 8000b70:	bf34      	ite	cc
 8000b72:	2001      	movcc	r0, #1
 8000b74:	2000      	movcs	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmpun>:
 8000b7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x10>
 8000b86:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b8a:	d10a      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b8c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x20>
 8000b96:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b9a:	d102      	bne.n	8000ba2 <__aeabi_dcmpun+0x26>
 8000b9c:	f04f 0000 	mov.w	r0, #0
 8000ba0:	4770      	bx	lr
 8000ba2:	f04f 0001 	mov.w	r0, #1
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_d2iz>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d215      	bcs.n	8000bde <__aeabi_d2iz+0x36>
 8000bb2:	d511      	bpl.n	8000bd8 <__aeabi_d2iz+0x30>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d912      	bls.n	8000be4 <__aeabi_d2iz+0x3c>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bce:	fa23 f002 	lsr.w	r0, r3, r2
 8000bd2:	bf18      	it	ne
 8000bd4:	4240      	negne	r0, r0
 8000bd6:	4770      	bx	lr
 8000bd8:	f04f 0000 	mov.w	r0, #0
 8000bdc:	4770      	bx	lr
 8000bde:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000be2:	d105      	bne.n	8000bf0 <__aeabi_d2iz+0x48>
 8000be4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	bf08      	it	eq
 8000bea:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bee:	4770      	bx	lr
 8000bf0:	f04f 0000 	mov.w	r0, #0
 8000bf4:	4770      	bx	lr
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b96a 	b.w	8000f84 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f806 	bl	8000cc8 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__udivmoddi4>:
 8000cc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ccc:	9d08      	ldr	r5, [sp, #32]
 8000cce:	460c      	mov	r4, r1
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d14e      	bne.n	8000d72 <__udivmoddi4+0xaa>
 8000cd4:	4694      	mov	ip, r2
 8000cd6:	458c      	cmp	ip, r1
 8000cd8:	4686      	mov	lr, r0
 8000cda:	fab2 f282 	clz	r2, r2
 8000cde:	d962      	bls.n	8000da6 <__udivmoddi4+0xde>
 8000ce0:	b14a      	cbz	r2, 8000cf6 <__udivmoddi4+0x2e>
 8000ce2:	f1c2 0320 	rsb	r3, r2, #32
 8000ce6:	4091      	lsls	r1, r2
 8000ce8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cf0:	4319      	orrs	r1, r3
 8000cf2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cfa:	fa1f f68c 	uxth.w	r6, ip
 8000cfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d06:	fb07 1114 	mls	r1, r7, r4, r1
 8000d0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d0e:	fb04 f106 	mul.w	r1, r4, r6
 8000d12:	4299      	cmp	r1, r3
 8000d14:	d90a      	bls.n	8000d2c <__udivmoddi4+0x64>
 8000d16:	eb1c 0303 	adds.w	r3, ip, r3
 8000d1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d1e:	f080 8112 	bcs.w	8000f46 <__udivmoddi4+0x27e>
 8000d22:	4299      	cmp	r1, r3
 8000d24:	f240 810f 	bls.w	8000f46 <__udivmoddi4+0x27e>
 8000d28:	3c02      	subs	r4, #2
 8000d2a:	4463      	add	r3, ip
 8000d2c:	1a59      	subs	r1, r3, r1
 8000d2e:	fa1f f38e 	uxth.w	r3, lr
 8000d32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d36:	fb07 1110 	mls	r1, r7, r0, r1
 8000d3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d3e:	fb00 f606 	mul.w	r6, r0, r6
 8000d42:	429e      	cmp	r6, r3
 8000d44:	d90a      	bls.n	8000d5c <__udivmoddi4+0x94>
 8000d46:	eb1c 0303 	adds.w	r3, ip, r3
 8000d4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d4e:	f080 80fc 	bcs.w	8000f4a <__udivmoddi4+0x282>
 8000d52:	429e      	cmp	r6, r3
 8000d54:	f240 80f9 	bls.w	8000f4a <__udivmoddi4+0x282>
 8000d58:	4463      	add	r3, ip
 8000d5a:	3802      	subs	r0, #2
 8000d5c:	1b9b      	subs	r3, r3, r6
 8000d5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d62:	2100      	movs	r1, #0
 8000d64:	b11d      	cbz	r5, 8000d6e <__udivmoddi4+0xa6>
 8000d66:	40d3      	lsrs	r3, r2
 8000d68:	2200      	movs	r2, #0
 8000d6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d72:	428b      	cmp	r3, r1
 8000d74:	d905      	bls.n	8000d82 <__udivmoddi4+0xba>
 8000d76:	b10d      	cbz	r5, 8000d7c <__udivmoddi4+0xb4>
 8000d78:	e9c5 0100 	strd	r0, r1, [r5]
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4608      	mov	r0, r1
 8000d80:	e7f5      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000d82:	fab3 f183 	clz	r1, r3
 8000d86:	2900      	cmp	r1, #0
 8000d88:	d146      	bne.n	8000e18 <__udivmoddi4+0x150>
 8000d8a:	42a3      	cmp	r3, r4
 8000d8c:	d302      	bcc.n	8000d94 <__udivmoddi4+0xcc>
 8000d8e:	4290      	cmp	r0, r2
 8000d90:	f0c0 80f0 	bcc.w	8000f74 <__udivmoddi4+0x2ac>
 8000d94:	1a86      	subs	r6, r0, r2
 8000d96:	eb64 0303 	sbc.w	r3, r4, r3
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	2d00      	cmp	r5, #0
 8000d9e:	d0e6      	beq.n	8000d6e <__udivmoddi4+0xa6>
 8000da0:	e9c5 6300 	strd	r6, r3, [r5]
 8000da4:	e7e3      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000da6:	2a00      	cmp	r2, #0
 8000da8:	f040 8090 	bne.w	8000ecc <__udivmoddi4+0x204>
 8000dac:	eba1 040c 	sub.w	r4, r1, ip
 8000db0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000db4:	fa1f f78c 	uxth.w	r7, ip
 8000db8:	2101      	movs	r1, #1
 8000dba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dbe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000dc2:	fb08 4416 	mls	r4, r8, r6, r4
 8000dc6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dca:	fb07 f006 	mul.w	r0, r7, r6
 8000dce:	4298      	cmp	r0, r3
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x11c>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x11a>
 8000ddc:	4298      	cmp	r0, r3
 8000dde:	f200 80cd 	bhi.w	8000f7c <__udivmoddi4+0x2b4>
 8000de2:	4626      	mov	r6, r4
 8000de4:	1a1c      	subs	r4, r3, r0
 8000de6:	fa1f f38e 	uxth.w	r3, lr
 8000dea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dee:	fb08 4410 	mls	r4, r8, r0, r4
 8000df2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000df6:	fb00 f707 	mul.w	r7, r0, r7
 8000dfa:	429f      	cmp	r7, r3
 8000dfc:	d908      	bls.n	8000e10 <__udivmoddi4+0x148>
 8000dfe:	eb1c 0303 	adds.w	r3, ip, r3
 8000e02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e06:	d202      	bcs.n	8000e0e <__udivmoddi4+0x146>
 8000e08:	429f      	cmp	r7, r3
 8000e0a:	f200 80b0 	bhi.w	8000f6e <__udivmoddi4+0x2a6>
 8000e0e:	4620      	mov	r0, r4
 8000e10:	1bdb      	subs	r3, r3, r7
 8000e12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e16:	e7a5      	b.n	8000d64 <__udivmoddi4+0x9c>
 8000e18:	f1c1 0620 	rsb	r6, r1, #32
 8000e1c:	408b      	lsls	r3, r1
 8000e1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e22:	431f      	orrs	r7, r3
 8000e24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e28:	fa04 f301 	lsl.w	r3, r4, r1
 8000e2c:	ea43 030c 	orr.w	r3, r3, ip
 8000e30:	40f4      	lsrs	r4, r6
 8000e32:	fa00 f801 	lsl.w	r8, r0, r1
 8000e36:	0c38      	lsrs	r0, r7, #16
 8000e38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e40:	fa1f fc87 	uxth.w	ip, r7
 8000e44:	fb00 441e 	mls	r4, r0, lr, r4
 8000e48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e50:	45a1      	cmp	r9, r4
 8000e52:	fa02 f201 	lsl.w	r2, r2, r1
 8000e56:	d90a      	bls.n	8000e6e <__udivmoddi4+0x1a6>
 8000e58:	193c      	adds	r4, r7, r4
 8000e5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e5e:	f080 8084 	bcs.w	8000f6a <__udivmoddi4+0x2a2>
 8000e62:	45a1      	cmp	r9, r4
 8000e64:	f240 8081 	bls.w	8000f6a <__udivmoddi4+0x2a2>
 8000e68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e6c:	443c      	add	r4, r7
 8000e6e:	eba4 0409 	sub.w	r4, r4, r9
 8000e72:	fa1f f983 	uxth.w	r9, r3
 8000e76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e86:	45a4      	cmp	ip, r4
 8000e88:	d907      	bls.n	8000e9a <__udivmoddi4+0x1d2>
 8000e8a:	193c      	adds	r4, r7, r4
 8000e8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e90:	d267      	bcs.n	8000f62 <__udivmoddi4+0x29a>
 8000e92:	45a4      	cmp	ip, r4
 8000e94:	d965      	bls.n	8000f62 <__udivmoddi4+0x29a>
 8000e96:	3b02      	subs	r3, #2
 8000e98:	443c      	add	r4, r7
 8000e9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000ea2:	eba4 040c 	sub.w	r4, r4, ip
 8000ea6:	429c      	cmp	r4, r3
 8000ea8:	46ce      	mov	lr, r9
 8000eaa:	469c      	mov	ip, r3
 8000eac:	d351      	bcc.n	8000f52 <__udivmoddi4+0x28a>
 8000eae:	d04e      	beq.n	8000f4e <__udivmoddi4+0x286>
 8000eb0:	b155      	cbz	r5, 8000ec8 <__udivmoddi4+0x200>
 8000eb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000eb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eba:	fa04 f606 	lsl.w	r6, r4, r6
 8000ebe:	40cb      	lsrs	r3, r1
 8000ec0:	431e      	orrs	r6, r3
 8000ec2:	40cc      	lsrs	r4, r1
 8000ec4:	e9c5 6400 	strd	r6, r4, [r5]
 8000ec8:	2100      	movs	r1, #0
 8000eca:	e750      	b.n	8000d6e <__udivmoddi4+0xa6>
 8000ecc:	f1c2 0320 	rsb	r3, r2, #32
 8000ed0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ed4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ed8:	fa24 f303 	lsr.w	r3, r4, r3
 8000edc:	4094      	lsls	r4, r2
 8000ede:	430c      	orrs	r4, r1
 8000ee0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ee4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ee8:	fa1f f78c 	uxth.w	r7, ip
 8000eec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ef0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ef4:	0c23      	lsrs	r3, r4, #16
 8000ef6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000efa:	fb00 f107 	mul.w	r1, r0, r7
 8000efe:	4299      	cmp	r1, r3
 8000f00:	d908      	bls.n	8000f14 <__udivmoddi4+0x24c>
 8000f02:	eb1c 0303 	adds.w	r3, ip, r3
 8000f06:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f0a:	d22c      	bcs.n	8000f66 <__udivmoddi4+0x29e>
 8000f0c:	4299      	cmp	r1, r3
 8000f0e:	d92a      	bls.n	8000f66 <__udivmoddi4+0x29e>
 8000f10:	3802      	subs	r0, #2
 8000f12:	4463      	add	r3, ip
 8000f14:	1a5b      	subs	r3, r3, r1
 8000f16:	b2a4      	uxth	r4, r4
 8000f18:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f1c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f20:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f24:	fb01 f307 	mul.w	r3, r1, r7
 8000f28:	42a3      	cmp	r3, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x276>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f34:	d213      	bcs.n	8000f5e <__udivmoddi4+0x296>
 8000f36:	42a3      	cmp	r3, r4
 8000f38:	d911      	bls.n	8000f5e <__udivmoddi4+0x296>
 8000f3a:	3902      	subs	r1, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	1ae4      	subs	r4, r4, r3
 8000f40:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f44:	e739      	b.n	8000dba <__udivmoddi4+0xf2>
 8000f46:	4604      	mov	r4, r0
 8000f48:	e6f0      	b.n	8000d2c <__udivmoddi4+0x64>
 8000f4a:	4608      	mov	r0, r1
 8000f4c:	e706      	b.n	8000d5c <__udivmoddi4+0x94>
 8000f4e:	45c8      	cmp	r8, r9
 8000f50:	d2ae      	bcs.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f52:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f56:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f5a:	3801      	subs	r0, #1
 8000f5c:	e7a8      	b.n	8000eb0 <__udivmoddi4+0x1e8>
 8000f5e:	4631      	mov	r1, r6
 8000f60:	e7ed      	b.n	8000f3e <__udivmoddi4+0x276>
 8000f62:	4603      	mov	r3, r0
 8000f64:	e799      	b.n	8000e9a <__udivmoddi4+0x1d2>
 8000f66:	4630      	mov	r0, r6
 8000f68:	e7d4      	b.n	8000f14 <__udivmoddi4+0x24c>
 8000f6a:	46d6      	mov	lr, sl
 8000f6c:	e77f      	b.n	8000e6e <__udivmoddi4+0x1a6>
 8000f6e:	4463      	add	r3, ip
 8000f70:	3802      	subs	r0, #2
 8000f72:	e74d      	b.n	8000e10 <__udivmoddi4+0x148>
 8000f74:	4606      	mov	r6, r0
 8000f76:	4623      	mov	r3, r4
 8000f78:	4608      	mov	r0, r1
 8000f7a:	e70f      	b.n	8000d9c <__udivmoddi4+0xd4>
 8000f7c:	3e02      	subs	r6, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	e730      	b.n	8000de4 <__udivmoddi4+0x11c>
 8000f82:	bf00      	nop

08000f84 <__aeabi_idiv0>:
 8000f84:	4770      	bx	lr
 8000f86:	bf00      	nop

08000f88 <MPU6050_Init>:
 */

#include "MPU6050.h"
#include <math.h> // Untuk fungsi trigonometri

void MPU6050_Init(I2C_HandleTypeDef *hi2c, uint16_t DevAddress) {
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b088      	sub	sp, #32
 8000f8c:	af04      	add	r7, sp, #16
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	807b      	strh	r3, [r7, #2]
    uint8_t check;
    uint8_t Data;

    // Cek apakah MPU6050 terhubung
    HAL_I2C_Mem_Read(hi2c, DevAddress, WHO_AM_I_REG, 1, &check, 1, 1000);
 8000f94:	8879      	ldrh	r1, [r7, #2]
 8000f96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f9a:	9302      	str	r3, [sp, #8]
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	9301      	str	r3, [sp, #4]
 8000fa0:	f107 030f 	add.w	r3, r7, #15
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	2275      	movs	r2, #117	@ 0x75
 8000faa:	6878      	ldr	r0, [r7, #4]
 8000fac:	f001 f9e6 	bl	800237c <HAL_I2C_Mem_Read>
    if (check == 104) { // 0x68 akan dikembalikan oleh sensor jika terdeteksi
 8000fb0:	7bfb      	ldrb	r3, [r7, #15]
 8000fb2:	2b68      	cmp	r3, #104	@ 0x68
 8000fb4:	d10f      	bne.n	8000fd6 <MPU6050_Init+0x4e>
        // Wake up MPU6050
        Data = 0;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(hi2c, DevAddress, PWR_MGMT_1_REG, 1, &Data, 1, 1000);
 8000fba:	8879      	ldrh	r1, [r7, #2]
 8000fbc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fc0:	9302      	str	r3, [sp, #8]
 8000fc2:	2301      	movs	r3, #1
 8000fc4:	9301      	str	r3, [sp, #4]
 8000fc6:	f107 030e 	add.w	r3, r7, #14
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	226b      	movs	r2, #107	@ 0x6b
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f001 f8bf 	bl	8002154 <HAL_I2C_Mem_Write>
    }
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <MPU6050_Read_Accel>:

void MPU6050_Read_Accel(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, int16_t *Accel_X, int16_t *Accel_Y, int16_t *Accel_Z) {
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b08a      	sub	sp, #40	@ 0x28
 8000fe2:	af04      	add	r7, sp, #16
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
 8000fea:	460b      	mov	r3, r1
 8000fec:	817b      	strh	r3, [r7, #10]
    uint8_t Rec_Data[6];

    // Baca 6 register data akselerometer
    HAL_I2C_Mem_Read(hi2c, DevAddress, ACCEL_XOUT_H, 1, Rec_Data, 6, 1000);
 8000fee:	8979      	ldrh	r1, [r7, #10]
 8000ff0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ff4:	9302      	str	r3, [sp, #8]
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	9301      	str	r3, [sp, #4]
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	9300      	str	r3, [sp, #0]
 8001000:	2301      	movs	r3, #1
 8001002:	223b      	movs	r2, #59	@ 0x3b
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f001 f9b9 	bl	800237c <HAL_I2C_Mem_Read>

    *Accel_X = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 800100a:	7c3b      	ldrb	r3, [r7, #16]
 800100c:	021b      	lsls	r3, r3, #8
 800100e:	b21a      	sxth	r2, r3
 8001010:	7c7b      	ldrb	r3, [r7, #17]
 8001012:	b21b      	sxth	r3, r3
 8001014:	4313      	orrs	r3, r2
 8001016:	b21a      	sxth	r2, r3
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	801a      	strh	r2, [r3, #0]
    *Accel_Y = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 800101c:	7cbb      	ldrb	r3, [r7, #18]
 800101e:	021b      	lsls	r3, r3, #8
 8001020:	b21a      	sxth	r2, r3
 8001022:	7cfb      	ldrb	r3, [r7, #19]
 8001024:	b21b      	sxth	r3, r3
 8001026:	4313      	orrs	r3, r2
 8001028:	b21a      	sxth	r2, r3
 800102a:	683b      	ldr	r3, [r7, #0]
 800102c:	801a      	strh	r2, [r3, #0]
    *Accel_Z = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 800102e:	7d3b      	ldrb	r3, [r7, #20]
 8001030:	021b      	lsls	r3, r3, #8
 8001032:	b21a      	sxth	r2, r3
 8001034:	7d7b      	ldrb	r3, [r7, #21]
 8001036:	b21b      	sxth	r3, r3
 8001038:	4313      	orrs	r3, r2
 800103a:	b21a      	sxth	r2, r3
 800103c:	6a3b      	ldr	r3, [r7, #32]
 800103e:	801a      	strh	r2, [r3, #0]
}
 8001040:	bf00      	nop
 8001042:	3718      	adds	r7, #24
 8001044:	46bd      	mov	sp, r7
 8001046:	bd80      	pop	{r7, pc}

08001048 <MPU6050_Read_Gyro>:

void MPU6050_Read_Gyro(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, int16_t *Gyro_X, int16_t *Gyro_Y, int16_t *Gyro_Z) {
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af04      	add	r7, sp, #16
 800104e:	60f8      	str	r0, [r7, #12]
 8001050:	607a      	str	r2, [r7, #4]
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	460b      	mov	r3, r1
 8001056:	817b      	strh	r3, [r7, #10]
    uint8_t Rec_Data[6];

    // Baca 6 register data gyroscope
    HAL_I2C_Mem_Read(hi2c, DevAddress, GYRO_XOUT_H, 1, Rec_Data, 6, 1000);
 8001058:	8979      	ldrh	r1, [r7, #10]
 800105a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800105e:	9302      	str	r3, [sp, #8]
 8001060:	2306      	movs	r3, #6
 8001062:	9301      	str	r3, [sp, #4]
 8001064:	f107 0310 	add.w	r3, r7, #16
 8001068:	9300      	str	r3, [sp, #0]
 800106a:	2301      	movs	r3, #1
 800106c:	2243      	movs	r2, #67	@ 0x43
 800106e:	68f8      	ldr	r0, [r7, #12]
 8001070:	f001 f984 	bl	800237c <HAL_I2C_Mem_Read>

    *Gyro_X = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001074:	7c3b      	ldrb	r3, [r7, #16]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	b21a      	sxth	r2, r3
 800107a:	7c7b      	ldrb	r3, [r7, #17]
 800107c:	b21b      	sxth	r3, r3
 800107e:	4313      	orrs	r3, r2
 8001080:	b21a      	sxth	r2, r3
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	801a      	strh	r2, [r3, #0]
    *Gyro_Y = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001086:	7cbb      	ldrb	r3, [r7, #18]
 8001088:	021b      	lsls	r3, r3, #8
 800108a:	b21a      	sxth	r2, r3
 800108c:	7cfb      	ldrb	r3, [r7, #19]
 800108e:	b21b      	sxth	r3, r3
 8001090:	4313      	orrs	r3, r2
 8001092:	b21a      	sxth	r2, r3
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	801a      	strh	r2, [r3, #0]
    *Gyro_Z = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001098:	7d3b      	ldrb	r3, [r7, #20]
 800109a:	021b      	lsls	r3, r3, #8
 800109c:	b21a      	sxth	r2, r3
 800109e:	7d7b      	ldrb	r3, [r7, #21]
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4313      	orrs	r3, r2
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	6a3b      	ldr	r3, [r7, #32]
 80010a8:	801a      	strh	r2, [r3, #0]
}
 80010aa:	bf00      	nop
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	0000      	movs	r0, r0
 80010b4:	0000      	movs	r0, r0
	...

080010b8 <MPU6050_Calculate_Roll_Pitch>:

void MPU6050_Calculate_Roll_Pitch(int16_t Accel_X, int16_t Accel_Y, int16_t Accel_Z, float *roll, float *pitch) {
 80010b8:	b5b0      	push	{r4, r5, r7, lr}
 80010ba:	b088      	sub	sp, #32
 80010bc:	af00      	add	r7, sp, #0
 80010be:	607b      	str	r3, [r7, #4]
 80010c0:	4603      	mov	r3, r0
 80010c2:	81fb      	strh	r3, [r7, #14]
 80010c4:	460b      	mov	r3, r1
 80010c6:	81bb      	strh	r3, [r7, #12]
 80010c8:	4613      	mov	r3, r2
 80010ca:	817b      	strh	r3, [r7, #10]
    float Ax = Accel_X / 16384.0;
 80010cc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fa4f 	bl	8000574 <__aeabi_i2d>
 80010d6:	f04f 0200 	mov.w	r2, #0
 80010da:	4b53      	ldr	r3, [pc, #332]	@ (8001228 <MPU6050_Calculate_Roll_Pitch+0x170>)
 80010dc:	f7ff fbde 	bl	800089c <__aeabi_ddiv>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f7ff fd86 	bl	8000bf8 <__aeabi_d2f>
 80010ec:	4603      	mov	r3, r0
 80010ee:	61fb      	str	r3, [r7, #28]
    float Ay = Accel_Y / 16384.0;
 80010f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fa3d 	bl	8000574 <__aeabi_i2d>
 80010fa:	f04f 0200 	mov.w	r2, #0
 80010fe:	4b4a      	ldr	r3, [pc, #296]	@ (8001228 <MPU6050_Calculate_Roll_Pitch+0x170>)
 8001100:	f7ff fbcc 	bl	800089c <__aeabi_ddiv>
 8001104:	4602      	mov	r2, r0
 8001106:	460b      	mov	r3, r1
 8001108:	4610      	mov	r0, r2
 800110a:	4619      	mov	r1, r3
 800110c:	f7ff fd74 	bl	8000bf8 <__aeabi_d2f>
 8001110:	4603      	mov	r3, r0
 8001112:	61bb      	str	r3, [r7, #24]
    float Az = Accel_Z / 16384.0;
 8001114:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa2b 	bl	8000574 <__aeabi_i2d>
 800111e:	f04f 0200 	mov.w	r2, #0
 8001122:	4b41      	ldr	r3, [pc, #260]	@ (8001228 <MPU6050_Calculate_Roll_Pitch+0x170>)
 8001124:	f7ff fbba 	bl	800089c <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fd62 	bl	8000bf8 <__aeabi_d2f>
 8001134:	4603      	mov	r3, r0
 8001136:	617b      	str	r3, [r7, #20]

    *roll = atan2(Ay, Az) * 180.0 / M_PI;
 8001138:	69b8      	ldr	r0, [r7, #24]
 800113a:	f7ff fa2d 	bl	8000598 <__aeabi_f2d>
 800113e:	4604      	mov	r4, r0
 8001140:	460d      	mov	r5, r1
 8001142:	6978      	ldr	r0, [r7, #20]
 8001144:	f7ff fa28 	bl	8000598 <__aeabi_f2d>
 8001148:	4602      	mov	r2, r0
 800114a:	460b      	mov	r3, r1
 800114c:	ec43 2b11 	vmov	d1, r2, r3
 8001150:	ec45 4b10 	vmov	d0, r4, r5
 8001154:	f006 fb0c 	bl	8007770 <atan2>
 8001158:	ec51 0b10 	vmov	r0, r1, d0
 800115c:	f04f 0200 	mov.w	r2, #0
 8001160:	4b32      	ldr	r3, [pc, #200]	@ (800122c <MPU6050_Calculate_Roll_Pitch+0x174>)
 8001162:	f7ff fa71 	bl	8000648 <__aeabi_dmul>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	a32c      	add	r3, pc, #176	@ (adr r3, 8001220 <MPU6050_Calculate_Roll_Pitch+0x168>)
 8001170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001174:	f7ff fb92 	bl	800089c <__aeabi_ddiv>
 8001178:	4602      	mov	r2, r0
 800117a:	460b      	mov	r3, r1
 800117c:	4610      	mov	r0, r2
 800117e:	4619      	mov	r1, r3
 8001180:	f7ff fd3a 	bl	8000bf8 <__aeabi_d2f>
 8001184:	4602      	mov	r2, r0
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	601a      	str	r2, [r3, #0]
    *pitch = atan2(-Ax, sqrt(Ay * Ay + Az * Az)) * 180.0 / M_PI;
 800118a:	edd7 7a07 	vldr	s15, [r7, #28]
 800118e:	eef1 7a67 	vneg.f32	s15, s15
 8001192:	ee17 3a90 	vmov	r3, s15
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff f9fe 	bl	8000598 <__aeabi_f2d>
 800119c:	4604      	mov	r4, r0
 800119e:	460d      	mov	r5, r1
 80011a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80011a4:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80011a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80011ac:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80011b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011b4:	ee17 0a90 	vmov	r0, s15
 80011b8:	f7ff f9ee 	bl	8000598 <__aeabi_f2d>
 80011bc:	4602      	mov	r2, r0
 80011be:	460b      	mov	r3, r1
 80011c0:	ec43 2b10 	vmov	d0, r2, r3
 80011c4:	f006 fad6 	bl	8007774 <sqrt>
 80011c8:	eeb0 7a40 	vmov.f32	s14, s0
 80011cc:	eef0 7a60 	vmov.f32	s15, s1
 80011d0:	eeb0 1a47 	vmov.f32	s2, s14
 80011d4:	eef0 1a67 	vmov.f32	s3, s15
 80011d8:	ec45 4b10 	vmov	d0, r4, r5
 80011dc:	f006 fac8 	bl	8007770 <atan2>
 80011e0:	ec51 0b10 	vmov	r0, r1, d0
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b10      	ldr	r3, [pc, #64]	@ (800122c <MPU6050_Calculate_Roll_Pitch+0x174>)
 80011ea:	f7ff fa2d 	bl	8000648 <__aeabi_dmul>
 80011ee:	4602      	mov	r2, r0
 80011f0:	460b      	mov	r3, r1
 80011f2:	4610      	mov	r0, r2
 80011f4:	4619      	mov	r1, r3
 80011f6:	a30a      	add	r3, pc, #40	@ (adr r3, 8001220 <MPU6050_Calculate_Roll_Pitch+0x168>)
 80011f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011fc:	f7ff fb4e 	bl	800089c <__aeabi_ddiv>
 8001200:	4602      	mov	r2, r0
 8001202:	460b      	mov	r3, r1
 8001204:	4610      	mov	r0, r2
 8001206:	4619      	mov	r1, r3
 8001208:	f7ff fcf6 	bl	8000bf8 <__aeabi_d2f>
 800120c:	4602      	mov	r2, r0
 800120e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001210:	601a      	str	r2, [r3, #0]
}
 8001212:	bf00      	nop
 8001214:	3720      	adds	r7, #32
 8001216:	46bd      	mov	sp, r7
 8001218:	bdb0      	pop	{r4, r5, r7, pc}
 800121a:	bf00      	nop
 800121c:	f3af 8000 	nop.w
 8001220:	54442d18 	.word	0x54442d18
 8001224:	400921fb 	.word	0x400921fb
 8001228:	40d00000 	.word	0x40d00000
 800122c:	40668000 	.word	0x40668000

08001230 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001230:	b5b0      	push	{r4, r5, r7, lr}
 8001232:	b09a      	sub	sp, #104	@ 0x68
 8001234:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001236:	f000 fbe0 	bl	80019fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800123a:	f000 f895 	bl	8001368 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800123e:	f000 f95f 	bl	8001500 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001242:	f000 f911 	bl	8001468 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8001246:	f000 f8cf 	bl	80013e8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  MPU6050_Init(&hi2c1, MPU6050_ADDRESS1);
 800124a:	21d0      	movs	r1, #208	@ 0xd0
 800124c:	4843      	ldr	r0, [pc, #268]	@ (800135c <main+0x12c>)
 800124e:	f7ff fe9b 	bl	8000f88 <MPU6050_Init>
  MPU6050_Init(&hi2c1, MPU6050_ADDRESS2);
 8001252:	21d2      	movs	r1, #210	@ 0xd2
 8001254:	4841      	ldr	r0, [pc, #260]	@ (800135c <main+0x12c>)
 8001256:	f7ff fe97 	bl	8000f88 <MPU6050_Init>

  int16_t Accel_X2, Accel_Y2, Accel_Z2;
  int16_t Gyro_X2, Gyro_Y2, Gyro_Z2;
  float roll2, pitch2;
	char newline = '\n';
 800125a:	230a      	movs	r3, #10
 800125c:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
	char message[50];
	int counter1 = 0;
 8001260:	2300      	movs	r3, #0
 8001262:	657b      	str	r3, [r7, #84]	@ 0x54
	int counter2 = 0;
 8001264:	2300      	movs	r3, #0
 8001266:	653b      	str	r3, [r7, #80]	@ 0x50
	int counter3 = 0;
 8001268:	2300      	movs	r3, #0
 800126a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  MPU6050_Read_Accel(&hi2c1, MPU6050_ADDRESS2, &Accel_X2, &Accel_Y2, &Accel_Z2);
 800126c:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 8001270:	f107 024a 	add.w	r2, r7, #74	@ 0x4a
 8001274:	f107 0346 	add.w	r3, r7, #70	@ 0x46
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	460b      	mov	r3, r1
 800127c:	21d2      	movs	r1, #210	@ 0xd2
 800127e:	4837      	ldr	r0, [pc, #220]	@ (800135c <main+0x12c>)
 8001280:	f7ff fead 	bl	8000fde <MPU6050_Read_Accel>
	  MPU6050_Read_Gyro(&hi2c1, MPU6050_ADDRESS2, &Gyro_X2, &Gyro_Y2, &Gyro_Z2);
 8001284:	f107 0142 	add.w	r1, r7, #66	@ 0x42
 8001288:	f107 0244 	add.w	r2, r7, #68	@ 0x44
 800128c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	460b      	mov	r3, r1
 8001294:	21d2      	movs	r1, #210	@ 0xd2
 8001296:	4831      	ldr	r0, [pc, #196]	@ (800135c <main+0x12c>)
 8001298:	f7ff fed6 	bl	8001048 <MPU6050_Read_Gyro>
	  MPU6050_Calculate_Roll_Pitch(Accel_X2, Accel_Y2, Accel_Z2, &roll2, &pitch2);
 800129c:	f9b7 004a 	ldrsh.w	r0, [r7, #74]	@ 0x4a
 80012a0:	f9b7 1048 	ldrsh.w	r1, [r7, #72]	@ 0x48
 80012a4:	f9b7 2046 	ldrsh.w	r2, [r7, #70]	@ 0x46
 80012a8:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 80012ac:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80012b0:	9300      	str	r3, [sp, #0]
 80012b2:	4623      	mov	r3, r4
 80012b4:	f7ff ff00 	bl	80010b8 <MPU6050_Calculate_Roll_Pitch>

//	  printf("Roll 2: %f, Pitch 2: %f\n", roll2, pitch2);
	  snprintf(message, sizeof(message), "%f, %f\n", roll2, pitch2);
 80012b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80012ba:	4618      	mov	r0, r3
 80012bc:	f7ff f96c 	bl	8000598 <__aeabi_f2d>
 80012c0:	4604      	mov	r4, r0
 80012c2:	460d      	mov	r5, r1
 80012c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80012c6:	4618      	mov	r0, r3
 80012c8:	f7ff f966 	bl	8000598 <__aeabi_f2d>
 80012cc:	4602      	mov	r2, r0
 80012ce:	460b      	mov	r3, r1
 80012d0:	1d38      	adds	r0, r7, #4
 80012d2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80012d6:	e9cd 4500 	strd	r4, r5, [sp]
 80012da:	4a21      	ldr	r2, [pc, #132]	@ (8001360 <main+0x130>)
 80012dc:	2132      	movs	r1, #50	@ 0x32
 80012de:	f004 f907 	bl	80054f0 <sniprintf>

	  // Output the message using UART or any other appropriate method
	  HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7fe ffeb 	bl	80002c0 <strlen>
 80012ea:	4603      	mov	r3, r0
 80012ec:	b29a      	uxth	r2, r3
 80012ee:	1d39      	adds	r1, r7, #4
 80012f0:	f04f 33ff 	mov.w	r3, #4294967295
 80012f4:	481b      	ldr	r0, [pc, #108]	@ (8001364 <main+0x134>)
 80012f6:	f002 fd35 	bl	8003d64 <HAL_UART_Transmit>
	  counter1++;
 80012fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80012fc:	3301      	adds	r3, #1
 80012fe:	657b      	str	r3, [r7, #84]	@ 0x54
	  counter2++;
 8001300:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001302:	3301      	adds	r3, #1
 8001304:	653b      	str	r3, [r7, #80]	@ 0x50
	  counter3++;
 8001306:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8001308:	3301      	adds	r3, #1
 800130a:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  if (counter1 > 10 || counter2 > 10 || counter3 > 10) {
 800130c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800130e:	2b0a      	cmp	r3, #10
 8001310:	dc05      	bgt.n	800131e <main+0xee>
 8001312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001314:	2b0a      	cmp	r3, #10
 8001316:	dc02      	bgt.n	800131e <main+0xee>
 8001318:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800131a:	2b0a      	cmp	r3, #10
 800131c:	dd05      	ble.n	800132a <main+0xfa>
		  counter1 = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	657b      	str	r3, [r7, #84]	@ 0x54
		  counter2 = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	653b      	str	r3, [r7, #80]	@ 0x50
		  counter3 = 0;
 8001326:	2300      	movs	r3, #0
 8001328:	64fb      	str	r3, [r7, #76]	@ 0x4c
	  }

	  // Convert counter to string and store in message
//	  snprintf(message, sizeof(message), "%c,%c,%c", (char)(counter1 + '0'), (char)(counter2 + '0'), (char)(counter3 + '0'));

	  HAL_UART_Transmit(&huart1, (uint8_t *)message, strlen(message), HAL_MAX_DELAY);
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4618      	mov	r0, r3
 800132e:	f7fe ffc7 	bl	80002c0 <strlen>
 8001332:	4603      	mov	r3, r0
 8001334:	b29a      	uxth	r2, r3
 8001336:	1d39      	adds	r1, r7, #4
 8001338:	f04f 33ff 	mov.w	r3, #4294967295
 800133c:	4809      	ldr	r0, [pc, #36]	@ (8001364 <main+0x134>)
 800133e:	f002 fd11 	bl	8003d64 <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart1, (uint8_t *)&newline, 1, HAL_MAX_DELAY);
 8001342:	f107 0137 	add.w	r1, r7, #55	@ 0x37
 8001346:	f04f 33ff 	mov.w	r3, #4294967295
 800134a:	2201      	movs	r2, #1
 800134c:	4805      	ldr	r0, [pc, #20]	@ (8001364 <main+0x134>)
 800134e:	f002 fd09 	bl	8003d64 <HAL_UART_Transmit>


	  // Delay for 1 second
	  HAL_Delay(1000);
 8001352:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001356:	f000 fbc1 	bl	8001adc <HAL_Delay>
	  MPU6050_Read_Accel(&hi2c1, MPU6050_ADDRESS2, &Accel_X2, &Accel_Y2, &Accel_Z2);
 800135a:	e787      	b.n	800126c <main+0x3c>
 800135c:	20000204 	.word	0x20000204
 8001360:	08007e68 	.word	0x08007e68
 8001364:	20000258 	.word	0x20000258

08001368 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b094      	sub	sp, #80	@ 0x50
 800136c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800136e:	f107 0318 	add.w	r3, r7, #24
 8001372:	2238      	movs	r2, #56	@ 0x38
 8001374:	2100      	movs	r1, #0
 8001376:	4618      	mov	r0, r3
 8001378:	f004 f931 	bl	80055de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800137c:	1d3b      	adds	r3, r7, #4
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
 8001388:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800138a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800138e:	f001 fc69 	bl	8002c64 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001392:	2302      	movs	r3, #2
 8001394:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001396:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800139c:	2340      	movs	r3, #64	@ 0x40
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013a0:	2300      	movs	r3, #0
 80013a2:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013a4:	f107 0318 	add.w	r3, r7, #24
 80013a8:	4618      	mov	r0, r3
 80013aa:	f001 fd0f 	bl	8002dcc <HAL_RCC_OscConfig>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80013b4:	f000 f8f6 	bl	80015a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013b8:	230f      	movs	r3, #15
 80013ba:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80013bc:	2301      	movs	r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013c0:	2300      	movs	r3, #0
 80013c2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013c8:	2300      	movs	r3, #0
 80013ca:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013cc:	1d3b      	adds	r3, r7, #4
 80013ce:	2100      	movs	r1, #0
 80013d0:	4618      	mov	r0, r3
 80013d2:	f002 f80d 	bl	80033f0 <HAL_RCC_ClockConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0x78>
  {
    Error_Handler();
 80013dc:	f000 f8e2 	bl	80015a4 <Error_Handler>
  }
}
 80013e0:	bf00      	nop
 80013e2:	3750      	adds	r7, #80	@ 0x50
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80013ec:	4b1b      	ldr	r3, [pc, #108]	@ (800145c <MX_I2C1_Init+0x74>)
 80013ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001460 <MX_I2C1_Init+0x78>)
 80013f0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00303D5B;
 80013f2:	4b1a      	ldr	r3, [pc, #104]	@ (800145c <MX_I2C1_Init+0x74>)
 80013f4:	4a1b      	ldr	r2, [pc, #108]	@ (8001464 <MX_I2C1_Init+0x7c>)
 80013f6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80013f8:	4b18      	ldr	r3, [pc, #96]	@ (800145c <MX_I2C1_Init+0x74>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80013fe:	4b17      	ldr	r3, [pc, #92]	@ (800145c <MX_I2C1_Init+0x74>)
 8001400:	2201      	movs	r2, #1
 8001402:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001404:	4b15      	ldr	r3, [pc, #84]	@ (800145c <MX_I2C1_Init+0x74>)
 8001406:	2200      	movs	r2, #0
 8001408:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800140a:	4b14      	ldr	r3, [pc, #80]	@ (800145c <MX_I2C1_Init+0x74>)
 800140c:	2200      	movs	r2, #0
 800140e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001410:	4b12      	ldr	r3, [pc, #72]	@ (800145c <MX_I2C1_Init+0x74>)
 8001412:	2200      	movs	r2, #0
 8001414:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001416:	4b11      	ldr	r3, [pc, #68]	@ (800145c <MX_I2C1_Init+0x74>)
 8001418:	2200      	movs	r2, #0
 800141a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800141c:	4b0f      	ldr	r3, [pc, #60]	@ (800145c <MX_I2C1_Init+0x74>)
 800141e:	2200      	movs	r2, #0
 8001420:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001422:	480e      	ldr	r0, [pc, #56]	@ (800145c <MX_I2C1_Init+0x74>)
 8001424:	f000 fdfa 	bl	800201c <HAL_I2C_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800142e:	f000 f8b9 	bl	80015a4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001432:	2100      	movs	r1, #0
 8001434:	4809      	ldr	r0, [pc, #36]	@ (800145c <MX_I2C1_Init+0x74>)
 8001436:	f001 fb7d 	bl	8002b34 <HAL_I2CEx_ConfigAnalogFilter>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001440:	f000 f8b0 	bl	80015a4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001444:	2100      	movs	r1, #0
 8001446:	4805      	ldr	r0, [pc, #20]	@ (800145c <MX_I2C1_Init+0x74>)
 8001448:	f001 fbbf 	bl	8002bca <HAL_I2CEx_ConfigDigitalFilter>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001452:	f000 f8a7 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000204 	.word	0x20000204
 8001460:	40005400 	.word	0x40005400
 8001464:	00303d5b 	.word	0x00303d5b

08001468 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800146c:	4b22      	ldr	r3, [pc, #136]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 800146e:	4a23      	ldr	r2, [pc, #140]	@ (80014fc <MX_USART1_UART_Init+0x94>)
 8001470:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001472:	4b21      	ldr	r3, [pc, #132]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 8001474:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001478:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800147a:	4b1f      	ldr	r3, [pc, #124]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 800147c:	2200      	movs	r2, #0
 800147e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001480:	4b1d      	ldr	r3, [pc, #116]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 8001482:	2200      	movs	r2, #0
 8001484:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001486:	4b1c      	ldr	r3, [pc, #112]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 8001488:	2200      	movs	r2, #0
 800148a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800148c:	4b1a      	ldr	r3, [pc, #104]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 800148e:	220c      	movs	r2, #12
 8001490:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001492:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 8001494:	2200      	movs	r2, #0
 8001496:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001498:	4b17      	ldr	r3, [pc, #92]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 800149a:	2200      	movs	r2, #0
 800149c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80014a4:	4b14      	ldr	r3, [pc, #80]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014aa:	4b13      	ldr	r3, [pc, #76]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014b0:	4811      	ldr	r0, [pc, #68]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 80014b2:	f002 fc07 	bl	8003cc4 <HAL_UART_Init>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80014bc:	f000 f872 	bl	80015a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014c0:	2100      	movs	r1, #0
 80014c2:	480d      	ldr	r0, [pc, #52]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 80014c4:	f003 fa30 	bl	8004928 <HAL_UARTEx_SetTxFifoThreshold>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80014ce:	f000 f869 	bl	80015a4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80014d2:	2100      	movs	r1, #0
 80014d4:	4808      	ldr	r0, [pc, #32]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 80014d6:	f003 fa65 	bl	80049a4 <HAL_UARTEx_SetRxFifoThreshold>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80014e0:	f000 f860 	bl	80015a4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80014e4:	4804      	ldr	r0, [pc, #16]	@ (80014f8 <MX_USART1_UART_Init+0x90>)
 80014e6:	f003 f9e6 	bl	80048b6 <HAL_UARTEx_DisableFifoMode>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80014f0:	f000 f858 	bl	80015a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80014f4:	bf00      	nop
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	20000258 	.word	0x20000258
 80014fc:	40013800 	.word	0x40013800

08001500 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001506:	f107 030c 	add.w	r3, r7, #12
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <MX_GPIO_Init+0x7c>)
 8001518:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800151a:	4a18      	ldr	r2, [pc, #96]	@ (800157c <MX_GPIO_Init+0x7c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001522:	4b16      	ldr	r3, [pc, #88]	@ (800157c <MX_GPIO_Init+0x7c>)
 8001524:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60bb      	str	r3, [r7, #8]
 800152c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800152e:	4b13      	ldr	r3, [pc, #76]	@ (800157c <MX_GPIO_Init+0x7c>)
 8001530:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001532:	4a12      	ldr	r2, [pc, #72]	@ (800157c <MX_GPIO_Init+0x7c>)
 8001534:	f043 0302 	orr.w	r3, r3, #2
 8001538:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800153a:	4b10      	ldr	r3, [pc, #64]	@ (800157c <MX_GPIO_Init+0x7c>)
 800153c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	607b      	str	r3, [r7, #4]
 8001544:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_14, GPIO_PIN_SET);
 8001546:	2201      	movs	r2, #1
 8001548:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800154c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001550:	f000 fd4c 	bl	8001fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001554:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001558:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800155a:	2301      	movs	r3, #1
 800155c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155e:	2300      	movs	r3, #0
 8001560:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001562:	2300      	movs	r3, #0
 8001564:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 030c 	add.w	r3, r7, #12
 800156a:	4619      	mov	r1, r3
 800156c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001570:	f000 fbba 	bl	8001ce8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	40021000 	.word	0x40021000

08001580 <__io_putchar>:

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE {
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) &ch, 1, 0xFFFF);
 8001588:	1d39      	adds	r1, r7, #4
 800158a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800158e:	2201      	movs	r2, #1
 8001590:	4803      	ldr	r0, [pc, #12]	@ (80015a0 <__io_putchar+0x20>)
 8001592:	f002 fbe7 	bl	8003d64 <HAL_UART_Transmit>

	return ch;
 8001596:	687b      	ldr	r3, [r7, #4]
}
 8001598:	4618      	mov	r0, r3
 800159a:	3708      	adds	r7, #8
 800159c:	46bd      	mov	sp, r7
 800159e:	bd80      	pop	{r7, pc}
 80015a0:	20000258 	.word	0x20000258

080015a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015a8:	b672      	cpsid	i
}
 80015aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015ac:	bf00      	nop
 80015ae:	e7fd      	b.n	80015ac <Error_Handler+0x8>

080015b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b6:	4b0f      	ldr	r3, [pc, #60]	@ (80015f4 <HAL_MspInit+0x44>)
 80015b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ba:	4a0e      	ldr	r2, [pc, #56]	@ (80015f4 <HAL_MspInit+0x44>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80015c2:	4b0c      	ldr	r3, [pc, #48]	@ (80015f4 <HAL_MspInit+0x44>)
 80015c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	607b      	str	r3, [r7, #4]
 80015cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	4b09      	ldr	r3, [pc, #36]	@ (80015f4 <HAL_MspInit+0x44>)
 80015d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015d2:	4a08      	ldr	r2, [pc, #32]	@ (80015f4 <HAL_MspInit+0x44>)
 80015d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80015da:	4b06      	ldr	r3, [pc, #24]	@ (80015f4 <HAL_MspInit+0x44>)
 80015dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e2:	603b      	str	r3, [r7, #0]
 80015e4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80015e6:	f001 fbe1 	bl	8002dac <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000

080015f8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b0a0      	sub	sp, #128	@ 0x80
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001610:	f107 0318 	add.w	r3, r7, #24
 8001614:	2254      	movs	r2, #84	@ 0x54
 8001616:	2100      	movs	r1, #0
 8001618:	4618      	mov	r0, r3
 800161a:	f003 ffe0 	bl	80055de <memset>
  if(hi2c->Instance==I2C1)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a2e      	ldr	r2, [pc, #184]	@ (80016dc <HAL_I2C_MspInit+0xe4>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d154      	bne.n	80016d2 <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001628:	2340      	movs	r3, #64	@ 0x40
 800162a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800162c:	2300      	movs	r3, #0
 800162e:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001630:	f107 0318 	add.w	r3, r7, #24
 8001634:	4618      	mov	r0, r3
 8001636:	f002 f8f7 	bl	8003828 <HAL_RCCEx_PeriphCLKConfig>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001640:	f7ff ffb0 	bl	80015a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001644:	4b26      	ldr	r3, [pc, #152]	@ (80016e0 <HAL_I2C_MspInit+0xe8>)
 8001646:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001648:	4a25      	ldr	r2, [pc, #148]	@ (80016e0 <HAL_I2C_MspInit+0xe8>)
 800164a:	f043 0301 	orr.w	r3, r3, #1
 800164e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001650:	4b23      	ldr	r3, [pc, #140]	@ (80016e0 <HAL_I2C_MspInit+0xe8>)
 8001652:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	617b      	str	r3, [r7, #20]
 800165a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800165c:	4b20      	ldr	r3, [pc, #128]	@ (80016e0 <HAL_I2C_MspInit+0xe8>)
 800165e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001660:	4a1f      	ldr	r2, [pc, #124]	@ (80016e0 <HAL_I2C_MspInit+0xe8>)
 8001662:	f043 0302 	orr.w	r3, r3, #2
 8001666:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001668:	4b1d      	ldr	r3, [pc, #116]	@ (80016e0 <HAL_I2C_MspInit+0xe8>)
 800166a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	613b      	str	r3, [r7, #16]
 8001672:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001674:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001678:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800167a:	2312      	movs	r3, #18
 800167c:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167e:	2300      	movs	r3, #0
 8001680:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001682:	2300      	movs	r3, #0
 8001684:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001686:	2304      	movs	r3, #4
 8001688:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800168e:	4619      	mov	r1, r3
 8001690:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001694:	f000 fb28 	bl	8001ce8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001698:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800169c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800169e:	2312      	movs	r3, #18
 80016a0:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a6:	2300      	movs	r3, #0
 80016a8:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80016aa:	2304      	movs	r3, #4
 80016ac:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ae:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016b2:	4619      	mov	r1, r3
 80016b4:	480b      	ldr	r0, [pc, #44]	@ (80016e4 <HAL_I2C_MspInit+0xec>)
 80016b6:	f000 fb17 	bl	8001ce8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80016ba:	4b09      	ldr	r3, [pc, #36]	@ (80016e0 <HAL_I2C_MspInit+0xe8>)
 80016bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016be:	4a08      	ldr	r2, [pc, #32]	@ (80016e0 <HAL_I2C_MspInit+0xe8>)
 80016c0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80016c4:	6593      	str	r3, [r2, #88]	@ 0x58
 80016c6:	4b06      	ldr	r3, [pc, #24]	@ (80016e0 <HAL_I2C_MspInit+0xe8>)
 80016c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80016ce:	60fb      	str	r3, [r7, #12]
 80016d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80016d2:	bf00      	nop
 80016d4:	3780      	adds	r7, #128	@ 0x80
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40005400 	.word	0x40005400
 80016e0:	40021000 	.word	0x40021000
 80016e4:	48000400 	.word	0x48000400

080016e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b09e      	sub	sp, #120	@ 0x78
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001700:	f107 0310 	add.w	r3, r7, #16
 8001704:	2254      	movs	r2, #84	@ 0x54
 8001706:	2100      	movs	r1, #0
 8001708:	4618      	mov	r0, r3
 800170a:	f003 ff68 	bl	80055de <memset>
  if(huart->Instance==USART1)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a1f      	ldr	r2, [pc, #124]	@ (8001790 <HAL_UART_MspInit+0xa8>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d137      	bne.n	8001788 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001718:	2301      	movs	r3, #1
 800171a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800171c:	2300      	movs	r3, #0
 800171e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001720:	f107 0310 	add.w	r3, r7, #16
 8001724:	4618      	mov	r0, r3
 8001726:	f002 f87f 	bl	8003828 <HAL_RCCEx_PeriphCLKConfig>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d001      	beq.n	8001734 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001730:	f7ff ff38 	bl	80015a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001734:	4b17      	ldr	r3, [pc, #92]	@ (8001794 <HAL_UART_MspInit+0xac>)
 8001736:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001738:	4a16      	ldr	r2, [pc, #88]	@ (8001794 <HAL_UART_MspInit+0xac>)
 800173a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800173e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001740:	4b14      	ldr	r3, [pc, #80]	@ (8001794 <HAL_UART_MspInit+0xac>)
 8001742:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001744:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001748:	60fb      	str	r3, [r7, #12]
 800174a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <HAL_UART_MspInit+0xac>)
 800174e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001750:	4a10      	ldr	r2, [pc, #64]	@ (8001794 <HAL_UART_MspInit+0xac>)
 8001752:	f043 0301 	orr.w	r3, r3, #1
 8001756:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001758:	4b0e      	ldr	r3, [pc, #56]	@ (8001794 <HAL_UART_MspInit+0xac>)
 800175a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175c:	f003 0301 	and.w	r3, r3, #1
 8001760:	60bb      	str	r3, [r7, #8]
 8001762:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001764:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001768:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800176a:	2302      	movs	r3, #2
 800176c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176e:	2300      	movs	r3, #0
 8001770:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001772:	2300      	movs	r3, #0
 8001774:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001776:	2307      	movs	r3, #7
 8001778:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 800177e:	4619      	mov	r1, r3
 8001780:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001784:	f000 fab0 	bl	8001ce8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001788:	bf00      	nop
 800178a:	3778      	adds	r7, #120	@ 0x78
 800178c:	46bd      	mov	sp, r7
 800178e:	bd80      	pop	{r7, pc}
 8001790:	40013800 	.word	0x40013800
 8001794:	40021000 	.word	0x40021000

08001798 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800179c:	bf00      	nop
 800179e:	e7fd      	b.n	800179c <NMI_Handler+0x4>

080017a0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <HardFault_Handler+0x4>

080017a8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <MemManage_Handler+0x4>

080017b0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <BusFault_Handler+0x4>

080017b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <UsageFault_Handler+0x4>

080017c0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c4:	bf00      	nop
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr

080017ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017ce:	b480      	push	{r7}
 80017d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d2:	bf00      	nop
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr

080017dc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017dc:	b480      	push	{r7}
 80017de:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e0:	bf00      	nop
 80017e2:	46bd      	mov	sp, r7
 80017e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e8:	4770      	bx	lr

080017ea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ea:	b580      	push	{r7, lr}
 80017ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017ee:	f000 f957 	bl	8001aa0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  return 1;
 80017fa:	2301      	movs	r3, #1
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <_kill>:

int _kill(int pid, int sig)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001810:	f003 ff38 	bl	8005684 <__errno>
 8001814:	4603      	mov	r3, r0
 8001816:	2216      	movs	r2, #22
 8001818:	601a      	str	r2, [r3, #0]
  return -1;
 800181a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181e:	4618      	mov	r0, r3
 8001820:	3708      	adds	r7, #8
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}

08001826 <_exit>:

void _exit (int status)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b082      	sub	sp, #8
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800182e:	f04f 31ff 	mov.w	r1, #4294967295
 8001832:	6878      	ldr	r0, [r7, #4]
 8001834:	f7ff ffe7 	bl	8001806 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <_exit+0x12>

0800183c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b086      	sub	sp, #24
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001848:	2300      	movs	r3, #0
 800184a:	617b      	str	r3, [r7, #20]
 800184c:	e00a      	b.n	8001864 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800184e:	f3af 8000 	nop.w
 8001852:	4601      	mov	r1, r0
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	1c5a      	adds	r2, r3, #1
 8001858:	60ba      	str	r2, [r7, #8]
 800185a:	b2ca      	uxtb	r2, r1
 800185c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	3301      	adds	r3, #1
 8001862:	617b      	str	r3, [r7, #20]
 8001864:	697a      	ldr	r2, [r7, #20]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	429a      	cmp	r2, r3
 800186a:	dbf0      	blt.n	800184e <_read+0x12>
  }

  return len;
 800186c:	687b      	ldr	r3, [r7, #4]
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}

08001876 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001876:	b580      	push	{r7, lr}
 8001878:	b086      	sub	sp, #24
 800187a:	af00      	add	r7, sp, #0
 800187c:	60f8      	str	r0, [r7, #12]
 800187e:	60b9      	str	r1, [r7, #8]
 8001880:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001882:	2300      	movs	r3, #0
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e009      	b.n	800189c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001888:	68bb      	ldr	r3, [r7, #8]
 800188a:	1c5a      	adds	r2, r3, #1
 800188c:	60ba      	str	r2, [r7, #8]
 800188e:	781b      	ldrb	r3, [r3, #0]
 8001890:	4618      	mov	r0, r3
 8001892:	f7ff fe75 	bl	8001580 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	3301      	adds	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	429a      	cmp	r2, r3
 80018a2:	dbf1      	blt.n	8001888 <_write+0x12>
  }
  return len;
 80018a4:	687b      	ldr	r3, [r7, #4]
}
 80018a6:	4618      	mov	r0, r3
 80018a8:	3718      	adds	r7, #24
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}

080018ae <_close>:

int _close(int file)
{
 80018ae:	b480      	push	{r7}
 80018b0:	b083      	sub	sp, #12
 80018b2:	af00      	add	r7, sp, #0
 80018b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80018b6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018ba:	4618      	mov	r0, r3
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr

080018c6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80018c6:	b480      	push	{r7}
 80018c8:	b083      	sub	sp, #12
 80018ca:	af00      	add	r7, sp, #0
 80018cc:	6078      	str	r0, [r7, #4]
 80018ce:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80018d6:	605a      	str	r2, [r3, #4]
  return 0;
 80018d8:	2300      	movs	r3, #0
}
 80018da:	4618      	mov	r0, r3
 80018dc:	370c      	adds	r7, #12
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <_isatty>:

int _isatty(int file)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b083      	sub	sp, #12
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80018ee:	2301      	movs	r3, #1
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr

080018fc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001908:	2300      	movs	r3, #0
}
 800190a:	4618      	mov	r0, r3
 800190c:	3714      	adds	r7, #20
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
	...

08001918 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001918:	b580      	push	{r7, lr}
 800191a:	b086      	sub	sp, #24
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001920:	4a14      	ldr	r2, [pc, #80]	@ (8001974 <_sbrk+0x5c>)
 8001922:	4b15      	ldr	r3, [pc, #84]	@ (8001978 <_sbrk+0x60>)
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800192c:	4b13      	ldr	r3, [pc, #76]	@ (800197c <_sbrk+0x64>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d102      	bne.n	800193a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001934:	4b11      	ldr	r3, [pc, #68]	@ (800197c <_sbrk+0x64>)
 8001936:	4a12      	ldr	r2, [pc, #72]	@ (8001980 <_sbrk+0x68>)
 8001938:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800193a:	4b10      	ldr	r3, [pc, #64]	@ (800197c <_sbrk+0x64>)
 800193c:	681a      	ldr	r2, [r3, #0]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	693a      	ldr	r2, [r7, #16]
 8001944:	429a      	cmp	r2, r3
 8001946:	d207      	bcs.n	8001958 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001948:	f003 fe9c 	bl	8005684 <__errno>
 800194c:	4603      	mov	r3, r0
 800194e:	220c      	movs	r2, #12
 8001950:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001952:	f04f 33ff 	mov.w	r3, #4294967295
 8001956:	e009      	b.n	800196c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001958:	4b08      	ldr	r3, [pc, #32]	@ (800197c <_sbrk+0x64>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800195e:	4b07      	ldr	r3, [pc, #28]	@ (800197c <_sbrk+0x64>)
 8001960:	681a      	ldr	r2, [r3, #0]
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4413      	add	r3, r2
 8001966:	4a05      	ldr	r2, [pc, #20]	@ (800197c <_sbrk+0x64>)
 8001968:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800196a:	68fb      	ldr	r3, [r7, #12]
}
 800196c:	4618      	mov	r0, r3
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	20020000 	.word	0x20020000
 8001978:	00000400 	.word	0x00000400
 800197c:	200002ec 	.word	0x200002ec
 8001980:	20000440 	.word	0x20000440

08001984 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001988:	4b06      	ldr	r3, [pc, #24]	@ (80019a4 <SystemInit+0x20>)
 800198a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800198e:	4a05      	ldr	r2, [pc, #20]	@ (80019a4 <SystemInit+0x20>)
 8001990:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001994:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001998:	bf00      	nop
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	e000ed00 	.word	0xe000ed00

080019a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80019a8:	480d      	ldr	r0, [pc, #52]	@ (80019e0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80019aa:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80019ac:	f7ff ffea 	bl	8001984 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b0:	480c      	ldr	r0, [pc, #48]	@ (80019e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019b2:	490d      	ldr	r1, [pc, #52]	@ (80019e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b4:	4a0d      	ldr	r2, [pc, #52]	@ (80019ec <LoopForever+0xe>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0a      	ldr	r2, [pc, #40]	@ (80019f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c8:	4c0a      	ldr	r4, [pc, #40]	@ (80019f4 <LoopForever+0x16>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d6:	f003 fe5b 	bl	8005690 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019da:	f7ff fc29 	bl	8001230 <main>

080019de <LoopForever>:

LoopForever:
    b LoopForever
 80019de:	e7fe      	b.n	80019de <LoopForever>
  ldr   r0, =_estack
 80019e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80019ec:	080082a0 	.word	0x080082a0
  ldr r2, =_sbss
 80019f0:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 80019f4:	20000440 	.word	0x20000440

080019f8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC1_2_IRQHandler>

080019fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f93d 	bl	8001c84 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f000 f80e 	bl	8001a2c <HAL_InitTick>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	71fb      	strb	r3, [r7, #7]
 8001a1a:	e001      	b.n	8001a20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a1c:	f7ff fdc8 	bl	80015b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a20:	79fb      	ldrb	r3, [r7, #7]

}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b084      	sub	sp, #16
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001a34:	2300      	movs	r3, #0
 8001a36:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001a38:	4b16      	ldr	r3, [pc, #88]	@ (8001a94 <HAL_InitTick+0x68>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d022      	beq.n	8001a86 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8001a40:	4b15      	ldr	r3, [pc, #84]	@ (8001a98 <HAL_InitTick+0x6c>)
 8001a42:	681a      	ldr	r2, [r3, #0]
 8001a44:	4b13      	ldr	r3, [pc, #76]	@ (8001a94 <HAL_InitTick+0x68>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8001a4c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f93a 	bl	8001cce <HAL_SYSTICK_Config>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d10f      	bne.n	8001a80 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2b0f      	cmp	r3, #15
 8001a64:	d809      	bhi.n	8001a7a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a66:	2200      	movs	r2, #0
 8001a68:	6879      	ldr	r1, [r7, #4]
 8001a6a:	f04f 30ff 	mov.w	r0, #4294967295
 8001a6e:	f000 f914 	bl	8001c9a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001a72:	4a0a      	ldr	r2, [pc, #40]	@ (8001a9c <HAL_InitTick+0x70>)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6013      	str	r3, [r2, #0]
 8001a78:	e007      	b.n	8001a8a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001a7a:	2301      	movs	r3, #1
 8001a7c:	73fb      	strb	r3, [r7, #15]
 8001a7e:	e004      	b.n	8001a8a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
 8001a84:	e001      	b.n	8001a8a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001a86:	2301      	movs	r3, #1
 8001a88:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001a8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3710      	adds	r7, #16
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}
 8001a94:	20000008 	.word	0x20000008
 8001a98:	20000000 	.word	0x20000000
 8001a9c:	20000004 	.word	0x20000004

08001aa0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001aa4:	4b05      	ldr	r3, [pc, #20]	@ (8001abc <HAL_IncTick+0x1c>)
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <HAL_IncTick+0x20>)
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4413      	add	r3, r2
 8001aae:	4a03      	ldr	r2, [pc, #12]	@ (8001abc <HAL_IncTick+0x1c>)
 8001ab0:	6013      	str	r3, [r2, #0]
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr
 8001abc:	200002f0 	.word	0x200002f0
 8001ac0:	20000008 	.word	0x20000008

08001ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ac4:	b480      	push	{r7}
 8001ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8001ac8:	4b03      	ldr	r3, [pc, #12]	@ (8001ad8 <HAL_GetTick+0x14>)
 8001aca:	681b      	ldr	r3, [r3, #0]
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad4:	4770      	bx	lr
 8001ad6:	bf00      	nop
 8001ad8:	200002f0 	.word	0x200002f0

08001adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ae4:	f7ff ffee 	bl	8001ac4 <HAL_GetTick>
 8001ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001af4:	d004      	beq.n	8001b00 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001af6:	4b09      	ldr	r3, [pc, #36]	@ (8001b1c <HAL_Delay+0x40>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	68fa      	ldr	r2, [r7, #12]
 8001afc:	4413      	add	r3, r2
 8001afe:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001b00:	bf00      	nop
 8001b02:	f7ff ffdf 	bl	8001ac4 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	429a      	cmp	r2, r3
 8001b10:	d8f7      	bhi.n	8001b02 <HAL_Delay+0x26>
  {
  }
}
 8001b12:	bf00      	nop
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000008 	.word	0x20000008

08001b20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b085      	sub	sp, #20
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	f003 0307 	and.w	r3, r3, #7
 8001b2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b30:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b32:	68db      	ldr	r3, [r3, #12]
 8001b34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b44:	68bb      	ldr	r3, [r7, #8]
 8001b46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001b4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001b50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001b52:	4a04      	ldr	r2, [pc, #16]	@ (8001b64 <__NVIC_SetPriorityGrouping+0x44>)
 8001b54:	68bb      	ldr	r3, [r7, #8]
 8001b56:	60d3      	str	r3, [r2, #12]
}
 8001b58:	bf00      	nop
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	e000ed00 	.word	0xe000ed00

08001b68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b6c:	4b04      	ldr	r3, [pc, #16]	@ (8001b80 <__NVIC_GetPriorityGrouping+0x18>)
 8001b6e:	68db      	ldr	r3, [r3, #12]
 8001b70:	0a1b      	lsrs	r3, r3, #8
 8001b72:	f003 0307 	and.w	r3, r3, #7
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	6039      	str	r1, [r7, #0]
 8001b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	db0a      	blt.n	8001bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	b2da      	uxtb	r2, r3
 8001b9c:	490c      	ldr	r1, [pc, #48]	@ (8001bd0 <__NVIC_SetPriority+0x4c>)
 8001b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba2:	0112      	lsls	r2, r2, #4
 8001ba4:	b2d2      	uxtb	r2, r2
 8001ba6:	440b      	add	r3, r1
 8001ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001bac:	e00a      	b.n	8001bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	b2da      	uxtb	r2, r3
 8001bb2:	4908      	ldr	r1, [pc, #32]	@ (8001bd4 <__NVIC_SetPriority+0x50>)
 8001bb4:	79fb      	ldrb	r3, [r7, #7]
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	3b04      	subs	r3, #4
 8001bbc:	0112      	lsls	r2, r2, #4
 8001bbe:	b2d2      	uxtb	r2, r2
 8001bc0:	440b      	add	r3, r1
 8001bc2:	761a      	strb	r2, [r3, #24]
}
 8001bc4:	bf00      	nop
 8001bc6:	370c      	adds	r7, #12
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bce:	4770      	bx	lr
 8001bd0:	e000e100 	.word	0xe000e100
 8001bd4:	e000ed00 	.word	0xe000ed00

08001bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b089      	sub	sp, #36	@ 0x24
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	60f8      	str	r0, [r7, #12]
 8001be0:	60b9      	str	r1, [r7, #8]
 8001be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f003 0307 	and.w	r3, r3, #7
 8001bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f1c3 0307 	rsb	r3, r3, #7
 8001bf2:	2b04      	cmp	r3, #4
 8001bf4:	bf28      	it	cs
 8001bf6:	2304      	movcs	r3, #4
 8001bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	2b06      	cmp	r3, #6
 8001c00:	d902      	bls.n	8001c08 <NVIC_EncodePriority+0x30>
 8001c02:	69fb      	ldr	r3, [r7, #28]
 8001c04:	3b03      	subs	r3, #3
 8001c06:	e000      	b.n	8001c0a <NVIC_EncodePriority+0x32>
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001c10:	69bb      	ldr	r3, [r7, #24]
 8001c12:	fa02 f303 	lsl.w	r3, r2, r3
 8001c16:	43da      	mvns	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	401a      	ands	r2, r3
 8001c1c:	697b      	ldr	r3, [r7, #20]
 8001c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c20:	f04f 31ff 	mov.w	r1, #4294967295
 8001c24:	697b      	ldr	r3, [r7, #20]
 8001c26:	fa01 f303 	lsl.w	r3, r1, r3
 8001c2a:	43d9      	mvns	r1, r3
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c30:	4313      	orrs	r3, r2
         );
}
 8001c32:	4618      	mov	r0, r3
 8001c34:	3724      	adds	r7, #36	@ 0x24
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
	...

08001c40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001c50:	d301      	bcc.n	8001c56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c52:	2301      	movs	r3, #1
 8001c54:	e00f      	b.n	8001c76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c56:	4a0a      	ldr	r2, [pc, #40]	@ (8001c80 <SysTick_Config+0x40>)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3b01      	subs	r3, #1
 8001c5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c5e:	210f      	movs	r1, #15
 8001c60:	f04f 30ff 	mov.w	r0, #4294967295
 8001c64:	f7ff ff8e 	bl	8001b84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c68:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <SysTick_Config+0x40>)
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c6e:	4b04      	ldr	r3, [pc, #16]	@ (8001c80 <SysTick_Config+0x40>)
 8001c70:	2207      	movs	r2, #7
 8001c72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
 8001c7e:	bf00      	nop
 8001c80:	e000e010 	.word	0xe000e010

08001c84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b082      	sub	sp, #8
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff ff47 	bl	8001b20 <__NVIC_SetPriorityGrouping>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b086      	sub	sp, #24
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
 8001ca6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001ca8:	f7ff ff5e 	bl	8001b68 <__NVIC_GetPriorityGrouping>
 8001cac:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001cae:	687a      	ldr	r2, [r7, #4]
 8001cb0:	68b9      	ldr	r1, [r7, #8]
 8001cb2:	6978      	ldr	r0, [r7, #20]
 8001cb4:	f7ff ff90 	bl	8001bd8 <NVIC_EncodePriority>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cbe:	4611      	mov	r1, r2
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff5f 	bl	8001b84 <__NVIC_SetPriority>
}
 8001cc6:	bf00      	nop
 8001cc8:	3718      	adds	r7, #24
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	bd80      	pop	{r7, pc}

08001cce <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cce:	b580      	push	{r7, lr}
 8001cd0:	b082      	sub	sp, #8
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cd6:	6878      	ldr	r0, [r7, #4]
 8001cd8:	f7ff ffb2 	bl	8001c40 <SysTick_Config>
 8001cdc:	4603      	mov	r3, r0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3708      	adds	r7, #8
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
	...

08001ce8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b087      	sub	sp, #28
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001cf6:	e15a      	b.n	8001fae <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	2101      	movs	r1, #1
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	4013      	ands	r3, r2
 8001d06:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001d08:	68fb      	ldr	r3, [r7, #12]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 814c 	beq.w	8001fa8 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f003 0303 	and.w	r3, r3, #3
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	d005      	beq.n	8001d28 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d130      	bne.n	8001d8a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	005b      	lsls	r3, r3, #1
 8001d32:	2203      	movs	r2, #3
 8001d34:	fa02 f303 	lsl.w	r3, r2, r3
 8001d38:	43db      	mvns	r3, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d40:	683b      	ldr	r3, [r7, #0]
 8001d42:	68da      	ldr	r2, [r3, #12]
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	693a      	ldr	r2, [r7, #16]
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	693a      	ldr	r2, [r7, #16]
 8001d56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001d5e:	2201      	movs	r2, #1
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	693a      	ldr	r2, [r7, #16]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	091b      	lsrs	r3, r3, #4
 8001d74:	f003 0201 	and.w	r2, r3, #1
 8001d78:	697b      	ldr	r3, [r7, #20]
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	693a      	ldr	r2, [r7, #16]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f003 0303 	and.w	r3, r3, #3
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	d017      	beq.n	8001dc6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005b      	lsls	r3, r3, #1
 8001da0:	2203      	movs	r2, #3
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43db      	mvns	r3, r3
 8001da8:	693a      	ldr	r2, [r7, #16]
 8001daa:	4013      	ands	r3, r2
 8001dac:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689a      	ldr	r2, [r3, #8]
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	693a      	ldr	r2, [r7, #16]
 8001dbc:	4313      	orrs	r3, r2
 8001dbe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 0303 	and.w	r3, r3, #3
 8001dce:	2b02      	cmp	r3, #2
 8001dd0:	d123      	bne.n	8001e1a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001dd2:	697b      	ldr	r3, [r7, #20]
 8001dd4:	08da      	lsrs	r2, r3, #3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	3208      	adds	r2, #8
 8001dda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dde:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	009b      	lsls	r3, r3, #2
 8001de8:	220f      	movs	r2, #15
 8001dea:	fa02 f303 	lsl.w	r3, r2, r3
 8001dee:	43db      	mvns	r3, r3
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	4013      	ands	r3, r2
 8001df4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	691a      	ldr	r2, [r3, #16]
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	fa02 f303 	lsl.w	r3, r2, r3
 8001e06:	693a      	ldr	r2, [r7, #16]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	08da      	lsrs	r2, r3, #3
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	3208      	adds	r2, #8
 8001e14:	6939      	ldr	r1, [r7, #16]
 8001e16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001e20:	697b      	ldr	r3, [r7, #20]
 8001e22:	005b      	lsls	r3, r3, #1
 8001e24:	2203      	movs	r2, #3
 8001e26:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2a:	43db      	mvns	r3, r3
 8001e2c:	693a      	ldr	r2, [r7, #16]
 8001e2e:	4013      	ands	r3, r2
 8001e30:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f003 0203 	and.w	r2, r3, #3
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	005b      	lsls	r3, r3, #1
 8001e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e42:	693a      	ldr	r2, [r7, #16]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	693a      	ldr	r2, [r7, #16]
 8001e4c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	685b      	ldr	r3, [r3, #4]
 8001e52:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	f000 80a6 	beq.w	8001fa8 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5c:	4b5b      	ldr	r3, [pc, #364]	@ (8001fcc <HAL_GPIO_Init+0x2e4>)
 8001e5e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e60:	4a5a      	ldr	r2, [pc, #360]	@ (8001fcc <HAL_GPIO_Init+0x2e4>)
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	6613      	str	r3, [r2, #96]	@ 0x60
 8001e68:	4b58      	ldr	r3, [pc, #352]	@ (8001fcc <HAL_GPIO_Init+0x2e4>)
 8001e6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e6c:	f003 0301 	and.w	r3, r3, #1
 8001e70:	60bb      	str	r3, [r7, #8]
 8001e72:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e74:	4a56      	ldr	r2, [pc, #344]	@ (8001fd0 <HAL_GPIO_Init+0x2e8>)
 8001e76:	697b      	ldr	r3, [r7, #20]
 8001e78:	089b      	lsrs	r3, r3, #2
 8001e7a:	3302      	adds	r3, #2
 8001e7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e80:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f003 0303 	and.w	r3, r3, #3
 8001e88:	009b      	lsls	r3, r3, #2
 8001e8a:	220f      	movs	r2, #15
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	43db      	mvns	r3, r3
 8001e92:	693a      	ldr	r2, [r7, #16]
 8001e94:	4013      	ands	r3, r2
 8001e96:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e9e:	d01f      	beq.n	8001ee0 <HAL_GPIO_Init+0x1f8>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	4a4c      	ldr	r2, [pc, #304]	@ (8001fd4 <HAL_GPIO_Init+0x2ec>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d019      	beq.n	8001edc <HAL_GPIO_Init+0x1f4>
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	4a4b      	ldr	r2, [pc, #300]	@ (8001fd8 <HAL_GPIO_Init+0x2f0>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d013      	beq.n	8001ed8 <HAL_GPIO_Init+0x1f0>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	4a4a      	ldr	r2, [pc, #296]	@ (8001fdc <HAL_GPIO_Init+0x2f4>)
 8001eb4:	4293      	cmp	r3, r2
 8001eb6:	d00d      	beq.n	8001ed4 <HAL_GPIO_Init+0x1ec>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	4a49      	ldr	r2, [pc, #292]	@ (8001fe0 <HAL_GPIO_Init+0x2f8>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d007      	beq.n	8001ed0 <HAL_GPIO_Init+0x1e8>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	4a48      	ldr	r2, [pc, #288]	@ (8001fe4 <HAL_GPIO_Init+0x2fc>)
 8001ec4:	4293      	cmp	r3, r2
 8001ec6:	d101      	bne.n	8001ecc <HAL_GPIO_Init+0x1e4>
 8001ec8:	2305      	movs	r3, #5
 8001eca:	e00a      	b.n	8001ee2 <HAL_GPIO_Init+0x1fa>
 8001ecc:	2306      	movs	r3, #6
 8001ece:	e008      	b.n	8001ee2 <HAL_GPIO_Init+0x1fa>
 8001ed0:	2304      	movs	r3, #4
 8001ed2:	e006      	b.n	8001ee2 <HAL_GPIO_Init+0x1fa>
 8001ed4:	2303      	movs	r3, #3
 8001ed6:	e004      	b.n	8001ee2 <HAL_GPIO_Init+0x1fa>
 8001ed8:	2302      	movs	r3, #2
 8001eda:	e002      	b.n	8001ee2 <HAL_GPIO_Init+0x1fa>
 8001edc:	2301      	movs	r3, #1
 8001ede:	e000      	b.n	8001ee2 <HAL_GPIO_Init+0x1fa>
 8001ee0:	2300      	movs	r3, #0
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	f002 0203 	and.w	r2, r2, #3
 8001ee8:	0092      	lsls	r2, r2, #2
 8001eea:	4093      	lsls	r3, r2
 8001eec:	693a      	ldr	r2, [r7, #16]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ef2:	4937      	ldr	r1, [pc, #220]	@ (8001fd0 <HAL_GPIO_Init+0x2e8>)
 8001ef4:	697b      	ldr	r3, [r7, #20]
 8001ef6:	089b      	lsrs	r3, r3, #2
 8001ef8:	3302      	adds	r3, #2
 8001efa:	693a      	ldr	r2, [r7, #16]
 8001efc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001f00:	4b39      	ldr	r3, [pc, #228]	@ (8001fe8 <HAL_GPIO_Init+0x300>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	693a      	ldr	r2, [r7, #16]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001f1c:	693a      	ldr	r2, [r7, #16]
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001f24:	4a30      	ldr	r2, [pc, #192]	@ (8001fe8 <HAL_GPIO_Init+0x300>)
 8001f26:	693b      	ldr	r3, [r7, #16]
 8001f28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001f2a:	4b2f      	ldr	r3, [pc, #188]	@ (8001fe8 <HAL_GPIO_Init+0x300>)
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	43db      	mvns	r3, r3
 8001f34:	693a      	ldr	r2, [r7, #16]
 8001f36:	4013      	ands	r3, r2
 8001f38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d003      	beq.n	8001f4e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001f46:	693a      	ldr	r2, [r7, #16]
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001f4e:	4a26      	ldr	r2, [pc, #152]	@ (8001fe8 <HAL_GPIO_Init+0x300>)
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001f54:	4b24      	ldr	r3, [pc, #144]	@ (8001fe8 <HAL_GPIO_Init+0x300>)
 8001f56:	685b      	ldr	r3, [r3, #4]
 8001f58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	43db      	mvns	r3, r3
 8001f5e:	693a      	ldr	r2, [r7, #16]
 8001f60:	4013      	ands	r3, r2
 8001f62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	685b      	ldr	r3, [r3, #4]
 8001f68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d003      	beq.n	8001f78 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001f70:	693a      	ldr	r2, [r7, #16]
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	4313      	orrs	r3, r2
 8001f76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001f78:	4a1b      	ldr	r2, [pc, #108]	@ (8001fe8 <HAL_GPIO_Init+0x300>)
 8001f7a:	693b      	ldr	r3, [r7, #16]
 8001f7c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001f7e:	4b1a      	ldr	r3, [pc, #104]	@ (8001fe8 <HAL_GPIO_Init+0x300>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	43db      	mvns	r3, r3
 8001f88:	693a      	ldr	r2, [r7, #16]
 8001f8a:	4013      	ands	r3, r2
 8001f8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001fa2:	4a11      	ldr	r2, [pc, #68]	@ (8001fe8 <HAL_GPIO_Init+0x300>)
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	3301      	adds	r3, #1
 8001fac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	f47f ae9d 	bne.w	8001cf8 <HAL_GPIO_Init+0x10>
  }
}
 8001fbe:	bf00      	nop
 8001fc0:	bf00      	nop
 8001fc2:	371c      	adds	r7, #28
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40021000 	.word	0x40021000
 8001fd0:	40010000 	.word	0x40010000
 8001fd4:	48000400 	.word	0x48000400
 8001fd8:	48000800 	.word	0x48000800
 8001fdc:	48000c00 	.word	0x48000c00
 8001fe0:	48001000 	.word	0x48001000
 8001fe4:	48001400 	.word	0x48001400
 8001fe8:	40010400 	.word	0x40010400

08001fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	460b      	mov	r3, r1
 8001ff6:	807b      	strh	r3, [r7, #2]
 8001ff8:	4613      	mov	r3, r2
 8001ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ffc:	787b      	ldrb	r3, [r7, #1]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002002:	887a      	ldrh	r2, [r7, #2]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002008:	e002      	b.n	8002010 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800200a:	887a      	ldrh	r2, [r7, #2]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e08d      	b.n	800214a <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002034:	b2db      	uxtb	r3, r3
 8002036:	2b00      	cmp	r3, #0
 8002038:	d106      	bne.n	8002048 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002042:	6878      	ldr	r0, [r7, #4]
 8002044:	f7ff fad8 	bl	80015f8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2224      	movs	r2, #36	@ 0x24
 800204c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f022 0201 	bic.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	685a      	ldr	r2, [r3, #4]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800206c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800207c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d107      	bne.n	8002096 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	689a      	ldr	r2, [r3, #8]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002092:	609a      	str	r2, [r3, #8]
 8002094:	e006      	b.n	80020a4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	689a      	ldr	r2, [r3, #8]
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80020a2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	68db      	ldr	r3, [r3, #12]
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d108      	bne.n	80020be <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80020ba:	605a      	str	r2, [r3, #4]
 80020bc:	e007      	b.n	80020ce <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	685a      	ldr	r2, [r3, #4]
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80020cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	687a      	ldr	r2, [r7, #4]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80020dc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020e0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80020f0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	691a      	ldr	r2, [r3, #16]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695b      	ldr	r3, [r3, #20]
 80020fa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	699b      	ldr	r3, [r3, #24]
 8002102:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	430a      	orrs	r2, r1
 800210a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	69d9      	ldr	r1, [r3, #28]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6a1a      	ldr	r2, [r3, #32]
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	430a      	orrs	r2, r1
 800211a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	681a      	ldr	r2, [r3, #0]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0201 	orr.w	r2, r2, #1
 800212a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2220      	movs	r2, #32
 8002136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3708      	adds	r7, #8
 800214e:	46bd      	mov	sp, r7
 8002150:	bd80      	pop	{r7, pc}
	...

08002154 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b088      	sub	sp, #32
 8002158:	af02      	add	r7, sp, #8
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	4608      	mov	r0, r1
 800215e:	4611      	mov	r1, r2
 8002160:	461a      	mov	r2, r3
 8002162:	4603      	mov	r3, r0
 8002164:	817b      	strh	r3, [r7, #10]
 8002166:	460b      	mov	r3, r1
 8002168:	813b      	strh	r3, [r7, #8]
 800216a:	4613      	mov	r3, r2
 800216c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b20      	cmp	r3, #32
 8002178:	f040 80f9 	bne.w	800236e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800217c:	6a3b      	ldr	r3, [r7, #32]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d002      	beq.n	8002188 <HAL_I2C_Mem_Write+0x34>
 8002182:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8002184:	2b00      	cmp	r3, #0
 8002186:	d105      	bne.n	8002194 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800218e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8002190:	2301      	movs	r3, #1
 8002192:	e0ed      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800219a:	2b01      	cmp	r3, #1
 800219c:	d101      	bne.n	80021a2 <HAL_I2C_Mem_Write+0x4e>
 800219e:	2302      	movs	r3, #2
 80021a0:	e0e6      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	2201      	movs	r2, #1
 80021a6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80021aa:	f7ff fc8b 	bl	8001ac4 <HAL_GetTick>
 80021ae:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	9300      	str	r3, [sp, #0]
 80021b4:	2319      	movs	r3, #25
 80021b6:	2201      	movs	r2, #1
 80021b8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f000 fac3 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 80021c2:	4603      	mov	r3, r0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d001      	beq.n	80021cc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0d1      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2221      	movs	r2, #33	@ 0x21
 80021d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2240      	movs	r2, #64	@ 0x40
 80021d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	2200      	movs	r2, #0
 80021e0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	6a3a      	ldr	r2, [r7, #32]
 80021e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80021ec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80021f4:	88f8      	ldrh	r0, [r7, #6]
 80021f6:	893a      	ldrh	r2, [r7, #8]
 80021f8:	8979      	ldrh	r1, [r7, #10]
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	9301      	str	r3, [sp, #4]
 80021fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002200:	9300      	str	r3, [sp, #0]
 8002202:	4603      	mov	r3, r0
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f000 f9d3 	bl	80025b0 <I2C_RequestMemoryWrite>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d005      	beq.n	800221c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002218:	2301      	movs	r3, #1
 800221a:	e0a9      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002220:	b29b      	uxth	r3, r3
 8002222:	2bff      	cmp	r3, #255	@ 0xff
 8002224:	d90e      	bls.n	8002244 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	22ff      	movs	r2, #255	@ 0xff
 800222a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002230:	b2da      	uxtb	r2, r3
 8002232:	8979      	ldrh	r1, [r7, #10]
 8002234:	2300      	movs	r3, #0
 8002236:	9300      	str	r3, [sp, #0]
 8002238:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f000 fc47 	bl	8002ad0 <I2C_TransferConfig>
 8002242:	e00f      	b.n	8002264 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002248:	b29a      	uxth	r2, r3
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002252:	b2da      	uxtb	r2, r3
 8002254:	8979      	ldrh	r1, [r7, #10]
 8002256:	2300      	movs	r3, #0
 8002258:	9300      	str	r3, [sp, #0]
 800225a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800225e:	68f8      	ldr	r0, [r7, #12]
 8002260:	f000 fc36 	bl	8002ad0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002264:	697a      	ldr	r2, [r7, #20]
 8002266:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002268:	68f8      	ldr	r0, [r7, #12]
 800226a:	f000 fac6 	bl	80027fa <I2C_WaitOnTXISFlagUntilTimeout>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e07b      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	781a      	ldrb	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002292:	b29b      	uxth	r3, r3
 8002294:	3b01      	subs	r3, #1
 8002296:	b29a      	uxth	r2, r3
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a0:	3b01      	subs	r3, #1
 80022a2:	b29a      	uxth	r2, r3
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022ac:	b29b      	uxth	r3, r3
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d034      	beq.n	800231c <HAL_I2C_Mem_Write+0x1c8>
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d130      	bne.n	800231c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022c0:	2200      	movs	r2, #0
 80022c2:	2180      	movs	r1, #128	@ 0x80
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 fa3f 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 80022ca:	4603      	mov	r3, r0
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d001      	beq.n	80022d4 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e04d      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80022d8:	b29b      	uxth	r3, r3
 80022da:	2bff      	cmp	r3, #255	@ 0xff
 80022dc:	d90e      	bls.n	80022fc <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	22ff      	movs	r2, #255	@ 0xff
 80022e2:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022e8:	b2da      	uxtb	r2, r3
 80022ea:	8979      	ldrh	r1, [r7, #10]
 80022ec:	2300      	movs	r3, #0
 80022ee:	9300      	str	r3, [sp, #0]
 80022f0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80022f4:	68f8      	ldr	r0, [r7, #12]
 80022f6:	f000 fbeb 	bl	8002ad0 <I2C_TransferConfig>
 80022fa:	e00f      	b.n	800231c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002300:	b29a      	uxth	r2, r3
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230a:	b2da      	uxtb	r2, r3
 800230c:	8979      	ldrh	r1, [r7, #10]
 800230e:	2300      	movs	r3, #0
 8002310:	9300      	str	r3, [sp, #0]
 8002312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002316:	68f8      	ldr	r0, [r7, #12]
 8002318:	f000 fbda 	bl	8002ad0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002320:	b29b      	uxth	r3, r3
 8002322:	2b00      	cmp	r3, #0
 8002324:	d19e      	bne.n	8002264 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800232a:	68f8      	ldr	r0, [r7, #12]
 800232c:	f000 faac 	bl	8002888 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d001      	beq.n	800233a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e01a      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2220      	movs	r2, #32
 8002340:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6859      	ldr	r1, [r3, #4]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	4b0a      	ldr	r3, [pc, #40]	@ (8002378 <HAL_I2C_Mem_Write+0x224>)
 800234e:	400b      	ands	r3, r1
 8002350:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	2220      	movs	r2, #32
 8002356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	2200      	movs	r2, #0
 800235e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	e000      	b.n	8002370 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800236e:	2302      	movs	r3, #2
  }
}
 8002370:	4618      	mov	r0, r3
 8002372:	3718      	adds	r7, #24
 8002374:	46bd      	mov	sp, r7
 8002376:	bd80      	pop	{r7, pc}
 8002378:	fe00e800 	.word	0xfe00e800

0800237c <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	4608      	mov	r0, r1
 8002386:	4611      	mov	r1, r2
 8002388:	461a      	mov	r2, r3
 800238a:	4603      	mov	r3, r0
 800238c:	817b      	strh	r3, [r7, #10]
 800238e:	460b      	mov	r3, r1
 8002390:	813b      	strh	r3, [r7, #8]
 8002392:	4613      	mov	r3, r2
 8002394:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800239c:	b2db      	uxtb	r3, r3
 800239e:	2b20      	cmp	r3, #32
 80023a0:	f040 80fd 	bne.w	800259e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d002      	beq.n	80023b0 <HAL_I2C_Mem_Read+0x34>
 80023aa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d105      	bne.n	80023bc <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80023b6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 80023b8:	2301      	movs	r3, #1
 80023ba:	e0f1      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d101      	bne.n	80023ca <HAL_I2C_Mem_Read+0x4e>
 80023c6:	2302      	movs	r3, #2
 80023c8:	e0ea      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2201      	movs	r2, #1
 80023ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80023d2:	f7ff fb77 	bl	8001ac4 <HAL_GetTick>
 80023d6:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	9300      	str	r3, [sp, #0]
 80023dc:	2319      	movs	r3, #25
 80023de:	2201      	movs	r2, #1
 80023e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 f9af 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d001      	beq.n	80023f4 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 80023f0:	2301      	movs	r3, #1
 80023f2:	e0d5      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2222      	movs	r2, #34	@ 0x22
 80023f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	2240      	movs	r2, #64	@ 0x40
 8002400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2200      	movs	r2, #0
 8002408:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6a3a      	ldr	r2, [r7, #32]
 800240e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002414:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	2200      	movs	r2, #0
 800241a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800241c:	88f8      	ldrh	r0, [r7, #6]
 800241e:	893a      	ldrh	r2, [r7, #8]
 8002420:	8979      	ldrh	r1, [r7, #10]
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002428:	9300      	str	r3, [sp, #0]
 800242a:	4603      	mov	r3, r0
 800242c:	68f8      	ldr	r0, [r7, #12]
 800242e:	f000 f913 	bl	8002658 <I2C_RequestMemoryRead>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d005      	beq.n	8002444 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	2200      	movs	r2, #0
 800243c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8002440:	2301      	movs	r3, #1
 8002442:	e0ad      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002448:	b29b      	uxth	r3, r3
 800244a:	2bff      	cmp	r3, #255	@ 0xff
 800244c:	d90e      	bls.n	800246c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	22ff      	movs	r2, #255	@ 0xff
 8002452:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002458:	b2da      	uxtb	r2, r3
 800245a:	8979      	ldrh	r1, [r7, #10]
 800245c:	4b52      	ldr	r3, [pc, #328]	@ (80025a8 <HAL_I2C_Mem_Read+0x22c>)
 800245e:	9300      	str	r3, [sp, #0]
 8002460:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f000 fb33 	bl	8002ad0 <I2C_TransferConfig>
 800246a:	e00f      	b.n	800248c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800247a:	b2da      	uxtb	r2, r3
 800247c:	8979      	ldrh	r1, [r7, #10]
 800247e:	4b4a      	ldr	r3, [pc, #296]	@ (80025a8 <HAL_I2C_Mem_Read+0x22c>)
 8002480:	9300      	str	r3, [sp, #0]
 8002482:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 fb22 	bl	8002ad0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	9300      	str	r3, [sp, #0]
 8002490:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002492:	2200      	movs	r2, #0
 8002494:	2104      	movs	r1, #4
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f000 f956 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 800249c:	4603      	mov	r3, r0
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d001      	beq.n	80024a6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80024a2:	2301      	movs	r3, #1
 80024a4:	e07c      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b0:	b2d2      	uxtb	r2, r2
 80024b2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024c2:	3b01      	subs	r3, #1
 80024c4:	b29a      	uxth	r2, r3
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	3b01      	subs	r3, #1
 80024d2:	b29a      	uxth	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80024dc:	b29b      	uxth	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d034      	beq.n	800254c <HAL_I2C_Mem_Read+0x1d0>
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d130      	bne.n	800254c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80024ea:	697b      	ldr	r3, [r7, #20]
 80024ec:	9300      	str	r3, [sp, #0]
 80024ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024f0:	2200      	movs	r2, #0
 80024f2:	2180      	movs	r1, #128	@ 0x80
 80024f4:	68f8      	ldr	r0, [r7, #12]
 80024f6:	f000 f927 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d001      	beq.n	8002504 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e04d      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002508:	b29b      	uxth	r3, r3
 800250a:	2bff      	cmp	r3, #255	@ 0xff
 800250c:	d90e      	bls.n	800252c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	22ff      	movs	r2, #255	@ 0xff
 8002512:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002518:	b2da      	uxtb	r2, r3
 800251a:	8979      	ldrh	r1, [r7, #10]
 800251c:	2300      	movs	r3, #0
 800251e:	9300      	str	r3, [sp, #0]
 8002520:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002524:	68f8      	ldr	r0, [r7, #12]
 8002526:	f000 fad3 	bl	8002ad0 <I2C_TransferConfig>
 800252a:	e00f      	b.n	800254c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002530:	b29a      	uxth	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253a:	b2da      	uxtb	r2, r3
 800253c:	8979      	ldrh	r1, [r7, #10]
 800253e:	2300      	movs	r3, #0
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	f000 fac2 	bl	8002ad0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002550:	b29b      	uxth	r3, r3
 8002552:	2b00      	cmp	r3, #0
 8002554:	d19a      	bne.n	800248c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800255a:	68f8      	ldr	r0, [r7, #12]
 800255c:	f000 f994 	bl	8002888 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002560:	4603      	mov	r3, r0
 8002562:	2b00      	cmp	r3, #0
 8002564:	d001      	beq.n	800256a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e01a      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2220      	movs	r2, #32
 8002570:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	6859      	ldr	r1, [r3, #4]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	681a      	ldr	r2, [r3, #0]
 800257c:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <HAL_I2C_Mem_Read+0x230>)
 800257e:	400b      	ands	r3, r1
 8002580:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	2220      	movs	r2, #32
 8002586:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2200      	movs	r2, #0
 800258e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	2200      	movs	r2, #0
 8002596:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800259a:	2300      	movs	r3, #0
 800259c:	e000      	b.n	80025a0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800259e:	2302      	movs	r3, #2
  }
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	3718      	adds	r7, #24
 80025a4:	46bd      	mov	sp, r7
 80025a6:	bd80      	pop	{r7, pc}
 80025a8:	80002400 	.word	0x80002400
 80025ac:	fe00e800 	.word	0xfe00e800

080025b0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	4608      	mov	r0, r1
 80025ba:	4611      	mov	r1, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	4603      	mov	r3, r0
 80025c0:	817b      	strh	r3, [r7, #10]
 80025c2:	460b      	mov	r3, r1
 80025c4:	813b      	strh	r3, [r7, #8]
 80025c6:	4613      	mov	r3, r2
 80025c8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80025ca:	88fb      	ldrh	r3, [r7, #6]
 80025cc:	b2da      	uxtb	r2, r3
 80025ce:	8979      	ldrh	r1, [r7, #10]
 80025d0:	4b20      	ldr	r3, [pc, #128]	@ (8002654 <I2C_RequestMemoryWrite+0xa4>)
 80025d2:	9300      	str	r3, [sp, #0]
 80025d4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f000 fa79 	bl	8002ad0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80025de:	69fa      	ldr	r2, [r7, #28]
 80025e0:	69b9      	ldr	r1, [r7, #24]
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f000 f909 	bl	80027fa <I2C_WaitOnTXISFlagUntilTimeout>
 80025e8:	4603      	mov	r3, r0
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d001      	beq.n	80025f2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80025ee:	2301      	movs	r3, #1
 80025f0:	e02c      	b.n	800264c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80025f2:	88fb      	ldrh	r3, [r7, #6]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d105      	bne.n	8002604 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80025f8:	893b      	ldrh	r3, [r7, #8]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	629a      	str	r2, [r3, #40]	@ 0x28
 8002602:	e015      	b.n	8002630 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002604:	893b      	ldrh	r3, [r7, #8]
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	b29b      	uxth	r3, r3
 800260a:	b2da      	uxtb	r2, r3
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	69b9      	ldr	r1, [r7, #24]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 f8ef 	bl	80027fa <I2C_WaitOnTXISFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e012      	b.n	800264c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002626:	893b      	ldrh	r3, [r7, #8]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8002630:	69fb      	ldr	r3, [r7, #28]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	2200      	movs	r2, #0
 8002638:	2180      	movs	r1, #128	@ 0x80
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f000 f884 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 8002640:	4603      	mov	r3, r0
 8002642:	2b00      	cmp	r3, #0
 8002644:	d001      	beq.n	800264a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800264a:	2300      	movs	r3, #0
}
 800264c:	4618      	mov	r0, r3
 800264e:	3710      	adds	r7, #16
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	80002000 	.word	0x80002000

08002658 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af02      	add	r7, sp, #8
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	4608      	mov	r0, r1
 8002662:	4611      	mov	r1, r2
 8002664:	461a      	mov	r2, r3
 8002666:	4603      	mov	r3, r0
 8002668:	817b      	strh	r3, [r7, #10]
 800266a:	460b      	mov	r3, r1
 800266c:	813b      	strh	r3, [r7, #8]
 800266e:	4613      	mov	r3, r2
 8002670:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002672:	88fb      	ldrh	r3, [r7, #6]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	8979      	ldrh	r1, [r7, #10]
 8002678:	4b20      	ldr	r3, [pc, #128]	@ (80026fc <I2C_RequestMemoryRead+0xa4>)
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	2300      	movs	r3, #0
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f000 fa26 	bl	8002ad0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002684:	69fa      	ldr	r2, [r7, #28]
 8002686:	69b9      	ldr	r1, [r7, #24]
 8002688:	68f8      	ldr	r0, [r7, #12]
 800268a:	f000 f8b6 	bl	80027fa <I2C_WaitOnTXISFlagUntilTimeout>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d001      	beq.n	8002698 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8002694:	2301      	movs	r3, #1
 8002696:	e02c      	b.n	80026f2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002698:	88fb      	ldrh	r3, [r7, #6]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d105      	bne.n	80026aa <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800269e:	893b      	ldrh	r3, [r7, #8]
 80026a0:	b2da      	uxtb	r2, r3
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	629a      	str	r2, [r3, #40]	@ 0x28
 80026a8:	e015      	b.n	80026d6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80026aa:	893b      	ldrh	r3, [r7, #8]
 80026ac:	0a1b      	lsrs	r3, r3, #8
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	69b9      	ldr	r1, [r7, #24]
 80026bc:	68f8      	ldr	r0, [r7, #12]
 80026be:	f000 f89c 	bl	80027fa <I2C_WaitOnTXISFlagUntilTimeout>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e012      	b.n	80026f2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80026cc:	893b      	ldrh	r3, [r7, #8]
 80026ce:	b2da      	uxtb	r2, r3
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	9300      	str	r3, [sp, #0]
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	2200      	movs	r2, #0
 80026de:	2140      	movs	r1, #64	@ 0x40
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f000 f831 	bl	8002748 <I2C_WaitOnFlagUntilTimeout>
 80026e6:	4603      	mov	r3, r0
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d001      	beq.n	80026f0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e000      	b.n	80026f2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80026f0:	2300      	movs	r3, #0
}
 80026f2:	4618      	mov	r0, r3
 80026f4:	3710      	adds	r7, #16
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	80002000 	.word	0x80002000

08002700 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	699b      	ldr	r3, [r3, #24]
 800270e:	f003 0302 	and.w	r3, r3, #2
 8002712:	2b02      	cmp	r3, #2
 8002714:	d103      	bne.n	800271e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2200      	movs	r2, #0
 800271c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	f003 0301 	and.w	r3, r3, #1
 8002728:	2b01      	cmp	r3, #1
 800272a:	d007      	beq.n	800273c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699a      	ldr	r2, [r3, #24]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f042 0201 	orr.w	r2, r2, #1
 800273a:	619a      	str	r2, [r3, #24]
  }
}
 800273c:	bf00      	nop
 800273e:	370c      	adds	r7, #12
 8002740:	46bd      	mov	sp, r7
 8002742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002746:	4770      	bx	lr

08002748 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b084      	sub	sp, #16
 800274c:	af00      	add	r7, sp, #0
 800274e:	60f8      	str	r0, [r7, #12]
 8002750:	60b9      	str	r1, [r7, #8]
 8002752:	603b      	str	r3, [r7, #0]
 8002754:	4613      	mov	r3, r2
 8002756:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002758:	e03b      	b.n	80027d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	6839      	ldr	r1, [r7, #0]
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f000 f8d6 	bl	8002910 <I2C_IsErrorOccurred>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e041      	b.n	80027f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002774:	d02d      	beq.n	80027d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002776:	f7ff f9a5 	bl	8001ac4 <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	69bb      	ldr	r3, [r7, #24]
 800277e:	1ad3      	subs	r3, r2, r3
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	429a      	cmp	r2, r3
 8002784:	d302      	bcc.n	800278c <I2C_WaitOnFlagUntilTimeout+0x44>
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d122      	bne.n	80027d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	68bb      	ldr	r3, [r7, #8]
 8002794:	4013      	ands	r3, r2
 8002796:	68ba      	ldr	r2, [r7, #8]
 8002798:	429a      	cmp	r2, r3
 800279a:	bf0c      	ite	eq
 800279c:	2301      	moveq	r3, #1
 800279e:	2300      	movne	r3, #0
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	461a      	mov	r2, r3
 80027a4:	79fb      	ldrb	r3, [r7, #7]
 80027a6:	429a      	cmp	r2, r3
 80027a8:	d113      	bne.n	80027d2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027ae:	f043 0220 	orr.w	r2, r3, #32
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	2220      	movs	r2, #32
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2200      	movs	r2, #0
 80027c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e00f      	b.n	80027f2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	699a      	ldr	r2, [r3, #24]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	4013      	ands	r3, r2
 80027dc:	68ba      	ldr	r2, [r7, #8]
 80027de:	429a      	cmp	r2, r3
 80027e0:	bf0c      	ite	eq
 80027e2:	2301      	moveq	r3, #1
 80027e4:	2300      	movne	r3, #0
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	461a      	mov	r2, r3
 80027ea:	79fb      	ldrb	r3, [r7, #7]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d0b4      	beq.n	800275a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}

080027fa <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80027fa:	b580      	push	{r7, lr}
 80027fc:	b084      	sub	sp, #16
 80027fe:	af00      	add	r7, sp, #0
 8002800:	60f8      	str	r0, [r7, #12]
 8002802:	60b9      	str	r1, [r7, #8]
 8002804:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002806:	e033      	b.n	8002870 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002808:	687a      	ldr	r2, [r7, #4]
 800280a:	68b9      	ldr	r1, [r7, #8]
 800280c:	68f8      	ldr	r0, [r7, #12]
 800280e:	f000 f87f 	bl	8002910 <I2C_IsErrorOccurred>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d001      	beq.n	800281c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002818:	2301      	movs	r3, #1
 800281a:	e031      	b.n	8002880 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800281c:	68bb      	ldr	r3, [r7, #8]
 800281e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002822:	d025      	beq.n	8002870 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002824:	f7ff f94e 	bl	8001ac4 <HAL_GetTick>
 8002828:	4602      	mov	r2, r0
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	68ba      	ldr	r2, [r7, #8]
 8002830:	429a      	cmp	r2, r3
 8002832:	d302      	bcc.n	800283a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d11a      	bne.n	8002870 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	699b      	ldr	r3, [r3, #24]
 8002840:	f003 0302 	and.w	r3, r3, #2
 8002844:	2b02      	cmp	r3, #2
 8002846:	d013      	beq.n	8002870 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284c:	f043 0220 	orr.w	r2, r3, #32
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	2220      	movs	r2, #32
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2200      	movs	r2, #0
 8002860:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e007      	b.n	8002880 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	699b      	ldr	r3, [r3, #24]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b02      	cmp	r3, #2
 800287c:	d1c4      	bne.n	8002808 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}

08002888 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002894:	e02f      	b.n	80028f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002896:	687a      	ldr	r2, [r7, #4]
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 f838 	bl	8002910 <I2C_IsErrorOccurred>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d001      	beq.n	80028aa <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e02d      	b.n	8002906 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80028aa:	f7ff f90b 	bl	8001ac4 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	429a      	cmp	r2, r3
 80028b8:	d302      	bcc.n	80028c0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d11a      	bne.n	80028f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	699b      	ldr	r3, [r3, #24]
 80028c6:	f003 0320 	and.w	r3, r3, #32
 80028ca:	2b20      	cmp	r3, #32
 80028cc:	d013      	beq.n	80028f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028d2:	f043 0220 	orr.w	r2, r3, #32
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	2220      	movs	r2, #32
 80028de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	2200      	movs	r2, #0
 80028e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80028f2:	2301      	movs	r3, #1
 80028f4:	e007      	b.n	8002906 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	f003 0320 	and.w	r3, r3, #32
 8002900:	2b20      	cmp	r3, #32
 8002902:	d1c8      	bne.n	8002896 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002904:	2300      	movs	r3, #0
}
 8002906:	4618      	mov	r0, r3
 8002908:	3710      	adds	r7, #16
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
	...

08002910 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08a      	sub	sp, #40	@ 0x28
 8002914:	af00      	add	r7, sp, #0
 8002916:	60f8      	str	r0, [r7, #12]
 8002918:	60b9      	str	r1, [r7, #8]
 800291a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800291c:	2300      	movs	r3, #0
 800291e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	699b      	ldr	r3, [r3, #24]
 8002928:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800292a:	2300      	movs	r3, #0
 800292c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002932:	69bb      	ldr	r3, [r7, #24]
 8002934:	f003 0310 	and.w	r3, r3, #16
 8002938:	2b00      	cmp	r3, #0
 800293a:	d068      	beq.n	8002a0e <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2210      	movs	r2, #16
 8002942:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002944:	e049      	b.n	80029da <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002946:	68bb      	ldr	r3, [r7, #8]
 8002948:	f1b3 3fff 	cmp.w	r3, #4294967295
 800294c:	d045      	beq.n	80029da <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800294e:	f7ff f8b9 	bl	8001ac4 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	429a      	cmp	r2, r3
 800295c:	d302      	bcc.n	8002964 <I2C_IsErrorOccurred+0x54>
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d13a      	bne.n	80029da <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800296e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002976:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002982:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002986:	d121      	bne.n	80029cc <I2C_IsErrorOccurred+0xbc>
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800298e:	d01d      	beq.n	80029cc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002990:	7cfb      	ldrb	r3, [r7, #19]
 8002992:	2b20      	cmp	r3, #32
 8002994:	d01a      	beq.n	80029cc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	685a      	ldr	r2, [r3, #4]
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80029a4:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80029a6:	f7ff f88d 	bl	8001ac4 <HAL_GetTick>
 80029aa:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029ac:	e00e      	b.n	80029cc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80029ae:	f7ff f889 	bl	8001ac4 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	69fb      	ldr	r3, [r7, #28]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b19      	cmp	r3, #25
 80029ba:	d907      	bls.n	80029cc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80029bc:	6a3b      	ldr	r3, [r7, #32]
 80029be:	f043 0320 	orr.w	r3, r3, #32
 80029c2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80029ca:	e006      	b.n	80029da <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b20      	cmp	r3, #32
 80029d8:	d1e9      	bne.n	80029ae <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	f003 0320 	and.w	r3, r3, #32
 80029e4:	2b20      	cmp	r3, #32
 80029e6:	d003      	beq.n	80029f0 <I2C_IsErrorOccurred+0xe0>
 80029e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d0aa      	beq.n	8002946 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80029f0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d103      	bne.n	8002a00 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2220      	movs	r2, #32
 80029fe:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002a00:	6a3b      	ldr	r3, [r7, #32]
 8002a02:	f043 0304 	orr.w	r3, r3, #4
 8002a06:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d00b      	beq.n	8002a38 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002a20:	6a3b      	ldr	r3, [r7, #32]
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a30:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002a38:	69bb      	ldr	r3, [r7, #24]
 8002a3a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d00b      	beq.n	8002a5a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002a42:	6a3b      	ldr	r3, [r7, #32]
 8002a44:	f043 0308 	orr.w	r3, r3, #8
 8002a48:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002a52:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002a5a:	69bb      	ldr	r3, [r7, #24]
 8002a5c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d00b      	beq.n	8002a7c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002a64:	6a3b      	ldr	r3, [r7, #32]
 8002a66:	f043 0302 	orr.w	r3, r3, #2
 8002a6a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a74:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002a7c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d01c      	beq.n	8002abe <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f7ff fe3b 	bl	8002700 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6859      	ldr	r1, [r3, #4]
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	4b0d      	ldr	r3, [pc, #52]	@ (8002acc <I2C_IsErrorOccurred+0x1bc>)
 8002a96:	400b      	ands	r3, r1
 8002a98:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a9e:	6a3b      	ldr	r3, [r7, #32]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2220      	movs	r2, #32
 8002aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8002abe:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3728      	adds	r7, #40	@ 0x28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
 8002aca:	bf00      	nop
 8002acc:	fe00e800 	.word	0xfe00e800

08002ad0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b087      	sub	sp, #28
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	607b      	str	r3, [r7, #4]
 8002ada:	460b      	mov	r3, r1
 8002adc:	817b      	strh	r3, [r7, #10]
 8002ade:	4613      	mov	r3, r2
 8002ae0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002ae2:	897b      	ldrh	r3, [r7, #10]
 8002ae4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002ae8:	7a7b      	ldrb	r3, [r7, #9]
 8002aea:	041b      	lsls	r3, r3, #16
 8002aec:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002af0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002afe:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	685a      	ldr	r2, [r3, #4]
 8002b06:	6a3b      	ldr	r3, [r7, #32]
 8002b08:	0d5b      	lsrs	r3, r3, #21
 8002b0a:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8002b0e:	4b08      	ldr	r3, [pc, #32]	@ (8002b30 <I2C_TransferConfig+0x60>)
 8002b10:	430b      	orrs	r3, r1
 8002b12:	43db      	mvns	r3, r3
 8002b14:	ea02 0103 	and.w	r1, r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	697a      	ldr	r2, [r7, #20]
 8002b1e:	430a      	orrs	r2, r1
 8002b20:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002b22:	bf00      	nop
 8002b24:	371c      	adds	r7, #28
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr
 8002b2e:	bf00      	nop
 8002b30:	03ff63ff 	.word	0x03ff63ff

08002b34 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b44:	b2db      	uxtb	r3, r3
 8002b46:	2b20      	cmp	r3, #32
 8002b48:	d138      	bne.n	8002bbc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b50:	2b01      	cmp	r3, #1
 8002b52:	d101      	bne.n	8002b58 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002b54:	2302      	movs	r3, #2
 8002b56:	e032      	b.n	8002bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2224      	movs	r2, #36	@ 0x24
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f022 0201 	bic.w	r2, r2, #1
 8002b76:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002b86:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	6819      	ldr	r1, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	430a      	orrs	r2, r1
 8002b96:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f042 0201 	orr.w	r2, r2, #1
 8002ba6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b085      	sub	sp, #20
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d139      	bne.n	8002c54 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002be6:	2b01      	cmp	r3, #1
 8002be8:	d101      	bne.n	8002bee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002bea:	2302      	movs	r3, #2
 8002bec:	e033      	b.n	8002c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2224      	movs	r2, #36	@ 0x24
 8002bfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0201 	bic.w	r2, r2, #1
 8002c0c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002c1c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	021b      	lsls	r3, r3, #8
 8002c22:	68fa      	ldr	r2, [r7, #12]
 8002c24:	4313      	orrs	r3, r2
 8002c26:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68fa      	ldr	r2, [r7, #12]
 8002c2e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f042 0201 	orr.w	r2, r2, #1
 8002c3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	2220      	movs	r2, #32
 8002c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e000      	b.n	8002c56 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
  }
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3714      	adds	r7, #20
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr
	...

08002c64 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d141      	bne.n	8002cf6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002c72:	4b4b      	ldr	r3, [pc, #300]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c7e:	d131      	bne.n	8002ce4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002c80:	4b47      	ldr	r3, [pc, #284]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002c86:	4a46      	ldr	r2, [pc, #280]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c88:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c8c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002c90:	4b43      	ldr	r3, [pc, #268]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002c98:	4a41      	ldr	r2, [pc, #260]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002c9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c9e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002ca0:	4b40      	ldr	r3, [pc, #256]	@ (8002da4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	2232      	movs	r2, #50	@ 0x32
 8002ca6:	fb02 f303 	mul.w	r3, r2, r3
 8002caa:	4a3f      	ldr	r2, [pc, #252]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002cac:	fba2 2303 	umull	r2, r3, r2, r3
 8002cb0:	0c9b      	lsrs	r3, r3, #18
 8002cb2:	3301      	adds	r3, #1
 8002cb4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cb6:	e002      	b.n	8002cbe <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	3b01      	subs	r3, #1
 8002cbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002cbe:	4b38      	ldr	r3, [pc, #224]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cca:	d102      	bne.n	8002cd2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d1f2      	bne.n	8002cb8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002cd2:	4b33      	ldr	r3, [pc, #204]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002cda:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002cde:	d158      	bne.n	8002d92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002ce0:	2303      	movs	r3, #3
 8002ce2:	e057      	b.n	8002d94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002ce4:	4b2e      	ldr	r3, [pc, #184]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002ce6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002cea:	4a2d      	ldr	r2, [pc, #180]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002cec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002cf0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002cf4:	e04d      	b.n	8002d92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002cfc:	d141      	bne.n	8002d82 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002cfe:	4b28      	ldr	r3, [pc, #160]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d0a:	d131      	bne.n	8002d70 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d0c:	4b24      	ldr	r3, [pc, #144]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d0e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d12:	4a23      	ldr	r2, [pc, #140]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d14:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d18:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002d1c:	4b20      	ldr	r3, [pc, #128]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d24:	4a1e      	ldr	r2, [pc, #120]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d26:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d2a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002d2c:	4b1d      	ldr	r3, [pc, #116]	@ (8002da4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	2232      	movs	r2, #50	@ 0x32
 8002d32:	fb02 f303 	mul.w	r3, r2, r3
 8002d36:	4a1c      	ldr	r2, [pc, #112]	@ (8002da8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002d38:	fba2 2303 	umull	r2, r3, r2, r3
 8002d3c:	0c9b      	lsrs	r3, r3, #18
 8002d3e:	3301      	adds	r3, #1
 8002d40:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d42:	e002      	b.n	8002d4a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	3b01      	subs	r3, #1
 8002d48:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002d4a:	4b15      	ldr	r3, [pc, #84]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d56:	d102      	bne.n	8002d5e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d1f2      	bne.n	8002d44 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002d5e:	4b10      	ldr	r3, [pc, #64]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d60:	695b      	ldr	r3, [r3, #20]
 8002d62:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002d6a:	d112      	bne.n	8002d92 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e011      	b.n	8002d94 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002d70:	4b0b      	ldr	r3, [pc, #44]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d72:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d76:	4a0a      	ldr	r2, [pc, #40]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d78:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d7c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002d80:	e007      	b.n	8002d92 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8002d82:	4b07      	ldr	r3, [pc, #28]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002d8a:	4a05      	ldr	r2, [pc, #20]	@ (8002da0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002d8c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d90:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3714      	adds	r7, #20
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr
 8002da0:	40007000 	.word	0x40007000
 8002da4:	20000000 	.word	0x20000000
 8002da8:	431bde83 	.word	0x431bde83

08002dac <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002dac:	b480      	push	{r7}
 8002dae:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002db0:	4b05      	ldr	r3, [pc, #20]	@ (8002dc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	4a04      	ldr	r2, [pc, #16]	@ (8002dc8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8002db6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dba:	6093      	str	r3, [r2, #8]
}
 8002dbc:	bf00      	nop
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr
 8002dc6:	bf00      	nop
 8002dc8:	40007000 	.word	0x40007000

08002dcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dcc:	b580      	push	{r7, lr}
 8002dce:	b088      	sub	sp, #32
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d101      	bne.n	8002dde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e2fe      	b.n	80033dc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d075      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dea:	4b97      	ldr	r3, [pc, #604]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002df4:	4b94      	ldr	r3, [pc, #592]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	f003 0303 	and.w	r3, r3, #3
 8002dfc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002dfe:	69bb      	ldr	r3, [r7, #24]
 8002e00:	2b0c      	cmp	r3, #12
 8002e02:	d102      	bne.n	8002e0a <HAL_RCC_OscConfig+0x3e>
 8002e04:	697b      	ldr	r3, [r7, #20]
 8002e06:	2b03      	cmp	r3, #3
 8002e08:	d002      	beq.n	8002e10 <HAL_RCC_OscConfig+0x44>
 8002e0a:	69bb      	ldr	r3, [r7, #24]
 8002e0c:	2b08      	cmp	r3, #8
 8002e0e:	d10b      	bne.n	8002e28 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e10:	4b8d      	ldr	r3, [pc, #564]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d05b      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x108>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	685b      	ldr	r3, [r3, #4]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d157      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	e2d9      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e30:	d106      	bne.n	8002e40 <HAL_RCC_OscConfig+0x74>
 8002e32:	4b85      	ldr	r3, [pc, #532]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a84      	ldr	r2, [pc, #528]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e3c:	6013      	str	r3, [r2, #0]
 8002e3e:	e01d      	b.n	8002e7c <HAL_RCC_OscConfig+0xb0>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e48:	d10c      	bne.n	8002e64 <HAL_RCC_OscConfig+0x98>
 8002e4a:	4b7f      	ldr	r3, [pc, #508]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	4a7e      	ldr	r2, [pc, #504]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e54:	6013      	str	r3, [r2, #0]
 8002e56:	4b7c      	ldr	r3, [pc, #496]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a7b      	ldr	r2, [pc, #492]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e5c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e60:	6013      	str	r3, [r2, #0]
 8002e62:	e00b      	b.n	8002e7c <HAL_RCC_OscConfig+0xb0>
 8002e64:	4b78      	ldr	r3, [pc, #480]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a77      	ldr	r2, [pc, #476]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e6e:	6013      	str	r3, [r2, #0]
 8002e70:	4b75      	ldr	r3, [pc, #468]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a74      	ldr	r2, [pc, #464]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002e76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e7a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d013      	beq.n	8002eac <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e84:	f7fe fe1e 	bl	8001ac4 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e8a:	e008      	b.n	8002e9e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fe1a 	bl	8001ac4 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	2b64      	cmp	r3, #100	@ 0x64
 8002e98:	d901      	bls.n	8002e9e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e9a:	2303      	movs	r3, #3
 8002e9c:	e29e      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e9e:	4b6a      	ldr	r3, [pc, #424]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d0f0      	beq.n	8002e8c <HAL_RCC_OscConfig+0xc0>
 8002eaa:	e014      	b.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002eac:	f7fe fe0a 	bl	8001ac4 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002eb2:	e008      	b.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb4:	f7fe fe06 	bl	8001ac4 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	2b64      	cmp	r3, #100	@ 0x64
 8002ec0:	d901      	bls.n	8002ec6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ec2:	2303      	movs	r3, #3
 8002ec4:	e28a      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002ec6:	4b60      	ldr	r3, [pc, #384]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d1f0      	bne.n	8002eb4 <HAL_RCC_OscConfig+0xe8>
 8002ed2:	e000      	b.n	8002ed6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0302 	and.w	r3, r3, #2
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d075      	beq.n	8002fce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002ee2:	4b59      	ldr	r3, [pc, #356]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002eec:	4b56      	ldr	r3, [pc, #344]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	f003 0303 	and.w	r3, r3, #3
 8002ef4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002ef6:	69bb      	ldr	r3, [r7, #24]
 8002ef8:	2b0c      	cmp	r3, #12
 8002efa:	d102      	bne.n	8002f02 <HAL_RCC_OscConfig+0x136>
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d002      	beq.n	8002f08 <HAL_RCC_OscConfig+0x13c>
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	2b04      	cmp	r3, #4
 8002f06:	d11f      	bne.n	8002f48 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f08:	4b4f      	ldr	r3, [pc, #316]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d005      	beq.n	8002f20 <HAL_RCC_OscConfig+0x154>
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	68db      	ldr	r3, [r3, #12]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d101      	bne.n	8002f20 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	e25d      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f20:	4b49      	ldr	r3, [pc, #292]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	4946      	ldr	r1, [pc, #280]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002f34:	4b45      	ldr	r3, [pc, #276]	@ (800304c <HAL_RCC_OscConfig+0x280>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fe fd77 	bl	8001a2c <HAL_InitTick>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d043      	beq.n	8002fcc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8002f44:	2301      	movs	r3, #1
 8002f46:	e249      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	68db      	ldr	r3, [r3, #12]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d023      	beq.n	8002f98 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f50:	4b3d      	ldr	r3, [pc, #244]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a3c      	ldr	r2, [pc, #240]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f5a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5c:	f7fe fdb2 	bl	8001ac4 <HAL_GetTick>
 8002f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f62:	e008      	b.n	8002f76 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f64:	f7fe fdae 	bl	8001ac4 <HAL_GetTick>
 8002f68:	4602      	mov	r2, r0
 8002f6a:	693b      	ldr	r3, [r7, #16]
 8002f6c:	1ad3      	subs	r3, r2, r3
 8002f6e:	2b02      	cmp	r3, #2
 8002f70:	d901      	bls.n	8002f76 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e232      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002f76:	4b34      	ldr	r3, [pc, #208]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d0f0      	beq.n	8002f64 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f82:	4b31      	ldr	r3, [pc, #196]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	691b      	ldr	r3, [r3, #16]
 8002f8e:	061b      	lsls	r3, r3, #24
 8002f90:	492d      	ldr	r1, [pc, #180]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f92:	4313      	orrs	r3, r2
 8002f94:	604b      	str	r3, [r1, #4]
 8002f96:	e01a      	b.n	8002fce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f98:	4b2b      	ldr	r3, [pc, #172]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002f9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002fa2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fa4:	f7fe fd8e 	bl	8001ac4 <HAL_GetTick>
 8002fa8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002faa:	e008      	b.n	8002fbe <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fac:	f7fe fd8a 	bl	8001ac4 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	2b02      	cmp	r3, #2
 8002fb8:	d901      	bls.n	8002fbe <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e20e      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002fbe:	4b22      	ldr	r3, [pc, #136]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d1f0      	bne.n	8002fac <HAL_RCC_OscConfig+0x1e0>
 8002fca:	e000      	b.n	8002fce <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fcc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d041      	beq.n	800305e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	695b      	ldr	r3, [r3, #20]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d01c      	beq.n	800301c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fe2:	4b19      	ldr	r3, [pc, #100]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002fe4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002fe8:	4a17      	ldr	r2, [pc, #92]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8002fea:	f043 0301 	orr.w	r3, r3, #1
 8002fee:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ff2:	f7fe fd67 	bl	8001ac4 <HAL_GetTick>
 8002ff6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002ff8:	e008      	b.n	800300c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffa:	f7fe fd63 	bl	8001ac4 <HAL_GetTick>
 8002ffe:	4602      	mov	r2, r0
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	1ad3      	subs	r3, r2, r3
 8003004:	2b02      	cmp	r3, #2
 8003006:	d901      	bls.n	800300c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003008:	2303      	movs	r3, #3
 800300a:	e1e7      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800300c:	4b0e      	ldr	r3, [pc, #56]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 800300e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d0ef      	beq.n	8002ffa <HAL_RCC_OscConfig+0x22e>
 800301a:	e020      	b.n	800305e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800301c:	4b0a      	ldr	r3, [pc, #40]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 800301e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003022:	4a09      	ldr	r2, [pc, #36]	@ (8003048 <HAL_RCC_OscConfig+0x27c>)
 8003024:	f023 0301 	bic.w	r3, r3, #1
 8003028:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800302c:	f7fe fd4a 	bl	8001ac4 <HAL_GetTick>
 8003030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003032:	e00d      	b.n	8003050 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003034:	f7fe fd46 	bl	8001ac4 <HAL_GetTick>
 8003038:	4602      	mov	r2, r0
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	2b02      	cmp	r3, #2
 8003040:	d906      	bls.n	8003050 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003042:	2303      	movs	r3, #3
 8003044:	e1ca      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
 8003046:	bf00      	nop
 8003048:	40021000 	.word	0x40021000
 800304c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003050:	4b8c      	ldr	r3, [pc, #560]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003052:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1ea      	bne.n	8003034 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f003 0304 	and.w	r3, r3, #4
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80a6 	beq.w	80031b8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800306c:	2300      	movs	r3, #0
 800306e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003070:	4b84      	ldr	r3, [pc, #528]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003072:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003074:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003078:	2b00      	cmp	r3, #0
 800307a:	d101      	bne.n	8003080 <HAL_RCC_OscConfig+0x2b4>
 800307c:	2301      	movs	r3, #1
 800307e:	e000      	b.n	8003082 <HAL_RCC_OscConfig+0x2b6>
 8003080:	2300      	movs	r3, #0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00d      	beq.n	80030a2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003086:	4b7f      	ldr	r3, [pc, #508]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003088:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800308a:	4a7e      	ldr	r2, [pc, #504]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800308c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003090:	6593      	str	r3, [r2, #88]	@ 0x58
 8003092:	4b7c      	ldr	r3, [pc, #496]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003094:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003096:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800309e:	2301      	movs	r3, #1
 80030a0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030a2:	4b79      	ldr	r3, [pc, #484]	@ (8003288 <HAL_RCC_OscConfig+0x4bc>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d118      	bne.n	80030e0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80030ae:	4b76      	ldr	r3, [pc, #472]	@ (8003288 <HAL_RCC_OscConfig+0x4bc>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a75      	ldr	r2, [pc, #468]	@ (8003288 <HAL_RCC_OscConfig+0x4bc>)
 80030b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ba:	f7fe fd03 	bl	8001ac4 <HAL_GetTick>
 80030be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030c0:	e008      	b.n	80030d4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030c2:	f7fe fcff 	bl	8001ac4 <HAL_GetTick>
 80030c6:	4602      	mov	r2, r0
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d901      	bls.n	80030d4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80030d0:	2303      	movs	r3, #3
 80030d2:	e183      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80030d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003288 <HAL_RCC_OscConfig+0x4bc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d0f0      	beq.n	80030c2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d108      	bne.n	80030fa <HAL_RCC_OscConfig+0x32e>
 80030e8:	4b66      	ldr	r3, [pc, #408]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80030ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80030ee:	4a65      	ldr	r2, [pc, #404]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80030f0:	f043 0301 	orr.w	r3, r3, #1
 80030f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80030f8:	e024      	b.n	8003144 <HAL_RCC_OscConfig+0x378>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	2b05      	cmp	r3, #5
 8003100:	d110      	bne.n	8003124 <HAL_RCC_OscConfig+0x358>
 8003102:	4b60      	ldr	r3, [pc, #384]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003104:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003108:	4a5e      	ldr	r2, [pc, #376]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800310a:	f043 0304 	orr.w	r3, r3, #4
 800310e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003112:	4b5c      	ldr	r3, [pc, #368]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003114:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003118:	4a5a      	ldr	r2, [pc, #360]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800311a:	f043 0301 	orr.w	r3, r3, #1
 800311e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003122:	e00f      	b.n	8003144 <HAL_RCC_OscConfig+0x378>
 8003124:	4b57      	ldr	r3, [pc, #348]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003126:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800312a:	4a56      	ldr	r2, [pc, #344]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800312c:	f023 0301 	bic.w	r3, r3, #1
 8003130:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8003134:	4b53      	ldr	r3, [pc, #332]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003136:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800313a:	4a52      	ldr	r2, [pc, #328]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800313c:	f023 0304 	bic.w	r3, r3, #4
 8003140:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d016      	beq.n	800317a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7fe fcba 	bl	8001ac4 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003152:	e00a      	b.n	800316a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7fe fcb6 	bl	8001ac4 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e138      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800316a:	4b46      	ldr	r3, [pc, #280]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800316c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003170:	f003 0302 	and.w	r3, r3, #2
 8003174:	2b00      	cmp	r3, #0
 8003176:	d0ed      	beq.n	8003154 <HAL_RCC_OscConfig+0x388>
 8003178:	e015      	b.n	80031a6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800317a:	f7fe fca3 	bl	8001ac4 <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003180:	e00a      	b.n	8003198 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003182:	f7fe fc9f 	bl	8001ac4 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003190:	4293      	cmp	r3, r2
 8003192:	d901      	bls.n	8003198 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003194:	2303      	movs	r3, #3
 8003196:	e121      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003198:	4b3a      	ldr	r3, [pc, #232]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800319a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ed      	bne.n	8003182 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031a6:	7ffb      	ldrb	r3, [r7, #31]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b35      	ldr	r3, [pc, #212]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031b0:	4a34      	ldr	r2, [pc, #208]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f003 0320 	and.w	r3, r3, #32
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d03c      	beq.n	800323e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d01c      	beq.n	8003206 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80031cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031ce:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031d4:	f043 0301 	orr.w	r3, r3, #1
 80031d8:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031dc:	f7fe fc72 	bl	8001ac4 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80031e4:	f7fe fc6e 	bl	8001ac4 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e0f2      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80031f6:	4b23      	ldr	r3, [pc, #140]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 80031f8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0ef      	beq.n	80031e4 <HAL_RCC_OscConfig+0x418>
 8003204:	e01b      	b.n	800323e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003206:	4b1f      	ldr	r3, [pc, #124]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003208:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800320c:	4a1d      	ldr	r2, [pc, #116]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800320e:	f023 0301 	bic.w	r3, r3, #1
 8003212:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003216:	f7fe fc55 	bl	8001ac4 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800321c:	e008      	b.n	8003230 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800321e:	f7fe fc51 	bl	8001ac4 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d901      	bls.n	8003230 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e0d5      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8003230:	4b14      	ldr	r3, [pc, #80]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003232:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8003236:	f003 0302 	and.w	r3, r3, #2
 800323a:	2b00      	cmp	r3, #0
 800323c:	d1ef      	bne.n	800321e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	69db      	ldr	r3, [r3, #28]
 8003242:	2b00      	cmp	r3, #0
 8003244:	f000 80c9 	beq.w	80033da <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003248:	4b0e      	ldr	r3, [pc, #56]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 030c 	and.w	r3, r3, #12
 8003250:	2b0c      	cmp	r3, #12
 8003252:	f000 8083 	beq.w	800335c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	69db      	ldr	r3, [r3, #28]
 800325a:	2b02      	cmp	r3, #2
 800325c:	d15e      	bne.n	800331c <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325e:	4b09      	ldr	r3, [pc, #36]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a08      	ldr	r2, [pc, #32]	@ (8003284 <HAL_RCC_OscConfig+0x4b8>)
 8003264:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800326a:	f7fe fc2b 	bl	8001ac4 <HAL_GetTick>
 800326e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003270:	e00c      	b.n	800328c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003272:	f7fe fc27 	bl	8001ac4 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d905      	bls.n	800328c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	e0ab      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
 8003284:	40021000 	.word	0x40021000
 8003288:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800328c:	4b55      	ldr	r3, [pc, #340]	@ (80033e4 <HAL_RCC_OscConfig+0x618>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d1ec      	bne.n	8003272 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003298:	4b52      	ldr	r3, [pc, #328]	@ (80033e4 <HAL_RCC_OscConfig+0x618>)
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	4b52      	ldr	r3, [pc, #328]	@ (80033e8 <HAL_RCC_OscConfig+0x61c>)
 800329e:	4013      	ands	r3, r2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	6a11      	ldr	r1, [r2, #32]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032a8:	3a01      	subs	r2, #1
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	4311      	orrs	r1, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80032b2:	0212      	lsls	r2, r2, #8
 80032b4:	4311      	orrs	r1, r2
 80032b6:	687a      	ldr	r2, [r7, #4]
 80032b8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80032ba:	0852      	lsrs	r2, r2, #1
 80032bc:	3a01      	subs	r2, #1
 80032be:	0552      	lsls	r2, r2, #21
 80032c0:	4311      	orrs	r1, r2
 80032c2:	687a      	ldr	r2, [r7, #4]
 80032c4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80032c6:	0852      	lsrs	r2, r2, #1
 80032c8:	3a01      	subs	r2, #1
 80032ca:	0652      	lsls	r2, r2, #25
 80032cc:	4311      	orrs	r1, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80032d2:	06d2      	lsls	r2, r2, #27
 80032d4:	430a      	orrs	r2, r1
 80032d6:	4943      	ldr	r1, [pc, #268]	@ (80033e4 <HAL_RCC_OscConfig+0x618>)
 80032d8:	4313      	orrs	r3, r2
 80032da:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80032dc:	4b41      	ldr	r3, [pc, #260]	@ (80033e4 <HAL_RCC_OscConfig+0x618>)
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4a40      	ldr	r2, [pc, #256]	@ (80033e4 <HAL_RCC_OscConfig+0x618>)
 80032e2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032e6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80032e8:	4b3e      	ldr	r3, [pc, #248]	@ (80033e4 <HAL_RCC_OscConfig+0x618>)
 80032ea:	68db      	ldr	r3, [r3, #12]
 80032ec:	4a3d      	ldr	r2, [pc, #244]	@ (80033e4 <HAL_RCC_OscConfig+0x618>)
 80032ee:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80032f2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f4:	f7fe fbe6 	bl	8001ac4 <HAL_GetTick>
 80032f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80032fa:	e008      	b.n	800330e <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032fc:	f7fe fbe2 	bl	8001ac4 <HAL_GetTick>
 8003300:	4602      	mov	r2, r0
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	1ad3      	subs	r3, r2, r3
 8003306:	2b02      	cmp	r3, #2
 8003308:	d901      	bls.n	800330e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e066      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800330e:	4b35      	ldr	r3, [pc, #212]	@ (80033e4 <HAL_RCC_OscConfig+0x618>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0f0      	beq.n	80032fc <HAL_RCC_OscConfig+0x530>
 800331a:	e05e      	b.n	80033da <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800331c:	4b31      	ldr	r3, [pc, #196]	@ (80033e4 <HAL_RCC_OscConfig+0x618>)
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4a30      	ldr	r2, [pc, #192]	@ (80033e4 <HAL_RCC_OscConfig+0x618>)
 8003322:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003326:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003328:	f7fe fbcc 	bl	8001ac4 <HAL_GetTick>
 800332c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800332e:	e008      	b.n	8003342 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003330:	f7fe fbc8 	bl	8001ac4 <HAL_GetTick>
 8003334:	4602      	mov	r2, r0
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	2b02      	cmp	r3, #2
 800333c:	d901      	bls.n	8003342 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800333e:	2303      	movs	r3, #3
 8003340:	e04c      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003342:	4b28      	ldr	r3, [pc, #160]	@ (80033e4 <HAL_RCC_OscConfig+0x618>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800334a:	2b00      	cmp	r3, #0
 800334c:	d1f0      	bne.n	8003330 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800334e:	4b25      	ldr	r3, [pc, #148]	@ (80033e4 <HAL_RCC_OscConfig+0x618>)
 8003350:	68da      	ldr	r2, [r3, #12]
 8003352:	4924      	ldr	r1, [pc, #144]	@ (80033e4 <HAL_RCC_OscConfig+0x618>)
 8003354:	4b25      	ldr	r3, [pc, #148]	@ (80033ec <HAL_RCC_OscConfig+0x620>)
 8003356:	4013      	ands	r3, r2
 8003358:	60cb      	str	r3, [r1, #12]
 800335a:	e03e      	b.n	80033da <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d101      	bne.n	8003368 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e039      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003368:	4b1e      	ldr	r3, [pc, #120]	@ (80033e4 <HAL_RCC_OscConfig+0x618>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800336e:	697b      	ldr	r3, [r7, #20]
 8003370:	f003 0203 	and.w	r2, r3, #3
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	429a      	cmp	r2, r3
 800337a:	d12c      	bne.n	80033d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003386:	3b01      	subs	r3, #1
 8003388:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800338a:	429a      	cmp	r2, r3
 800338c:	d123      	bne.n	80033d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003398:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800339a:	429a      	cmp	r2, r3
 800339c:	d11b      	bne.n	80033d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033a8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80033aa:	429a      	cmp	r2, r3
 80033ac:	d113      	bne.n	80033d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033b8:	085b      	lsrs	r3, r3, #1
 80033ba:	3b01      	subs	r3, #1
 80033bc:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80033be:	429a      	cmp	r2, r3
 80033c0:	d109      	bne.n	80033d6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80033cc:	085b      	lsrs	r3, r3, #1
 80033ce:	3b01      	subs	r3, #1
 80033d0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d001      	beq.n	80033da <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e000      	b.n	80033dc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80033da:	2300      	movs	r3, #0
}
 80033dc:	4618      	mov	r0, r3
 80033de:	3720      	adds	r7, #32
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40021000 	.word	0x40021000
 80033e8:	019f800c 	.word	0x019f800c
 80033ec:	feeefffc 	.word	0xfeeefffc

080033f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b086      	sub	sp, #24
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80033fa:	2300      	movs	r3, #0
 80033fc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2b00      	cmp	r3, #0
 8003402:	d101      	bne.n	8003408 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e11e      	b.n	8003646 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003408:	4b91      	ldr	r3, [pc, #580]	@ (8003650 <HAL_RCC_ClockConfig+0x260>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d910      	bls.n	8003438 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003416:	4b8e      	ldr	r3, [pc, #568]	@ (8003650 <HAL_RCC_ClockConfig+0x260>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f023 020f 	bic.w	r2, r3, #15
 800341e:	498c      	ldr	r1, [pc, #560]	@ (8003650 <HAL_RCC_ClockConfig+0x260>)
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	4313      	orrs	r3, r2
 8003424:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003426:	4b8a      	ldr	r3, [pc, #552]	@ (8003650 <HAL_RCC_ClockConfig+0x260>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 030f 	and.w	r3, r3, #15
 800342e:	683a      	ldr	r2, [r7, #0]
 8003430:	429a      	cmp	r2, r3
 8003432:	d001      	beq.n	8003438 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003434:	2301      	movs	r3, #1
 8003436:	e106      	b.n	8003646 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f003 0301 	and.w	r3, r3, #1
 8003440:	2b00      	cmp	r3, #0
 8003442:	d073      	beq.n	800352c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	2b03      	cmp	r3, #3
 800344a:	d129      	bne.n	80034a0 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800344c:	4b81      	ldr	r3, [pc, #516]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003454:	2b00      	cmp	r3, #0
 8003456:	d101      	bne.n	800345c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e0f4      	b.n	8003646 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800345c:	f000 f99e 	bl	800379c <RCC_GetSysClockFreqFromPLLSource>
 8003460:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	4a7c      	ldr	r2, [pc, #496]	@ (8003658 <HAL_RCC_ClockConfig+0x268>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d93f      	bls.n	80034ea <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800346a:	4b7a      	ldr	r3, [pc, #488]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 800346c:	689b      	ldr	r3, [r3, #8]
 800346e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003472:	2b00      	cmp	r3, #0
 8003474:	d009      	beq.n	800348a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800347e:	2b00      	cmp	r3, #0
 8003480:	d033      	beq.n	80034ea <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003486:	2b00      	cmp	r3, #0
 8003488:	d12f      	bne.n	80034ea <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800348a:	4b72      	ldr	r3, [pc, #456]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003492:	4a70      	ldr	r2, [pc, #448]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 8003494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003498:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800349a:	2380      	movs	r3, #128	@ 0x80
 800349c:	617b      	str	r3, [r7, #20]
 800349e:	e024      	b.n	80034ea <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	2b02      	cmp	r3, #2
 80034a6:	d107      	bne.n	80034b8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80034a8:	4b6a      	ldr	r3, [pc, #424]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d109      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034b4:	2301      	movs	r3, #1
 80034b6:	e0c6      	b.n	8003646 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80034b8:	4b66      	ldr	r3, [pc, #408]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e0be      	b.n	8003646 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80034c8:	f000 f8ce 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 80034cc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4a61      	ldr	r2, [pc, #388]	@ (8003658 <HAL_RCC_ClockConfig+0x268>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d909      	bls.n	80034ea <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80034d6:	4b5f      	ldr	r3, [pc, #380]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 80034d8:	689b      	ldr	r3, [r3, #8]
 80034da:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80034de:	4a5d      	ldr	r2, [pc, #372]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 80034e0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80034e4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80034e6:	2380      	movs	r3, #128	@ 0x80
 80034e8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80034ea:	4b5a      	ldr	r3, [pc, #360]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f023 0203 	bic.w	r2, r3, #3
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	4957      	ldr	r1, [pc, #348]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 80034f8:	4313      	orrs	r3, r2
 80034fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80034fc:	f7fe fae2 	bl	8001ac4 <HAL_GetTick>
 8003500:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003502:	e00a      	b.n	800351a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003504:	f7fe fade 	bl	8001ac4 <HAL_GetTick>
 8003508:	4602      	mov	r2, r0
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003512:	4293      	cmp	r3, r2
 8003514:	d901      	bls.n	800351a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003516:	2303      	movs	r3, #3
 8003518:	e095      	b.n	8003646 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800351a:	4b4e      	ldr	r3, [pc, #312]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 020c 	and.w	r2, r3, #12
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	429a      	cmp	r2, r3
 800352a:	d1eb      	bne.n	8003504 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f003 0302 	and.w	r3, r3, #2
 8003534:	2b00      	cmp	r3, #0
 8003536:	d023      	beq.n	8003580 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0304 	and.w	r3, r3, #4
 8003540:	2b00      	cmp	r3, #0
 8003542:	d005      	beq.n	8003550 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003544:	4b43      	ldr	r3, [pc, #268]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 8003546:	689b      	ldr	r3, [r3, #8]
 8003548:	4a42      	ldr	r2, [pc, #264]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 800354a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800354e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0308 	and.w	r3, r3, #8
 8003558:	2b00      	cmp	r3, #0
 800355a:	d007      	beq.n	800356c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800355c:	4b3d      	ldr	r3, [pc, #244]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003564:	4a3b      	ldr	r2, [pc, #236]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 8003566:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800356a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800356c:	4b39      	ldr	r3, [pc, #228]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	689b      	ldr	r3, [r3, #8]
 8003578:	4936      	ldr	r1, [pc, #216]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 800357a:	4313      	orrs	r3, r2
 800357c:	608b      	str	r3, [r1, #8]
 800357e:	e008      	b.n	8003592 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	2b80      	cmp	r3, #128	@ 0x80
 8003584:	d105      	bne.n	8003592 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003586:	4b33      	ldr	r3, [pc, #204]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	4a32      	ldr	r2, [pc, #200]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 800358c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003590:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003592:	4b2f      	ldr	r3, [pc, #188]	@ (8003650 <HAL_RCC_ClockConfig+0x260>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f003 030f 	and.w	r3, r3, #15
 800359a:	683a      	ldr	r2, [r7, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d21d      	bcs.n	80035dc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80035a0:	4b2b      	ldr	r3, [pc, #172]	@ (8003650 <HAL_RCC_ClockConfig+0x260>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f023 020f 	bic.w	r2, r3, #15
 80035a8:	4929      	ldr	r1, [pc, #164]	@ (8003650 <HAL_RCC_ClockConfig+0x260>)
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	4313      	orrs	r3, r2
 80035ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80035b0:	f7fe fa88 	bl	8001ac4 <HAL_GetTick>
 80035b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035b8:	f7fe fa84 	bl	8001ac4 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e03b      	b.n	8003646 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80035ce:	4b20      	ldr	r3, [pc, #128]	@ (8003650 <HAL_RCC_ClockConfig+0x260>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f003 030f 	and.w	r3, r3, #15
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	429a      	cmp	r2, r3
 80035da:	d1ed      	bne.n	80035b8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d008      	beq.n	80035fa <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80035e8:	4b1a      	ldr	r3, [pc, #104]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	4917      	ldr	r1, [pc, #92]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 80035f6:	4313      	orrs	r3, r2
 80035f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d009      	beq.n	800361a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003606:	4b13      	ldr	r3, [pc, #76]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	00db      	lsls	r3, r3, #3
 8003614:	490f      	ldr	r1, [pc, #60]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 8003616:	4313      	orrs	r3, r2
 8003618:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800361a:	f000 f825 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 800361e:	4602      	mov	r2, r0
 8003620:	4b0c      	ldr	r3, [pc, #48]	@ (8003654 <HAL_RCC_ClockConfig+0x264>)
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	091b      	lsrs	r3, r3, #4
 8003626:	f003 030f 	and.w	r3, r3, #15
 800362a:	490c      	ldr	r1, [pc, #48]	@ (800365c <HAL_RCC_ClockConfig+0x26c>)
 800362c:	5ccb      	ldrb	r3, [r1, r3]
 800362e:	f003 031f 	and.w	r3, r3, #31
 8003632:	fa22 f303 	lsr.w	r3, r2, r3
 8003636:	4a0a      	ldr	r2, [pc, #40]	@ (8003660 <HAL_RCC_ClockConfig+0x270>)
 8003638:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800363a:	4b0a      	ldr	r3, [pc, #40]	@ (8003664 <HAL_RCC_ClockConfig+0x274>)
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	4618      	mov	r0, r3
 8003640:	f7fe f9f4 	bl	8001a2c <HAL_InitTick>
 8003644:	4603      	mov	r3, r0
}
 8003646:	4618      	mov	r0, r3
 8003648:	3718      	adds	r7, #24
 800364a:	46bd      	mov	sp, r7
 800364c:	bd80      	pop	{r7, pc}
 800364e:	bf00      	nop
 8003650:	40022000 	.word	0x40022000
 8003654:	40021000 	.word	0x40021000
 8003658:	04c4b400 	.word	0x04c4b400
 800365c:	08007e70 	.word	0x08007e70
 8003660:	20000000 	.word	0x20000000
 8003664:	20000004 	.word	0x20000004

08003668 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003668:	b480      	push	{r7}
 800366a:	b087      	sub	sp, #28
 800366c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800366e:	4b2c      	ldr	r3, [pc, #176]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	f003 030c 	and.w	r3, r3, #12
 8003676:	2b04      	cmp	r3, #4
 8003678:	d102      	bne.n	8003680 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800367a:	4b2a      	ldr	r3, [pc, #168]	@ (8003724 <HAL_RCC_GetSysClockFreq+0xbc>)
 800367c:	613b      	str	r3, [r7, #16]
 800367e:	e047      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003680:	4b27      	ldr	r3, [pc, #156]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003682:	689b      	ldr	r3, [r3, #8]
 8003684:	f003 030c 	and.w	r3, r3, #12
 8003688:	2b08      	cmp	r3, #8
 800368a:	d102      	bne.n	8003692 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800368c:	4b26      	ldr	r3, [pc, #152]	@ (8003728 <HAL_RCC_GetSysClockFreq+0xc0>)
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	e03e      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003692:	4b23      	ldr	r3, [pc, #140]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003694:	689b      	ldr	r3, [r3, #8]
 8003696:	f003 030c 	and.w	r3, r3, #12
 800369a:	2b0c      	cmp	r3, #12
 800369c:	d136      	bne.n	800370c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800369e:	4b20      	ldr	r3, [pc, #128]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	f003 0303 	and.w	r3, r3, #3
 80036a6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80036a8:	4b1d      	ldr	r3, [pc, #116]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036aa:	68db      	ldr	r3, [r3, #12]
 80036ac:	091b      	lsrs	r3, r3, #4
 80036ae:	f003 030f 	and.w	r3, r3, #15
 80036b2:	3301      	adds	r3, #1
 80036b4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2b03      	cmp	r3, #3
 80036ba:	d10c      	bne.n	80036d6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036bc:	4a1a      	ldr	r2, [pc, #104]	@ (8003728 <HAL_RCC_GetSysClockFreq+0xc0>)
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	4a16      	ldr	r2, [pc, #88]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036c6:	68d2      	ldr	r2, [r2, #12]
 80036c8:	0a12      	lsrs	r2, r2, #8
 80036ca:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036ce:	fb02 f303 	mul.w	r3, r2, r3
 80036d2:	617b      	str	r3, [r7, #20]
      break;
 80036d4:	e00c      	b.n	80036f0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80036d6:	4a13      	ldr	r2, [pc, #76]	@ (8003724 <HAL_RCC_GetSysClockFreq+0xbc>)
 80036d8:	68bb      	ldr	r3, [r7, #8]
 80036da:	fbb2 f3f3 	udiv	r3, r2, r3
 80036de:	4a10      	ldr	r2, [pc, #64]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036e0:	68d2      	ldr	r2, [r2, #12]
 80036e2:	0a12      	lsrs	r2, r2, #8
 80036e4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80036e8:	fb02 f303 	mul.w	r3, r2, r3
 80036ec:	617b      	str	r3, [r7, #20]
      break;
 80036ee:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80036f0:	4b0b      	ldr	r3, [pc, #44]	@ (8003720 <HAL_RCC_GetSysClockFreq+0xb8>)
 80036f2:	68db      	ldr	r3, [r3, #12]
 80036f4:	0e5b      	lsrs	r3, r3, #25
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	3301      	adds	r3, #1
 80036fc:	005b      	lsls	r3, r3, #1
 80036fe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003700:	697a      	ldr	r2, [r7, #20]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	fbb2 f3f3 	udiv	r3, r2, r3
 8003708:	613b      	str	r3, [r7, #16]
 800370a:	e001      	b.n	8003710 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003710:	693b      	ldr	r3, [r7, #16]
}
 8003712:	4618      	mov	r0, r3
 8003714:	371c      	adds	r7, #28
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	40021000 	.word	0x40021000
 8003724:	00f42400 	.word	0x00f42400
 8003728:	007a1200 	.word	0x007a1200

0800372c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003730:	4b03      	ldr	r3, [pc, #12]	@ (8003740 <HAL_RCC_GetHCLKFreq+0x14>)
 8003732:	681b      	ldr	r3, [r3, #0]
}
 8003734:	4618      	mov	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	20000000 	.word	0x20000000

08003744 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003748:	f7ff fff0 	bl	800372c <HAL_RCC_GetHCLKFreq>
 800374c:	4602      	mov	r2, r0
 800374e:	4b06      	ldr	r3, [pc, #24]	@ (8003768 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003750:	689b      	ldr	r3, [r3, #8]
 8003752:	0a1b      	lsrs	r3, r3, #8
 8003754:	f003 0307 	and.w	r3, r3, #7
 8003758:	4904      	ldr	r1, [pc, #16]	@ (800376c <HAL_RCC_GetPCLK1Freq+0x28>)
 800375a:	5ccb      	ldrb	r3, [r1, r3]
 800375c:	f003 031f 	and.w	r3, r3, #31
 8003760:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003764:	4618      	mov	r0, r3
 8003766:	bd80      	pop	{r7, pc}
 8003768:	40021000 	.word	0x40021000
 800376c:	08007e80 	.word	0x08007e80

08003770 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003770:	b580      	push	{r7, lr}
 8003772:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003774:	f7ff ffda 	bl	800372c <HAL_RCC_GetHCLKFreq>
 8003778:	4602      	mov	r2, r0
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_RCC_GetPCLK2Freq+0x24>)
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	0adb      	lsrs	r3, r3, #11
 8003780:	f003 0307 	and.w	r3, r3, #7
 8003784:	4904      	ldr	r1, [pc, #16]	@ (8003798 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003786:	5ccb      	ldrb	r3, [r1, r3]
 8003788:	f003 031f 	and.w	r3, r3, #31
 800378c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003790:	4618      	mov	r0, r3
 8003792:	bd80      	pop	{r7, pc}
 8003794:	40021000 	.word	0x40021000
 8003798:	08007e80 	.word	0x08007e80

0800379c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800379c:	b480      	push	{r7}
 800379e:	b087      	sub	sp, #28
 80037a0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80037a2:	4b1e      	ldr	r3, [pc, #120]	@ (800381c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037a4:	68db      	ldr	r3, [r3, #12]
 80037a6:	f003 0303 	and.w	r3, r3, #3
 80037aa:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80037ac:	4b1b      	ldr	r3, [pc, #108]	@ (800381c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	091b      	lsrs	r3, r3, #4
 80037b2:	f003 030f 	and.w	r3, r3, #15
 80037b6:	3301      	adds	r3, #1
 80037b8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2b03      	cmp	r3, #3
 80037be:	d10c      	bne.n	80037da <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037c0:	4a17      	ldr	r2, [pc, #92]	@ (8003820 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c8:	4a14      	ldr	r2, [pc, #80]	@ (800381c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037ca:	68d2      	ldr	r2, [r2, #12]
 80037cc:	0a12      	lsrs	r2, r2, #8
 80037ce:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037d2:	fb02 f303 	mul.w	r3, r2, r3
 80037d6:	617b      	str	r3, [r7, #20]
    break;
 80037d8:	e00c      	b.n	80037f4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80037da:	4a12      	ldr	r2, [pc, #72]	@ (8003824 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e2:	4a0e      	ldr	r2, [pc, #56]	@ (800381c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037e4:	68d2      	ldr	r2, [r2, #12]
 80037e6:	0a12      	lsrs	r2, r2, #8
 80037e8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80037ec:	fb02 f303 	mul.w	r3, r2, r3
 80037f0:	617b      	str	r3, [r7, #20]
    break;
 80037f2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80037f4:	4b09      	ldr	r3, [pc, #36]	@ (800381c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	0e5b      	lsrs	r3, r3, #25
 80037fa:	f003 0303 	and.w	r3, r3, #3
 80037fe:	3301      	adds	r3, #1
 8003800:	005b      	lsls	r3, r3, #1
 8003802:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003804:	697a      	ldr	r2, [r7, #20]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	fbb2 f3f3 	udiv	r3, r2, r3
 800380c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800380e:	687b      	ldr	r3, [r7, #4]
}
 8003810:	4618      	mov	r0, r3
 8003812:	371c      	adds	r7, #28
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40021000 	.word	0x40021000
 8003820:	007a1200 	.word	0x007a1200
 8003824:	00f42400 	.word	0x00f42400

08003828 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003830:	2300      	movs	r3, #0
 8003832:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003834:	2300      	movs	r3, #0
 8003836:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003840:	2b00      	cmp	r3, #0
 8003842:	f000 8098 	beq.w	8003976 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003846:	2300      	movs	r3, #0
 8003848:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800384a:	4b43      	ldr	r3, [pc, #268]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800384c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800384e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003852:	2b00      	cmp	r3, #0
 8003854:	d10d      	bne.n	8003872 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003856:	4b40      	ldr	r3, [pc, #256]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003858:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800385a:	4a3f      	ldr	r2, [pc, #252]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800385c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003860:	6593      	str	r3, [r2, #88]	@ 0x58
 8003862:	4b3d      	ldr	r3, [pc, #244]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800386a:	60bb      	str	r3, [r7, #8]
 800386c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800386e:	2301      	movs	r3, #1
 8003870:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003872:	4b3a      	ldr	r3, [pc, #232]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a39      	ldr	r2, [pc, #228]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800387c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800387e:	f7fe f921 	bl	8001ac4 <HAL_GetTick>
 8003882:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003884:	e009      	b.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7fe f91d 	bl	8001ac4 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d902      	bls.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	74fb      	strb	r3, [r7, #19]
        break;
 8003898:	e005      	b.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800389a:	4b30      	ldr	r3, [pc, #192]	@ (800395c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d0ef      	beq.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80038a6:	7cfb      	ldrb	r3, [r7, #19]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d159      	bne.n	8003960 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80038ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80038b6:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80038b8:	697b      	ldr	r3, [r7, #20]
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d01e      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d019      	beq.n	80038fc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80038c8:	4b23      	ldr	r3, [pc, #140]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ce:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038d2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80038d4:	4b20      	ldr	r3, [pc, #128]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038da:	4a1f      	ldr	r2, [pc, #124]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038e0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80038e4:	4b1c      	ldr	r3, [pc, #112]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80038f4:	4a18      	ldr	r2, [pc, #96]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	f003 0301 	and.w	r3, r3, #1
 8003902:	2b00      	cmp	r3, #0
 8003904:	d016      	beq.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003906:	f7fe f8dd 	bl	8001ac4 <HAL_GetTick>
 800390a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800390c:	e00b      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800390e:	f7fe f8d9 	bl	8001ac4 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	f241 3288 	movw	r2, #5000	@ 0x1388
 800391c:	4293      	cmp	r3, r2
 800391e:	d902      	bls.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	74fb      	strb	r3, [r7, #19]
            break;
 8003924:	e006      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003926:	4b0c      	ldr	r3, [pc, #48]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003928:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b00      	cmp	r3, #0
 8003932:	d0ec      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003934:	7cfb      	ldrb	r3, [r7, #19]
 8003936:	2b00      	cmp	r3, #0
 8003938:	d10b      	bne.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800393a:	4b07      	ldr	r3, [pc, #28]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800393c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003940:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003948:	4903      	ldr	r1, [pc, #12]	@ (8003958 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800394a:	4313      	orrs	r3, r2
 800394c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8003950:	e008      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003952:	7cfb      	ldrb	r3, [r7, #19]
 8003954:	74bb      	strb	r3, [r7, #18]
 8003956:	e005      	b.n	8003964 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003958:	40021000 	.word	0x40021000
 800395c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003960:	7cfb      	ldrb	r3, [r7, #19]
 8003962:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003964:	7c7b      	ldrb	r3, [r7, #17]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d105      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800396a:	4ba7      	ldr	r3, [pc, #668]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800396e:	4aa6      	ldr	r2, [pc, #664]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003970:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003974:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003982:	4ba1      	ldr	r3, [pc, #644]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003988:	f023 0203 	bic.w	r2, r3, #3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	499d      	ldr	r1, [pc, #628]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039a4:	4b98      	ldr	r3, [pc, #608]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039aa:	f023 020c 	bic.w	r2, r3, #12
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	4995      	ldr	r1, [pc, #596]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0304 	and.w	r3, r3, #4
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039c6:	4b90      	ldr	r3, [pc, #576]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039cc:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	498c      	ldr	r1, [pc, #560]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f003 0308 	and.w	r3, r3, #8
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80039e8:	4b87      	ldr	r3, [pc, #540]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80039ee:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	691b      	ldr	r3, [r3, #16]
 80039f6:	4984      	ldr	r1, [pc, #528]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f003 0310 	and.w	r3, r3, #16
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a0a:	4b7f      	ldr	r3, [pc, #508]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a10:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	695b      	ldr	r3, [r3, #20]
 8003a18:	497b      	ldr	r1, [pc, #492]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f003 0320 	and.w	r3, r3, #32
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003a2c:	4b76      	ldr	r3, [pc, #472]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a32:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	699b      	ldr	r3, [r3, #24]
 8003a3a:	4973      	ldr	r1, [pc, #460]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a4e:	4b6e      	ldr	r3, [pc, #440]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	496a      	ldr	r1, [pc, #424]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003a70:	4b65      	ldr	r3, [pc, #404]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a76:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	4962      	ldr	r1, [pc, #392]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003a92:	4b5d      	ldr	r3, [pc, #372]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003a98:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	4959      	ldr	r1, [pc, #356]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003ab4:	4b54      	ldr	r3, [pc, #336]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ab6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003aba:	f023 0203 	bic.w	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac2:	4951      	ldr	r1, [pc, #324]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d00a      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003ad6:	4b4c      	ldr	r3, [pc, #304]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003adc:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ae4:	4948      	ldr	r1, [pc, #288]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d015      	beq.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003af8:	4b43      	ldr	r3, [pc, #268]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003afe:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b06:	4940      	ldr	r1, [pc, #256]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b12:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003b16:	d105      	bne.n	8003b24 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b18:	4b3b      	ldr	r3, [pc, #236]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	4a3a      	ldr	r2, [pc, #232]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b1e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b22:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d015      	beq.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003b30:	4b35      	ldr	r3, [pc, #212]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b36:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b3e:	4932      	ldr	r1, [pc, #200]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003b4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003b4e:	d105      	bne.n	8003b5c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b50:	4b2d      	ldr	r3, [pc, #180]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b52:	68db      	ldr	r3, [r3, #12]
 8003b54:	4a2c      	ldr	r2, [pc, #176]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b56:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b5a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d015      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b68:	4b27      	ldr	r3, [pc, #156]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003b6e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b76:	4924      	ldr	r1, [pc, #144]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003b86:	d105      	bne.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003b88:	4b1f      	ldr	r3, [pc, #124]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8a:	68db      	ldr	r3, [r3, #12]
 8003b8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003b8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003b92:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d015      	beq.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003ba0:	4b19      	ldr	r3, [pc, #100]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ba6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bae:	4916      	ldr	r1, [pc, #88]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bb0:	4313      	orrs	r3, r2
 8003bb2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003bba:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bbe:	d105      	bne.n	8003bcc <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bc0:	4b11      	ldr	r3, [pc, #68]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc2:	68db      	ldr	r3, [r3, #12]
 8003bc4:	4a10      	ldr	r2, [pc, #64]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bc6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003bca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d019      	beq.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003bde:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be6:	4908      	ldr	r1, [pc, #32]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003be8:	4313      	orrs	r3, r2
 8003bea:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bf2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bf6:	d109      	bne.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003bf8:	4b03      	ldr	r3, [pc, #12]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	4a02      	ldr	r2, [pc, #8]	@ (8003c08 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003bfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003c02:	60d3      	str	r3, [r2, #12]
 8003c04:	e002      	b.n	8003c0c <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8003c06:	bf00      	nop
 8003c08:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d015      	beq.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003c18:	4b29      	ldr	r3, [pc, #164]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c1e:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c26:	4926      	ldr	r1, [pc, #152]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c28:	4313      	orrs	r3, r2
 8003c2a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c32:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003c36:	d105      	bne.n	8003c44 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c38:	4b21      	ldr	r3, [pc, #132]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	4a20      	ldr	r2, [pc, #128]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c3e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c42:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d015      	beq.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8003c50:	4b1b      	ldr	r3, [pc, #108]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003c56:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c5e:	4918      	ldr	r1, [pc, #96]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c60:	4313      	orrs	r3, r2
 8003c62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003c6a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c6e:	d105      	bne.n	8003c7c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003c70:	4b13      	ldr	r3, [pc, #76]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	4a12      	ldr	r2, [pc, #72]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c7a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d015      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003c88:	4b0d      	ldr	r3, [pc, #52]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003c8e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003c96:	490a      	ldr	r1, [pc, #40]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003ca2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003ca6:	d105      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003ca8:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	4a04      	ldr	r2, [pc, #16]	@ (8003cc0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003cae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003cb2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8003cb4:	7cbb      	ldrb	r3, [r7, #18]
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3718      	adds	r7, #24
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	40021000 	.word	0x40021000

08003cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e042      	b.n	8003d5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d106      	bne.n	8003cee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2200      	movs	r2, #0
 8003ce4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f7fd fcfd 	bl	80016e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2224      	movs	r2, #36	@ 0x24
 8003cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 0201 	bic.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d002      	beq.n	8003d14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fbb2 	bl	8004478 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 f8b3 	bl	8003e80 <UART_SetConfig>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b01      	cmp	r3, #1
 8003d1e:	d101      	bne.n	8003d24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e01b      	b.n	8003d5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	685a      	ldr	r2, [r3, #4]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	689a      	ldr	r2, [r3, #8]
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f042 0201 	orr.w	r2, r2, #1
 8003d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d54:	6878      	ldr	r0, [r7, #4]
 8003d56:	f000 fc31 	bl	80045bc <UART_CheckIdleState>
 8003d5a:	4603      	mov	r3, r0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3708      	adds	r7, #8
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}

08003d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08a      	sub	sp, #40	@ 0x28
 8003d68:	af02      	add	r7, sp, #8
 8003d6a:	60f8      	str	r0, [r7, #12]
 8003d6c:	60b9      	str	r1, [r7, #8]
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	4613      	mov	r3, r2
 8003d72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d17b      	bne.n	8003e76 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d002      	beq.n	8003d8a <HAL_UART_Transmit+0x26>
 8003d84:	88fb      	ldrh	r3, [r7, #6]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e074      	b.n	8003e78 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	2221      	movs	r2, #33	@ 0x21
 8003d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d9e:	f7fd fe91 	bl	8001ac4 <HAL_GetTick>
 8003da2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	88fa      	ldrh	r2, [r7, #6]
 8003da8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	88fa      	ldrh	r2, [r7, #6]
 8003db0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	689b      	ldr	r3, [r3, #8]
 8003db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003dbc:	d108      	bne.n	8003dd0 <HAL_UART_Transmit+0x6c>
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	691b      	ldr	r3, [r3, #16]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d104      	bne.n	8003dd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	61bb      	str	r3, [r7, #24]
 8003dce:	e003      	b.n	8003dd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003dd0:	68bb      	ldr	r3, [r7, #8]
 8003dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003dd8:	e030      	b.n	8003e3c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	9300      	str	r3, [sp, #0]
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	2200      	movs	r2, #0
 8003de2:	2180      	movs	r1, #128	@ 0x80
 8003de4:	68f8      	ldr	r0, [r7, #12]
 8003de6:	f000 fc93 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 8003dea:	4603      	mov	r3, r0
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d005      	beq.n	8003dfc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e03d      	b.n	8003e78 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003dfc:	69fb      	ldr	r3, [r7, #28]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d10b      	bne.n	8003e1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e10:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	3302      	adds	r3, #2
 8003e16:	61bb      	str	r3, [r7, #24]
 8003e18:	e007      	b.n	8003e2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	781a      	ldrb	r2, [r3, #0]
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003e24:	69fb      	ldr	r3, [r7, #28]
 8003e26:	3301      	adds	r3, #1
 8003e28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	3b01      	subs	r3, #1
 8003e34:	b29a      	uxth	r2, r3
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003e42:	b29b      	uxth	r3, r3
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d1c8      	bne.n	8003dda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	9300      	str	r3, [sp, #0]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	2140      	movs	r1, #64	@ 0x40
 8003e52:	68f8      	ldr	r0, [r7, #12]
 8003e54:	f000 fc5c 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d005      	beq.n	8003e6a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e006      	b.n	8003e78 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2220      	movs	r2, #32
 8003e6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8003e72:	2300      	movs	r3, #0
 8003e74:	e000      	b.n	8003e78 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8003e76:	2302      	movs	r3, #2
  }
}
 8003e78:	4618      	mov	r0, r3
 8003e7a:	3720      	adds	r7, #32
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e84:	b08c      	sub	sp, #48	@ 0x30
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	689a      	ldr	r2, [r3, #8]
 8003e94:	697b      	ldr	r3, [r7, #20]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	431a      	orrs	r2, r3
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	695b      	ldr	r3, [r3, #20]
 8003e9e:	431a      	orrs	r2, r3
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	69db      	ldr	r3, [r3, #28]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	4baa      	ldr	r3, [pc, #680]	@ (8004158 <UART_SetConfig+0x2d8>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	697a      	ldr	r2, [r7, #20]
 8003eb4:	6812      	ldr	r2, [r2, #0]
 8003eb6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8003ec6:	697b      	ldr	r3, [r7, #20]
 8003ec8:	68da      	ldr	r2, [r3, #12]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	430a      	orrs	r2, r1
 8003ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	699b      	ldr	r3, [r3, #24]
 8003ed6:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a9f      	ldr	r2, [pc, #636]	@ (800415c <UART_SetConfig+0x2dc>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d004      	beq.n	8003eec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003ef6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	6812      	ldr	r2, [r2, #0]
 8003efe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f00:	430b      	orrs	r3, r1
 8003f02:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003f04:	697b      	ldr	r3, [r7, #20]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f0a:	f023 010f 	bic.w	r1, r3, #15
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	430a      	orrs	r2, r1
 8003f18:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a90      	ldr	r2, [pc, #576]	@ (8004160 <UART_SetConfig+0x2e0>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d125      	bne.n	8003f70 <UART_SetConfig+0xf0>
 8003f24:	4b8f      	ldr	r3, [pc, #572]	@ (8004164 <UART_SetConfig+0x2e4>)
 8003f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f2a:	f003 0303 	and.w	r3, r3, #3
 8003f2e:	2b03      	cmp	r3, #3
 8003f30:	d81a      	bhi.n	8003f68 <UART_SetConfig+0xe8>
 8003f32:	a201      	add	r2, pc, #4	@ (adr r2, 8003f38 <UART_SetConfig+0xb8>)
 8003f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f38:	08003f49 	.word	0x08003f49
 8003f3c:	08003f59 	.word	0x08003f59
 8003f40:	08003f51 	.word	0x08003f51
 8003f44:	08003f61 	.word	0x08003f61
 8003f48:	2301      	movs	r3, #1
 8003f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f4e:	e116      	b.n	800417e <UART_SetConfig+0x2fe>
 8003f50:	2302      	movs	r3, #2
 8003f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f56:	e112      	b.n	800417e <UART_SetConfig+0x2fe>
 8003f58:	2304      	movs	r3, #4
 8003f5a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f5e:	e10e      	b.n	800417e <UART_SetConfig+0x2fe>
 8003f60:	2308      	movs	r3, #8
 8003f62:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f66:	e10a      	b.n	800417e <UART_SetConfig+0x2fe>
 8003f68:	2310      	movs	r3, #16
 8003f6a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003f6e:	e106      	b.n	800417e <UART_SetConfig+0x2fe>
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a7c      	ldr	r2, [pc, #496]	@ (8004168 <UART_SetConfig+0x2e8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d138      	bne.n	8003fec <UART_SetConfig+0x16c>
 8003f7a:	4b7a      	ldr	r3, [pc, #488]	@ (8004164 <UART_SetConfig+0x2e4>)
 8003f7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f80:	f003 030c 	and.w	r3, r3, #12
 8003f84:	2b0c      	cmp	r3, #12
 8003f86:	d82d      	bhi.n	8003fe4 <UART_SetConfig+0x164>
 8003f88:	a201      	add	r2, pc, #4	@ (adr r2, 8003f90 <UART_SetConfig+0x110>)
 8003f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f8e:	bf00      	nop
 8003f90:	08003fc5 	.word	0x08003fc5
 8003f94:	08003fe5 	.word	0x08003fe5
 8003f98:	08003fe5 	.word	0x08003fe5
 8003f9c:	08003fe5 	.word	0x08003fe5
 8003fa0:	08003fd5 	.word	0x08003fd5
 8003fa4:	08003fe5 	.word	0x08003fe5
 8003fa8:	08003fe5 	.word	0x08003fe5
 8003fac:	08003fe5 	.word	0x08003fe5
 8003fb0:	08003fcd 	.word	0x08003fcd
 8003fb4:	08003fe5 	.word	0x08003fe5
 8003fb8:	08003fe5 	.word	0x08003fe5
 8003fbc:	08003fe5 	.word	0x08003fe5
 8003fc0:	08003fdd 	.word	0x08003fdd
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fca:	e0d8      	b.n	800417e <UART_SetConfig+0x2fe>
 8003fcc:	2302      	movs	r3, #2
 8003fce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fd2:	e0d4      	b.n	800417e <UART_SetConfig+0x2fe>
 8003fd4:	2304      	movs	r3, #4
 8003fd6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fda:	e0d0      	b.n	800417e <UART_SetConfig+0x2fe>
 8003fdc:	2308      	movs	r3, #8
 8003fde:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fe2:	e0cc      	b.n	800417e <UART_SetConfig+0x2fe>
 8003fe4:	2310      	movs	r3, #16
 8003fe6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003fea:	e0c8      	b.n	800417e <UART_SetConfig+0x2fe>
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a5e      	ldr	r2, [pc, #376]	@ (800416c <UART_SetConfig+0x2ec>)
 8003ff2:	4293      	cmp	r3, r2
 8003ff4:	d125      	bne.n	8004042 <UART_SetConfig+0x1c2>
 8003ff6:	4b5b      	ldr	r3, [pc, #364]	@ (8004164 <UART_SetConfig+0x2e4>)
 8003ff8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003ffc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004000:	2b30      	cmp	r3, #48	@ 0x30
 8004002:	d016      	beq.n	8004032 <UART_SetConfig+0x1b2>
 8004004:	2b30      	cmp	r3, #48	@ 0x30
 8004006:	d818      	bhi.n	800403a <UART_SetConfig+0x1ba>
 8004008:	2b20      	cmp	r3, #32
 800400a:	d00a      	beq.n	8004022 <UART_SetConfig+0x1a2>
 800400c:	2b20      	cmp	r3, #32
 800400e:	d814      	bhi.n	800403a <UART_SetConfig+0x1ba>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d002      	beq.n	800401a <UART_SetConfig+0x19a>
 8004014:	2b10      	cmp	r3, #16
 8004016:	d008      	beq.n	800402a <UART_SetConfig+0x1aa>
 8004018:	e00f      	b.n	800403a <UART_SetConfig+0x1ba>
 800401a:	2300      	movs	r3, #0
 800401c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004020:	e0ad      	b.n	800417e <UART_SetConfig+0x2fe>
 8004022:	2302      	movs	r3, #2
 8004024:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004028:	e0a9      	b.n	800417e <UART_SetConfig+0x2fe>
 800402a:	2304      	movs	r3, #4
 800402c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004030:	e0a5      	b.n	800417e <UART_SetConfig+0x2fe>
 8004032:	2308      	movs	r3, #8
 8004034:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004038:	e0a1      	b.n	800417e <UART_SetConfig+0x2fe>
 800403a:	2310      	movs	r3, #16
 800403c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004040:	e09d      	b.n	800417e <UART_SetConfig+0x2fe>
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a4a      	ldr	r2, [pc, #296]	@ (8004170 <UART_SetConfig+0x2f0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d125      	bne.n	8004098 <UART_SetConfig+0x218>
 800404c:	4b45      	ldr	r3, [pc, #276]	@ (8004164 <UART_SetConfig+0x2e4>)
 800404e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004052:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004056:	2bc0      	cmp	r3, #192	@ 0xc0
 8004058:	d016      	beq.n	8004088 <UART_SetConfig+0x208>
 800405a:	2bc0      	cmp	r3, #192	@ 0xc0
 800405c:	d818      	bhi.n	8004090 <UART_SetConfig+0x210>
 800405e:	2b80      	cmp	r3, #128	@ 0x80
 8004060:	d00a      	beq.n	8004078 <UART_SetConfig+0x1f8>
 8004062:	2b80      	cmp	r3, #128	@ 0x80
 8004064:	d814      	bhi.n	8004090 <UART_SetConfig+0x210>
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <UART_SetConfig+0x1f0>
 800406a:	2b40      	cmp	r3, #64	@ 0x40
 800406c:	d008      	beq.n	8004080 <UART_SetConfig+0x200>
 800406e:	e00f      	b.n	8004090 <UART_SetConfig+0x210>
 8004070:	2300      	movs	r3, #0
 8004072:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004076:	e082      	b.n	800417e <UART_SetConfig+0x2fe>
 8004078:	2302      	movs	r3, #2
 800407a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800407e:	e07e      	b.n	800417e <UART_SetConfig+0x2fe>
 8004080:	2304      	movs	r3, #4
 8004082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004086:	e07a      	b.n	800417e <UART_SetConfig+0x2fe>
 8004088:	2308      	movs	r3, #8
 800408a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800408e:	e076      	b.n	800417e <UART_SetConfig+0x2fe>
 8004090:	2310      	movs	r3, #16
 8004092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004096:	e072      	b.n	800417e <UART_SetConfig+0x2fe>
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	4a35      	ldr	r2, [pc, #212]	@ (8004174 <UART_SetConfig+0x2f4>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d12a      	bne.n	80040f8 <UART_SetConfig+0x278>
 80040a2:	4b30      	ldr	r3, [pc, #192]	@ (8004164 <UART_SetConfig+0x2e4>)
 80040a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040ac:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040b0:	d01a      	beq.n	80040e8 <UART_SetConfig+0x268>
 80040b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80040b6:	d81b      	bhi.n	80040f0 <UART_SetConfig+0x270>
 80040b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040bc:	d00c      	beq.n	80040d8 <UART_SetConfig+0x258>
 80040be:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040c2:	d815      	bhi.n	80040f0 <UART_SetConfig+0x270>
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d003      	beq.n	80040d0 <UART_SetConfig+0x250>
 80040c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040cc:	d008      	beq.n	80040e0 <UART_SetConfig+0x260>
 80040ce:	e00f      	b.n	80040f0 <UART_SetConfig+0x270>
 80040d0:	2300      	movs	r3, #0
 80040d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040d6:	e052      	b.n	800417e <UART_SetConfig+0x2fe>
 80040d8:	2302      	movs	r3, #2
 80040da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040de:	e04e      	b.n	800417e <UART_SetConfig+0x2fe>
 80040e0:	2304      	movs	r3, #4
 80040e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040e6:	e04a      	b.n	800417e <UART_SetConfig+0x2fe>
 80040e8:	2308      	movs	r3, #8
 80040ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040ee:	e046      	b.n	800417e <UART_SetConfig+0x2fe>
 80040f0:	2310      	movs	r3, #16
 80040f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80040f6:	e042      	b.n	800417e <UART_SetConfig+0x2fe>
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a17      	ldr	r2, [pc, #92]	@ (800415c <UART_SetConfig+0x2dc>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d13a      	bne.n	8004178 <UART_SetConfig+0x2f8>
 8004102:	4b18      	ldr	r3, [pc, #96]	@ (8004164 <UART_SetConfig+0x2e4>)
 8004104:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004108:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800410c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004110:	d01a      	beq.n	8004148 <UART_SetConfig+0x2c8>
 8004112:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004116:	d81b      	bhi.n	8004150 <UART_SetConfig+0x2d0>
 8004118:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800411c:	d00c      	beq.n	8004138 <UART_SetConfig+0x2b8>
 800411e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004122:	d815      	bhi.n	8004150 <UART_SetConfig+0x2d0>
 8004124:	2b00      	cmp	r3, #0
 8004126:	d003      	beq.n	8004130 <UART_SetConfig+0x2b0>
 8004128:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800412c:	d008      	beq.n	8004140 <UART_SetConfig+0x2c0>
 800412e:	e00f      	b.n	8004150 <UART_SetConfig+0x2d0>
 8004130:	2300      	movs	r3, #0
 8004132:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004136:	e022      	b.n	800417e <UART_SetConfig+0x2fe>
 8004138:	2302      	movs	r3, #2
 800413a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800413e:	e01e      	b.n	800417e <UART_SetConfig+0x2fe>
 8004140:	2304      	movs	r3, #4
 8004142:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004146:	e01a      	b.n	800417e <UART_SetConfig+0x2fe>
 8004148:	2308      	movs	r3, #8
 800414a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800414e:	e016      	b.n	800417e <UART_SetConfig+0x2fe>
 8004150:	2310      	movs	r3, #16
 8004152:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004156:	e012      	b.n	800417e <UART_SetConfig+0x2fe>
 8004158:	cfff69f3 	.word	0xcfff69f3
 800415c:	40008000 	.word	0x40008000
 8004160:	40013800 	.word	0x40013800
 8004164:	40021000 	.word	0x40021000
 8004168:	40004400 	.word	0x40004400
 800416c:	40004800 	.word	0x40004800
 8004170:	40004c00 	.word	0x40004c00
 8004174:	40005000 	.word	0x40005000
 8004178:	2310      	movs	r3, #16
 800417a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800417e:	697b      	ldr	r3, [r7, #20]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	4aae      	ldr	r2, [pc, #696]	@ (800443c <UART_SetConfig+0x5bc>)
 8004184:	4293      	cmp	r3, r2
 8004186:	f040 8097 	bne.w	80042b8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800418a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800418e:	2b08      	cmp	r3, #8
 8004190:	d823      	bhi.n	80041da <UART_SetConfig+0x35a>
 8004192:	a201      	add	r2, pc, #4	@ (adr r2, 8004198 <UART_SetConfig+0x318>)
 8004194:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004198:	080041bd 	.word	0x080041bd
 800419c:	080041db 	.word	0x080041db
 80041a0:	080041c5 	.word	0x080041c5
 80041a4:	080041db 	.word	0x080041db
 80041a8:	080041cb 	.word	0x080041cb
 80041ac:	080041db 	.word	0x080041db
 80041b0:	080041db 	.word	0x080041db
 80041b4:	080041db 	.word	0x080041db
 80041b8:	080041d3 	.word	0x080041d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80041bc:	f7ff fac2 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 80041c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041c2:	e010      	b.n	80041e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80041c4:	4b9e      	ldr	r3, [pc, #632]	@ (8004440 <UART_SetConfig+0x5c0>)
 80041c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041c8:	e00d      	b.n	80041e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80041ca:	f7ff fa4d 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 80041ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80041d0:	e009      	b.n	80041e6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80041d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80041d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80041d8:	e005      	b.n	80041e6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80041da:	2300      	movs	r3, #0
 80041dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80041e4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80041e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	f000 8130 	beq.w	800444e <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041f2:	4a94      	ldr	r2, [pc, #592]	@ (8004444 <UART_SetConfig+0x5c4>)
 80041f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80041f8:	461a      	mov	r2, r3
 80041fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8004200:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004202:	697b      	ldr	r3, [r7, #20]
 8004204:	685a      	ldr	r2, [r3, #4]
 8004206:	4613      	mov	r3, r2
 8004208:	005b      	lsls	r3, r3, #1
 800420a:	4413      	add	r3, r2
 800420c:	69ba      	ldr	r2, [r7, #24]
 800420e:	429a      	cmp	r2, r3
 8004210:	d305      	bcc.n	800421e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	429a      	cmp	r2, r3
 800421c:	d903      	bls.n	8004226 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004224:	e113      	b.n	800444e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004228:	2200      	movs	r2, #0
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	60fa      	str	r2, [r7, #12]
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004232:	4a84      	ldr	r2, [pc, #528]	@ (8004444 <UART_SetConfig+0x5c4>)
 8004234:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004238:	b29b      	uxth	r3, r3
 800423a:	2200      	movs	r2, #0
 800423c:	603b      	str	r3, [r7, #0]
 800423e:	607a      	str	r2, [r7, #4]
 8004240:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004244:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004248:	f7fc fd26 	bl	8000c98 <__aeabi_uldivmod>
 800424c:	4602      	mov	r2, r0
 800424e:	460b      	mov	r3, r1
 8004250:	4610      	mov	r0, r2
 8004252:	4619      	mov	r1, r3
 8004254:	f04f 0200 	mov.w	r2, #0
 8004258:	f04f 0300 	mov.w	r3, #0
 800425c:	020b      	lsls	r3, r1, #8
 800425e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004262:	0202      	lsls	r2, r0, #8
 8004264:	6979      	ldr	r1, [r7, #20]
 8004266:	6849      	ldr	r1, [r1, #4]
 8004268:	0849      	lsrs	r1, r1, #1
 800426a:	2000      	movs	r0, #0
 800426c:	460c      	mov	r4, r1
 800426e:	4605      	mov	r5, r0
 8004270:	eb12 0804 	adds.w	r8, r2, r4
 8004274:	eb43 0905 	adc.w	r9, r3, r5
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	2200      	movs	r2, #0
 800427e:	469a      	mov	sl, r3
 8004280:	4693      	mov	fp, r2
 8004282:	4652      	mov	r2, sl
 8004284:	465b      	mov	r3, fp
 8004286:	4640      	mov	r0, r8
 8004288:	4649      	mov	r1, r9
 800428a:	f7fc fd05 	bl	8000c98 <__aeabi_uldivmod>
 800428e:	4602      	mov	r2, r0
 8004290:	460b      	mov	r3, r1
 8004292:	4613      	mov	r3, r2
 8004294:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004296:	6a3b      	ldr	r3, [r7, #32]
 8004298:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800429c:	d308      	bcc.n	80042b0 <UART_SetConfig+0x430>
 800429e:	6a3b      	ldr	r3, [r7, #32]
 80042a0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042a4:	d204      	bcs.n	80042b0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	6a3a      	ldr	r2, [r7, #32]
 80042ac:	60da      	str	r2, [r3, #12]
 80042ae:	e0ce      	b.n	800444e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80042b6:	e0ca      	b.n	800444e <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	69db      	ldr	r3, [r3, #28]
 80042bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042c0:	d166      	bne.n	8004390 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80042c2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80042c6:	2b08      	cmp	r3, #8
 80042c8:	d827      	bhi.n	800431a <UART_SetConfig+0x49a>
 80042ca:	a201      	add	r2, pc, #4	@ (adr r2, 80042d0 <UART_SetConfig+0x450>)
 80042cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042d0:	080042f5 	.word	0x080042f5
 80042d4:	080042fd 	.word	0x080042fd
 80042d8:	08004305 	.word	0x08004305
 80042dc:	0800431b 	.word	0x0800431b
 80042e0:	0800430b 	.word	0x0800430b
 80042e4:	0800431b 	.word	0x0800431b
 80042e8:	0800431b 	.word	0x0800431b
 80042ec:	0800431b 	.word	0x0800431b
 80042f0:	08004313 	.word	0x08004313
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80042f4:	f7ff fa26 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 80042f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80042fa:	e014      	b.n	8004326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80042fc:	f7ff fa38 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 8004300:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004302:	e010      	b.n	8004326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004304:	4b4e      	ldr	r3, [pc, #312]	@ (8004440 <UART_SetConfig+0x5c0>)
 8004306:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004308:	e00d      	b.n	8004326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800430a:	f7ff f9ad 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 800430e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004310:	e009      	b.n	8004326 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004312:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004316:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004318:	e005      	b.n	8004326 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800431a:	2300      	movs	r3, #0
 800431c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004324:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004326:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004328:	2b00      	cmp	r3, #0
 800432a:	f000 8090 	beq.w	800444e <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004332:	4a44      	ldr	r2, [pc, #272]	@ (8004444 <UART_SetConfig+0x5c4>)
 8004334:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004338:	461a      	mov	r2, r3
 800433a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800433c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004340:	005a      	lsls	r2, r3, #1
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	685b      	ldr	r3, [r3, #4]
 8004346:	085b      	lsrs	r3, r3, #1
 8004348:	441a      	add	r2, r3
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	685b      	ldr	r3, [r3, #4]
 800434e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004352:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	2b0f      	cmp	r3, #15
 8004358:	d916      	bls.n	8004388 <UART_SetConfig+0x508>
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004360:	d212      	bcs.n	8004388 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004362:	6a3b      	ldr	r3, [r7, #32]
 8004364:	b29b      	uxth	r3, r3
 8004366:	f023 030f 	bic.w	r3, r3, #15
 800436a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800436c:	6a3b      	ldr	r3, [r7, #32]
 800436e:	085b      	lsrs	r3, r3, #1
 8004370:	b29b      	uxth	r3, r3
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	b29a      	uxth	r2, r3
 8004378:	8bfb      	ldrh	r3, [r7, #30]
 800437a:	4313      	orrs	r3, r2
 800437c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	8bfa      	ldrh	r2, [r7, #30]
 8004384:	60da      	str	r2, [r3, #12]
 8004386:	e062      	b.n	800444e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800438e:	e05e      	b.n	800444e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004390:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004394:	2b08      	cmp	r3, #8
 8004396:	d828      	bhi.n	80043ea <UART_SetConfig+0x56a>
 8004398:	a201      	add	r2, pc, #4	@ (adr r2, 80043a0 <UART_SetConfig+0x520>)
 800439a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800439e:	bf00      	nop
 80043a0:	080043c5 	.word	0x080043c5
 80043a4:	080043cd 	.word	0x080043cd
 80043a8:	080043d5 	.word	0x080043d5
 80043ac:	080043eb 	.word	0x080043eb
 80043b0:	080043db 	.word	0x080043db
 80043b4:	080043eb 	.word	0x080043eb
 80043b8:	080043eb 	.word	0x080043eb
 80043bc:	080043eb 	.word	0x080043eb
 80043c0:	080043e3 	.word	0x080043e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043c4:	f7ff f9be 	bl	8003744 <HAL_RCC_GetPCLK1Freq>
 80043c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043ca:	e014      	b.n	80043f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043cc:	f7ff f9d0 	bl	8003770 <HAL_RCC_GetPCLK2Freq>
 80043d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043d2:	e010      	b.n	80043f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043d4:	4b1a      	ldr	r3, [pc, #104]	@ (8004440 <UART_SetConfig+0x5c0>)
 80043d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043d8:	e00d      	b.n	80043f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043da:	f7ff f945 	bl	8003668 <HAL_RCC_GetSysClockFreq>
 80043de:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80043e0:	e009      	b.n	80043f6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80043e6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80043e8:	e005      	b.n	80043f6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80043ea:	2300      	movs	r3, #0
 80043ec:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80043ee:	2301      	movs	r3, #1
 80043f0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80043f4:	bf00      	nop
    }

    if (pclk != 0U)
 80043f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d028      	beq.n	800444e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004400:	4a10      	ldr	r2, [pc, #64]	@ (8004444 <UART_SetConfig+0x5c4>)
 8004402:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004406:	461a      	mov	r2, r3
 8004408:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800440a:	fbb3 f2f2 	udiv	r2, r3, r2
 800440e:	697b      	ldr	r3, [r7, #20]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	085b      	lsrs	r3, r3, #1
 8004414:	441a      	add	r2, r3
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	fbb2 f3f3 	udiv	r3, r2, r3
 800441e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004420:	6a3b      	ldr	r3, [r7, #32]
 8004422:	2b0f      	cmp	r3, #15
 8004424:	d910      	bls.n	8004448 <UART_SetConfig+0x5c8>
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800442c:	d20c      	bcs.n	8004448 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800442e:	6a3b      	ldr	r3, [r7, #32]
 8004430:	b29a      	uxth	r2, r3
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	60da      	str	r2, [r3, #12]
 8004438:	e009      	b.n	800444e <UART_SetConfig+0x5ce>
 800443a:	bf00      	nop
 800443c:	40008000 	.word	0x40008000
 8004440:	00f42400 	.word	0x00f42400
 8004444:	08007e88 	.word	0x08007e88
      }
      else
      {
        ret = HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	2201      	movs	r2, #1
 8004452:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004456:	697b      	ldr	r3, [r7, #20]
 8004458:	2201      	movs	r2, #1
 800445a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800445e:	697b      	ldr	r3, [r7, #20]
 8004460:	2200      	movs	r2, #0
 8004462:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	2200      	movs	r2, #0
 8004468:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800446a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800446e:	4618      	mov	r0, r3
 8004470:	3730      	adds	r7, #48	@ 0x30
 8004472:	46bd      	mov	sp, r7
 8004474:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004478 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004478:	b480      	push	{r7}
 800447a:	b083      	sub	sp, #12
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b00      	cmp	r3, #0
 800448a:	d00a      	beq.n	80044a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	430a      	orrs	r2, r1
 80044a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d00a      	beq.n	80044e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	430a      	orrs	r2, r1
 80044e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d00a      	beq.n	8004508 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	430a      	orrs	r2, r1
 8004506:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800450c:	f003 0310 	and.w	r3, r3, #16
 8004510:	2b00      	cmp	r3, #0
 8004512:	d00a      	beq.n	800452a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	430a      	orrs	r2, r1
 8004528:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800452e:	f003 0320 	and.w	r3, r3, #32
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	430a      	orrs	r2, r1
 800454a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004550:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004554:	2b00      	cmp	r3, #0
 8004556:	d01a      	beq.n	800458e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	685b      	ldr	r3, [r3, #4]
 800455e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	430a      	orrs	r2, r1
 800456c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004572:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004576:	d10a      	bne.n	800458e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004592:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	605a      	str	r2, [r3, #4]
  }
}
 80045b0:	bf00      	nop
 80045b2:	370c      	adds	r7, #12
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b098      	sub	sp, #96	@ 0x60
 80045c0:	af02      	add	r7, sp, #8
 80045c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045cc:	f7fd fa7a 	bl	8001ac4 <HAL_GetTick>
 80045d0:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f003 0308 	and.w	r3, r3, #8
 80045dc:	2b08      	cmp	r3, #8
 80045de:	d12f      	bne.n	8004640 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045e4:	9300      	str	r3, [sp, #0]
 80045e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045e8:	2200      	movs	r2, #0
 80045ea:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f88e 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d022      	beq.n	8004640 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004602:	e853 3f00 	ldrex	r3, [r3]
 8004606:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800460e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	461a      	mov	r2, r3
 8004616:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004618:	647b      	str	r3, [r7, #68]	@ 0x44
 800461a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800461e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004620:	e841 2300 	strex	r3, r2, [r1]
 8004624:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004626:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004628:	2b00      	cmp	r3, #0
 800462a:	d1e6      	bne.n	80045fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2220      	movs	r2, #32
 8004630:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800463c:	2303      	movs	r3, #3
 800463e:	e063      	b.n	8004708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 0304 	and.w	r3, r3, #4
 800464a:	2b04      	cmp	r3, #4
 800464c:	d149      	bne.n	80046e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800464e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004652:	9300      	str	r3, [sp, #0]
 8004654:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004656:	2200      	movs	r2, #0
 8004658:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f000 f857 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d03c      	beq.n	80046e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004670:	e853 3f00 	ldrex	r3, [r3]
 8004674:	623b      	str	r3, [r7, #32]
   return(result);
 8004676:	6a3b      	ldr	r3, [r7, #32]
 8004678:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800467c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	461a      	mov	r2, r3
 8004684:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004686:	633b      	str	r3, [r7, #48]	@ 0x30
 8004688:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800468c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e6      	bne.n	8004668 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	3308      	adds	r3, #8
 80046a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	e853 3f00 	ldrex	r3, [r3]
 80046a8:	60fb      	str	r3, [r7, #12]
   return(result);
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	f023 0301 	bic.w	r3, r3, #1
 80046b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	3308      	adds	r3, #8
 80046b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046ba:	61fa      	str	r2, [r7, #28]
 80046bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	69b9      	ldr	r1, [r7, #24]
 80046c0:	69fa      	ldr	r2, [r7, #28]
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	617b      	str	r3, [r7, #20]
   return(result);
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e5      	bne.n	800469a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e012      	b.n	8004708 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	2220      	movs	r2, #32
 80046e6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3758      	adds	r7, #88	@ 0x58
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004720:	e04f      	b.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004728:	d04b      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472a:	f7fd f9cb 	bl	8001ac4 <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <UART_WaitOnFlagUntilTimeout+0x30>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e04e      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d037      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b80      	cmp	r3, #128	@ 0x80
 8004756:	d034      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b40      	cmp	r3, #64	@ 0x40
 800475c:	d031      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b08      	cmp	r3, #8
 800476a:	d110      	bne.n	800478e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2208      	movs	r2, #8
 8004772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f838 	bl	80047ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2208      	movs	r2, #8
 800477e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e029      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800479c:	d111      	bne.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f81e 	bl	80047ea <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e00f      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4013      	ands	r3, r2
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	bf0c      	ite	eq
 80047d2:	2301      	moveq	r3, #1
 80047d4:	2300      	movne	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d0a0      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047ea:	b480      	push	{r7}
 80047ec:	b095      	sub	sp, #84	@ 0x54
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80047fa:	e853 3f00 	ldrex	r3, [r3]
 80047fe:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004802:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004806:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	461a      	mov	r2, r3
 800480e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004810:	643b      	str	r3, [r7, #64]	@ 0x40
 8004812:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004816:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800481e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e6      	bne.n	80047f2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	3308      	adds	r3, #8
 800482a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800482c:	6a3b      	ldr	r3, [r7, #32]
 800482e:	e853 3f00 	ldrex	r3, [r3]
 8004832:	61fb      	str	r3, [r7, #28]
   return(result);
 8004834:	69fb      	ldr	r3, [r7, #28]
 8004836:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800483a:	f023 0301 	bic.w	r3, r3, #1
 800483e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3308      	adds	r3, #8
 8004846:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004848:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800484a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800484c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800484e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004850:	e841 2300 	strex	r3, r2, [r1]
 8004854:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004858:	2b00      	cmp	r3, #0
 800485a:	d1e3      	bne.n	8004824 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004860:	2b01      	cmp	r3, #1
 8004862:	d118      	bne.n	8004896 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	e853 3f00 	ldrex	r3, [r3]
 8004870:	60bb      	str	r3, [r7, #8]
   return(result);
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f023 0310 	bic.w	r3, r3, #16
 8004878:	647b      	str	r3, [r7, #68]	@ 0x44
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	461a      	mov	r2, r3
 8004880:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004882:	61bb      	str	r3, [r7, #24]
 8004884:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004886:	6979      	ldr	r1, [r7, #20]
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	613b      	str	r3, [r7, #16]
   return(result);
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d1e6      	bne.n	8004864 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2220      	movs	r2, #32
 800489a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80048aa:	bf00      	nop
 80048ac:	3754      	adds	r7, #84	@ 0x54
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr

080048b6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80048b6:	b480      	push	{r7}
 80048b8:	b085      	sub	sp, #20
 80048ba:	af00      	add	r7, sp, #0
 80048bc:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d101      	bne.n	80048cc <HAL_UARTEx_DisableFifoMode+0x16>
 80048c8:	2302      	movs	r3, #2
 80048ca:	e027      	b.n	800491c <HAL_UARTEx_DisableFifoMode+0x66>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2224      	movs	r2, #36	@ 0x24
 80048d8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	681a      	ldr	r2, [r3, #0]
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	f022 0201 	bic.w	r2, r2, #1
 80048f2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80048fa:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68fa      	ldr	r2, [r7, #12]
 8004908:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2220      	movs	r2, #32
 800490e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800491a:	2300      	movs	r3, #0
}
 800491c:	4618      	mov	r0, r3
 800491e:	3714      	adds	r7, #20
 8004920:	46bd      	mov	sp, r7
 8004922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004926:	4770      	bx	lr

08004928 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b084      	sub	sp, #16
 800492c:	af00      	add	r7, sp, #0
 800492e:	6078      	str	r0, [r7, #4]
 8004930:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8004938:	2b01      	cmp	r3, #1
 800493a:	d101      	bne.n	8004940 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800493c:	2302      	movs	r3, #2
 800493e:	e02d      	b.n	800499c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	2201      	movs	r2, #1
 8004944:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2224      	movs	r2, #36	@ 0x24
 800494c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	f022 0201 	bic.w	r2, r2, #1
 8004966:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	683a      	ldr	r2, [r7, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f000 f84f 	bl	8004a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68fa      	ldr	r2, [r7, #12]
 8004988:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	2220      	movs	r2, #32
 800498e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800499a:	2300      	movs	r3, #0
}
 800499c:	4618      	mov	r0, r3
 800499e:	3710      	adds	r7, #16
 80049a0:	46bd      	mov	sp, r7
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b084      	sub	sp, #16
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
 80049ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d101      	bne.n	80049bc <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80049b8:	2302      	movs	r3, #2
 80049ba:	e02d      	b.n	8004a18 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2224      	movs	r2, #36	@ 0x24
 80049c8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0201 	bic.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	689b      	ldr	r3, [r3, #8]
 80049ea:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	683a      	ldr	r2, [r7, #0]
 80049f4:	430a      	orrs	r2, r1
 80049f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f000 f811 	bl	8004a20 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2220      	movs	r2, #32
 8004a0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	2200      	movs	r2, #0
 8004a12:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8004a16:	2300      	movs	r3, #0
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	3710      	adds	r7, #16
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	bd80      	pop	{r7, pc}

08004a20 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004a20:	b480      	push	{r7}
 8004a22:	b085      	sub	sp, #20
 8004a24:	af00      	add	r7, sp, #0
 8004a26:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d108      	bne.n	8004a42 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2201      	movs	r2, #1
 8004a34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004a40:	e031      	b.n	8004aa6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004a42:	2308      	movs	r3, #8
 8004a44:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004a46:	2308      	movs	r3, #8
 8004a48:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	0e5b      	lsrs	r3, r3, #25
 8004a52:	b2db      	uxtb	r3, r3
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	689b      	ldr	r3, [r3, #8]
 8004a60:	0f5b      	lsrs	r3, r3, #29
 8004a62:	b2db      	uxtb	r3, r3
 8004a64:	f003 0307 	and.w	r3, r3, #7
 8004a68:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a6a:	7bbb      	ldrb	r3, [r7, #14]
 8004a6c:	7b3a      	ldrb	r2, [r7, #12]
 8004a6e:	4911      	ldr	r1, [pc, #68]	@ (8004ab4 <UARTEx_SetNbDataToProcess+0x94>)
 8004a70:	5c8a      	ldrb	r2, [r1, r2]
 8004a72:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8004a76:	7b3a      	ldrb	r2, [r7, #12]
 8004a78:	490f      	ldr	r1, [pc, #60]	@ (8004ab8 <UARTEx_SetNbDataToProcess+0x98>)
 8004a7a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004a7c:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a80:	b29a      	uxth	r2, r3
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a88:	7bfb      	ldrb	r3, [r7, #15]
 8004a8a:	7b7a      	ldrb	r2, [r7, #13]
 8004a8c:	4909      	ldr	r1, [pc, #36]	@ (8004ab4 <UARTEx_SetNbDataToProcess+0x94>)
 8004a8e:	5c8a      	ldrb	r2, [r1, r2]
 8004a90:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8004a94:	7b7a      	ldrb	r2, [r7, #13]
 8004a96:	4908      	ldr	r1, [pc, #32]	@ (8004ab8 <UARTEx_SetNbDataToProcess+0x98>)
 8004a98:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004a9a:	fb93 f3f2 	sdiv	r3, r3, r2
 8004a9e:	b29a      	uxth	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8004aa6:	bf00      	nop
 8004aa8:	3714      	adds	r7, #20
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab0:	4770      	bx	lr
 8004ab2:	bf00      	nop
 8004ab4:	08007ea0 	.word	0x08007ea0
 8004ab8:	08007ea8 	.word	0x08007ea8

08004abc <__cvt>:
 8004abc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac0:	ec57 6b10 	vmov	r6, r7, d0
 8004ac4:	2f00      	cmp	r7, #0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	4619      	mov	r1, r3
 8004aca:	463b      	mov	r3, r7
 8004acc:	bfbb      	ittet	lt
 8004ace:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004ad2:	461f      	movlt	r7, r3
 8004ad4:	2300      	movge	r3, #0
 8004ad6:	232d      	movlt	r3, #45	@ 0x2d
 8004ad8:	700b      	strb	r3, [r1, #0]
 8004ada:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004adc:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004ae0:	4691      	mov	r9, r2
 8004ae2:	f023 0820 	bic.w	r8, r3, #32
 8004ae6:	bfbc      	itt	lt
 8004ae8:	4632      	movlt	r2, r6
 8004aea:	4616      	movlt	r6, r2
 8004aec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004af0:	d005      	beq.n	8004afe <__cvt+0x42>
 8004af2:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004af6:	d100      	bne.n	8004afa <__cvt+0x3e>
 8004af8:	3401      	adds	r4, #1
 8004afa:	2102      	movs	r1, #2
 8004afc:	e000      	b.n	8004b00 <__cvt+0x44>
 8004afe:	2103      	movs	r1, #3
 8004b00:	ab03      	add	r3, sp, #12
 8004b02:	9301      	str	r3, [sp, #4]
 8004b04:	ab02      	add	r3, sp, #8
 8004b06:	9300      	str	r3, [sp, #0]
 8004b08:	ec47 6b10 	vmov	d0, r6, r7
 8004b0c:	4653      	mov	r3, sl
 8004b0e:	4622      	mov	r2, r4
 8004b10:	f000 fe6e 	bl	80057f0 <_dtoa_r>
 8004b14:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004b18:	4605      	mov	r5, r0
 8004b1a:	d119      	bne.n	8004b50 <__cvt+0x94>
 8004b1c:	f019 0f01 	tst.w	r9, #1
 8004b20:	d00e      	beq.n	8004b40 <__cvt+0x84>
 8004b22:	eb00 0904 	add.w	r9, r0, r4
 8004b26:	2200      	movs	r2, #0
 8004b28:	2300      	movs	r3, #0
 8004b2a:	4630      	mov	r0, r6
 8004b2c:	4639      	mov	r1, r7
 8004b2e:	f7fb fff3 	bl	8000b18 <__aeabi_dcmpeq>
 8004b32:	b108      	cbz	r0, 8004b38 <__cvt+0x7c>
 8004b34:	f8cd 900c 	str.w	r9, [sp, #12]
 8004b38:	2230      	movs	r2, #48	@ 0x30
 8004b3a:	9b03      	ldr	r3, [sp, #12]
 8004b3c:	454b      	cmp	r3, r9
 8004b3e:	d31e      	bcc.n	8004b7e <__cvt+0xc2>
 8004b40:	9b03      	ldr	r3, [sp, #12]
 8004b42:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004b44:	1b5b      	subs	r3, r3, r5
 8004b46:	4628      	mov	r0, r5
 8004b48:	6013      	str	r3, [r2, #0]
 8004b4a:	b004      	add	sp, #16
 8004b4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b50:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004b54:	eb00 0904 	add.w	r9, r0, r4
 8004b58:	d1e5      	bne.n	8004b26 <__cvt+0x6a>
 8004b5a:	7803      	ldrb	r3, [r0, #0]
 8004b5c:	2b30      	cmp	r3, #48	@ 0x30
 8004b5e:	d10a      	bne.n	8004b76 <__cvt+0xba>
 8004b60:	2200      	movs	r2, #0
 8004b62:	2300      	movs	r3, #0
 8004b64:	4630      	mov	r0, r6
 8004b66:	4639      	mov	r1, r7
 8004b68:	f7fb ffd6 	bl	8000b18 <__aeabi_dcmpeq>
 8004b6c:	b918      	cbnz	r0, 8004b76 <__cvt+0xba>
 8004b6e:	f1c4 0401 	rsb	r4, r4, #1
 8004b72:	f8ca 4000 	str.w	r4, [sl]
 8004b76:	f8da 3000 	ldr.w	r3, [sl]
 8004b7a:	4499      	add	r9, r3
 8004b7c:	e7d3      	b.n	8004b26 <__cvt+0x6a>
 8004b7e:	1c59      	adds	r1, r3, #1
 8004b80:	9103      	str	r1, [sp, #12]
 8004b82:	701a      	strb	r2, [r3, #0]
 8004b84:	e7d9      	b.n	8004b3a <__cvt+0x7e>

08004b86 <__exponent>:
 8004b86:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004b88:	2900      	cmp	r1, #0
 8004b8a:	bfba      	itte	lt
 8004b8c:	4249      	neglt	r1, r1
 8004b8e:	232d      	movlt	r3, #45	@ 0x2d
 8004b90:	232b      	movge	r3, #43	@ 0x2b
 8004b92:	2909      	cmp	r1, #9
 8004b94:	7002      	strb	r2, [r0, #0]
 8004b96:	7043      	strb	r3, [r0, #1]
 8004b98:	dd29      	ble.n	8004bee <__exponent+0x68>
 8004b9a:	f10d 0307 	add.w	r3, sp, #7
 8004b9e:	461d      	mov	r5, r3
 8004ba0:	270a      	movs	r7, #10
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ba8:	fb07 1416 	mls	r4, r7, r6, r1
 8004bac:	3430      	adds	r4, #48	@ 0x30
 8004bae:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004bb2:	460c      	mov	r4, r1
 8004bb4:	2c63      	cmp	r4, #99	@ 0x63
 8004bb6:	f103 33ff 	add.w	r3, r3, #4294967295
 8004bba:	4631      	mov	r1, r6
 8004bbc:	dcf1      	bgt.n	8004ba2 <__exponent+0x1c>
 8004bbe:	3130      	adds	r1, #48	@ 0x30
 8004bc0:	1e94      	subs	r4, r2, #2
 8004bc2:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004bc6:	1c41      	adds	r1, r0, #1
 8004bc8:	4623      	mov	r3, r4
 8004bca:	42ab      	cmp	r3, r5
 8004bcc:	d30a      	bcc.n	8004be4 <__exponent+0x5e>
 8004bce:	f10d 0309 	add.w	r3, sp, #9
 8004bd2:	1a9b      	subs	r3, r3, r2
 8004bd4:	42ac      	cmp	r4, r5
 8004bd6:	bf88      	it	hi
 8004bd8:	2300      	movhi	r3, #0
 8004bda:	3302      	adds	r3, #2
 8004bdc:	4403      	add	r3, r0
 8004bde:	1a18      	subs	r0, r3, r0
 8004be0:	b003      	add	sp, #12
 8004be2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004be4:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004be8:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004bec:	e7ed      	b.n	8004bca <__exponent+0x44>
 8004bee:	2330      	movs	r3, #48	@ 0x30
 8004bf0:	3130      	adds	r1, #48	@ 0x30
 8004bf2:	7083      	strb	r3, [r0, #2]
 8004bf4:	70c1      	strb	r1, [r0, #3]
 8004bf6:	1d03      	adds	r3, r0, #4
 8004bf8:	e7f1      	b.n	8004bde <__exponent+0x58>
	...

08004bfc <_printf_float>:
 8004bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c00:	b08d      	sub	sp, #52	@ 0x34
 8004c02:	460c      	mov	r4, r1
 8004c04:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004c08:	4616      	mov	r6, r2
 8004c0a:	461f      	mov	r7, r3
 8004c0c:	4605      	mov	r5, r0
 8004c0e:	f000 fcef 	bl	80055f0 <_localeconv_r>
 8004c12:	6803      	ldr	r3, [r0, #0]
 8004c14:	9304      	str	r3, [sp, #16]
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fb fb52 	bl	80002c0 <strlen>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004c20:	f8d8 3000 	ldr.w	r3, [r8]
 8004c24:	9005      	str	r0, [sp, #20]
 8004c26:	3307      	adds	r3, #7
 8004c28:	f023 0307 	bic.w	r3, r3, #7
 8004c2c:	f103 0208 	add.w	r2, r3, #8
 8004c30:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004c34:	f8d4 b000 	ldr.w	fp, [r4]
 8004c38:	f8c8 2000 	str.w	r2, [r8]
 8004c3c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004c40:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004c44:	9307      	str	r3, [sp, #28]
 8004c46:	f8cd 8018 	str.w	r8, [sp, #24]
 8004c4a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004c4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c52:	4b9c      	ldr	r3, [pc, #624]	@ (8004ec4 <_printf_float+0x2c8>)
 8004c54:	f04f 32ff 	mov.w	r2, #4294967295
 8004c58:	f7fb ff90 	bl	8000b7c <__aeabi_dcmpun>
 8004c5c:	bb70      	cbnz	r0, 8004cbc <_printf_float+0xc0>
 8004c5e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c62:	4b98      	ldr	r3, [pc, #608]	@ (8004ec4 <_printf_float+0x2c8>)
 8004c64:	f04f 32ff 	mov.w	r2, #4294967295
 8004c68:	f7fb ff6a 	bl	8000b40 <__aeabi_dcmple>
 8004c6c:	bb30      	cbnz	r0, 8004cbc <_printf_float+0xc0>
 8004c6e:	2200      	movs	r2, #0
 8004c70:	2300      	movs	r3, #0
 8004c72:	4640      	mov	r0, r8
 8004c74:	4649      	mov	r1, r9
 8004c76:	f7fb ff59 	bl	8000b2c <__aeabi_dcmplt>
 8004c7a:	b110      	cbz	r0, 8004c82 <_printf_float+0x86>
 8004c7c:	232d      	movs	r3, #45	@ 0x2d
 8004c7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c82:	4a91      	ldr	r2, [pc, #580]	@ (8004ec8 <_printf_float+0x2cc>)
 8004c84:	4b91      	ldr	r3, [pc, #580]	@ (8004ecc <_printf_float+0x2d0>)
 8004c86:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004c8a:	bf94      	ite	ls
 8004c8c:	4690      	movls	r8, r2
 8004c8e:	4698      	movhi	r8, r3
 8004c90:	2303      	movs	r3, #3
 8004c92:	6123      	str	r3, [r4, #16]
 8004c94:	f02b 0304 	bic.w	r3, fp, #4
 8004c98:	6023      	str	r3, [r4, #0]
 8004c9a:	f04f 0900 	mov.w	r9, #0
 8004c9e:	9700      	str	r7, [sp, #0]
 8004ca0:	4633      	mov	r3, r6
 8004ca2:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004ca4:	4621      	mov	r1, r4
 8004ca6:	4628      	mov	r0, r5
 8004ca8:	f000 f9d2 	bl	8005050 <_printf_common>
 8004cac:	3001      	adds	r0, #1
 8004cae:	f040 808d 	bne.w	8004dcc <_printf_float+0x1d0>
 8004cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8004cb6:	b00d      	add	sp, #52	@ 0x34
 8004cb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cbc:	4642      	mov	r2, r8
 8004cbe:	464b      	mov	r3, r9
 8004cc0:	4640      	mov	r0, r8
 8004cc2:	4649      	mov	r1, r9
 8004cc4:	f7fb ff5a 	bl	8000b7c <__aeabi_dcmpun>
 8004cc8:	b140      	cbz	r0, 8004cdc <_printf_float+0xe0>
 8004cca:	464b      	mov	r3, r9
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	bfbc      	itt	lt
 8004cd0:	232d      	movlt	r3, #45	@ 0x2d
 8004cd2:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ed0 <_printf_float+0x2d4>)
 8004cd8:	4b7e      	ldr	r3, [pc, #504]	@ (8004ed4 <_printf_float+0x2d8>)
 8004cda:	e7d4      	b.n	8004c86 <_printf_float+0x8a>
 8004cdc:	6863      	ldr	r3, [r4, #4]
 8004cde:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004ce2:	9206      	str	r2, [sp, #24]
 8004ce4:	1c5a      	adds	r2, r3, #1
 8004ce6:	d13b      	bne.n	8004d60 <_printf_float+0x164>
 8004ce8:	2306      	movs	r3, #6
 8004cea:	6063      	str	r3, [r4, #4]
 8004cec:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	6022      	str	r2, [r4, #0]
 8004cf4:	9303      	str	r3, [sp, #12]
 8004cf6:	ab0a      	add	r3, sp, #40	@ 0x28
 8004cf8:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004cfc:	ab09      	add	r3, sp, #36	@ 0x24
 8004cfe:	9300      	str	r3, [sp, #0]
 8004d00:	6861      	ldr	r1, [r4, #4]
 8004d02:	ec49 8b10 	vmov	d0, r8, r9
 8004d06:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004d0a:	4628      	mov	r0, r5
 8004d0c:	f7ff fed6 	bl	8004abc <__cvt>
 8004d10:	9b06      	ldr	r3, [sp, #24]
 8004d12:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004d14:	2b47      	cmp	r3, #71	@ 0x47
 8004d16:	4680      	mov	r8, r0
 8004d18:	d129      	bne.n	8004d6e <_printf_float+0x172>
 8004d1a:	1cc8      	adds	r0, r1, #3
 8004d1c:	db02      	blt.n	8004d24 <_printf_float+0x128>
 8004d1e:	6863      	ldr	r3, [r4, #4]
 8004d20:	4299      	cmp	r1, r3
 8004d22:	dd41      	ble.n	8004da8 <_printf_float+0x1ac>
 8004d24:	f1aa 0a02 	sub.w	sl, sl, #2
 8004d28:	fa5f fa8a 	uxtb.w	sl, sl
 8004d2c:	3901      	subs	r1, #1
 8004d2e:	4652      	mov	r2, sl
 8004d30:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004d34:	9109      	str	r1, [sp, #36]	@ 0x24
 8004d36:	f7ff ff26 	bl	8004b86 <__exponent>
 8004d3a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004d3c:	1813      	adds	r3, r2, r0
 8004d3e:	2a01      	cmp	r2, #1
 8004d40:	4681      	mov	r9, r0
 8004d42:	6123      	str	r3, [r4, #16]
 8004d44:	dc02      	bgt.n	8004d4c <_printf_float+0x150>
 8004d46:	6822      	ldr	r2, [r4, #0]
 8004d48:	07d2      	lsls	r2, r2, #31
 8004d4a:	d501      	bpl.n	8004d50 <_printf_float+0x154>
 8004d4c:	3301      	adds	r3, #1
 8004d4e:	6123      	str	r3, [r4, #16]
 8004d50:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d0a2      	beq.n	8004c9e <_printf_float+0xa2>
 8004d58:	232d      	movs	r3, #45	@ 0x2d
 8004d5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d5e:	e79e      	b.n	8004c9e <_printf_float+0xa2>
 8004d60:	9a06      	ldr	r2, [sp, #24]
 8004d62:	2a47      	cmp	r2, #71	@ 0x47
 8004d64:	d1c2      	bne.n	8004cec <_printf_float+0xf0>
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d1c0      	bne.n	8004cec <_printf_float+0xf0>
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e7bd      	b.n	8004cea <_printf_float+0xee>
 8004d6e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004d72:	d9db      	bls.n	8004d2c <_printf_float+0x130>
 8004d74:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004d78:	d118      	bne.n	8004dac <_printf_float+0x1b0>
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	6863      	ldr	r3, [r4, #4]
 8004d7e:	dd0b      	ble.n	8004d98 <_printf_float+0x19c>
 8004d80:	6121      	str	r1, [r4, #16]
 8004d82:	b913      	cbnz	r3, 8004d8a <_printf_float+0x18e>
 8004d84:	6822      	ldr	r2, [r4, #0]
 8004d86:	07d0      	lsls	r0, r2, #31
 8004d88:	d502      	bpl.n	8004d90 <_printf_float+0x194>
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	440b      	add	r3, r1
 8004d8e:	6123      	str	r3, [r4, #16]
 8004d90:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004d92:	f04f 0900 	mov.w	r9, #0
 8004d96:	e7db      	b.n	8004d50 <_printf_float+0x154>
 8004d98:	b913      	cbnz	r3, 8004da0 <_printf_float+0x1a4>
 8004d9a:	6822      	ldr	r2, [r4, #0]
 8004d9c:	07d2      	lsls	r2, r2, #31
 8004d9e:	d501      	bpl.n	8004da4 <_printf_float+0x1a8>
 8004da0:	3302      	adds	r3, #2
 8004da2:	e7f4      	b.n	8004d8e <_printf_float+0x192>
 8004da4:	2301      	movs	r3, #1
 8004da6:	e7f2      	b.n	8004d8e <_printf_float+0x192>
 8004da8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004dac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004dae:	4299      	cmp	r1, r3
 8004db0:	db05      	blt.n	8004dbe <_printf_float+0x1c2>
 8004db2:	6823      	ldr	r3, [r4, #0]
 8004db4:	6121      	str	r1, [r4, #16]
 8004db6:	07d8      	lsls	r0, r3, #31
 8004db8:	d5ea      	bpl.n	8004d90 <_printf_float+0x194>
 8004dba:	1c4b      	adds	r3, r1, #1
 8004dbc:	e7e7      	b.n	8004d8e <_printf_float+0x192>
 8004dbe:	2900      	cmp	r1, #0
 8004dc0:	bfd4      	ite	le
 8004dc2:	f1c1 0202 	rsble	r2, r1, #2
 8004dc6:	2201      	movgt	r2, #1
 8004dc8:	4413      	add	r3, r2
 8004dca:	e7e0      	b.n	8004d8e <_printf_float+0x192>
 8004dcc:	6823      	ldr	r3, [r4, #0]
 8004dce:	055a      	lsls	r2, r3, #21
 8004dd0:	d407      	bmi.n	8004de2 <_printf_float+0x1e6>
 8004dd2:	6923      	ldr	r3, [r4, #16]
 8004dd4:	4642      	mov	r2, r8
 8004dd6:	4631      	mov	r1, r6
 8004dd8:	4628      	mov	r0, r5
 8004dda:	47b8      	blx	r7
 8004ddc:	3001      	adds	r0, #1
 8004dde:	d12b      	bne.n	8004e38 <_printf_float+0x23c>
 8004de0:	e767      	b.n	8004cb2 <_printf_float+0xb6>
 8004de2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004de6:	f240 80dd 	bls.w	8004fa4 <_printf_float+0x3a8>
 8004dea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004dee:	2200      	movs	r2, #0
 8004df0:	2300      	movs	r3, #0
 8004df2:	f7fb fe91 	bl	8000b18 <__aeabi_dcmpeq>
 8004df6:	2800      	cmp	r0, #0
 8004df8:	d033      	beq.n	8004e62 <_printf_float+0x266>
 8004dfa:	4a37      	ldr	r2, [pc, #220]	@ (8004ed8 <_printf_float+0x2dc>)
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	4631      	mov	r1, r6
 8004e00:	4628      	mov	r0, r5
 8004e02:	47b8      	blx	r7
 8004e04:	3001      	adds	r0, #1
 8004e06:	f43f af54 	beq.w	8004cb2 <_printf_float+0xb6>
 8004e0a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004e0e:	4543      	cmp	r3, r8
 8004e10:	db02      	blt.n	8004e18 <_printf_float+0x21c>
 8004e12:	6823      	ldr	r3, [r4, #0]
 8004e14:	07d8      	lsls	r0, r3, #31
 8004e16:	d50f      	bpl.n	8004e38 <_printf_float+0x23c>
 8004e18:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e1c:	4631      	mov	r1, r6
 8004e1e:	4628      	mov	r0, r5
 8004e20:	47b8      	blx	r7
 8004e22:	3001      	adds	r0, #1
 8004e24:	f43f af45 	beq.w	8004cb2 <_printf_float+0xb6>
 8004e28:	f04f 0900 	mov.w	r9, #0
 8004e2c:	f108 38ff 	add.w	r8, r8, #4294967295
 8004e30:	f104 0a1a 	add.w	sl, r4, #26
 8004e34:	45c8      	cmp	r8, r9
 8004e36:	dc09      	bgt.n	8004e4c <_printf_float+0x250>
 8004e38:	6823      	ldr	r3, [r4, #0]
 8004e3a:	079b      	lsls	r3, r3, #30
 8004e3c:	f100 8103 	bmi.w	8005046 <_printf_float+0x44a>
 8004e40:	68e0      	ldr	r0, [r4, #12]
 8004e42:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004e44:	4298      	cmp	r0, r3
 8004e46:	bfb8      	it	lt
 8004e48:	4618      	movlt	r0, r3
 8004e4a:	e734      	b.n	8004cb6 <_printf_float+0xba>
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	4652      	mov	r2, sl
 8004e50:	4631      	mov	r1, r6
 8004e52:	4628      	mov	r0, r5
 8004e54:	47b8      	blx	r7
 8004e56:	3001      	adds	r0, #1
 8004e58:	f43f af2b 	beq.w	8004cb2 <_printf_float+0xb6>
 8004e5c:	f109 0901 	add.w	r9, r9, #1
 8004e60:	e7e8      	b.n	8004e34 <_printf_float+0x238>
 8004e62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	dc39      	bgt.n	8004edc <_printf_float+0x2e0>
 8004e68:	4a1b      	ldr	r2, [pc, #108]	@ (8004ed8 <_printf_float+0x2dc>)
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	4631      	mov	r1, r6
 8004e6e:	4628      	mov	r0, r5
 8004e70:	47b8      	blx	r7
 8004e72:	3001      	adds	r0, #1
 8004e74:	f43f af1d 	beq.w	8004cb2 <_printf_float+0xb6>
 8004e78:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004e7c:	ea59 0303 	orrs.w	r3, r9, r3
 8004e80:	d102      	bne.n	8004e88 <_printf_float+0x28c>
 8004e82:	6823      	ldr	r3, [r4, #0]
 8004e84:	07d9      	lsls	r1, r3, #31
 8004e86:	d5d7      	bpl.n	8004e38 <_printf_float+0x23c>
 8004e88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004e8c:	4631      	mov	r1, r6
 8004e8e:	4628      	mov	r0, r5
 8004e90:	47b8      	blx	r7
 8004e92:	3001      	adds	r0, #1
 8004e94:	f43f af0d 	beq.w	8004cb2 <_printf_float+0xb6>
 8004e98:	f04f 0a00 	mov.w	sl, #0
 8004e9c:	f104 0b1a 	add.w	fp, r4, #26
 8004ea0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ea2:	425b      	negs	r3, r3
 8004ea4:	4553      	cmp	r3, sl
 8004ea6:	dc01      	bgt.n	8004eac <_printf_float+0x2b0>
 8004ea8:	464b      	mov	r3, r9
 8004eaa:	e793      	b.n	8004dd4 <_printf_float+0x1d8>
 8004eac:	2301      	movs	r3, #1
 8004eae:	465a      	mov	r2, fp
 8004eb0:	4631      	mov	r1, r6
 8004eb2:	4628      	mov	r0, r5
 8004eb4:	47b8      	blx	r7
 8004eb6:	3001      	adds	r0, #1
 8004eb8:	f43f aefb 	beq.w	8004cb2 <_printf_float+0xb6>
 8004ebc:	f10a 0a01 	add.w	sl, sl, #1
 8004ec0:	e7ee      	b.n	8004ea0 <_printf_float+0x2a4>
 8004ec2:	bf00      	nop
 8004ec4:	7fefffff 	.word	0x7fefffff
 8004ec8:	08007eb0 	.word	0x08007eb0
 8004ecc:	08007eb4 	.word	0x08007eb4
 8004ed0:	08007eb8 	.word	0x08007eb8
 8004ed4:	08007ebc 	.word	0x08007ebc
 8004ed8:	08007ec0 	.word	0x08007ec0
 8004edc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ede:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004ee2:	4553      	cmp	r3, sl
 8004ee4:	bfa8      	it	ge
 8004ee6:	4653      	movge	r3, sl
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	4699      	mov	r9, r3
 8004eec:	dc36      	bgt.n	8004f5c <_printf_float+0x360>
 8004eee:	f04f 0b00 	mov.w	fp, #0
 8004ef2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ef6:	f104 021a 	add.w	r2, r4, #26
 8004efa:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004efc:	9306      	str	r3, [sp, #24]
 8004efe:	eba3 0309 	sub.w	r3, r3, r9
 8004f02:	455b      	cmp	r3, fp
 8004f04:	dc31      	bgt.n	8004f6a <_printf_float+0x36e>
 8004f06:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f08:	459a      	cmp	sl, r3
 8004f0a:	dc3a      	bgt.n	8004f82 <_printf_float+0x386>
 8004f0c:	6823      	ldr	r3, [r4, #0]
 8004f0e:	07da      	lsls	r2, r3, #31
 8004f10:	d437      	bmi.n	8004f82 <_printf_float+0x386>
 8004f12:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f14:	ebaa 0903 	sub.w	r9, sl, r3
 8004f18:	9b06      	ldr	r3, [sp, #24]
 8004f1a:	ebaa 0303 	sub.w	r3, sl, r3
 8004f1e:	4599      	cmp	r9, r3
 8004f20:	bfa8      	it	ge
 8004f22:	4699      	movge	r9, r3
 8004f24:	f1b9 0f00 	cmp.w	r9, #0
 8004f28:	dc33      	bgt.n	8004f92 <_printf_float+0x396>
 8004f2a:	f04f 0800 	mov.w	r8, #0
 8004f2e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004f32:	f104 0b1a 	add.w	fp, r4, #26
 8004f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f38:	ebaa 0303 	sub.w	r3, sl, r3
 8004f3c:	eba3 0309 	sub.w	r3, r3, r9
 8004f40:	4543      	cmp	r3, r8
 8004f42:	f77f af79 	ble.w	8004e38 <_printf_float+0x23c>
 8004f46:	2301      	movs	r3, #1
 8004f48:	465a      	mov	r2, fp
 8004f4a:	4631      	mov	r1, r6
 8004f4c:	4628      	mov	r0, r5
 8004f4e:	47b8      	blx	r7
 8004f50:	3001      	adds	r0, #1
 8004f52:	f43f aeae 	beq.w	8004cb2 <_printf_float+0xb6>
 8004f56:	f108 0801 	add.w	r8, r8, #1
 8004f5a:	e7ec      	b.n	8004f36 <_printf_float+0x33a>
 8004f5c:	4642      	mov	r2, r8
 8004f5e:	4631      	mov	r1, r6
 8004f60:	4628      	mov	r0, r5
 8004f62:	47b8      	blx	r7
 8004f64:	3001      	adds	r0, #1
 8004f66:	d1c2      	bne.n	8004eee <_printf_float+0x2f2>
 8004f68:	e6a3      	b.n	8004cb2 <_printf_float+0xb6>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	4631      	mov	r1, r6
 8004f6e:	4628      	mov	r0, r5
 8004f70:	9206      	str	r2, [sp, #24]
 8004f72:	47b8      	blx	r7
 8004f74:	3001      	adds	r0, #1
 8004f76:	f43f ae9c 	beq.w	8004cb2 <_printf_float+0xb6>
 8004f7a:	9a06      	ldr	r2, [sp, #24]
 8004f7c:	f10b 0b01 	add.w	fp, fp, #1
 8004f80:	e7bb      	b.n	8004efa <_printf_float+0x2fe>
 8004f82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f86:	4631      	mov	r1, r6
 8004f88:	4628      	mov	r0, r5
 8004f8a:	47b8      	blx	r7
 8004f8c:	3001      	adds	r0, #1
 8004f8e:	d1c0      	bne.n	8004f12 <_printf_float+0x316>
 8004f90:	e68f      	b.n	8004cb2 <_printf_float+0xb6>
 8004f92:	9a06      	ldr	r2, [sp, #24]
 8004f94:	464b      	mov	r3, r9
 8004f96:	4442      	add	r2, r8
 8004f98:	4631      	mov	r1, r6
 8004f9a:	4628      	mov	r0, r5
 8004f9c:	47b8      	blx	r7
 8004f9e:	3001      	adds	r0, #1
 8004fa0:	d1c3      	bne.n	8004f2a <_printf_float+0x32e>
 8004fa2:	e686      	b.n	8004cb2 <_printf_float+0xb6>
 8004fa4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004fa8:	f1ba 0f01 	cmp.w	sl, #1
 8004fac:	dc01      	bgt.n	8004fb2 <_printf_float+0x3b6>
 8004fae:	07db      	lsls	r3, r3, #31
 8004fb0:	d536      	bpl.n	8005020 <_printf_float+0x424>
 8004fb2:	2301      	movs	r3, #1
 8004fb4:	4642      	mov	r2, r8
 8004fb6:	4631      	mov	r1, r6
 8004fb8:	4628      	mov	r0, r5
 8004fba:	47b8      	blx	r7
 8004fbc:	3001      	adds	r0, #1
 8004fbe:	f43f ae78 	beq.w	8004cb2 <_printf_float+0xb6>
 8004fc2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fc6:	4631      	mov	r1, r6
 8004fc8:	4628      	mov	r0, r5
 8004fca:	47b8      	blx	r7
 8004fcc:	3001      	adds	r0, #1
 8004fce:	f43f ae70 	beq.w	8004cb2 <_printf_float+0xb6>
 8004fd2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	2300      	movs	r3, #0
 8004fda:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004fde:	f7fb fd9b 	bl	8000b18 <__aeabi_dcmpeq>
 8004fe2:	b9c0      	cbnz	r0, 8005016 <_printf_float+0x41a>
 8004fe4:	4653      	mov	r3, sl
 8004fe6:	f108 0201 	add.w	r2, r8, #1
 8004fea:	4631      	mov	r1, r6
 8004fec:	4628      	mov	r0, r5
 8004fee:	47b8      	blx	r7
 8004ff0:	3001      	adds	r0, #1
 8004ff2:	d10c      	bne.n	800500e <_printf_float+0x412>
 8004ff4:	e65d      	b.n	8004cb2 <_printf_float+0xb6>
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	465a      	mov	r2, fp
 8004ffa:	4631      	mov	r1, r6
 8004ffc:	4628      	mov	r0, r5
 8004ffe:	47b8      	blx	r7
 8005000:	3001      	adds	r0, #1
 8005002:	f43f ae56 	beq.w	8004cb2 <_printf_float+0xb6>
 8005006:	f108 0801 	add.w	r8, r8, #1
 800500a:	45d0      	cmp	r8, sl
 800500c:	dbf3      	blt.n	8004ff6 <_printf_float+0x3fa>
 800500e:	464b      	mov	r3, r9
 8005010:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005014:	e6df      	b.n	8004dd6 <_printf_float+0x1da>
 8005016:	f04f 0800 	mov.w	r8, #0
 800501a:	f104 0b1a 	add.w	fp, r4, #26
 800501e:	e7f4      	b.n	800500a <_printf_float+0x40e>
 8005020:	2301      	movs	r3, #1
 8005022:	4642      	mov	r2, r8
 8005024:	e7e1      	b.n	8004fea <_printf_float+0x3ee>
 8005026:	2301      	movs	r3, #1
 8005028:	464a      	mov	r2, r9
 800502a:	4631      	mov	r1, r6
 800502c:	4628      	mov	r0, r5
 800502e:	47b8      	blx	r7
 8005030:	3001      	adds	r0, #1
 8005032:	f43f ae3e 	beq.w	8004cb2 <_printf_float+0xb6>
 8005036:	f108 0801 	add.w	r8, r8, #1
 800503a:	68e3      	ldr	r3, [r4, #12]
 800503c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800503e:	1a5b      	subs	r3, r3, r1
 8005040:	4543      	cmp	r3, r8
 8005042:	dcf0      	bgt.n	8005026 <_printf_float+0x42a>
 8005044:	e6fc      	b.n	8004e40 <_printf_float+0x244>
 8005046:	f04f 0800 	mov.w	r8, #0
 800504a:	f104 0919 	add.w	r9, r4, #25
 800504e:	e7f4      	b.n	800503a <_printf_float+0x43e>

08005050 <_printf_common>:
 8005050:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005054:	4616      	mov	r6, r2
 8005056:	4698      	mov	r8, r3
 8005058:	688a      	ldr	r2, [r1, #8]
 800505a:	690b      	ldr	r3, [r1, #16]
 800505c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005060:	4293      	cmp	r3, r2
 8005062:	bfb8      	it	lt
 8005064:	4613      	movlt	r3, r2
 8005066:	6033      	str	r3, [r6, #0]
 8005068:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800506c:	4607      	mov	r7, r0
 800506e:	460c      	mov	r4, r1
 8005070:	b10a      	cbz	r2, 8005076 <_printf_common+0x26>
 8005072:	3301      	adds	r3, #1
 8005074:	6033      	str	r3, [r6, #0]
 8005076:	6823      	ldr	r3, [r4, #0]
 8005078:	0699      	lsls	r1, r3, #26
 800507a:	bf42      	ittt	mi
 800507c:	6833      	ldrmi	r3, [r6, #0]
 800507e:	3302      	addmi	r3, #2
 8005080:	6033      	strmi	r3, [r6, #0]
 8005082:	6825      	ldr	r5, [r4, #0]
 8005084:	f015 0506 	ands.w	r5, r5, #6
 8005088:	d106      	bne.n	8005098 <_printf_common+0x48>
 800508a:	f104 0a19 	add.w	sl, r4, #25
 800508e:	68e3      	ldr	r3, [r4, #12]
 8005090:	6832      	ldr	r2, [r6, #0]
 8005092:	1a9b      	subs	r3, r3, r2
 8005094:	42ab      	cmp	r3, r5
 8005096:	dc26      	bgt.n	80050e6 <_printf_common+0x96>
 8005098:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800509c:	6822      	ldr	r2, [r4, #0]
 800509e:	3b00      	subs	r3, #0
 80050a0:	bf18      	it	ne
 80050a2:	2301      	movne	r3, #1
 80050a4:	0692      	lsls	r2, r2, #26
 80050a6:	d42b      	bmi.n	8005100 <_printf_common+0xb0>
 80050a8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050ac:	4641      	mov	r1, r8
 80050ae:	4638      	mov	r0, r7
 80050b0:	47c8      	blx	r9
 80050b2:	3001      	adds	r0, #1
 80050b4:	d01e      	beq.n	80050f4 <_printf_common+0xa4>
 80050b6:	6823      	ldr	r3, [r4, #0]
 80050b8:	6922      	ldr	r2, [r4, #16]
 80050ba:	f003 0306 	and.w	r3, r3, #6
 80050be:	2b04      	cmp	r3, #4
 80050c0:	bf02      	ittt	eq
 80050c2:	68e5      	ldreq	r5, [r4, #12]
 80050c4:	6833      	ldreq	r3, [r6, #0]
 80050c6:	1aed      	subeq	r5, r5, r3
 80050c8:	68a3      	ldr	r3, [r4, #8]
 80050ca:	bf0c      	ite	eq
 80050cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050d0:	2500      	movne	r5, #0
 80050d2:	4293      	cmp	r3, r2
 80050d4:	bfc4      	itt	gt
 80050d6:	1a9b      	subgt	r3, r3, r2
 80050d8:	18ed      	addgt	r5, r5, r3
 80050da:	2600      	movs	r6, #0
 80050dc:	341a      	adds	r4, #26
 80050de:	42b5      	cmp	r5, r6
 80050e0:	d11a      	bne.n	8005118 <_printf_common+0xc8>
 80050e2:	2000      	movs	r0, #0
 80050e4:	e008      	b.n	80050f8 <_printf_common+0xa8>
 80050e6:	2301      	movs	r3, #1
 80050e8:	4652      	mov	r2, sl
 80050ea:	4641      	mov	r1, r8
 80050ec:	4638      	mov	r0, r7
 80050ee:	47c8      	blx	r9
 80050f0:	3001      	adds	r0, #1
 80050f2:	d103      	bne.n	80050fc <_printf_common+0xac>
 80050f4:	f04f 30ff 	mov.w	r0, #4294967295
 80050f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050fc:	3501      	adds	r5, #1
 80050fe:	e7c6      	b.n	800508e <_printf_common+0x3e>
 8005100:	18e1      	adds	r1, r4, r3
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	2030      	movs	r0, #48	@ 0x30
 8005106:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800510a:	4422      	add	r2, r4
 800510c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005110:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005114:	3302      	adds	r3, #2
 8005116:	e7c7      	b.n	80050a8 <_printf_common+0x58>
 8005118:	2301      	movs	r3, #1
 800511a:	4622      	mov	r2, r4
 800511c:	4641      	mov	r1, r8
 800511e:	4638      	mov	r0, r7
 8005120:	47c8      	blx	r9
 8005122:	3001      	adds	r0, #1
 8005124:	d0e6      	beq.n	80050f4 <_printf_common+0xa4>
 8005126:	3601      	adds	r6, #1
 8005128:	e7d9      	b.n	80050de <_printf_common+0x8e>
	...

0800512c <_printf_i>:
 800512c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005130:	7e0f      	ldrb	r7, [r1, #24]
 8005132:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005134:	2f78      	cmp	r7, #120	@ 0x78
 8005136:	4691      	mov	r9, r2
 8005138:	4680      	mov	r8, r0
 800513a:	460c      	mov	r4, r1
 800513c:	469a      	mov	sl, r3
 800513e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005142:	d807      	bhi.n	8005154 <_printf_i+0x28>
 8005144:	2f62      	cmp	r7, #98	@ 0x62
 8005146:	d80a      	bhi.n	800515e <_printf_i+0x32>
 8005148:	2f00      	cmp	r7, #0
 800514a:	f000 80d2 	beq.w	80052f2 <_printf_i+0x1c6>
 800514e:	2f58      	cmp	r7, #88	@ 0x58
 8005150:	f000 80b9 	beq.w	80052c6 <_printf_i+0x19a>
 8005154:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005158:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800515c:	e03a      	b.n	80051d4 <_printf_i+0xa8>
 800515e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005162:	2b15      	cmp	r3, #21
 8005164:	d8f6      	bhi.n	8005154 <_printf_i+0x28>
 8005166:	a101      	add	r1, pc, #4	@ (adr r1, 800516c <_printf_i+0x40>)
 8005168:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800516c:	080051c5 	.word	0x080051c5
 8005170:	080051d9 	.word	0x080051d9
 8005174:	08005155 	.word	0x08005155
 8005178:	08005155 	.word	0x08005155
 800517c:	08005155 	.word	0x08005155
 8005180:	08005155 	.word	0x08005155
 8005184:	080051d9 	.word	0x080051d9
 8005188:	08005155 	.word	0x08005155
 800518c:	08005155 	.word	0x08005155
 8005190:	08005155 	.word	0x08005155
 8005194:	08005155 	.word	0x08005155
 8005198:	080052d9 	.word	0x080052d9
 800519c:	08005203 	.word	0x08005203
 80051a0:	08005293 	.word	0x08005293
 80051a4:	08005155 	.word	0x08005155
 80051a8:	08005155 	.word	0x08005155
 80051ac:	080052fb 	.word	0x080052fb
 80051b0:	08005155 	.word	0x08005155
 80051b4:	08005203 	.word	0x08005203
 80051b8:	08005155 	.word	0x08005155
 80051bc:	08005155 	.word	0x08005155
 80051c0:	0800529b 	.word	0x0800529b
 80051c4:	6833      	ldr	r3, [r6, #0]
 80051c6:	1d1a      	adds	r2, r3, #4
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	6032      	str	r2, [r6, #0]
 80051cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051d0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051d4:	2301      	movs	r3, #1
 80051d6:	e09d      	b.n	8005314 <_printf_i+0x1e8>
 80051d8:	6833      	ldr	r3, [r6, #0]
 80051da:	6820      	ldr	r0, [r4, #0]
 80051dc:	1d19      	adds	r1, r3, #4
 80051de:	6031      	str	r1, [r6, #0]
 80051e0:	0606      	lsls	r6, r0, #24
 80051e2:	d501      	bpl.n	80051e8 <_printf_i+0xbc>
 80051e4:	681d      	ldr	r5, [r3, #0]
 80051e6:	e003      	b.n	80051f0 <_printf_i+0xc4>
 80051e8:	0645      	lsls	r5, r0, #25
 80051ea:	d5fb      	bpl.n	80051e4 <_printf_i+0xb8>
 80051ec:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051f0:	2d00      	cmp	r5, #0
 80051f2:	da03      	bge.n	80051fc <_printf_i+0xd0>
 80051f4:	232d      	movs	r3, #45	@ 0x2d
 80051f6:	426d      	negs	r5, r5
 80051f8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051fc:	4859      	ldr	r0, [pc, #356]	@ (8005364 <_printf_i+0x238>)
 80051fe:	230a      	movs	r3, #10
 8005200:	e011      	b.n	8005226 <_printf_i+0xfa>
 8005202:	6821      	ldr	r1, [r4, #0]
 8005204:	6833      	ldr	r3, [r6, #0]
 8005206:	0608      	lsls	r0, r1, #24
 8005208:	f853 5b04 	ldr.w	r5, [r3], #4
 800520c:	d402      	bmi.n	8005214 <_printf_i+0xe8>
 800520e:	0649      	lsls	r1, r1, #25
 8005210:	bf48      	it	mi
 8005212:	b2ad      	uxthmi	r5, r5
 8005214:	2f6f      	cmp	r7, #111	@ 0x6f
 8005216:	4853      	ldr	r0, [pc, #332]	@ (8005364 <_printf_i+0x238>)
 8005218:	6033      	str	r3, [r6, #0]
 800521a:	bf14      	ite	ne
 800521c:	230a      	movne	r3, #10
 800521e:	2308      	moveq	r3, #8
 8005220:	2100      	movs	r1, #0
 8005222:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005226:	6866      	ldr	r6, [r4, #4]
 8005228:	60a6      	str	r6, [r4, #8]
 800522a:	2e00      	cmp	r6, #0
 800522c:	bfa2      	ittt	ge
 800522e:	6821      	ldrge	r1, [r4, #0]
 8005230:	f021 0104 	bicge.w	r1, r1, #4
 8005234:	6021      	strge	r1, [r4, #0]
 8005236:	b90d      	cbnz	r5, 800523c <_printf_i+0x110>
 8005238:	2e00      	cmp	r6, #0
 800523a:	d04b      	beq.n	80052d4 <_printf_i+0x1a8>
 800523c:	4616      	mov	r6, r2
 800523e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005242:	fb03 5711 	mls	r7, r3, r1, r5
 8005246:	5dc7      	ldrb	r7, [r0, r7]
 8005248:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800524c:	462f      	mov	r7, r5
 800524e:	42bb      	cmp	r3, r7
 8005250:	460d      	mov	r5, r1
 8005252:	d9f4      	bls.n	800523e <_printf_i+0x112>
 8005254:	2b08      	cmp	r3, #8
 8005256:	d10b      	bne.n	8005270 <_printf_i+0x144>
 8005258:	6823      	ldr	r3, [r4, #0]
 800525a:	07df      	lsls	r7, r3, #31
 800525c:	d508      	bpl.n	8005270 <_printf_i+0x144>
 800525e:	6923      	ldr	r3, [r4, #16]
 8005260:	6861      	ldr	r1, [r4, #4]
 8005262:	4299      	cmp	r1, r3
 8005264:	bfde      	ittt	le
 8005266:	2330      	movle	r3, #48	@ 0x30
 8005268:	f806 3c01 	strble.w	r3, [r6, #-1]
 800526c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005270:	1b92      	subs	r2, r2, r6
 8005272:	6122      	str	r2, [r4, #16]
 8005274:	f8cd a000 	str.w	sl, [sp]
 8005278:	464b      	mov	r3, r9
 800527a:	aa03      	add	r2, sp, #12
 800527c:	4621      	mov	r1, r4
 800527e:	4640      	mov	r0, r8
 8005280:	f7ff fee6 	bl	8005050 <_printf_common>
 8005284:	3001      	adds	r0, #1
 8005286:	d14a      	bne.n	800531e <_printf_i+0x1f2>
 8005288:	f04f 30ff 	mov.w	r0, #4294967295
 800528c:	b004      	add	sp, #16
 800528e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005292:	6823      	ldr	r3, [r4, #0]
 8005294:	f043 0320 	orr.w	r3, r3, #32
 8005298:	6023      	str	r3, [r4, #0]
 800529a:	4833      	ldr	r0, [pc, #204]	@ (8005368 <_printf_i+0x23c>)
 800529c:	2778      	movs	r7, #120	@ 0x78
 800529e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052a2:	6823      	ldr	r3, [r4, #0]
 80052a4:	6831      	ldr	r1, [r6, #0]
 80052a6:	061f      	lsls	r7, r3, #24
 80052a8:	f851 5b04 	ldr.w	r5, [r1], #4
 80052ac:	d402      	bmi.n	80052b4 <_printf_i+0x188>
 80052ae:	065f      	lsls	r7, r3, #25
 80052b0:	bf48      	it	mi
 80052b2:	b2ad      	uxthmi	r5, r5
 80052b4:	6031      	str	r1, [r6, #0]
 80052b6:	07d9      	lsls	r1, r3, #31
 80052b8:	bf44      	itt	mi
 80052ba:	f043 0320 	orrmi.w	r3, r3, #32
 80052be:	6023      	strmi	r3, [r4, #0]
 80052c0:	b11d      	cbz	r5, 80052ca <_printf_i+0x19e>
 80052c2:	2310      	movs	r3, #16
 80052c4:	e7ac      	b.n	8005220 <_printf_i+0xf4>
 80052c6:	4827      	ldr	r0, [pc, #156]	@ (8005364 <_printf_i+0x238>)
 80052c8:	e7e9      	b.n	800529e <_printf_i+0x172>
 80052ca:	6823      	ldr	r3, [r4, #0]
 80052cc:	f023 0320 	bic.w	r3, r3, #32
 80052d0:	6023      	str	r3, [r4, #0]
 80052d2:	e7f6      	b.n	80052c2 <_printf_i+0x196>
 80052d4:	4616      	mov	r6, r2
 80052d6:	e7bd      	b.n	8005254 <_printf_i+0x128>
 80052d8:	6833      	ldr	r3, [r6, #0]
 80052da:	6825      	ldr	r5, [r4, #0]
 80052dc:	6961      	ldr	r1, [r4, #20]
 80052de:	1d18      	adds	r0, r3, #4
 80052e0:	6030      	str	r0, [r6, #0]
 80052e2:	062e      	lsls	r6, r5, #24
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	d501      	bpl.n	80052ec <_printf_i+0x1c0>
 80052e8:	6019      	str	r1, [r3, #0]
 80052ea:	e002      	b.n	80052f2 <_printf_i+0x1c6>
 80052ec:	0668      	lsls	r0, r5, #25
 80052ee:	d5fb      	bpl.n	80052e8 <_printf_i+0x1bc>
 80052f0:	8019      	strh	r1, [r3, #0]
 80052f2:	2300      	movs	r3, #0
 80052f4:	6123      	str	r3, [r4, #16]
 80052f6:	4616      	mov	r6, r2
 80052f8:	e7bc      	b.n	8005274 <_printf_i+0x148>
 80052fa:	6833      	ldr	r3, [r6, #0]
 80052fc:	1d1a      	adds	r2, r3, #4
 80052fe:	6032      	str	r2, [r6, #0]
 8005300:	681e      	ldr	r6, [r3, #0]
 8005302:	6862      	ldr	r2, [r4, #4]
 8005304:	2100      	movs	r1, #0
 8005306:	4630      	mov	r0, r6
 8005308:	f7fa ff8a 	bl	8000220 <memchr>
 800530c:	b108      	cbz	r0, 8005312 <_printf_i+0x1e6>
 800530e:	1b80      	subs	r0, r0, r6
 8005310:	6060      	str	r0, [r4, #4]
 8005312:	6863      	ldr	r3, [r4, #4]
 8005314:	6123      	str	r3, [r4, #16]
 8005316:	2300      	movs	r3, #0
 8005318:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800531c:	e7aa      	b.n	8005274 <_printf_i+0x148>
 800531e:	6923      	ldr	r3, [r4, #16]
 8005320:	4632      	mov	r2, r6
 8005322:	4649      	mov	r1, r9
 8005324:	4640      	mov	r0, r8
 8005326:	47d0      	blx	sl
 8005328:	3001      	adds	r0, #1
 800532a:	d0ad      	beq.n	8005288 <_printf_i+0x15c>
 800532c:	6823      	ldr	r3, [r4, #0]
 800532e:	079b      	lsls	r3, r3, #30
 8005330:	d413      	bmi.n	800535a <_printf_i+0x22e>
 8005332:	68e0      	ldr	r0, [r4, #12]
 8005334:	9b03      	ldr	r3, [sp, #12]
 8005336:	4298      	cmp	r0, r3
 8005338:	bfb8      	it	lt
 800533a:	4618      	movlt	r0, r3
 800533c:	e7a6      	b.n	800528c <_printf_i+0x160>
 800533e:	2301      	movs	r3, #1
 8005340:	4632      	mov	r2, r6
 8005342:	4649      	mov	r1, r9
 8005344:	4640      	mov	r0, r8
 8005346:	47d0      	blx	sl
 8005348:	3001      	adds	r0, #1
 800534a:	d09d      	beq.n	8005288 <_printf_i+0x15c>
 800534c:	3501      	adds	r5, #1
 800534e:	68e3      	ldr	r3, [r4, #12]
 8005350:	9903      	ldr	r1, [sp, #12]
 8005352:	1a5b      	subs	r3, r3, r1
 8005354:	42ab      	cmp	r3, r5
 8005356:	dcf2      	bgt.n	800533e <_printf_i+0x212>
 8005358:	e7eb      	b.n	8005332 <_printf_i+0x206>
 800535a:	2500      	movs	r5, #0
 800535c:	f104 0619 	add.w	r6, r4, #25
 8005360:	e7f5      	b.n	800534e <_printf_i+0x222>
 8005362:	bf00      	nop
 8005364:	08007ec2 	.word	0x08007ec2
 8005368:	08007ed3 	.word	0x08007ed3

0800536c <std>:
 800536c:	2300      	movs	r3, #0
 800536e:	b510      	push	{r4, lr}
 8005370:	4604      	mov	r4, r0
 8005372:	e9c0 3300 	strd	r3, r3, [r0]
 8005376:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800537a:	6083      	str	r3, [r0, #8]
 800537c:	8181      	strh	r1, [r0, #12]
 800537e:	6643      	str	r3, [r0, #100]	@ 0x64
 8005380:	81c2      	strh	r2, [r0, #14]
 8005382:	6183      	str	r3, [r0, #24]
 8005384:	4619      	mov	r1, r3
 8005386:	2208      	movs	r2, #8
 8005388:	305c      	adds	r0, #92	@ 0x5c
 800538a:	f000 f928 	bl	80055de <memset>
 800538e:	4b0d      	ldr	r3, [pc, #52]	@ (80053c4 <std+0x58>)
 8005390:	6263      	str	r3, [r4, #36]	@ 0x24
 8005392:	4b0d      	ldr	r3, [pc, #52]	@ (80053c8 <std+0x5c>)
 8005394:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005396:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <std+0x60>)
 8005398:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800539a:	4b0d      	ldr	r3, [pc, #52]	@ (80053d0 <std+0x64>)
 800539c:	6323      	str	r3, [r4, #48]	@ 0x30
 800539e:	4b0d      	ldr	r3, [pc, #52]	@ (80053d4 <std+0x68>)
 80053a0:	6224      	str	r4, [r4, #32]
 80053a2:	429c      	cmp	r4, r3
 80053a4:	d006      	beq.n	80053b4 <std+0x48>
 80053a6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80053aa:	4294      	cmp	r4, r2
 80053ac:	d002      	beq.n	80053b4 <std+0x48>
 80053ae:	33d0      	adds	r3, #208	@ 0xd0
 80053b0:	429c      	cmp	r4, r3
 80053b2:	d105      	bne.n	80053c0 <std+0x54>
 80053b4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80053b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80053bc:	f000 b98c 	b.w	80056d8 <__retarget_lock_init_recursive>
 80053c0:	bd10      	pop	{r4, pc}
 80053c2:	bf00      	nop
 80053c4:	08005559 	.word	0x08005559
 80053c8:	0800557b 	.word	0x0800557b
 80053cc:	080055b3 	.word	0x080055b3
 80053d0:	080055d7 	.word	0x080055d7
 80053d4:	200002f4 	.word	0x200002f4

080053d8 <stdio_exit_handler>:
 80053d8:	4a02      	ldr	r2, [pc, #8]	@ (80053e4 <stdio_exit_handler+0xc>)
 80053da:	4903      	ldr	r1, [pc, #12]	@ (80053e8 <stdio_exit_handler+0x10>)
 80053dc:	4803      	ldr	r0, [pc, #12]	@ (80053ec <stdio_exit_handler+0x14>)
 80053de:	f000 b869 	b.w	80054b4 <_fwalk_sglue>
 80053e2:	bf00      	nop
 80053e4:	2000000c 	.word	0x2000000c
 80053e8:	08007035 	.word	0x08007035
 80053ec:	2000001c 	.word	0x2000001c

080053f0 <cleanup_stdio>:
 80053f0:	6841      	ldr	r1, [r0, #4]
 80053f2:	4b0c      	ldr	r3, [pc, #48]	@ (8005424 <cleanup_stdio+0x34>)
 80053f4:	4299      	cmp	r1, r3
 80053f6:	b510      	push	{r4, lr}
 80053f8:	4604      	mov	r4, r0
 80053fa:	d001      	beq.n	8005400 <cleanup_stdio+0x10>
 80053fc:	f001 fe1a 	bl	8007034 <_fflush_r>
 8005400:	68a1      	ldr	r1, [r4, #8]
 8005402:	4b09      	ldr	r3, [pc, #36]	@ (8005428 <cleanup_stdio+0x38>)
 8005404:	4299      	cmp	r1, r3
 8005406:	d002      	beq.n	800540e <cleanup_stdio+0x1e>
 8005408:	4620      	mov	r0, r4
 800540a:	f001 fe13 	bl	8007034 <_fflush_r>
 800540e:	68e1      	ldr	r1, [r4, #12]
 8005410:	4b06      	ldr	r3, [pc, #24]	@ (800542c <cleanup_stdio+0x3c>)
 8005412:	4299      	cmp	r1, r3
 8005414:	d004      	beq.n	8005420 <cleanup_stdio+0x30>
 8005416:	4620      	mov	r0, r4
 8005418:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800541c:	f001 be0a 	b.w	8007034 <_fflush_r>
 8005420:	bd10      	pop	{r4, pc}
 8005422:	bf00      	nop
 8005424:	200002f4 	.word	0x200002f4
 8005428:	2000035c 	.word	0x2000035c
 800542c:	200003c4 	.word	0x200003c4

08005430 <global_stdio_init.part.0>:
 8005430:	b510      	push	{r4, lr}
 8005432:	4b0b      	ldr	r3, [pc, #44]	@ (8005460 <global_stdio_init.part.0+0x30>)
 8005434:	4c0b      	ldr	r4, [pc, #44]	@ (8005464 <global_stdio_init.part.0+0x34>)
 8005436:	4a0c      	ldr	r2, [pc, #48]	@ (8005468 <global_stdio_init.part.0+0x38>)
 8005438:	601a      	str	r2, [r3, #0]
 800543a:	4620      	mov	r0, r4
 800543c:	2200      	movs	r2, #0
 800543e:	2104      	movs	r1, #4
 8005440:	f7ff ff94 	bl	800536c <std>
 8005444:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005448:	2201      	movs	r2, #1
 800544a:	2109      	movs	r1, #9
 800544c:	f7ff ff8e 	bl	800536c <std>
 8005450:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005454:	2202      	movs	r2, #2
 8005456:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800545a:	2112      	movs	r1, #18
 800545c:	f7ff bf86 	b.w	800536c <std>
 8005460:	2000042c 	.word	0x2000042c
 8005464:	200002f4 	.word	0x200002f4
 8005468:	080053d9 	.word	0x080053d9

0800546c <__sfp_lock_acquire>:
 800546c:	4801      	ldr	r0, [pc, #4]	@ (8005474 <__sfp_lock_acquire+0x8>)
 800546e:	f000 b934 	b.w	80056da <__retarget_lock_acquire_recursive>
 8005472:	bf00      	nop
 8005474:	20000435 	.word	0x20000435

08005478 <__sfp_lock_release>:
 8005478:	4801      	ldr	r0, [pc, #4]	@ (8005480 <__sfp_lock_release+0x8>)
 800547a:	f000 b92f 	b.w	80056dc <__retarget_lock_release_recursive>
 800547e:	bf00      	nop
 8005480:	20000435 	.word	0x20000435

08005484 <__sinit>:
 8005484:	b510      	push	{r4, lr}
 8005486:	4604      	mov	r4, r0
 8005488:	f7ff fff0 	bl	800546c <__sfp_lock_acquire>
 800548c:	6a23      	ldr	r3, [r4, #32]
 800548e:	b11b      	cbz	r3, 8005498 <__sinit+0x14>
 8005490:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005494:	f7ff bff0 	b.w	8005478 <__sfp_lock_release>
 8005498:	4b04      	ldr	r3, [pc, #16]	@ (80054ac <__sinit+0x28>)
 800549a:	6223      	str	r3, [r4, #32]
 800549c:	4b04      	ldr	r3, [pc, #16]	@ (80054b0 <__sinit+0x2c>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1f5      	bne.n	8005490 <__sinit+0xc>
 80054a4:	f7ff ffc4 	bl	8005430 <global_stdio_init.part.0>
 80054a8:	e7f2      	b.n	8005490 <__sinit+0xc>
 80054aa:	bf00      	nop
 80054ac:	080053f1 	.word	0x080053f1
 80054b0:	2000042c 	.word	0x2000042c

080054b4 <_fwalk_sglue>:
 80054b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054b8:	4607      	mov	r7, r0
 80054ba:	4688      	mov	r8, r1
 80054bc:	4614      	mov	r4, r2
 80054be:	2600      	movs	r6, #0
 80054c0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80054c4:	f1b9 0901 	subs.w	r9, r9, #1
 80054c8:	d505      	bpl.n	80054d6 <_fwalk_sglue+0x22>
 80054ca:	6824      	ldr	r4, [r4, #0]
 80054cc:	2c00      	cmp	r4, #0
 80054ce:	d1f7      	bne.n	80054c0 <_fwalk_sglue+0xc>
 80054d0:	4630      	mov	r0, r6
 80054d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054d6:	89ab      	ldrh	r3, [r5, #12]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d907      	bls.n	80054ec <_fwalk_sglue+0x38>
 80054dc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80054e0:	3301      	adds	r3, #1
 80054e2:	d003      	beq.n	80054ec <_fwalk_sglue+0x38>
 80054e4:	4629      	mov	r1, r5
 80054e6:	4638      	mov	r0, r7
 80054e8:	47c0      	blx	r8
 80054ea:	4306      	orrs	r6, r0
 80054ec:	3568      	adds	r5, #104	@ 0x68
 80054ee:	e7e9      	b.n	80054c4 <_fwalk_sglue+0x10>

080054f0 <sniprintf>:
 80054f0:	b40c      	push	{r2, r3}
 80054f2:	b530      	push	{r4, r5, lr}
 80054f4:	4b17      	ldr	r3, [pc, #92]	@ (8005554 <sniprintf+0x64>)
 80054f6:	1e0c      	subs	r4, r1, #0
 80054f8:	681d      	ldr	r5, [r3, #0]
 80054fa:	b09d      	sub	sp, #116	@ 0x74
 80054fc:	da08      	bge.n	8005510 <sniprintf+0x20>
 80054fe:	238b      	movs	r3, #139	@ 0x8b
 8005500:	602b      	str	r3, [r5, #0]
 8005502:	f04f 30ff 	mov.w	r0, #4294967295
 8005506:	b01d      	add	sp, #116	@ 0x74
 8005508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800550c:	b002      	add	sp, #8
 800550e:	4770      	bx	lr
 8005510:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005514:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005518:	bf14      	ite	ne
 800551a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800551e:	4623      	moveq	r3, r4
 8005520:	9304      	str	r3, [sp, #16]
 8005522:	9307      	str	r3, [sp, #28]
 8005524:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005528:	9002      	str	r0, [sp, #8]
 800552a:	9006      	str	r0, [sp, #24]
 800552c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005530:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005532:	ab21      	add	r3, sp, #132	@ 0x84
 8005534:	a902      	add	r1, sp, #8
 8005536:	4628      	mov	r0, r5
 8005538:	9301      	str	r3, [sp, #4]
 800553a:	f001 fbfb 	bl	8006d34 <_svfiprintf_r>
 800553e:	1c43      	adds	r3, r0, #1
 8005540:	bfbc      	itt	lt
 8005542:	238b      	movlt	r3, #139	@ 0x8b
 8005544:	602b      	strlt	r3, [r5, #0]
 8005546:	2c00      	cmp	r4, #0
 8005548:	d0dd      	beq.n	8005506 <sniprintf+0x16>
 800554a:	9b02      	ldr	r3, [sp, #8]
 800554c:	2200      	movs	r2, #0
 800554e:	701a      	strb	r2, [r3, #0]
 8005550:	e7d9      	b.n	8005506 <sniprintf+0x16>
 8005552:	bf00      	nop
 8005554:	20000018 	.word	0x20000018

08005558 <__sread>:
 8005558:	b510      	push	{r4, lr}
 800555a:	460c      	mov	r4, r1
 800555c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005560:	f000 f86c 	bl	800563c <_read_r>
 8005564:	2800      	cmp	r0, #0
 8005566:	bfab      	itete	ge
 8005568:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800556a:	89a3      	ldrhlt	r3, [r4, #12]
 800556c:	181b      	addge	r3, r3, r0
 800556e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005572:	bfac      	ite	ge
 8005574:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005576:	81a3      	strhlt	r3, [r4, #12]
 8005578:	bd10      	pop	{r4, pc}

0800557a <__swrite>:
 800557a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800557e:	461f      	mov	r7, r3
 8005580:	898b      	ldrh	r3, [r1, #12]
 8005582:	05db      	lsls	r3, r3, #23
 8005584:	4605      	mov	r5, r0
 8005586:	460c      	mov	r4, r1
 8005588:	4616      	mov	r6, r2
 800558a:	d505      	bpl.n	8005598 <__swrite+0x1e>
 800558c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005590:	2302      	movs	r3, #2
 8005592:	2200      	movs	r2, #0
 8005594:	f000 f840 	bl	8005618 <_lseek_r>
 8005598:	89a3      	ldrh	r3, [r4, #12]
 800559a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800559e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80055a2:	81a3      	strh	r3, [r4, #12]
 80055a4:	4632      	mov	r2, r6
 80055a6:	463b      	mov	r3, r7
 80055a8:	4628      	mov	r0, r5
 80055aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055ae:	f000 b857 	b.w	8005660 <_write_r>

080055b2 <__sseek>:
 80055b2:	b510      	push	{r4, lr}
 80055b4:	460c      	mov	r4, r1
 80055b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055ba:	f000 f82d 	bl	8005618 <_lseek_r>
 80055be:	1c43      	adds	r3, r0, #1
 80055c0:	89a3      	ldrh	r3, [r4, #12]
 80055c2:	bf15      	itete	ne
 80055c4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80055c6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80055ca:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80055ce:	81a3      	strheq	r3, [r4, #12]
 80055d0:	bf18      	it	ne
 80055d2:	81a3      	strhne	r3, [r4, #12]
 80055d4:	bd10      	pop	{r4, pc}

080055d6 <__sclose>:
 80055d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80055da:	f000 b80d 	b.w	80055f8 <_close_r>

080055de <memset>:
 80055de:	4402      	add	r2, r0
 80055e0:	4603      	mov	r3, r0
 80055e2:	4293      	cmp	r3, r2
 80055e4:	d100      	bne.n	80055e8 <memset+0xa>
 80055e6:	4770      	bx	lr
 80055e8:	f803 1b01 	strb.w	r1, [r3], #1
 80055ec:	e7f9      	b.n	80055e2 <memset+0x4>
	...

080055f0 <_localeconv_r>:
 80055f0:	4800      	ldr	r0, [pc, #0]	@ (80055f4 <_localeconv_r+0x4>)
 80055f2:	4770      	bx	lr
 80055f4:	20000158 	.word	0x20000158

080055f8 <_close_r>:
 80055f8:	b538      	push	{r3, r4, r5, lr}
 80055fa:	4d06      	ldr	r5, [pc, #24]	@ (8005614 <_close_r+0x1c>)
 80055fc:	2300      	movs	r3, #0
 80055fe:	4604      	mov	r4, r0
 8005600:	4608      	mov	r0, r1
 8005602:	602b      	str	r3, [r5, #0]
 8005604:	f7fc f953 	bl	80018ae <_close>
 8005608:	1c43      	adds	r3, r0, #1
 800560a:	d102      	bne.n	8005612 <_close_r+0x1a>
 800560c:	682b      	ldr	r3, [r5, #0]
 800560e:	b103      	cbz	r3, 8005612 <_close_r+0x1a>
 8005610:	6023      	str	r3, [r4, #0]
 8005612:	bd38      	pop	{r3, r4, r5, pc}
 8005614:	20000430 	.word	0x20000430

08005618 <_lseek_r>:
 8005618:	b538      	push	{r3, r4, r5, lr}
 800561a:	4d07      	ldr	r5, [pc, #28]	@ (8005638 <_lseek_r+0x20>)
 800561c:	4604      	mov	r4, r0
 800561e:	4608      	mov	r0, r1
 8005620:	4611      	mov	r1, r2
 8005622:	2200      	movs	r2, #0
 8005624:	602a      	str	r2, [r5, #0]
 8005626:	461a      	mov	r2, r3
 8005628:	f7fc f968 	bl	80018fc <_lseek>
 800562c:	1c43      	adds	r3, r0, #1
 800562e:	d102      	bne.n	8005636 <_lseek_r+0x1e>
 8005630:	682b      	ldr	r3, [r5, #0]
 8005632:	b103      	cbz	r3, 8005636 <_lseek_r+0x1e>
 8005634:	6023      	str	r3, [r4, #0]
 8005636:	bd38      	pop	{r3, r4, r5, pc}
 8005638:	20000430 	.word	0x20000430

0800563c <_read_r>:
 800563c:	b538      	push	{r3, r4, r5, lr}
 800563e:	4d07      	ldr	r5, [pc, #28]	@ (800565c <_read_r+0x20>)
 8005640:	4604      	mov	r4, r0
 8005642:	4608      	mov	r0, r1
 8005644:	4611      	mov	r1, r2
 8005646:	2200      	movs	r2, #0
 8005648:	602a      	str	r2, [r5, #0]
 800564a:	461a      	mov	r2, r3
 800564c:	f7fc f8f6 	bl	800183c <_read>
 8005650:	1c43      	adds	r3, r0, #1
 8005652:	d102      	bne.n	800565a <_read_r+0x1e>
 8005654:	682b      	ldr	r3, [r5, #0]
 8005656:	b103      	cbz	r3, 800565a <_read_r+0x1e>
 8005658:	6023      	str	r3, [r4, #0]
 800565a:	bd38      	pop	{r3, r4, r5, pc}
 800565c:	20000430 	.word	0x20000430

08005660 <_write_r>:
 8005660:	b538      	push	{r3, r4, r5, lr}
 8005662:	4d07      	ldr	r5, [pc, #28]	@ (8005680 <_write_r+0x20>)
 8005664:	4604      	mov	r4, r0
 8005666:	4608      	mov	r0, r1
 8005668:	4611      	mov	r1, r2
 800566a:	2200      	movs	r2, #0
 800566c:	602a      	str	r2, [r5, #0]
 800566e:	461a      	mov	r2, r3
 8005670:	f7fc f901 	bl	8001876 <_write>
 8005674:	1c43      	adds	r3, r0, #1
 8005676:	d102      	bne.n	800567e <_write_r+0x1e>
 8005678:	682b      	ldr	r3, [r5, #0]
 800567a:	b103      	cbz	r3, 800567e <_write_r+0x1e>
 800567c:	6023      	str	r3, [r4, #0]
 800567e:	bd38      	pop	{r3, r4, r5, pc}
 8005680:	20000430 	.word	0x20000430

08005684 <__errno>:
 8005684:	4b01      	ldr	r3, [pc, #4]	@ (800568c <__errno+0x8>)
 8005686:	6818      	ldr	r0, [r3, #0]
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	20000018 	.word	0x20000018

08005690 <__libc_init_array>:
 8005690:	b570      	push	{r4, r5, r6, lr}
 8005692:	4d0d      	ldr	r5, [pc, #52]	@ (80056c8 <__libc_init_array+0x38>)
 8005694:	4c0d      	ldr	r4, [pc, #52]	@ (80056cc <__libc_init_array+0x3c>)
 8005696:	1b64      	subs	r4, r4, r5
 8005698:	10a4      	asrs	r4, r4, #2
 800569a:	2600      	movs	r6, #0
 800569c:	42a6      	cmp	r6, r4
 800569e:	d109      	bne.n	80056b4 <__libc_init_array+0x24>
 80056a0:	4d0b      	ldr	r5, [pc, #44]	@ (80056d0 <__libc_init_array+0x40>)
 80056a2:	4c0c      	ldr	r4, [pc, #48]	@ (80056d4 <__libc_init_array+0x44>)
 80056a4:	f002 fbd4 	bl	8007e50 <_init>
 80056a8:	1b64      	subs	r4, r4, r5
 80056aa:	10a4      	asrs	r4, r4, #2
 80056ac:	2600      	movs	r6, #0
 80056ae:	42a6      	cmp	r6, r4
 80056b0:	d105      	bne.n	80056be <__libc_init_array+0x2e>
 80056b2:	bd70      	pop	{r4, r5, r6, pc}
 80056b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056b8:	4798      	blx	r3
 80056ba:	3601      	adds	r6, #1
 80056bc:	e7ee      	b.n	800569c <__libc_init_array+0xc>
 80056be:	f855 3b04 	ldr.w	r3, [r5], #4
 80056c2:	4798      	blx	r3
 80056c4:	3601      	adds	r6, #1
 80056c6:	e7f2      	b.n	80056ae <__libc_init_array+0x1e>
 80056c8:	08008298 	.word	0x08008298
 80056cc:	08008298 	.word	0x08008298
 80056d0:	08008298 	.word	0x08008298
 80056d4:	0800829c 	.word	0x0800829c

080056d8 <__retarget_lock_init_recursive>:
 80056d8:	4770      	bx	lr

080056da <__retarget_lock_acquire_recursive>:
 80056da:	4770      	bx	lr

080056dc <__retarget_lock_release_recursive>:
 80056dc:	4770      	bx	lr

080056de <quorem>:
 80056de:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e2:	6903      	ldr	r3, [r0, #16]
 80056e4:	690c      	ldr	r4, [r1, #16]
 80056e6:	42a3      	cmp	r3, r4
 80056e8:	4607      	mov	r7, r0
 80056ea:	db7e      	blt.n	80057ea <quorem+0x10c>
 80056ec:	3c01      	subs	r4, #1
 80056ee:	f101 0814 	add.w	r8, r1, #20
 80056f2:	00a3      	lsls	r3, r4, #2
 80056f4:	f100 0514 	add.w	r5, r0, #20
 80056f8:	9300      	str	r3, [sp, #0]
 80056fa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80056fe:	9301      	str	r3, [sp, #4]
 8005700:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005704:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005708:	3301      	adds	r3, #1
 800570a:	429a      	cmp	r2, r3
 800570c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005710:	fbb2 f6f3 	udiv	r6, r2, r3
 8005714:	d32e      	bcc.n	8005774 <quorem+0x96>
 8005716:	f04f 0a00 	mov.w	sl, #0
 800571a:	46c4      	mov	ip, r8
 800571c:	46ae      	mov	lr, r5
 800571e:	46d3      	mov	fp, sl
 8005720:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005724:	b298      	uxth	r0, r3
 8005726:	fb06 a000 	mla	r0, r6, r0, sl
 800572a:	0c02      	lsrs	r2, r0, #16
 800572c:	0c1b      	lsrs	r3, r3, #16
 800572e:	fb06 2303 	mla	r3, r6, r3, r2
 8005732:	f8de 2000 	ldr.w	r2, [lr]
 8005736:	b280      	uxth	r0, r0
 8005738:	b292      	uxth	r2, r2
 800573a:	1a12      	subs	r2, r2, r0
 800573c:	445a      	add	r2, fp
 800573e:	f8de 0000 	ldr.w	r0, [lr]
 8005742:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005746:	b29b      	uxth	r3, r3
 8005748:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800574c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005750:	b292      	uxth	r2, r2
 8005752:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005756:	45e1      	cmp	r9, ip
 8005758:	f84e 2b04 	str.w	r2, [lr], #4
 800575c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005760:	d2de      	bcs.n	8005720 <quorem+0x42>
 8005762:	9b00      	ldr	r3, [sp, #0]
 8005764:	58eb      	ldr	r3, [r5, r3]
 8005766:	b92b      	cbnz	r3, 8005774 <quorem+0x96>
 8005768:	9b01      	ldr	r3, [sp, #4]
 800576a:	3b04      	subs	r3, #4
 800576c:	429d      	cmp	r5, r3
 800576e:	461a      	mov	r2, r3
 8005770:	d32f      	bcc.n	80057d2 <quorem+0xf4>
 8005772:	613c      	str	r4, [r7, #16]
 8005774:	4638      	mov	r0, r7
 8005776:	f001 f979 	bl	8006a6c <__mcmp>
 800577a:	2800      	cmp	r0, #0
 800577c:	db25      	blt.n	80057ca <quorem+0xec>
 800577e:	4629      	mov	r1, r5
 8005780:	2000      	movs	r0, #0
 8005782:	f858 2b04 	ldr.w	r2, [r8], #4
 8005786:	f8d1 c000 	ldr.w	ip, [r1]
 800578a:	fa1f fe82 	uxth.w	lr, r2
 800578e:	fa1f f38c 	uxth.w	r3, ip
 8005792:	eba3 030e 	sub.w	r3, r3, lr
 8005796:	4403      	add	r3, r0
 8005798:	0c12      	lsrs	r2, r2, #16
 800579a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800579e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057a8:	45c1      	cmp	r9, r8
 80057aa:	f841 3b04 	str.w	r3, [r1], #4
 80057ae:	ea4f 4022 	mov.w	r0, r2, asr #16
 80057b2:	d2e6      	bcs.n	8005782 <quorem+0xa4>
 80057b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80057b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80057bc:	b922      	cbnz	r2, 80057c8 <quorem+0xea>
 80057be:	3b04      	subs	r3, #4
 80057c0:	429d      	cmp	r5, r3
 80057c2:	461a      	mov	r2, r3
 80057c4:	d30b      	bcc.n	80057de <quorem+0x100>
 80057c6:	613c      	str	r4, [r7, #16]
 80057c8:	3601      	adds	r6, #1
 80057ca:	4630      	mov	r0, r6
 80057cc:	b003      	add	sp, #12
 80057ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057d2:	6812      	ldr	r2, [r2, #0]
 80057d4:	3b04      	subs	r3, #4
 80057d6:	2a00      	cmp	r2, #0
 80057d8:	d1cb      	bne.n	8005772 <quorem+0x94>
 80057da:	3c01      	subs	r4, #1
 80057dc:	e7c6      	b.n	800576c <quorem+0x8e>
 80057de:	6812      	ldr	r2, [r2, #0]
 80057e0:	3b04      	subs	r3, #4
 80057e2:	2a00      	cmp	r2, #0
 80057e4:	d1ef      	bne.n	80057c6 <quorem+0xe8>
 80057e6:	3c01      	subs	r4, #1
 80057e8:	e7ea      	b.n	80057c0 <quorem+0xe2>
 80057ea:	2000      	movs	r0, #0
 80057ec:	e7ee      	b.n	80057cc <quorem+0xee>
	...

080057f0 <_dtoa_r>:
 80057f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057f4:	69c7      	ldr	r7, [r0, #28]
 80057f6:	b099      	sub	sp, #100	@ 0x64
 80057f8:	ed8d 0b02 	vstr	d0, [sp, #8]
 80057fc:	ec55 4b10 	vmov	r4, r5, d0
 8005800:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005802:	9109      	str	r1, [sp, #36]	@ 0x24
 8005804:	4683      	mov	fp, r0
 8005806:	920e      	str	r2, [sp, #56]	@ 0x38
 8005808:	9313      	str	r3, [sp, #76]	@ 0x4c
 800580a:	b97f      	cbnz	r7, 800582c <_dtoa_r+0x3c>
 800580c:	2010      	movs	r0, #16
 800580e:	f000 fdfd 	bl	800640c <malloc>
 8005812:	4602      	mov	r2, r0
 8005814:	f8cb 001c 	str.w	r0, [fp, #28]
 8005818:	b920      	cbnz	r0, 8005824 <_dtoa_r+0x34>
 800581a:	4ba7      	ldr	r3, [pc, #668]	@ (8005ab8 <_dtoa_r+0x2c8>)
 800581c:	21ef      	movs	r1, #239	@ 0xef
 800581e:	48a7      	ldr	r0, [pc, #668]	@ (8005abc <_dtoa_r+0x2cc>)
 8005820:	f001 fc68 	bl	80070f4 <__assert_func>
 8005824:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005828:	6007      	str	r7, [r0, #0]
 800582a:	60c7      	str	r7, [r0, #12]
 800582c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005830:	6819      	ldr	r1, [r3, #0]
 8005832:	b159      	cbz	r1, 800584c <_dtoa_r+0x5c>
 8005834:	685a      	ldr	r2, [r3, #4]
 8005836:	604a      	str	r2, [r1, #4]
 8005838:	2301      	movs	r3, #1
 800583a:	4093      	lsls	r3, r2
 800583c:	608b      	str	r3, [r1, #8]
 800583e:	4658      	mov	r0, fp
 8005840:	f000 feda 	bl	80065f8 <_Bfree>
 8005844:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005848:	2200      	movs	r2, #0
 800584a:	601a      	str	r2, [r3, #0]
 800584c:	1e2b      	subs	r3, r5, #0
 800584e:	bfb9      	ittee	lt
 8005850:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005854:	9303      	strlt	r3, [sp, #12]
 8005856:	2300      	movge	r3, #0
 8005858:	6033      	strge	r3, [r6, #0]
 800585a:	9f03      	ldr	r7, [sp, #12]
 800585c:	4b98      	ldr	r3, [pc, #608]	@ (8005ac0 <_dtoa_r+0x2d0>)
 800585e:	bfbc      	itt	lt
 8005860:	2201      	movlt	r2, #1
 8005862:	6032      	strlt	r2, [r6, #0]
 8005864:	43bb      	bics	r3, r7
 8005866:	d112      	bne.n	800588e <_dtoa_r+0x9e>
 8005868:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800586a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800586e:	6013      	str	r3, [r2, #0]
 8005870:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005874:	4323      	orrs	r3, r4
 8005876:	f000 854d 	beq.w	8006314 <_dtoa_r+0xb24>
 800587a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800587c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005ad4 <_dtoa_r+0x2e4>
 8005880:	2b00      	cmp	r3, #0
 8005882:	f000 854f 	beq.w	8006324 <_dtoa_r+0xb34>
 8005886:	f10a 0303 	add.w	r3, sl, #3
 800588a:	f000 bd49 	b.w	8006320 <_dtoa_r+0xb30>
 800588e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005892:	2200      	movs	r2, #0
 8005894:	ec51 0b17 	vmov	r0, r1, d7
 8005898:	2300      	movs	r3, #0
 800589a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800589e:	f7fb f93b 	bl	8000b18 <__aeabi_dcmpeq>
 80058a2:	4680      	mov	r8, r0
 80058a4:	b158      	cbz	r0, 80058be <_dtoa_r+0xce>
 80058a6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80058a8:	2301      	movs	r3, #1
 80058aa:	6013      	str	r3, [r2, #0]
 80058ac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80058ae:	b113      	cbz	r3, 80058b6 <_dtoa_r+0xc6>
 80058b0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80058b2:	4b84      	ldr	r3, [pc, #528]	@ (8005ac4 <_dtoa_r+0x2d4>)
 80058b4:	6013      	str	r3, [r2, #0]
 80058b6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8005ad8 <_dtoa_r+0x2e8>
 80058ba:	f000 bd33 	b.w	8006324 <_dtoa_r+0xb34>
 80058be:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80058c2:	aa16      	add	r2, sp, #88	@ 0x58
 80058c4:	a917      	add	r1, sp, #92	@ 0x5c
 80058c6:	4658      	mov	r0, fp
 80058c8:	f001 f980 	bl	8006bcc <__d2b>
 80058cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80058d0:	4681      	mov	r9, r0
 80058d2:	2e00      	cmp	r6, #0
 80058d4:	d077      	beq.n	80059c6 <_dtoa_r+0x1d6>
 80058d6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80058d8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80058dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80058e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80058e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80058ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80058f0:	4619      	mov	r1, r3
 80058f2:	2200      	movs	r2, #0
 80058f4:	4b74      	ldr	r3, [pc, #464]	@ (8005ac8 <_dtoa_r+0x2d8>)
 80058f6:	f7fa fcef 	bl	80002d8 <__aeabi_dsub>
 80058fa:	a369      	add	r3, pc, #420	@ (adr r3, 8005aa0 <_dtoa_r+0x2b0>)
 80058fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005900:	f7fa fea2 	bl	8000648 <__aeabi_dmul>
 8005904:	a368      	add	r3, pc, #416	@ (adr r3, 8005aa8 <_dtoa_r+0x2b8>)
 8005906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800590a:	f7fa fce7 	bl	80002dc <__adddf3>
 800590e:	4604      	mov	r4, r0
 8005910:	4630      	mov	r0, r6
 8005912:	460d      	mov	r5, r1
 8005914:	f7fa fe2e 	bl	8000574 <__aeabi_i2d>
 8005918:	a365      	add	r3, pc, #404	@ (adr r3, 8005ab0 <_dtoa_r+0x2c0>)
 800591a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800591e:	f7fa fe93 	bl	8000648 <__aeabi_dmul>
 8005922:	4602      	mov	r2, r0
 8005924:	460b      	mov	r3, r1
 8005926:	4620      	mov	r0, r4
 8005928:	4629      	mov	r1, r5
 800592a:	f7fa fcd7 	bl	80002dc <__adddf3>
 800592e:	4604      	mov	r4, r0
 8005930:	460d      	mov	r5, r1
 8005932:	f7fb f939 	bl	8000ba8 <__aeabi_d2iz>
 8005936:	2200      	movs	r2, #0
 8005938:	4607      	mov	r7, r0
 800593a:	2300      	movs	r3, #0
 800593c:	4620      	mov	r0, r4
 800593e:	4629      	mov	r1, r5
 8005940:	f7fb f8f4 	bl	8000b2c <__aeabi_dcmplt>
 8005944:	b140      	cbz	r0, 8005958 <_dtoa_r+0x168>
 8005946:	4638      	mov	r0, r7
 8005948:	f7fa fe14 	bl	8000574 <__aeabi_i2d>
 800594c:	4622      	mov	r2, r4
 800594e:	462b      	mov	r3, r5
 8005950:	f7fb f8e2 	bl	8000b18 <__aeabi_dcmpeq>
 8005954:	b900      	cbnz	r0, 8005958 <_dtoa_r+0x168>
 8005956:	3f01      	subs	r7, #1
 8005958:	2f16      	cmp	r7, #22
 800595a:	d851      	bhi.n	8005a00 <_dtoa_r+0x210>
 800595c:	4b5b      	ldr	r3, [pc, #364]	@ (8005acc <_dtoa_r+0x2dc>)
 800595e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005966:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800596a:	f7fb f8df 	bl	8000b2c <__aeabi_dcmplt>
 800596e:	2800      	cmp	r0, #0
 8005970:	d048      	beq.n	8005a04 <_dtoa_r+0x214>
 8005972:	3f01      	subs	r7, #1
 8005974:	2300      	movs	r3, #0
 8005976:	9312      	str	r3, [sp, #72]	@ 0x48
 8005978:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800597a:	1b9b      	subs	r3, r3, r6
 800597c:	1e5a      	subs	r2, r3, #1
 800597e:	bf44      	itt	mi
 8005980:	f1c3 0801 	rsbmi	r8, r3, #1
 8005984:	2300      	movmi	r3, #0
 8005986:	9208      	str	r2, [sp, #32]
 8005988:	bf54      	ite	pl
 800598a:	f04f 0800 	movpl.w	r8, #0
 800598e:	9308      	strmi	r3, [sp, #32]
 8005990:	2f00      	cmp	r7, #0
 8005992:	db39      	blt.n	8005a08 <_dtoa_r+0x218>
 8005994:	9b08      	ldr	r3, [sp, #32]
 8005996:	970f      	str	r7, [sp, #60]	@ 0x3c
 8005998:	443b      	add	r3, r7
 800599a:	9308      	str	r3, [sp, #32]
 800599c:	2300      	movs	r3, #0
 800599e:	930a      	str	r3, [sp, #40]	@ 0x28
 80059a0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059a2:	2b09      	cmp	r3, #9
 80059a4:	d864      	bhi.n	8005a70 <_dtoa_r+0x280>
 80059a6:	2b05      	cmp	r3, #5
 80059a8:	bfc4      	itt	gt
 80059aa:	3b04      	subgt	r3, #4
 80059ac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80059ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059b0:	f1a3 0302 	sub.w	r3, r3, #2
 80059b4:	bfcc      	ite	gt
 80059b6:	2400      	movgt	r4, #0
 80059b8:	2401      	movle	r4, #1
 80059ba:	2b03      	cmp	r3, #3
 80059bc:	d863      	bhi.n	8005a86 <_dtoa_r+0x296>
 80059be:	e8df f003 	tbb	[pc, r3]
 80059c2:	372a      	.short	0x372a
 80059c4:	5535      	.short	0x5535
 80059c6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80059ca:	441e      	add	r6, r3
 80059cc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80059d0:	2b20      	cmp	r3, #32
 80059d2:	bfc1      	itttt	gt
 80059d4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80059d8:	409f      	lslgt	r7, r3
 80059da:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80059de:	fa24 f303 	lsrgt.w	r3, r4, r3
 80059e2:	bfd6      	itet	le
 80059e4:	f1c3 0320 	rsble	r3, r3, #32
 80059e8:	ea47 0003 	orrgt.w	r0, r7, r3
 80059ec:	fa04 f003 	lslle.w	r0, r4, r3
 80059f0:	f7fa fdb0 	bl	8000554 <__aeabi_ui2d>
 80059f4:	2201      	movs	r2, #1
 80059f6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80059fa:	3e01      	subs	r6, #1
 80059fc:	9214      	str	r2, [sp, #80]	@ 0x50
 80059fe:	e777      	b.n	80058f0 <_dtoa_r+0x100>
 8005a00:	2301      	movs	r3, #1
 8005a02:	e7b8      	b.n	8005976 <_dtoa_r+0x186>
 8005a04:	9012      	str	r0, [sp, #72]	@ 0x48
 8005a06:	e7b7      	b.n	8005978 <_dtoa_r+0x188>
 8005a08:	427b      	negs	r3, r7
 8005a0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	eba8 0807 	sub.w	r8, r8, r7
 8005a12:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005a14:	e7c4      	b.n	80059a0 <_dtoa_r+0x1b0>
 8005a16:	2300      	movs	r3, #0
 8005a18:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	dc35      	bgt.n	8005a8c <_dtoa_r+0x29c>
 8005a20:	2301      	movs	r3, #1
 8005a22:	9300      	str	r3, [sp, #0]
 8005a24:	9307      	str	r3, [sp, #28]
 8005a26:	461a      	mov	r2, r3
 8005a28:	920e      	str	r2, [sp, #56]	@ 0x38
 8005a2a:	e00b      	b.n	8005a44 <_dtoa_r+0x254>
 8005a2c:	2301      	movs	r3, #1
 8005a2e:	e7f3      	b.n	8005a18 <_dtoa_r+0x228>
 8005a30:	2300      	movs	r3, #0
 8005a32:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a36:	18fb      	adds	r3, r7, r3
 8005a38:	9300      	str	r3, [sp, #0]
 8005a3a:	3301      	adds	r3, #1
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	9307      	str	r3, [sp, #28]
 8005a40:	bfb8      	it	lt
 8005a42:	2301      	movlt	r3, #1
 8005a44:	f8db 001c 	ldr.w	r0, [fp, #28]
 8005a48:	2100      	movs	r1, #0
 8005a4a:	2204      	movs	r2, #4
 8005a4c:	f102 0514 	add.w	r5, r2, #20
 8005a50:	429d      	cmp	r5, r3
 8005a52:	d91f      	bls.n	8005a94 <_dtoa_r+0x2a4>
 8005a54:	6041      	str	r1, [r0, #4]
 8005a56:	4658      	mov	r0, fp
 8005a58:	f000 fd8e 	bl	8006578 <_Balloc>
 8005a5c:	4682      	mov	sl, r0
 8005a5e:	2800      	cmp	r0, #0
 8005a60:	d13c      	bne.n	8005adc <_dtoa_r+0x2ec>
 8005a62:	4b1b      	ldr	r3, [pc, #108]	@ (8005ad0 <_dtoa_r+0x2e0>)
 8005a64:	4602      	mov	r2, r0
 8005a66:	f240 11af 	movw	r1, #431	@ 0x1af
 8005a6a:	e6d8      	b.n	800581e <_dtoa_r+0x2e>
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e7e0      	b.n	8005a32 <_dtoa_r+0x242>
 8005a70:	2401      	movs	r4, #1
 8005a72:	2300      	movs	r3, #0
 8005a74:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a76:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005a78:	f04f 33ff 	mov.w	r3, #4294967295
 8005a7c:	9300      	str	r3, [sp, #0]
 8005a7e:	9307      	str	r3, [sp, #28]
 8005a80:	2200      	movs	r2, #0
 8005a82:	2312      	movs	r3, #18
 8005a84:	e7d0      	b.n	8005a28 <_dtoa_r+0x238>
 8005a86:	2301      	movs	r3, #1
 8005a88:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a8a:	e7f5      	b.n	8005a78 <_dtoa_r+0x288>
 8005a8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005a8e:	9300      	str	r3, [sp, #0]
 8005a90:	9307      	str	r3, [sp, #28]
 8005a92:	e7d7      	b.n	8005a44 <_dtoa_r+0x254>
 8005a94:	3101      	adds	r1, #1
 8005a96:	0052      	lsls	r2, r2, #1
 8005a98:	e7d8      	b.n	8005a4c <_dtoa_r+0x25c>
 8005a9a:	bf00      	nop
 8005a9c:	f3af 8000 	nop.w
 8005aa0:	636f4361 	.word	0x636f4361
 8005aa4:	3fd287a7 	.word	0x3fd287a7
 8005aa8:	8b60c8b3 	.word	0x8b60c8b3
 8005aac:	3fc68a28 	.word	0x3fc68a28
 8005ab0:	509f79fb 	.word	0x509f79fb
 8005ab4:	3fd34413 	.word	0x3fd34413
 8005ab8:	08007ef1 	.word	0x08007ef1
 8005abc:	08007f08 	.word	0x08007f08
 8005ac0:	7ff00000 	.word	0x7ff00000
 8005ac4:	08007ec1 	.word	0x08007ec1
 8005ac8:	3ff80000 	.word	0x3ff80000
 8005acc:	08008000 	.word	0x08008000
 8005ad0:	08007f60 	.word	0x08007f60
 8005ad4:	08007eed 	.word	0x08007eed
 8005ad8:	08007ec0 	.word	0x08007ec0
 8005adc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005ae0:	6018      	str	r0, [r3, #0]
 8005ae2:	9b07      	ldr	r3, [sp, #28]
 8005ae4:	2b0e      	cmp	r3, #14
 8005ae6:	f200 80a4 	bhi.w	8005c32 <_dtoa_r+0x442>
 8005aea:	2c00      	cmp	r4, #0
 8005aec:	f000 80a1 	beq.w	8005c32 <_dtoa_r+0x442>
 8005af0:	2f00      	cmp	r7, #0
 8005af2:	dd33      	ble.n	8005b5c <_dtoa_r+0x36c>
 8005af4:	4bad      	ldr	r3, [pc, #692]	@ (8005dac <_dtoa_r+0x5bc>)
 8005af6:	f007 020f 	and.w	r2, r7, #15
 8005afa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005afe:	ed93 7b00 	vldr	d7, [r3]
 8005b02:	05f8      	lsls	r0, r7, #23
 8005b04:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005b08:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005b0c:	d516      	bpl.n	8005b3c <_dtoa_r+0x34c>
 8005b0e:	4ba8      	ldr	r3, [pc, #672]	@ (8005db0 <_dtoa_r+0x5c0>)
 8005b10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b18:	f7fa fec0 	bl	800089c <__aeabi_ddiv>
 8005b1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b20:	f004 040f 	and.w	r4, r4, #15
 8005b24:	2603      	movs	r6, #3
 8005b26:	4da2      	ldr	r5, [pc, #648]	@ (8005db0 <_dtoa_r+0x5c0>)
 8005b28:	b954      	cbnz	r4, 8005b40 <_dtoa_r+0x350>
 8005b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b32:	f7fa feb3 	bl	800089c <__aeabi_ddiv>
 8005b36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b3a:	e028      	b.n	8005b8e <_dtoa_r+0x39e>
 8005b3c:	2602      	movs	r6, #2
 8005b3e:	e7f2      	b.n	8005b26 <_dtoa_r+0x336>
 8005b40:	07e1      	lsls	r1, r4, #31
 8005b42:	d508      	bpl.n	8005b56 <_dtoa_r+0x366>
 8005b44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b48:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005b4c:	f7fa fd7c 	bl	8000648 <__aeabi_dmul>
 8005b50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005b54:	3601      	adds	r6, #1
 8005b56:	1064      	asrs	r4, r4, #1
 8005b58:	3508      	adds	r5, #8
 8005b5a:	e7e5      	b.n	8005b28 <_dtoa_r+0x338>
 8005b5c:	f000 80d2 	beq.w	8005d04 <_dtoa_r+0x514>
 8005b60:	427c      	negs	r4, r7
 8005b62:	4b92      	ldr	r3, [pc, #584]	@ (8005dac <_dtoa_r+0x5bc>)
 8005b64:	4d92      	ldr	r5, [pc, #584]	@ (8005db0 <_dtoa_r+0x5c0>)
 8005b66:	f004 020f 	and.w	r2, r4, #15
 8005b6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b76:	f7fa fd67 	bl	8000648 <__aeabi_dmul>
 8005b7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005b7e:	1124      	asrs	r4, r4, #4
 8005b80:	2300      	movs	r3, #0
 8005b82:	2602      	movs	r6, #2
 8005b84:	2c00      	cmp	r4, #0
 8005b86:	f040 80b2 	bne.w	8005cee <_dtoa_r+0x4fe>
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d1d3      	bne.n	8005b36 <_dtoa_r+0x346>
 8005b8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005b90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	f000 80b7 	beq.w	8005d08 <_dtoa_r+0x518>
 8005b9a:	4b86      	ldr	r3, [pc, #536]	@ (8005db4 <_dtoa_r+0x5c4>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	4620      	mov	r0, r4
 8005ba0:	4629      	mov	r1, r5
 8005ba2:	f7fa ffc3 	bl	8000b2c <__aeabi_dcmplt>
 8005ba6:	2800      	cmp	r0, #0
 8005ba8:	f000 80ae 	beq.w	8005d08 <_dtoa_r+0x518>
 8005bac:	9b07      	ldr	r3, [sp, #28]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f000 80aa 	beq.w	8005d08 <_dtoa_r+0x518>
 8005bb4:	9b00      	ldr	r3, [sp, #0]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	dd37      	ble.n	8005c2a <_dtoa_r+0x43a>
 8005bba:	1e7b      	subs	r3, r7, #1
 8005bbc:	9304      	str	r3, [sp, #16]
 8005bbe:	4620      	mov	r0, r4
 8005bc0:	4b7d      	ldr	r3, [pc, #500]	@ (8005db8 <_dtoa_r+0x5c8>)
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	4629      	mov	r1, r5
 8005bc6:	f7fa fd3f 	bl	8000648 <__aeabi_dmul>
 8005bca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005bce:	9c00      	ldr	r4, [sp, #0]
 8005bd0:	3601      	adds	r6, #1
 8005bd2:	4630      	mov	r0, r6
 8005bd4:	f7fa fcce 	bl	8000574 <__aeabi_i2d>
 8005bd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005bdc:	f7fa fd34 	bl	8000648 <__aeabi_dmul>
 8005be0:	4b76      	ldr	r3, [pc, #472]	@ (8005dbc <_dtoa_r+0x5cc>)
 8005be2:	2200      	movs	r2, #0
 8005be4:	f7fa fb7a 	bl	80002dc <__adddf3>
 8005be8:	4605      	mov	r5, r0
 8005bea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005bee:	2c00      	cmp	r4, #0
 8005bf0:	f040 808d 	bne.w	8005d0e <_dtoa_r+0x51e>
 8005bf4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bf8:	4b71      	ldr	r3, [pc, #452]	@ (8005dc0 <_dtoa_r+0x5d0>)
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	f7fa fb6c 	bl	80002d8 <__aeabi_dsub>
 8005c00:	4602      	mov	r2, r0
 8005c02:	460b      	mov	r3, r1
 8005c04:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c08:	462a      	mov	r2, r5
 8005c0a:	4633      	mov	r3, r6
 8005c0c:	f7fa ffac 	bl	8000b68 <__aeabi_dcmpgt>
 8005c10:	2800      	cmp	r0, #0
 8005c12:	f040 828b 	bne.w	800612c <_dtoa_r+0x93c>
 8005c16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005c1a:	462a      	mov	r2, r5
 8005c1c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005c20:	f7fa ff84 	bl	8000b2c <__aeabi_dcmplt>
 8005c24:	2800      	cmp	r0, #0
 8005c26:	f040 8128 	bne.w	8005e7a <_dtoa_r+0x68a>
 8005c2a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005c2e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005c32:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	f2c0 815a 	blt.w	8005eee <_dtoa_r+0x6fe>
 8005c3a:	2f0e      	cmp	r7, #14
 8005c3c:	f300 8157 	bgt.w	8005eee <_dtoa_r+0x6fe>
 8005c40:	4b5a      	ldr	r3, [pc, #360]	@ (8005dac <_dtoa_r+0x5bc>)
 8005c42:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005c46:	ed93 7b00 	vldr	d7, [r3]
 8005c4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	ed8d 7b00 	vstr	d7, [sp]
 8005c52:	da03      	bge.n	8005c5c <_dtoa_r+0x46c>
 8005c54:	9b07      	ldr	r3, [sp, #28]
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	f340 8101 	ble.w	8005e5e <_dtoa_r+0x66e>
 8005c5c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8005c60:	4656      	mov	r6, sl
 8005c62:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c66:	4620      	mov	r0, r4
 8005c68:	4629      	mov	r1, r5
 8005c6a:	f7fa fe17 	bl	800089c <__aeabi_ddiv>
 8005c6e:	f7fa ff9b 	bl	8000ba8 <__aeabi_d2iz>
 8005c72:	4680      	mov	r8, r0
 8005c74:	f7fa fc7e 	bl	8000574 <__aeabi_i2d>
 8005c78:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005c7c:	f7fa fce4 	bl	8000648 <__aeabi_dmul>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4620      	mov	r0, r4
 8005c86:	4629      	mov	r1, r5
 8005c88:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005c8c:	f7fa fb24 	bl	80002d8 <__aeabi_dsub>
 8005c90:	f806 4b01 	strb.w	r4, [r6], #1
 8005c94:	9d07      	ldr	r5, [sp, #28]
 8005c96:	eba6 040a 	sub.w	r4, r6, sl
 8005c9a:	42a5      	cmp	r5, r4
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	460b      	mov	r3, r1
 8005ca0:	f040 8117 	bne.w	8005ed2 <_dtoa_r+0x6e2>
 8005ca4:	f7fa fb1a 	bl	80002dc <__adddf3>
 8005ca8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cac:	4604      	mov	r4, r0
 8005cae:	460d      	mov	r5, r1
 8005cb0:	f7fa ff5a 	bl	8000b68 <__aeabi_dcmpgt>
 8005cb4:	2800      	cmp	r0, #0
 8005cb6:	f040 80f9 	bne.w	8005eac <_dtoa_r+0x6bc>
 8005cba:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005cbe:	4620      	mov	r0, r4
 8005cc0:	4629      	mov	r1, r5
 8005cc2:	f7fa ff29 	bl	8000b18 <__aeabi_dcmpeq>
 8005cc6:	b118      	cbz	r0, 8005cd0 <_dtoa_r+0x4e0>
 8005cc8:	f018 0f01 	tst.w	r8, #1
 8005ccc:	f040 80ee 	bne.w	8005eac <_dtoa_r+0x6bc>
 8005cd0:	4649      	mov	r1, r9
 8005cd2:	4658      	mov	r0, fp
 8005cd4:	f000 fc90 	bl	80065f8 <_Bfree>
 8005cd8:	2300      	movs	r3, #0
 8005cda:	7033      	strb	r3, [r6, #0]
 8005cdc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005cde:	3701      	adds	r7, #1
 8005ce0:	601f      	str	r7, [r3, #0]
 8005ce2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	f000 831d 	beq.w	8006324 <_dtoa_r+0xb34>
 8005cea:	601e      	str	r6, [r3, #0]
 8005cec:	e31a      	b.n	8006324 <_dtoa_r+0xb34>
 8005cee:	07e2      	lsls	r2, r4, #31
 8005cf0:	d505      	bpl.n	8005cfe <_dtoa_r+0x50e>
 8005cf2:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005cf6:	f7fa fca7 	bl	8000648 <__aeabi_dmul>
 8005cfa:	3601      	adds	r6, #1
 8005cfc:	2301      	movs	r3, #1
 8005cfe:	1064      	asrs	r4, r4, #1
 8005d00:	3508      	adds	r5, #8
 8005d02:	e73f      	b.n	8005b84 <_dtoa_r+0x394>
 8005d04:	2602      	movs	r6, #2
 8005d06:	e742      	b.n	8005b8e <_dtoa_r+0x39e>
 8005d08:	9c07      	ldr	r4, [sp, #28]
 8005d0a:	9704      	str	r7, [sp, #16]
 8005d0c:	e761      	b.n	8005bd2 <_dtoa_r+0x3e2>
 8005d0e:	4b27      	ldr	r3, [pc, #156]	@ (8005dac <_dtoa_r+0x5bc>)
 8005d10:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d16:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d1a:	4454      	add	r4, sl
 8005d1c:	2900      	cmp	r1, #0
 8005d1e:	d053      	beq.n	8005dc8 <_dtoa_r+0x5d8>
 8005d20:	4928      	ldr	r1, [pc, #160]	@ (8005dc4 <_dtoa_r+0x5d4>)
 8005d22:	2000      	movs	r0, #0
 8005d24:	f7fa fdba 	bl	800089c <__aeabi_ddiv>
 8005d28:	4633      	mov	r3, r6
 8005d2a:	462a      	mov	r2, r5
 8005d2c:	f7fa fad4 	bl	80002d8 <__aeabi_dsub>
 8005d30:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d34:	4656      	mov	r6, sl
 8005d36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d3a:	f7fa ff35 	bl	8000ba8 <__aeabi_d2iz>
 8005d3e:	4605      	mov	r5, r0
 8005d40:	f7fa fc18 	bl	8000574 <__aeabi_i2d>
 8005d44:	4602      	mov	r2, r0
 8005d46:	460b      	mov	r3, r1
 8005d48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005d4c:	f7fa fac4 	bl	80002d8 <__aeabi_dsub>
 8005d50:	3530      	adds	r5, #48	@ 0x30
 8005d52:	4602      	mov	r2, r0
 8005d54:	460b      	mov	r3, r1
 8005d56:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d5a:	f806 5b01 	strb.w	r5, [r6], #1
 8005d5e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d62:	f7fa fee3 	bl	8000b2c <__aeabi_dcmplt>
 8005d66:	2800      	cmp	r0, #0
 8005d68:	d171      	bne.n	8005e4e <_dtoa_r+0x65e>
 8005d6a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d6e:	4911      	ldr	r1, [pc, #68]	@ (8005db4 <_dtoa_r+0x5c4>)
 8005d70:	2000      	movs	r0, #0
 8005d72:	f7fa fab1 	bl	80002d8 <__aeabi_dsub>
 8005d76:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d7a:	f7fa fed7 	bl	8000b2c <__aeabi_dcmplt>
 8005d7e:	2800      	cmp	r0, #0
 8005d80:	f040 8095 	bne.w	8005eae <_dtoa_r+0x6be>
 8005d84:	42a6      	cmp	r6, r4
 8005d86:	f43f af50 	beq.w	8005c2a <_dtoa_r+0x43a>
 8005d8a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005d8e:	4b0a      	ldr	r3, [pc, #40]	@ (8005db8 <_dtoa_r+0x5c8>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	f7fa fc59 	bl	8000648 <__aeabi_dmul>
 8005d96:	4b08      	ldr	r3, [pc, #32]	@ (8005db8 <_dtoa_r+0x5c8>)
 8005d98:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005da2:	f7fa fc51 	bl	8000648 <__aeabi_dmul>
 8005da6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005daa:	e7c4      	b.n	8005d36 <_dtoa_r+0x546>
 8005dac:	08008000 	.word	0x08008000
 8005db0:	08007fd8 	.word	0x08007fd8
 8005db4:	3ff00000 	.word	0x3ff00000
 8005db8:	40240000 	.word	0x40240000
 8005dbc:	401c0000 	.word	0x401c0000
 8005dc0:	40140000 	.word	0x40140000
 8005dc4:	3fe00000 	.word	0x3fe00000
 8005dc8:	4631      	mov	r1, r6
 8005dca:	4628      	mov	r0, r5
 8005dcc:	f7fa fc3c 	bl	8000648 <__aeabi_dmul>
 8005dd0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005dd4:	9415      	str	r4, [sp, #84]	@ 0x54
 8005dd6:	4656      	mov	r6, sl
 8005dd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005ddc:	f7fa fee4 	bl	8000ba8 <__aeabi_d2iz>
 8005de0:	4605      	mov	r5, r0
 8005de2:	f7fa fbc7 	bl	8000574 <__aeabi_i2d>
 8005de6:	4602      	mov	r2, r0
 8005de8:	460b      	mov	r3, r1
 8005dea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005dee:	f7fa fa73 	bl	80002d8 <__aeabi_dsub>
 8005df2:	3530      	adds	r5, #48	@ 0x30
 8005df4:	f806 5b01 	strb.w	r5, [r6], #1
 8005df8:	4602      	mov	r2, r0
 8005dfa:	460b      	mov	r3, r1
 8005dfc:	42a6      	cmp	r6, r4
 8005dfe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005e02:	f04f 0200 	mov.w	r2, #0
 8005e06:	d124      	bne.n	8005e52 <_dtoa_r+0x662>
 8005e08:	4bac      	ldr	r3, [pc, #688]	@ (80060bc <_dtoa_r+0x8cc>)
 8005e0a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005e0e:	f7fa fa65 	bl	80002dc <__adddf3>
 8005e12:	4602      	mov	r2, r0
 8005e14:	460b      	mov	r3, r1
 8005e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e1a:	f7fa fea5 	bl	8000b68 <__aeabi_dcmpgt>
 8005e1e:	2800      	cmp	r0, #0
 8005e20:	d145      	bne.n	8005eae <_dtoa_r+0x6be>
 8005e22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e26:	49a5      	ldr	r1, [pc, #660]	@ (80060bc <_dtoa_r+0x8cc>)
 8005e28:	2000      	movs	r0, #0
 8005e2a:	f7fa fa55 	bl	80002d8 <__aeabi_dsub>
 8005e2e:	4602      	mov	r2, r0
 8005e30:	460b      	mov	r3, r1
 8005e32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005e36:	f7fa fe79 	bl	8000b2c <__aeabi_dcmplt>
 8005e3a:	2800      	cmp	r0, #0
 8005e3c:	f43f aef5 	beq.w	8005c2a <_dtoa_r+0x43a>
 8005e40:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8005e42:	1e73      	subs	r3, r6, #1
 8005e44:	9315      	str	r3, [sp, #84]	@ 0x54
 8005e46:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e4a:	2b30      	cmp	r3, #48	@ 0x30
 8005e4c:	d0f8      	beq.n	8005e40 <_dtoa_r+0x650>
 8005e4e:	9f04      	ldr	r7, [sp, #16]
 8005e50:	e73e      	b.n	8005cd0 <_dtoa_r+0x4e0>
 8005e52:	4b9b      	ldr	r3, [pc, #620]	@ (80060c0 <_dtoa_r+0x8d0>)
 8005e54:	f7fa fbf8 	bl	8000648 <__aeabi_dmul>
 8005e58:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e5c:	e7bc      	b.n	8005dd8 <_dtoa_r+0x5e8>
 8005e5e:	d10c      	bne.n	8005e7a <_dtoa_r+0x68a>
 8005e60:	4b98      	ldr	r3, [pc, #608]	@ (80060c4 <_dtoa_r+0x8d4>)
 8005e62:	2200      	movs	r2, #0
 8005e64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e68:	f7fa fbee 	bl	8000648 <__aeabi_dmul>
 8005e6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005e70:	f7fa fe70 	bl	8000b54 <__aeabi_dcmpge>
 8005e74:	2800      	cmp	r0, #0
 8005e76:	f000 8157 	beq.w	8006128 <_dtoa_r+0x938>
 8005e7a:	2400      	movs	r4, #0
 8005e7c:	4625      	mov	r5, r4
 8005e7e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005e80:	43db      	mvns	r3, r3
 8005e82:	9304      	str	r3, [sp, #16]
 8005e84:	4656      	mov	r6, sl
 8005e86:	2700      	movs	r7, #0
 8005e88:	4621      	mov	r1, r4
 8005e8a:	4658      	mov	r0, fp
 8005e8c:	f000 fbb4 	bl	80065f8 <_Bfree>
 8005e90:	2d00      	cmp	r5, #0
 8005e92:	d0dc      	beq.n	8005e4e <_dtoa_r+0x65e>
 8005e94:	b12f      	cbz	r7, 8005ea2 <_dtoa_r+0x6b2>
 8005e96:	42af      	cmp	r7, r5
 8005e98:	d003      	beq.n	8005ea2 <_dtoa_r+0x6b2>
 8005e9a:	4639      	mov	r1, r7
 8005e9c:	4658      	mov	r0, fp
 8005e9e:	f000 fbab 	bl	80065f8 <_Bfree>
 8005ea2:	4629      	mov	r1, r5
 8005ea4:	4658      	mov	r0, fp
 8005ea6:	f000 fba7 	bl	80065f8 <_Bfree>
 8005eaa:	e7d0      	b.n	8005e4e <_dtoa_r+0x65e>
 8005eac:	9704      	str	r7, [sp, #16]
 8005eae:	4633      	mov	r3, r6
 8005eb0:	461e      	mov	r6, r3
 8005eb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005eb6:	2a39      	cmp	r2, #57	@ 0x39
 8005eb8:	d107      	bne.n	8005eca <_dtoa_r+0x6da>
 8005eba:	459a      	cmp	sl, r3
 8005ebc:	d1f8      	bne.n	8005eb0 <_dtoa_r+0x6c0>
 8005ebe:	9a04      	ldr	r2, [sp, #16]
 8005ec0:	3201      	adds	r2, #1
 8005ec2:	9204      	str	r2, [sp, #16]
 8005ec4:	2230      	movs	r2, #48	@ 0x30
 8005ec6:	f88a 2000 	strb.w	r2, [sl]
 8005eca:	781a      	ldrb	r2, [r3, #0]
 8005ecc:	3201      	adds	r2, #1
 8005ece:	701a      	strb	r2, [r3, #0]
 8005ed0:	e7bd      	b.n	8005e4e <_dtoa_r+0x65e>
 8005ed2:	4b7b      	ldr	r3, [pc, #492]	@ (80060c0 <_dtoa_r+0x8d0>)
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f7fa fbb7 	bl	8000648 <__aeabi_dmul>
 8005eda:	2200      	movs	r2, #0
 8005edc:	2300      	movs	r3, #0
 8005ede:	4604      	mov	r4, r0
 8005ee0:	460d      	mov	r5, r1
 8005ee2:	f7fa fe19 	bl	8000b18 <__aeabi_dcmpeq>
 8005ee6:	2800      	cmp	r0, #0
 8005ee8:	f43f aebb 	beq.w	8005c62 <_dtoa_r+0x472>
 8005eec:	e6f0      	b.n	8005cd0 <_dtoa_r+0x4e0>
 8005eee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005ef0:	2a00      	cmp	r2, #0
 8005ef2:	f000 80db 	beq.w	80060ac <_dtoa_r+0x8bc>
 8005ef6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ef8:	2a01      	cmp	r2, #1
 8005efa:	f300 80bf 	bgt.w	800607c <_dtoa_r+0x88c>
 8005efe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8005f00:	2a00      	cmp	r2, #0
 8005f02:	f000 80b7 	beq.w	8006074 <_dtoa_r+0x884>
 8005f06:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005f0a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f0c:	4646      	mov	r6, r8
 8005f0e:	9a08      	ldr	r2, [sp, #32]
 8005f10:	2101      	movs	r1, #1
 8005f12:	441a      	add	r2, r3
 8005f14:	4658      	mov	r0, fp
 8005f16:	4498      	add	r8, r3
 8005f18:	9208      	str	r2, [sp, #32]
 8005f1a:	f000 fc21 	bl	8006760 <__i2b>
 8005f1e:	4605      	mov	r5, r0
 8005f20:	b15e      	cbz	r6, 8005f3a <_dtoa_r+0x74a>
 8005f22:	9b08      	ldr	r3, [sp, #32]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	dd08      	ble.n	8005f3a <_dtoa_r+0x74a>
 8005f28:	42b3      	cmp	r3, r6
 8005f2a:	9a08      	ldr	r2, [sp, #32]
 8005f2c:	bfa8      	it	ge
 8005f2e:	4633      	movge	r3, r6
 8005f30:	eba8 0803 	sub.w	r8, r8, r3
 8005f34:	1af6      	subs	r6, r6, r3
 8005f36:	1ad3      	subs	r3, r2, r3
 8005f38:	9308      	str	r3, [sp, #32]
 8005f3a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f3c:	b1f3      	cbz	r3, 8005f7c <_dtoa_r+0x78c>
 8005f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	f000 80b7 	beq.w	80060b4 <_dtoa_r+0x8c4>
 8005f46:	b18c      	cbz	r4, 8005f6c <_dtoa_r+0x77c>
 8005f48:	4629      	mov	r1, r5
 8005f4a:	4622      	mov	r2, r4
 8005f4c:	4658      	mov	r0, fp
 8005f4e:	f000 fcc7 	bl	80068e0 <__pow5mult>
 8005f52:	464a      	mov	r2, r9
 8005f54:	4601      	mov	r1, r0
 8005f56:	4605      	mov	r5, r0
 8005f58:	4658      	mov	r0, fp
 8005f5a:	f000 fc17 	bl	800678c <__multiply>
 8005f5e:	4649      	mov	r1, r9
 8005f60:	9004      	str	r0, [sp, #16]
 8005f62:	4658      	mov	r0, fp
 8005f64:	f000 fb48 	bl	80065f8 <_Bfree>
 8005f68:	9b04      	ldr	r3, [sp, #16]
 8005f6a:	4699      	mov	r9, r3
 8005f6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005f6e:	1b1a      	subs	r2, r3, r4
 8005f70:	d004      	beq.n	8005f7c <_dtoa_r+0x78c>
 8005f72:	4649      	mov	r1, r9
 8005f74:	4658      	mov	r0, fp
 8005f76:	f000 fcb3 	bl	80068e0 <__pow5mult>
 8005f7a:	4681      	mov	r9, r0
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	4658      	mov	r0, fp
 8005f80:	f000 fbee 	bl	8006760 <__i2b>
 8005f84:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f86:	4604      	mov	r4, r0
 8005f88:	2b00      	cmp	r3, #0
 8005f8a:	f000 81cf 	beq.w	800632c <_dtoa_r+0xb3c>
 8005f8e:	461a      	mov	r2, r3
 8005f90:	4601      	mov	r1, r0
 8005f92:	4658      	mov	r0, fp
 8005f94:	f000 fca4 	bl	80068e0 <__pow5mult>
 8005f98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	4604      	mov	r4, r0
 8005f9e:	f300 8095 	bgt.w	80060cc <_dtoa_r+0x8dc>
 8005fa2:	9b02      	ldr	r3, [sp, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	f040 8087 	bne.w	80060b8 <_dtoa_r+0x8c8>
 8005faa:	9b03      	ldr	r3, [sp, #12]
 8005fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	f040 8089 	bne.w	80060c8 <_dtoa_r+0x8d8>
 8005fb6:	9b03      	ldr	r3, [sp, #12]
 8005fb8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8005fbc:	0d1b      	lsrs	r3, r3, #20
 8005fbe:	051b      	lsls	r3, r3, #20
 8005fc0:	b12b      	cbz	r3, 8005fce <_dtoa_r+0x7de>
 8005fc2:	9b08      	ldr	r3, [sp, #32]
 8005fc4:	3301      	adds	r3, #1
 8005fc6:	9308      	str	r3, [sp, #32]
 8005fc8:	f108 0801 	add.w	r8, r8, #1
 8005fcc:	2301      	movs	r3, #1
 8005fce:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fd0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	f000 81b0 	beq.w	8006338 <_dtoa_r+0xb48>
 8005fd8:	6923      	ldr	r3, [r4, #16]
 8005fda:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005fde:	6918      	ldr	r0, [r3, #16]
 8005fe0:	f000 fb72 	bl	80066c8 <__hi0bits>
 8005fe4:	f1c0 0020 	rsb	r0, r0, #32
 8005fe8:	9b08      	ldr	r3, [sp, #32]
 8005fea:	4418      	add	r0, r3
 8005fec:	f010 001f 	ands.w	r0, r0, #31
 8005ff0:	d077      	beq.n	80060e2 <_dtoa_r+0x8f2>
 8005ff2:	f1c0 0320 	rsb	r3, r0, #32
 8005ff6:	2b04      	cmp	r3, #4
 8005ff8:	dd6b      	ble.n	80060d2 <_dtoa_r+0x8e2>
 8005ffa:	9b08      	ldr	r3, [sp, #32]
 8005ffc:	f1c0 001c 	rsb	r0, r0, #28
 8006000:	4403      	add	r3, r0
 8006002:	4480      	add	r8, r0
 8006004:	4406      	add	r6, r0
 8006006:	9308      	str	r3, [sp, #32]
 8006008:	f1b8 0f00 	cmp.w	r8, #0
 800600c:	dd05      	ble.n	800601a <_dtoa_r+0x82a>
 800600e:	4649      	mov	r1, r9
 8006010:	4642      	mov	r2, r8
 8006012:	4658      	mov	r0, fp
 8006014:	f000 fcbe 	bl	8006994 <__lshift>
 8006018:	4681      	mov	r9, r0
 800601a:	9b08      	ldr	r3, [sp, #32]
 800601c:	2b00      	cmp	r3, #0
 800601e:	dd05      	ble.n	800602c <_dtoa_r+0x83c>
 8006020:	4621      	mov	r1, r4
 8006022:	461a      	mov	r2, r3
 8006024:	4658      	mov	r0, fp
 8006026:	f000 fcb5 	bl	8006994 <__lshift>
 800602a:	4604      	mov	r4, r0
 800602c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800602e:	2b00      	cmp	r3, #0
 8006030:	d059      	beq.n	80060e6 <_dtoa_r+0x8f6>
 8006032:	4621      	mov	r1, r4
 8006034:	4648      	mov	r0, r9
 8006036:	f000 fd19 	bl	8006a6c <__mcmp>
 800603a:	2800      	cmp	r0, #0
 800603c:	da53      	bge.n	80060e6 <_dtoa_r+0x8f6>
 800603e:	1e7b      	subs	r3, r7, #1
 8006040:	9304      	str	r3, [sp, #16]
 8006042:	4649      	mov	r1, r9
 8006044:	2300      	movs	r3, #0
 8006046:	220a      	movs	r2, #10
 8006048:	4658      	mov	r0, fp
 800604a:	f000 faf7 	bl	800663c <__multadd>
 800604e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006050:	4681      	mov	r9, r0
 8006052:	2b00      	cmp	r3, #0
 8006054:	f000 8172 	beq.w	800633c <_dtoa_r+0xb4c>
 8006058:	2300      	movs	r3, #0
 800605a:	4629      	mov	r1, r5
 800605c:	220a      	movs	r2, #10
 800605e:	4658      	mov	r0, fp
 8006060:	f000 faec 	bl	800663c <__multadd>
 8006064:	9b00      	ldr	r3, [sp, #0]
 8006066:	2b00      	cmp	r3, #0
 8006068:	4605      	mov	r5, r0
 800606a:	dc67      	bgt.n	800613c <_dtoa_r+0x94c>
 800606c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800606e:	2b02      	cmp	r3, #2
 8006070:	dc41      	bgt.n	80060f6 <_dtoa_r+0x906>
 8006072:	e063      	b.n	800613c <_dtoa_r+0x94c>
 8006074:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006076:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800607a:	e746      	b.n	8005f0a <_dtoa_r+0x71a>
 800607c:	9b07      	ldr	r3, [sp, #28]
 800607e:	1e5c      	subs	r4, r3, #1
 8006080:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006082:	42a3      	cmp	r3, r4
 8006084:	bfbf      	itttt	lt
 8006086:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006088:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800608a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800608c:	1ae3      	sublt	r3, r4, r3
 800608e:	bfb4      	ite	lt
 8006090:	18d2      	addlt	r2, r2, r3
 8006092:	1b1c      	subge	r4, r3, r4
 8006094:	9b07      	ldr	r3, [sp, #28]
 8006096:	bfbc      	itt	lt
 8006098:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800609a:	2400      	movlt	r4, #0
 800609c:	2b00      	cmp	r3, #0
 800609e:	bfb5      	itete	lt
 80060a0:	eba8 0603 	sublt.w	r6, r8, r3
 80060a4:	9b07      	ldrge	r3, [sp, #28]
 80060a6:	2300      	movlt	r3, #0
 80060a8:	4646      	movge	r6, r8
 80060aa:	e730      	b.n	8005f0e <_dtoa_r+0x71e>
 80060ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80060ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80060b0:	4646      	mov	r6, r8
 80060b2:	e735      	b.n	8005f20 <_dtoa_r+0x730>
 80060b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80060b6:	e75c      	b.n	8005f72 <_dtoa_r+0x782>
 80060b8:	2300      	movs	r3, #0
 80060ba:	e788      	b.n	8005fce <_dtoa_r+0x7de>
 80060bc:	3fe00000 	.word	0x3fe00000
 80060c0:	40240000 	.word	0x40240000
 80060c4:	40140000 	.word	0x40140000
 80060c8:	9b02      	ldr	r3, [sp, #8]
 80060ca:	e780      	b.n	8005fce <_dtoa_r+0x7de>
 80060cc:	2300      	movs	r3, #0
 80060ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80060d0:	e782      	b.n	8005fd8 <_dtoa_r+0x7e8>
 80060d2:	d099      	beq.n	8006008 <_dtoa_r+0x818>
 80060d4:	9a08      	ldr	r2, [sp, #32]
 80060d6:	331c      	adds	r3, #28
 80060d8:	441a      	add	r2, r3
 80060da:	4498      	add	r8, r3
 80060dc:	441e      	add	r6, r3
 80060de:	9208      	str	r2, [sp, #32]
 80060e0:	e792      	b.n	8006008 <_dtoa_r+0x818>
 80060e2:	4603      	mov	r3, r0
 80060e4:	e7f6      	b.n	80060d4 <_dtoa_r+0x8e4>
 80060e6:	9b07      	ldr	r3, [sp, #28]
 80060e8:	9704      	str	r7, [sp, #16]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	dc20      	bgt.n	8006130 <_dtoa_r+0x940>
 80060ee:	9300      	str	r3, [sp, #0]
 80060f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	dd1e      	ble.n	8006134 <_dtoa_r+0x944>
 80060f6:	9b00      	ldr	r3, [sp, #0]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	f47f aec0 	bne.w	8005e7e <_dtoa_r+0x68e>
 80060fe:	4621      	mov	r1, r4
 8006100:	2205      	movs	r2, #5
 8006102:	4658      	mov	r0, fp
 8006104:	f000 fa9a 	bl	800663c <__multadd>
 8006108:	4601      	mov	r1, r0
 800610a:	4604      	mov	r4, r0
 800610c:	4648      	mov	r0, r9
 800610e:	f000 fcad 	bl	8006a6c <__mcmp>
 8006112:	2800      	cmp	r0, #0
 8006114:	f77f aeb3 	ble.w	8005e7e <_dtoa_r+0x68e>
 8006118:	4656      	mov	r6, sl
 800611a:	2331      	movs	r3, #49	@ 0x31
 800611c:	f806 3b01 	strb.w	r3, [r6], #1
 8006120:	9b04      	ldr	r3, [sp, #16]
 8006122:	3301      	adds	r3, #1
 8006124:	9304      	str	r3, [sp, #16]
 8006126:	e6ae      	b.n	8005e86 <_dtoa_r+0x696>
 8006128:	9c07      	ldr	r4, [sp, #28]
 800612a:	9704      	str	r7, [sp, #16]
 800612c:	4625      	mov	r5, r4
 800612e:	e7f3      	b.n	8006118 <_dtoa_r+0x928>
 8006130:	9b07      	ldr	r3, [sp, #28]
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006136:	2b00      	cmp	r3, #0
 8006138:	f000 8104 	beq.w	8006344 <_dtoa_r+0xb54>
 800613c:	2e00      	cmp	r6, #0
 800613e:	dd05      	ble.n	800614c <_dtoa_r+0x95c>
 8006140:	4629      	mov	r1, r5
 8006142:	4632      	mov	r2, r6
 8006144:	4658      	mov	r0, fp
 8006146:	f000 fc25 	bl	8006994 <__lshift>
 800614a:	4605      	mov	r5, r0
 800614c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800614e:	2b00      	cmp	r3, #0
 8006150:	d05a      	beq.n	8006208 <_dtoa_r+0xa18>
 8006152:	6869      	ldr	r1, [r5, #4]
 8006154:	4658      	mov	r0, fp
 8006156:	f000 fa0f 	bl	8006578 <_Balloc>
 800615a:	4606      	mov	r6, r0
 800615c:	b928      	cbnz	r0, 800616a <_dtoa_r+0x97a>
 800615e:	4b84      	ldr	r3, [pc, #528]	@ (8006370 <_dtoa_r+0xb80>)
 8006160:	4602      	mov	r2, r0
 8006162:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006166:	f7ff bb5a 	b.w	800581e <_dtoa_r+0x2e>
 800616a:	692a      	ldr	r2, [r5, #16]
 800616c:	3202      	adds	r2, #2
 800616e:	0092      	lsls	r2, r2, #2
 8006170:	f105 010c 	add.w	r1, r5, #12
 8006174:	300c      	adds	r0, #12
 8006176:	f000 ffaf 	bl	80070d8 <memcpy>
 800617a:	2201      	movs	r2, #1
 800617c:	4631      	mov	r1, r6
 800617e:	4658      	mov	r0, fp
 8006180:	f000 fc08 	bl	8006994 <__lshift>
 8006184:	f10a 0301 	add.w	r3, sl, #1
 8006188:	9307      	str	r3, [sp, #28]
 800618a:	9b00      	ldr	r3, [sp, #0]
 800618c:	4453      	add	r3, sl
 800618e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006190:	9b02      	ldr	r3, [sp, #8]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	462f      	mov	r7, r5
 8006198:	930a      	str	r3, [sp, #40]	@ 0x28
 800619a:	4605      	mov	r5, r0
 800619c:	9b07      	ldr	r3, [sp, #28]
 800619e:	4621      	mov	r1, r4
 80061a0:	3b01      	subs	r3, #1
 80061a2:	4648      	mov	r0, r9
 80061a4:	9300      	str	r3, [sp, #0]
 80061a6:	f7ff fa9a 	bl	80056de <quorem>
 80061aa:	4639      	mov	r1, r7
 80061ac:	9002      	str	r0, [sp, #8]
 80061ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80061b2:	4648      	mov	r0, r9
 80061b4:	f000 fc5a 	bl	8006a6c <__mcmp>
 80061b8:	462a      	mov	r2, r5
 80061ba:	9008      	str	r0, [sp, #32]
 80061bc:	4621      	mov	r1, r4
 80061be:	4658      	mov	r0, fp
 80061c0:	f000 fc70 	bl	8006aa4 <__mdiff>
 80061c4:	68c2      	ldr	r2, [r0, #12]
 80061c6:	4606      	mov	r6, r0
 80061c8:	bb02      	cbnz	r2, 800620c <_dtoa_r+0xa1c>
 80061ca:	4601      	mov	r1, r0
 80061cc:	4648      	mov	r0, r9
 80061ce:	f000 fc4d 	bl	8006a6c <__mcmp>
 80061d2:	4602      	mov	r2, r0
 80061d4:	4631      	mov	r1, r6
 80061d6:	4658      	mov	r0, fp
 80061d8:	920e      	str	r2, [sp, #56]	@ 0x38
 80061da:	f000 fa0d 	bl	80065f8 <_Bfree>
 80061de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80061e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061e2:	9e07      	ldr	r6, [sp, #28]
 80061e4:	ea43 0102 	orr.w	r1, r3, r2
 80061e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061ea:	4319      	orrs	r1, r3
 80061ec:	d110      	bne.n	8006210 <_dtoa_r+0xa20>
 80061ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80061f2:	d029      	beq.n	8006248 <_dtoa_r+0xa58>
 80061f4:	9b08      	ldr	r3, [sp, #32]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	dd02      	ble.n	8006200 <_dtoa_r+0xa10>
 80061fa:	9b02      	ldr	r3, [sp, #8]
 80061fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006200:	9b00      	ldr	r3, [sp, #0]
 8006202:	f883 8000 	strb.w	r8, [r3]
 8006206:	e63f      	b.n	8005e88 <_dtoa_r+0x698>
 8006208:	4628      	mov	r0, r5
 800620a:	e7bb      	b.n	8006184 <_dtoa_r+0x994>
 800620c:	2201      	movs	r2, #1
 800620e:	e7e1      	b.n	80061d4 <_dtoa_r+0x9e4>
 8006210:	9b08      	ldr	r3, [sp, #32]
 8006212:	2b00      	cmp	r3, #0
 8006214:	db04      	blt.n	8006220 <_dtoa_r+0xa30>
 8006216:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006218:	430b      	orrs	r3, r1
 800621a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800621c:	430b      	orrs	r3, r1
 800621e:	d120      	bne.n	8006262 <_dtoa_r+0xa72>
 8006220:	2a00      	cmp	r2, #0
 8006222:	dded      	ble.n	8006200 <_dtoa_r+0xa10>
 8006224:	4649      	mov	r1, r9
 8006226:	2201      	movs	r2, #1
 8006228:	4658      	mov	r0, fp
 800622a:	f000 fbb3 	bl	8006994 <__lshift>
 800622e:	4621      	mov	r1, r4
 8006230:	4681      	mov	r9, r0
 8006232:	f000 fc1b 	bl	8006a6c <__mcmp>
 8006236:	2800      	cmp	r0, #0
 8006238:	dc03      	bgt.n	8006242 <_dtoa_r+0xa52>
 800623a:	d1e1      	bne.n	8006200 <_dtoa_r+0xa10>
 800623c:	f018 0f01 	tst.w	r8, #1
 8006240:	d0de      	beq.n	8006200 <_dtoa_r+0xa10>
 8006242:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006246:	d1d8      	bne.n	80061fa <_dtoa_r+0xa0a>
 8006248:	9a00      	ldr	r2, [sp, #0]
 800624a:	2339      	movs	r3, #57	@ 0x39
 800624c:	7013      	strb	r3, [r2, #0]
 800624e:	4633      	mov	r3, r6
 8006250:	461e      	mov	r6, r3
 8006252:	3b01      	subs	r3, #1
 8006254:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006258:	2a39      	cmp	r2, #57	@ 0x39
 800625a:	d052      	beq.n	8006302 <_dtoa_r+0xb12>
 800625c:	3201      	adds	r2, #1
 800625e:	701a      	strb	r2, [r3, #0]
 8006260:	e612      	b.n	8005e88 <_dtoa_r+0x698>
 8006262:	2a00      	cmp	r2, #0
 8006264:	dd07      	ble.n	8006276 <_dtoa_r+0xa86>
 8006266:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800626a:	d0ed      	beq.n	8006248 <_dtoa_r+0xa58>
 800626c:	9a00      	ldr	r2, [sp, #0]
 800626e:	f108 0301 	add.w	r3, r8, #1
 8006272:	7013      	strb	r3, [r2, #0]
 8006274:	e608      	b.n	8005e88 <_dtoa_r+0x698>
 8006276:	9b07      	ldr	r3, [sp, #28]
 8006278:	9a07      	ldr	r2, [sp, #28]
 800627a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800627e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006280:	4293      	cmp	r3, r2
 8006282:	d028      	beq.n	80062d6 <_dtoa_r+0xae6>
 8006284:	4649      	mov	r1, r9
 8006286:	2300      	movs	r3, #0
 8006288:	220a      	movs	r2, #10
 800628a:	4658      	mov	r0, fp
 800628c:	f000 f9d6 	bl	800663c <__multadd>
 8006290:	42af      	cmp	r7, r5
 8006292:	4681      	mov	r9, r0
 8006294:	f04f 0300 	mov.w	r3, #0
 8006298:	f04f 020a 	mov.w	r2, #10
 800629c:	4639      	mov	r1, r7
 800629e:	4658      	mov	r0, fp
 80062a0:	d107      	bne.n	80062b2 <_dtoa_r+0xac2>
 80062a2:	f000 f9cb 	bl	800663c <__multadd>
 80062a6:	4607      	mov	r7, r0
 80062a8:	4605      	mov	r5, r0
 80062aa:	9b07      	ldr	r3, [sp, #28]
 80062ac:	3301      	adds	r3, #1
 80062ae:	9307      	str	r3, [sp, #28]
 80062b0:	e774      	b.n	800619c <_dtoa_r+0x9ac>
 80062b2:	f000 f9c3 	bl	800663c <__multadd>
 80062b6:	4629      	mov	r1, r5
 80062b8:	4607      	mov	r7, r0
 80062ba:	2300      	movs	r3, #0
 80062bc:	220a      	movs	r2, #10
 80062be:	4658      	mov	r0, fp
 80062c0:	f000 f9bc 	bl	800663c <__multadd>
 80062c4:	4605      	mov	r5, r0
 80062c6:	e7f0      	b.n	80062aa <_dtoa_r+0xaba>
 80062c8:	9b00      	ldr	r3, [sp, #0]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	bfcc      	ite	gt
 80062ce:	461e      	movgt	r6, r3
 80062d0:	2601      	movle	r6, #1
 80062d2:	4456      	add	r6, sl
 80062d4:	2700      	movs	r7, #0
 80062d6:	4649      	mov	r1, r9
 80062d8:	2201      	movs	r2, #1
 80062da:	4658      	mov	r0, fp
 80062dc:	f000 fb5a 	bl	8006994 <__lshift>
 80062e0:	4621      	mov	r1, r4
 80062e2:	4681      	mov	r9, r0
 80062e4:	f000 fbc2 	bl	8006a6c <__mcmp>
 80062e8:	2800      	cmp	r0, #0
 80062ea:	dcb0      	bgt.n	800624e <_dtoa_r+0xa5e>
 80062ec:	d102      	bne.n	80062f4 <_dtoa_r+0xb04>
 80062ee:	f018 0f01 	tst.w	r8, #1
 80062f2:	d1ac      	bne.n	800624e <_dtoa_r+0xa5e>
 80062f4:	4633      	mov	r3, r6
 80062f6:	461e      	mov	r6, r3
 80062f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80062fc:	2a30      	cmp	r2, #48	@ 0x30
 80062fe:	d0fa      	beq.n	80062f6 <_dtoa_r+0xb06>
 8006300:	e5c2      	b.n	8005e88 <_dtoa_r+0x698>
 8006302:	459a      	cmp	sl, r3
 8006304:	d1a4      	bne.n	8006250 <_dtoa_r+0xa60>
 8006306:	9b04      	ldr	r3, [sp, #16]
 8006308:	3301      	adds	r3, #1
 800630a:	9304      	str	r3, [sp, #16]
 800630c:	2331      	movs	r3, #49	@ 0x31
 800630e:	f88a 3000 	strb.w	r3, [sl]
 8006312:	e5b9      	b.n	8005e88 <_dtoa_r+0x698>
 8006314:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006316:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006374 <_dtoa_r+0xb84>
 800631a:	b11b      	cbz	r3, 8006324 <_dtoa_r+0xb34>
 800631c:	f10a 0308 	add.w	r3, sl, #8
 8006320:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006322:	6013      	str	r3, [r2, #0]
 8006324:	4650      	mov	r0, sl
 8006326:	b019      	add	sp, #100	@ 0x64
 8006328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800632e:	2b01      	cmp	r3, #1
 8006330:	f77f ae37 	ble.w	8005fa2 <_dtoa_r+0x7b2>
 8006334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006336:	930a      	str	r3, [sp, #40]	@ 0x28
 8006338:	2001      	movs	r0, #1
 800633a:	e655      	b.n	8005fe8 <_dtoa_r+0x7f8>
 800633c:	9b00      	ldr	r3, [sp, #0]
 800633e:	2b00      	cmp	r3, #0
 8006340:	f77f aed6 	ble.w	80060f0 <_dtoa_r+0x900>
 8006344:	4656      	mov	r6, sl
 8006346:	4621      	mov	r1, r4
 8006348:	4648      	mov	r0, r9
 800634a:	f7ff f9c8 	bl	80056de <quorem>
 800634e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006352:	f806 8b01 	strb.w	r8, [r6], #1
 8006356:	9b00      	ldr	r3, [sp, #0]
 8006358:	eba6 020a 	sub.w	r2, r6, sl
 800635c:	4293      	cmp	r3, r2
 800635e:	ddb3      	ble.n	80062c8 <_dtoa_r+0xad8>
 8006360:	4649      	mov	r1, r9
 8006362:	2300      	movs	r3, #0
 8006364:	220a      	movs	r2, #10
 8006366:	4658      	mov	r0, fp
 8006368:	f000 f968 	bl	800663c <__multadd>
 800636c:	4681      	mov	r9, r0
 800636e:	e7ea      	b.n	8006346 <_dtoa_r+0xb56>
 8006370:	08007f60 	.word	0x08007f60
 8006374:	08007ee4 	.word	0x08007ee4

08006378 <_free_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	4605      	mov	r5, r0
 800637c:	2900      	cmp	r1, #0
 800637e:	d041      	beq.n	8006404 <_free_r+0x8c>
 8006380:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006384:	1f0c      	subs	r4, r1, #4
 8006386:	2b00      	cmp	r3, #0
 8006388:	bfb8      	it	lt
 800638a:	18e4      	addlt	r4, r4, r3
 800638c:	f000 f8e8 	bl	8006560 <__malloc_lock>
 8006390:	4a1d      	ldr	r2, [pc, #116]	@ (8006408 <_free_r+0x90>)
 8006392:	6813      	ldr	r3, [r2, #0]
 8006394:	b933      	cbnz	r3, 80063a4 <_free_r+0x2c>
 8006396:	6063      	str	r3, [r4, #4]
 8006398:	6014      	str	r4, [r2, #0]
 800639a:	4628      	mov	r0, r5
 800639c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80063a0:	f000 b8e4 	b.w	800656c <__malloc_unlock>
 80063a4:	42a3      	cmp	r3, r4
 80063a6:	d908      	bls.n	80063ba <_free_r+0x42>
 80063a8:	6820      	ldr	r0, [r4, #0]
 80063aa:	1821      	adds	r1, r4, r0
 80063ac:	428b      	cmp	r3, r1
 80063ae:	bf01      	itttt	eq
 80063b0:	6819      	ldreq	r1, [r3, #0]
 80063b2:	685b      	ldreq	r3, [r3, #4]
 80063b4:	1809      	addeq	r1, r1, r0
 80063b6:	6021      	streq	r1, [r4, #0]
 80063b8:	e7ed      	b.n	8006396 <_free_r+0x1e>
 80063ba:	461a      	mov	r2, r3
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	b10b      	cbz	r3, 80063c4 <_free_r+0x4c>
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	d9fa      	bls.n	80063ba <_free_r+0x42>
 80063c4:	6811      	ldr	r1, [r2, #0]
 80063c6:	1850      	adds	r0, r2, r1
 80063c8:	42a0      	cmp	r0, r4
 80063ca:	d10b      	bne.n	80063e4 <_free_r+0x6c>
 80063cc:	6820      	ldr	r0, [r4, #0]
 80063ce:	4401      	add	r1, r0
 80063d0:	1850      	adds	r0, r2, r1
 80063d2:	4283      	cmp	r3, r0
 80063d4:	6011      	str	r1, [r2, #0]
 80063d6:	d1e0      	bne.n	800639a <_free_r+0x22>
 80063d8:	6818      	ldr	r0, [r3, #0]
 80063da:	685b      	ldr	r3, [r3, #4]
 80063dc:	6053      	str	r3, [r2, #4]
 80063de:	4408      	add	r0, r1
 80063e0:	6010      	str	r0, [r2, #0]
 80063e2:	e7da      	b.n	800639a <_free_r+0x22>
 80063e4:	d902      	bls.n	80063ec <_free_r+0x74>
 80063e6:	230c      	movs	r3, #12
 80063e8:	602b      	str	r3, [r5, #0]
 80063ea:	e7d6      	b.n	800639a <_free_r+0x22>
 80063ec:	6820      	ldr	r0, [r4, #0]
 80063ee:	1821      	adds	r1, r4, r0
 80063f0:	428b      	cmp	r3, r1
 80063f2:	bf04      	itt	eq
 80063f4:	6819      	ldreq	r1, [r3, #0]
 80063f6:	685b      	ldreq	r3, [r3, #4]
 80063f8:	6063      	str	r3, [r4, #4]
 80063fa:	bf04      	itt	eq
 80063fc:	1809      	addeq	r1, r1, r0
 80063fe:	6021      	streq	r1, [r4, #0]
 8006400:	6054      	str	r4, [r2, #4]
 8006402:	e7ca      	b.n	800639a <_free_r+0x22>
 8006404:	bd38      	pop	{r3, r4, r5, pc}
 8006406:	bf00      	nop
 8006408:	2000043c 	.word	0x2000043c

0800640c <malloc>:
 800640c:	4b02      	ldr	r3, [pc, #8]	@ (8006418 <malloc+0xc>)
 800640e:	4601      	mov	r1, r0
 8006410:	6818      	ldr	r0, [r3, #0]
 8006412:	f000 b825 	b.w	8006460 <_malloc_r>
 8006416:	bf00      	nop
 8006418:	20000018 	.word	0x20000018

0800641c <sbrk_aligned>:
 800641c:	b570      	push	{r4, r5, r6, lr}
 800641e:	4e0f      	ldr	r6, [pc, #60]	@ (800645c <sbrk_aligned+0x40>)
 8006420:	460c      	mov	r4, r1
 8006422:	6831      	ldr	r1, [r6, #0]
 8006424:	4605      	mov	r5, r0
 8006426:	b911      	cbnz	r1, 800642e <sbrk_aligned+0x12>
 8006428:	f000 fe46 	bl	80070b8 <_sbrk_r>
 800642c:	6030      	str	r0, [r6, #0]
 800642e:	4621      	mov	r1, r4
 8006430:	4628      	mov	r0, r5
 8006432:	f000 fe41 	bl	80070b8 <_sbrk_r>
 8006436:	1c43      	adds	r3, r0, #1
 8006438:	d103      	bne.n	8006442 <sbrk_aligned+0x26>
 800643a:	f04f 34ff 	mov.w	r4, #4294967295
 800643e:	4620      	mov	r0, r4
 8006440:	bd70      	pop	{r4, r5, r6, pc}
 8006442:	1cc4      	adds	r4, r0, #3
 8006444:	f024 0403 	bic.w	r4, r4, #3
 8006448:	42a0      	cmp	r0, r4
 800644a:	d0f8      	beq.n	800643e <sbrk_aligned+0x22>
 800644c:	1a21      	subs	r1, r4, r0
 800644e:	4628      	mov	r0, r5
 8006450:	f000 fe32 	bl	80070b8 <_sbrk_r>
 8006454:	3001      	adds	r0, #1
 8006456:	d1f2      	bne.n	800643e <sbrk_aligned+0x22>
 8006458:	e7ef      	b.n	800643a <sbrk_aligned+0x1e>
 800645a:	bf00      	nop
 800645c:	20000438 	.word	0x20000438

08006460 <_malloc_r>:
 8006460:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006464:	1ccd      	adds	r5, r1, #3
 8006466:	f025 0503 	bic.w	r5, r5, #3
 800646a:	3508      	adds	r5, #8
 800646c:	2d0c      	cmp	r5, #12
 800646e:	bf38      	it	cc
 8006470:	250c      	movcc	r5, #12
 8006472:	2d00      	cmp	r5, #0
 8006474:	4606      	mov	r6, r0
 8006476:	db01      	blt.n	800647c <_malloc_r+0x1c>
 8006478:	42a9      	cmp	r1, r5
 800647a:	d904      	bls.n	8006486 <_malloc_r+0x26>
 800647c:	230c      	movs	r3, #12
 800647e:	6033      	str	r3, [r6, #0]
 8006480:	2000      	movs	r0, #0
 8006482:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006486:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800655c <_malloc_r+0xfc>
 800648a:	f000 f869 	bl	8006560 <__malloc_lock>
 800648e:	f8d8 3000 	ldr.w	r3, [r8]
 8006492:	461c      	mov	r4, r3
 8006494:	bb44      	cbnz	r4, 80064e8 <_malloc_r+0x88>
 8006496:	4629      	mov	r1, r5
 8006498:	4630      	mov	r0, r6
 800649a:	f7ff ffbf 	bl	800641c <sbrk_aligned>
 800649e:	1c43      	adds	r3, r0, #1
 80064a0:	4604      	mov	r4, r0
 80064a2:	d158      	bne.n	8006556 <_malloc_r+0xf6>
 80064a4:	f8d8 4000 	ldr.w	r4, [r8]
 80064a8:	4627      	mov	r7, r4
 80064aa:	2f00      	cmp	r7, #0
 80064ac:	d143      	bne.n	8006536 <_malloc_r+0xd6>
 80064ae:	2c00      	cmp	r4, #0
 80064b0:	d04b      	beq.n	800654a <_malloc_r+0xea>
 80064b2:	6823      	ldr	r3, [r4, #0]
 80064b4:	4639      	mov	r1, r7
 80064b6:	4630      	mov	r0, r6
 80064b8:	eb04 0903 	add.w	r9, r4, r3
 80064bc:	f000 fdfc 	bl	80070b8 <_sbrk_r>
 80064c0:	4581      	cmp	r9, r0
 80064c2:	d142      	bne.n	800654a <_malloc_r+0xea>
 80064c4:	6821      	ldr	r1, [r4, #0]
 80064c6:	1a6d      	subs	r5, r5, r1
 80064c8:	4629      	mov	r1, r5
 80064ca:	4630      	mov	r0, r6
 80064cc:	f7ff ffa6 	bl	800641c <sbrk_aligned>
 80064d0:	3001      	adds	r0, #1
 80064d2:	d03a      	beq.n	800654a <_malloc_r+0xea>
 80064d4:	6823      	ldr	r3, [r4, #0]
 80064d6:	442b      	add	r3, r5
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	f8d8 3000 	ldr.w	r3, [r8]
 80064de:	685a      	ldr	r2, [r3, #4]
 80064e0:	bb62      	cbnz	r2, 800653c <_malloc_r+0xdc>
 80064e2:	f8c8 7000 	str.w	r7, [r8]
 80064e6:	e00f      	b.n	8006508 <_malloc_r+0xa8>
 80064e8:	6822      	ldr	r2, [r4, #0]
 80064ea:	1b52      	subs	r2, r2, r5
 80064ec:	d420      	bmi.n	8006530 <_malloc_r+0xd0>
 80064ee:	2a0b      	cmp	r2, #11
 80064f0:	d917      	bls.n	8006522 <_malloc_r+0xc2>
 80064f2:	1961      	adds	r1, r4, r5
 80064f4:	42a3      	cmp	r3, r4
 80064f6:	6025      	str	r5, [r4, #0]
 80064f8:	bf18      	it	ne
 80064fa:	6059      	strne	r1, [r3, #4]
 80064fc:	6863      	ldr	r3, [r4, #4]
 80064fe:	bf08      	it	eq
 8006500:	f8c8 1000 	streq.w	r1, [r8]
 8006504:	5162      	str	r2, [r4, r5]
 8006506:	604b      	str	r3, [r1, #4]
 8006508:	4630      	mov	r0, r6
 800650a:	f000 f82f 	bl	800656c <__malloc_unlock>
 800650e:	f104 000b 	add.w	r0, r4, #11
 8006512:	1d23      	adds	r3, r4, #4
 8006514:	f020 0007 	bic.w	r0, r0, #7
 8006518:	1ac2      	subs	r2, r0, r3
 800651a:	bf1c      	itt	ne
 800651c:	1a1b      	subne	r3, r3, r0
 800651e:	50a3      	strne	r3, [r4, r2]
 8006520:	e7af      	b.n	8006482 <_malloc_r+0x22>
 8006522:	6862      	ldr	r2, [r4, #4]
 8006524:	42a3      	cmp	r3, r4
 8006526:	bf0c      	ite	eq
 8006528:	f8c8 2000 	streq.w	r2, [r8]
 800652c:	605a      	strne	r2, [r3, #4]
 800652e:	e7eb      	b.n	8006508 <_malloc_r+0xa8>
 8006530:	4623      	mov	r3, r4
 8006532:	6864      	ldr	r4, [r4, #4]
 8006534:	e7ae      	b.n	8006494 <_malloc_r+0x34>
 8006536:	463c      	mov	r4, r7
 8006538:	687f      	ldr	r7, [r7, #4]
 800653a:	e7b6      	b.n	80064aa <_malloc_r+0x4a>
 800653c:	461a      	mov	r2, r3
 800653e:	685b      	ldr	r3, [r3, #4]
 8006540:	42a3      	cmp	r3, r4
 8006542:	d1fb      	bne.n	800653c <_malloc_r+0xdc>
 8006544:	2300      	movs	r3, #0
 8006546:	6053      	str	r3, [r2, #4]
 8006548:	e7de      	b.n	8006508 <_malloc_r+0xa8>
 800654a:	230c      	movs	r3, #12
 800654c:	6033      	str	r3, [r6, #0]
 800654e:	4630      	mov	r0, r6
 8006550:	f000 f80c 	bl	800656c <__malloc_unlock>
 8006554:	e794      	b.n	8006480 <_malloc_r+0x20>
 8006556:	6005      	str	r5, [r0, #0]
 8006558:	e7d6      	b.n	8006508 <_malloc_r+0xa8>
 800655a:	bf00      	nop
 800655c:	2000043c 	.word	0x2000043c

08006560 <__malloc_lock>:
 8006560:	4801      	ldr	r0, [pc, #4]	@ (8006568 <__malloc_lock+0x8>)
 8006562:	f7ff b8ba 	b.w	80056da <__retarget_lock_acquire_recursive>
 8006566:	bf00      	nop
 8006568:	20000434 	.word	0x20000434

0800656c <__malloc_unlock>:
 800656c:	4801      	ldr	r0, [pc, #4]	@ (8006574 <__malloc_unlock+0x8>)
 800656e:	f7ff b8b5 	b.w	80056dc <__retarget_lock_release_recursive>
 8006572:	bf00      	nop
 8006574:	20000434 	.word	0x20000434

08006578 <_Balloc>:
 8006578:	b570      	push	{r4, r5, r6, lr}
 800657a:	69c6      	ldr	r6, [r0, #28]
 800657c:	4604      	mov	r4, r0
 800657e:	460d      	mov	r5, r1
 8006580:	b976      	cbnz	r6, 80065a0 <_Balloc+0x28>
 8006582:	2010      	movs	r0, #16
 8006584:	f7ff ff42 	bl	800640c <malloc>
 8006588:	4602      	mov	r2, r0
 800658a:	61e0      	str	r0, [r4, #28]
 800658c:	b920      	cbnz	r0, 8006598 <_Balloc+0x20>
 800658e:	4b18      	ldr	r3, [pc, #96]	@ (80065f0 <_Balloc+0x78>)
 8006590:	4818      	ldr	r0, [pc, #96]	@ (80065f4 <_Balloc+0x7c>)
 8006592:	216b      	movs	r1, #107	@ 0x6b
 8006594:	f000 fdae 	bl	80070f4 <__assert_func>
 8006598:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800659c:	6006      	str	r6, [r0, #0]
 800659e:	60c6      	str	r6, [r0, #12]
 80065a0:	69e6      	ldr	r6, [r4, #28]
 80065a2:	68f3      	ldr	r3, [r6, #12]
 80065a4:	b183      	cbz	r3, 80065c8 <_Balloc+0x50>
 80065a6:	69e3      	ldr	r3, [r4, #28]
 80065a8:	68db      	ldr	r3, [r3, #12]
 80065aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80065ae:	b9b8      	cbnz	r0, 80065e0 <_Balloc+0x68>
 80065b0:	2101      	movs	r1, #1
 80065b2:	fa01 f605 	lsl.w	r6, r1, r5
 80065b6:	1d72      	adds	r2, r6, #5
 80065b8:	0092      	lsls	r2, r2, #2
 80065ba:	4620      	mov	r0, r4
 80065bc:	f000 fdb8 	bl	8007130 <_calloc_r>
 80065c0:	b160      	cbz	r0, 80065dc <_Balloc+0x64>
 80065c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80065c6:	e00e      	b.n	80065e6 <_Balloc+0x6e>
 80065c8:	2221      	movs	r2, #33	@ 0x21
 80065ca:	2104      	movs	r1, #4
 80065cc:	4620      	mov	r0, r4
 80065ce:	f000 fdaf 	bl	8007130 <_calloc_r>
 80065d2:	69e3      	ldr	r3, [r4, #28]
 80065d4:	60f0      	str	r0, [r6, #12]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d1e4      	bne.n	80065a6 <_Balloc+0x2e>
 80065dc:	2000      	movs	r0, #0
 80065de:	bd70      	pop	{r4, r5, r6, pc}
 80065e0:	6802      	ldr	r2, [r0, #0]
 80065e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80065e6:	2300      	movs	r3, #0
 80065e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80065ec:	e7f7      	b.n	80065de <_Balloc+0x66>
 80065ee:	bf00      	nop
 80065f0:	08007ef1 	.word	0x08007ef1
 80065f4:	08007f71 	.word	0x08007f71

080065f8 <_Bfree>:
 80065f8:	b570      	push	{r4, r5, r6, lr}
 80065fa:	69c6      	ldr	r6, [r0, #28]
 80065fc:	4605      	mov	r5, r0
 80065fe:	460c      	mov	r4, r1
 8006600:	b976      	cbnz	r6, 8006620 <_Bfree+0x28>
 8006602:	2010      	movs	r0, #16
 8006604:	f7ff ff02 	bl	800640c <malloc>
 8006608:	4602      	mov	r2, r0
 800660a:	61e8      	str	r0, [r5, #28]
 800660c:	b920      	cbnz	r0, 8006618 <_Bfree+0x20>
 800660e:	4b09      	ldr	r3, [pc, #36]	@ (8006634 <_Bfree+0x3c>)
 8006610:	4809      	ldr	r0, [pc, #36]	@ (8006638 <_Bfree+0x40>)
 8006612:	218f      	movs	r1, #143	@ 0x8f
 8006614:	f000 fd6e 	bl	80070f4 <__assert_func>
 8006618:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800661c:	6006      	str	r6, [r0, #0]
 800661e:	60c6      	str	r6, [r0, #12]
 8006620:	b13c      	cbz	r4, 8006632 <_Bfree+0x3a>
 8006622:	69eb      	ldr	r3, [r5, #28]
 8006624:	6862      	ldr	r2, [r4, #4]
 8006626:	68db      	ldr	r3, [r3, #12]
 8006628:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800662c:	6021      	str	r1, [r4, #0]
 800662e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006632:	bd70      	pop	{r4, r5, r6, pc}
 8006634:	08007ef1 	.word	0x08007ef1
 8006638:	08007f71 	.word	0x08007f71

0800663c <__multadd>:
 800663c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006640:	690d      	ldr	r5, [r1, #16]
 8006642:	4607      	mov	r7, r0
 8006644:	460c      	mov	r4, r1
 8006646:	461e      	mov	r6, r3
 8006648:	f101 0c14 	add.w	ip, r1, #20
 800664c:	2000      	movs	r0, #0
 800664e:	f8dc 3000 	ldr.w	r3, [ip]
 8006652:	b299      	uxth	r1, r3
 8006654:	fb02 6101 	mla	r1, r2, r1, r6
 8006658:	0c1e      	lsrs	r6, r3, #16
 800665a:	0c0b      	lsrs	r3, r1, #16
 800665c:	fb02 3306 	mla	r3, r2, r6, r3
 8006660:	b289      	uxth	r1, r1
 8006662:	3001      	adds	r0, #1
 8006664:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006668:	4285      	cmp	r5, r0
 800666a:	f84c 1b04 	str.w	r1, [ip], #4
 800666e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006672:	dcec      	bgt.n	800664e <__multadd+0x12>
 8006674:	b30e      	cbz	r6, 80066ba <__multadd+0x7e>
 8006676:	68a3      	ldr	r3, [r4, #8]
 8006678:	42ab      	cmp	r3, r5
 800667a:	dc19      	bgt.n	80066b0 <__multadd+0x74>
 800667c:	6861      	ldr	r1, [r4, #4]
 800667e:	4638      	mov	r0, r7
 8006680:	3101      	adds	r1, #1
 8006682:	f7ff ff79 	bl	8006578 <_Balloc>
 8006686:	4680      	mov	r8, r0
 8006688:	b928      	cbnz	r0, 8006696 <__multadd+0x5a>
 800668a:	4602      	mov	r2, r0
 800668c:	4b0c      	ldr	r3, [pc, #48]	@ (80066c0 <__multadd+0x84>)
 800668e:	480d      	ldr	r0, [pc, #52]	@ (80066c4 <__multadd+0x88>)
 8006690:	21ba      	movs	r1, #186	@ 0xba
 8006692:	f000 fd2f 	bl	80070f4 <__assert_func>
 8006696:	6922      	ldr	r2, [r4, #16]
 8006698:	3202      	adds	r2, #2
 800669a:	f104 010c 	add.w	r1, r4, #12
 800669e:	0092      	lsls	r2, r2, #2
 80066a0:	300c      	adds	r0, #12
 80066a2:	f000 fd19 	bl	80070d8 <memcpy>
 80066a6:	4621      	mov	r1, r4
 80066a8:	4638      	mov	r0, r7
 80066aa:	f7ff ffa5 	bl	80065f8 <_Bfree>
 80066ae:	4644      	mov	r4, r8
 80066b0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80066b4:	3501      	adds	r5, #1
 80066b6:	615e      	str	r6, [r3, #20]
 80066b8:	6125      	str	r5, [r4, #16]
 80066ba:	4620      	mov	r0, r4
 80066bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80066c0:	08007f60 	.word	0x08007f60
 80066c4:	08007f71 	.word	0x08007f71

080066c8 <__hi0bits>:
 80066c8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80066cc:	4603      	mov	r3, r0
 80066ce:	bf36      	itet	cc
 80066d0:	0403      	lslcc	r3, r0, #16
 80066d2:	2000      	movcs	r0, #0
 80066d4:	2010      	movcc	r0, #16
 80066d6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80066da:	bf3c      	itt	cc
 80066dc:	021b      	lslcc	r3, r3, #8
 80066de:	3008      	addcc	r0, #8
 80066e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066e4:	bf3c      	itt	cc
 80066e6:	011b      	lslcc	r3, r3, #4
 80066e8:	3004      	addcc	r0, #4
 80066ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80066ee:	bf3c      	itt	cc
 80066f0:	009b      	lslcc	r3, r3, #2
 80066f2:	3002      	addcc	r0, #2
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	db05      	blt.n	8006704 <__hi0bits+0x3c>
 80066f8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80066fc:	f100 0001 	add.w	r0, r0, #1
 8006700:	bf08      	it	eq
 8006702:	2020      	moveq	r0, #32
 8006704:	4770      	bx	lr

08006706 <__lo0bits>:
 8006706:	6803      	ldr	r3, [r0, #0]
 8006708:	4602      	mov	r2, r0
 800670a:	f013 0007 	ands.w	r0, r3, #7
 800670e:	d00b      	beq.n	8006728 <__lo0bits+0x22>
 8006710:	07d9      	lsls	r1, r3, #31
 8006712:	d421      	bmi.n	8006758 <__lo0bits+0x52>
 8006714:	0798      	lsls	r0, r3, #30
 8006716:	bf49      	itett	mi
 8006718:	085b      	lsrmi	r3, r3, #1
 800671a:	089b      	lsrpl	r3, r3, #2
 800671c:	2001      	movmi	r0, #1
 800671e:	6013      	strmi	r3, [r2, #0]
 8006720:	bf5c      	itt	pl
 8006722:	6013      	strpl	r3, [r2, #0]
 8006724:	2002      	movpl	r0, #2
 8006726:	4770      	bx	lr
 8006728:	b299      	uxth	r1, r3
 800672a:	b909      	cbnz	r1, 8006730 <__lo0bits+0x2a>
 800672c:	0c1b      	lsrs	r3, r3, #16
 800672e:	2010      	movs	r0, #16
 8006730:	b2d9      	uxtb	r1, r3
 8006732:	b909      	cbnz	r1, 8006738 <__lo0bits+0x32>
 8006734:	3008      	adds	r0, #8
 8006736:	0a1b      	lsrs	r3, r3, #8
 8006738:	0719      	lsls	r1, r3, #28
 800673a:	bf04      	itt	eq
 800673c:	091b      	lsreq	r3, r3, #4
 800673e:	3004      	addeq	r0, #4
 8006740:	0799      	lsls	r1, r3, #30
 8006742:	bf04      	itt	eq
 8006744:	089b      	lsreq	r3, r3, #2
 8006746:	3002      	addeq	r0, #2
 8006748:	07d9      	lsls	r1, r3, #31
 800674a:	d403      	bmi.n	8006754 <__lo0bits+0x4e>
 800674c:	085b      	lsrs	r3, r3, #1
 800674e:	f100 0001 	add.w	r0, r0, #1
 8006752:	d003      	beq.n	800675c <__lo0bits+0x56>
 8006754:	6013      	str	r3, [r2, #0]
 8006756:	4770      	bx	lr
 8006758:	2000      	movs	r0, #0
 800675a:	4770      	bx	lr
 800675c:	2020      	movs	r0, #32
 800675e:	4770      	bx	lr

08006760 <__i2b>:
 8006760:	b510      	push	{r4, lr}
 8006762:	460c      	mov	r4, r1
 8006764:	2101      	movs	r1, #1
 8006766:	f7ff ff07 	bl	8006578 <_Balloc>
 800676a:	4602      	mov	r2, r0
 800676c:	b928      	cbnz	r0, 800677a <__i2b+0x1a>
 800676e:	4b05      	ldr	r3, [pc, #20]	@ (8006784 <__i2b+0x24>)
 8006770:	4805      	ldr	r0, [pc, #20]	@ (8006788 <__i2b+0x28>)
 8006772:	f240 1145 	movw	r1, #325	@ 0x145
 8006776:	f000 fcbd 	bl	80070f4 <__assert_func>
 800677a:	2301      	movs	r3, #1
 800677c:	6144      	str	r4, [r0, #20]
 800677e:	6103      	str	r3, [r0, #16]
 8006780:	bd10      	pop	{r4, pc}
 8006782:	bf00      	nop
 8006784:	08007f60 	.word	0x08007f60
 8006788:	08007f71 	.word	0x08007f71

0800678c <__multiply>:
 800678c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006790:	4614      	mov	r4, r2
 8006792:	690a      	ldr	r2, [r1, #16]
 8006794:	6923      	ldr	r3, [r4, #16]
 8006796:	429a      	cmp	r2, r3
 8006798:	bfa8      	it	ge
 800679a:	4623      	movge	r3, r4
 800679c:	460f      	mov	r7, r1
 800679e:	bfa4      	itt	ge
 80067a0:	460c      	movge	r4, r1
 80067a2:	461f      	movge	r7, r3
 80067a4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80067a8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80067ac:	68a3      	ldr	r3, [r4, #8]
 80067ae:	6861      	ldr	r1, [r4, #4]
 80067b0:	eb0a 0609 	add.w	r6, sl, r9
 80067b4:	42b3      	cmp	r3, r6
 80067b6:	b085      	sub	sp, #20
 80067b8:	bfb8      	it	lt
 80067ba:	3101      	addlt	r1, #1
 80067bc:	f7ff fedc 	bl	8006578 <_Balloc>
 80067c0:	b930      	cbnz	r0, 80067d0 <__multiply+0x44>
 80067c2:	4602      	mov	r2, r0
 80067c4:	4b44      	ldr	r3, [pc, #272]	@ (80068d8 <__multiply+0x14c>)
 80067c6:	4845      	ldr	r0, [pc, #276]	@ (80068dc <__multiply+0x150>)
 80067c8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80067cc:	f000 fc92 	bl	80070f4 <__assert_func>
 80067d0:	f100 0514 	add.w	r5, r0, #20
 80067d4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80067d8:	462b      	mov	r3, r5
 80067da:	2200      	movs	r2, #0
 80067dc:	4543      	cmp	r3, r8
 80067de:	d321      	bcc.n	8006824 <__multiply+0x98>
 80067e0:	f107 0114 	add.w	r1, r7, #20
 80067e4:	f104 0214 	add.w	r2, r4, #20
 80067e8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 80067ec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 80067f0:	9302      	str	r3, [sp, #8]
 80067f2:	1b13      	subs	r3, r2, r4
 80067f4:	3b15      	subs	r3, #21
 80067f6:	f023 0303 	bic.w	r3, r3, #3
 80067fa:	3304      	adds	r3, #4
 80067fc:	f104 0715 	add.w	r7, r4, #21
 8006800:	42ba      	cmp	r2, r7
 8006802:	bf38      	it	cc
 8006804:	2304      	movcc	r3, #4
 8006806:	9301      	str	r3, [sp, #4]
 8006808:	9b02      	ldr	r3, [sp, #8]
 800680a:	9103      	str	r1, [sp, #12]
 800680c:	428b      	cmp	r3, r1
 800680e:	d80c      	bhi.n	800682a <__multiply+0x9e>
 8006810:	2e00      	cmp	r6, #0
 8006812:	dd03      	ble.n	800681c <__multiply+0x90>
 8006814:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006818:	2b00      	cmp	r3, #0
 800681a:	d05b      	beq.n	80068d4 <__multiply+0x148>
 800681c:	6106      	str	r6, [r0, #16]
 800681e:	b005      	add	sp, #20
 8006820:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006824:	f843 2b04 	str.w	r2, [r3], #4
 8006828:	e7d8      	b.n	80067dc <__multiply+0x50>
 800682a:	f8b1 a000 	ldrh.w	sl, [r1]
 800682e:	f1ba 0f00 	cmp.w	sl, #0
 8006832:	d024      	beq.n	800687e <__multiply+0xf2>
 8006834:	f104 0e14 	add.w	lr, r4, #20
 8006838:	46a9      	mov	r9, r5
 800683a:	f04f 0c00 	mov.w	ip, #0
 800683e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006842:	f8d9 3000 	ldr.w	r3, [r9]
 8006846:	fa1f fb87 	uxth.w	fp, r7
 800684a:	b29b      	uxth	r3, r3
 800684c:	fb0a 330b 	mla	r3, sl, fp, r3
 8006850:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006854:	f8d9 7000 	ldr.w	r7, [r9]
 8006858:	4463      	add	r3, ip
 800685a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800685e:	fb0a c70b 	mla	r7, sl, fp, ip
 8006862:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006866:	b29b      	uxth	r3, r3
 8006868:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800686c:	4572      	cmp	r2, lr
 800686e:	f849 3b04 	str.w	r3, [r9], #4
 8006872:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006876:	d8e2      	bhi.n	800683e <__multiply+0xb2>
 8006878:	9b01      	ldr	r3, [sp, #4]
 800687a:	f845 c003 	str.w	ip, [r5, r3]
 800687e:	9b03      	ldr	r3, [sp, #12]
 8006880:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006884:	3104      	adds	r1, #4
 8006886:	f1b9 0f00 	cmp.w	r9, #0
 800688a:	d021      	beq.n	80068d0 <__multiply+0x144>
 800688c:	682b      	ldr	r3, [r5, #0]
 800688e:	f104 0c14 	add.w	ip, r4, #20
 8006892:	46ae      	mov	lr, r5
 8006894:	f04f 0a00 	mov.w	sl, #0
 8006898:	f8bc b000 	ldrh.w	fp, [ip]
 800689c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80068a0:	fb09 770b 	mla	r7, r9, fp, r7
 80068a4:	4457      	add	r7, sl
 80068a6:	b29b      	uxth	r3, r3
 80068a8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80068ac:	f84e 3b04 	str.w	r3, [lr], #4
 80068b0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80068b4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068b8:	f8be 3000 	ldrh.w	r3, [lr]
 80068bc:	fb09 330a 	mla	r3, r9, sl, r3
 80068c0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80068c4:	4562      	cmp	r2, ip
 80068c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80068ca:	d8e5      	bhi.n	8006898 <__multiply+0x10c>
 80068cc:	9f01      	ldr	r7, [sp, #4]
 80068ce:	51eb      	str	r3, [r5, r7]
 80068d0:	3504      	adds	r5, #4
 80068d2:	e799      	b.n	8006808 <__multiply+0x7c>
 80068d4:	3e01      	subs	r6, #1
 80068d6:	e79b      	b.n	8006810 <__multiply+0x84>
 80068d8:	08007f60 	.word	0x08007f60
 80068dc:	08007f71 	.word	0x08007f71

080068e0 <__pow5mult>:
 80068e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80068e4:	4615      	mov	r5, r2
 80068e6:	f012 0203 	ands.w	r2, r2, #3
 80068ea:	4607      	mov	r7, r0
 80068ec:	460e      	mov	r6, r1
 80068ee:	d007      	beq.n	8006900 <__pow5mult+0x20>
 80068f0:	4c25      	ldr	r4, [pc, #148]	@ (8006988 <__pow5mult+0xa8>)
 80068f2:	3a01      	subs	r2, #1
 80068f4:	2300      	movs	r3, #0
 80068f6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80068fa:	f7ff fe9f 	bl	800663c <__multadd>
 80068fe:	4606      	mov	r6, r0
 8006900:	10ad      	asrs	r5, r5, #2
 8006902:	d03d      	beq.n	8006980 <__pow5mult+0xa0>
 8006904:	69fc      	ldr	r4, [r7, #28]
 8006906:	b97c      	cbnz	r4, 8006928 <__pow5mult+0x48>
 8006908:	2010      	movs	r0, #16
 800690a:	f7ff fd7f 	bl	800640c <malloc>
 800690e:	4602      	mov	r2, r0
 8006910:	61f8      	str	r0, [r7, #28]
 8006912:	b928      	cbnz	r0, 8006920 <__pow5mult+0x40>
 8006914:	4b1d      	ldr	r3, [pc, #116]	@ (800698c <__pow5mult+0xac>)
 8006916:	481e      	ldr	r0, [pc, #120]	@ (8006990 <__pow5mult+0xb0>)
 8006918:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800691c:	f000 fbea 	bl	80070f4 <__assert_func>
 8006920:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006924:	6004      	str	r4, [r0, #0]
 8006926:	60c4      	str	r4, [r0, #12]
 8006928:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800692c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006930:	b94c      	cbnz	r4, 8006946 <__pow5mult+0x66>
 8006932:	f240 2171 	movw	r1, #625	@ 0x271
 8006936:	4638      	mov	r0, r7
 8006938:	f7ff ff12 	bl	8006760 <__i2b>
 800693c:	2300      	movs	r3, #0
 800693e:	f8c8 0008 	str.w	r0, [r8, #8]
 8006942:	4604      	mov	r4, r0
 8006944:	6003      	str	r3, [r0, #0]
 8006946:	f04f 0900 	mov.w	r9, #0
 800694a:	07eb      	lsls	r3, r5, #31
 800694c:	d50a      	bpl.n	8006964 <__pow5mult+0x84>
 800694e:	4631      	mov	r1, r6
 8006950:	4622      	mov	r2, r4
 8006952:	4638      	mov	r0, r7
 8006954:	f7ff ff1a 	bl	800678c <__multiply>
 8006958:	4631      	mov	r1, r6
 800695a:	4680      	mov	r8, r0
 800695c:	4638      	mov	r0, r7
 800695e:	f7ff fe4b 	bl	80065f8 <_Bfree>
 8006962:	4646      	mov	r6, r8
 8006964:	106d      	asrs	r5, r5, #1
 8006966:	d00b      	beq.n	8006980 <__pow5mult+0xa0>
 8006968:	6820      	ldr	r0, [r4, #0]
 800696a:	b938      	cbnz	r0, 800697c <__pow5mult+0x9c>
 800696c:	4622      	mov	r2, r4
 800696e:	4621      	mov	r1, r4
 8006970:	4638      	mov	r0, r7
 8006972:	f7ff ff0b 	bl	800678c <__multiply>
 8006976:	6020      	str	r0, [r4, #0]
 8006978:	f8c0 9000 	str.w	r9, [r0]
 800697c:	4604      	mov	r4, r0
 800697e:	e7e4      	b.n	800694a <__pow5mult+0x6a>
 8006980:	4630      	mov	r0, r6
 8006982:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006986:	bf00      	nop
 8006988:	08007fcc 	.word	0x08007fcc
 800698c:	08007ef1 	.word	0x08007ef1
 8006990:	08007f71 	.word	0x08007f71

08006994 <__lshift>:
 8006994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006998:	460c      	mov	r4, r1
 800699a:	6849      	ldr	r1, [r1, #4]
 800699c:	6923      	ldr	r3, [r4, #16]
 800699e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80069a2:	68a3      	ldr	r3, [r4, #8]
 80069a4:	4607      	mov	r7, r0
 80069a6:	4691      	mov	r9, r2
 80069a8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80069ac:	f108 0601 	add.w	r6, r8, #1
 80069b0:	42b3      	cmp	r3, r6
 80069b2:	db0b      	blt.n	80069cc <__lshift+0x38>
 80069b4:	4638      	mov	r0, r7
 80069b6:	f7ff fddf 	bl	8006578 <_Balloc>
 80069ba:	4605      	mov	r5, r0
 80069bc:	b948      	cbnz	r0, 80069d2 <__lshift+0x3e>
 80069be:	4602      	mov	r2, r0
 80069c0:	4b28      	ldr	r3, [pc, #160]	@ (8006a64 <__lshift+0xd0>)
 80069c2:	4829      	ldr	r0, [pc, #164]	@ (8006a68 <__lshift+0xd4>)
 80069c4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80069c8:	f000 fb94 	bl	80070f4 <__assert_func>
 80069cc:	3101      	adds	r1, #1
 80069ce:	005b      	lsls	r3, r3, #1
 80069d0:	e7ee      	b.n	80069b0 <__lshift+0x1c>
 80069d2:	2300      	movs	r3, #0
 80069d4:	f100 0114 	add.w	r1, r0, #20
 80069d8:	f100 0210 	add.w	r2, r0, #16
 80069dc:	4618      	mov	r0, r3
 80069de:	4553      	cmp	r3, sl
 80069e0:	db33      	blt.n	8006a4a <__lshift+0xb6>
 80069e2:	6920      	ldr	r0, [r4, #16]
 80069e4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80069e8:	f104 0314 	add.w	r3, r4, #20
 80069ec:	f019 091f 	ands.w	r9, r9, #31
 80069f0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80069f4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80069f8:	d02b      	beq.n	8006a52 <__lshift+0xbe>
 80069fa:	f1c9 0e20 	rsb	lr, r9, #32
 80069fe:	468a      	mov	sl, r1
 8006a00:	2200      	movs	r2, #0
 8006a02:	6818      	ldr	r0, [r3, #0]
 8006a04:	fa00 f009 	lsl.w	r0, r0, r9
 8006a08:	4310      	orrs	r0, r2
 8006a0a:	f84a 0b04 	str.w	r0, [sl], #4
 8006a0e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a12:	459c      	cmp	ip, r3
 8006a14:	fa22 f20e 	lsr.w	r2, r2, lr
 8006a18:	d8f3      	bhi.n	8006a02 <__lshift+0x6e>
 8006a1a:	ebac 0304 	sub.w	r3, ip, r4
 8006a1e:	3b15      	subs	r3, #21
 8006a20:	f023 0303 	bic.w	r3, r3, #3
 8006a24:	3304      	adds	r3, #4
 8006a26:	f104 0015 	add.w	r0, r4, #21
 8006a2a:	4584      	cmp	ip, r0
 8006a2c:	bf38      	it	cc
 8006a2e:	2304      	movcc	r3, #4
 8006a30:	50ca      	str	r2, [r1, r3]
 8006a32:	b10a      	cbz	r2, 8006a38 <__lshift+0xa4>
 8006a34:	f108 0602 	add.w	r6, r8, #2
 8006a38:	3e01      	subs	r6, #1
 8006a3a:	4638      	mov	r0, r7
 8006a3c:	612e      	str	r6, [r5, #16]
 8006a3e:	4621      	mov	r1, r4
 8006a40:	f7ff fdda 	bl	80065f8 <_Bfree>
 8006a44:	4628      	mov	r0, r5
 8006a46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006a4a:	f842 0f04 	str.w	r0, [r2, #4]!
 8006a4e:	3301      	adds	r3, #1
 8006a50:	e7c5      	b.n	80069de <__lshift+0x4a>
 8006a52:	3904      	subs	r1, #4
 8006a54:	f853 2b04 	ldr.w	r2, [r3], #4
 8006a58:	f841 2f04 	str.w	r2, [r1, #4]!
 8006a5c:	459c      	cmp	ip, r3
 8006a5e:	d8f9      	bhi.n	8006a54 <__lshift+0xc0>
 8006a60:	e7ea      	b.n	8006a38 <__lshift+0xa4>
 8006a62:	bf00      	nop
 8006a64:	08007f60 	.word	0x08007f60
 8006a68:	08007f71 	.word	0x08007f71

08006a6c <__mcmp>:
 8006a6c:	690a      	ldr	r2, [r1, #16]
 8006a6e:	4603      	mov	r3, r0
 8006a70:	6900      	ldr	r0, [r0, #16]
 8006a72:	1a80      	subs	r0, r0, r2
 8006a74:	b530      	push	{r4, r5, lr}
 8006a76:	d10e      	bne.n	8006a96 <__mcmp+0x2a>
 8006a78:	3314      	adds	r3, #20
 8006a7a:	3114      	adds	r1, #20
 8006a7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006a80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006a84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006a88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006a8c:	4295      	cmp	r5, r2
 8006a8e:	d003      	beq.n	8006a98 <__mcmp+0x2c>
 8006a90:	d205      	bcs.n	8006a9e <__mcmp+0x32>
 8006a92:	f04f 30ff 	mov.w	r0, #4294967295
 8006a96:	bd30      	pop	{r4, r5, pc}
 8006a98:	42a3      	cmp	r3, r4
 8006a9a:	d3f3      	bcc.n	8006a84 <__mcmp+0x18>
 8006a9c:	e7fb      	b.n	8006a96 <__mcmp+0x2a>
 8006a9e:	2001      	movs	r0, #1
 8006aa0:	e7f9      	b.n	8006a96 <__mcmp+0x2a>
	...

08006aa4 <__mdiff>:
 8006aa4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006aa8:	4689      	mov	r9, r1
 8006aaa:	4606      	mov	r6, r0
 8006aac:	4611      	mov	r1, r2
 8006aae:	4648      	mov	r0, r9
 8006ab0:	4614      	mov	r4, r2
 8006ab2:	f7ff ffdb 	bl	8006a6c <__mcmp>
 8006ab6:	1e05      	subs	r5, r0, #0
 8006ab8:	d112      	bne.n	8006ae0 <__mdiff+0x3c>
 8006aba:	4629      	mov	r1, r5
 8006abc:	4630      	mov	r0, r6
 8006abe:	f7ff fd5b 	bl	8006578 <_Balloc>
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	b928      	cbnz	r0, 8006ad2 <__mdiff+0x2e>
 8006ac6:	4b3f      	ldr	r3, [pc, #252]	@ (8006bc4 <__mdiff+0x120>)
 8006ac8:	f240 2137 	movw	r1, #567	@ 0x237
 8006acc:	483e      	ldr	r0, [pc, #248]	@ (8006bc8 <__mdiff+0x124>)
 8006ace:	f000 fb11 	bl	80070f4 <__assert_func>
 8006ad2:	2301      	movs	r3, #1
 8006ad4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006ad8:	4610      	mov	r0, r2
 8006ada:	b003      	add	sp, #12
 8006adc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ae0:	bfbc      	itt	lt
 8006ae2:	464b      	movlt	r3, r9
 8006ae4:	46a1      	movlt	r9, r4
 8006ae6:	4630      	mov	r0, r6
 8006ae8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006aec:	bfba      	itte	lt
 8006aee:	461c      	movlt	r4, r3
 8006af0:	2501      	movlt	r5, #1
 8006af2:	2500      	movge	r5, #0
 8006af4:	f7ff fd40 	bl	8006578 <_Balloc>
 8006af8:	4602      	mov	r2, r0
 8006afa:	b918      	cbnz	r0, 8006b04 <__mdiff+0x60>
 8006afc:	4b31      	ldr	r3, [pc, #196]	@ (8006bc4 <__mdiff+0x120>)
 8006afe:	f240 2145 	movw	r1, #581	@ 0x245
 8006b02:	e7e3      	b.n	8006acc <__mdiff+0x28>
 8006b04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006b08:	6926      	ldr	r6, [r4, #16]
 8006b0a:	60c5      	str	r5, [r0, #12]
 8006b0c:	f109 0310 	add.w	r3, r9, #16
 8006b10:	f109 0514 	add.w	r5, r9, #20
 8006b14:	f104 0e14 	add.w	lr, r4, #20
 8006b18:	f100 0b14 	add.w	fp, r0, #20
 8006b1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006b20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006b24:	9301      	str	r3, [sp, #4]
 8006b26:	46d9      	mov	r9, fp
 8006b28:	f04f 0c00 	mov.w	ip, #0
 8006b2c:	9b01      	ldr	r3, [sp, #4]
 8006b2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006b32:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006b36:	9301      	str	r3, [sp, #4]
 8006b38:	fa1f f38a 	uxth.w	r3, sl
 8006b3c:	4619      	mov	r1, r3
 8006b3e:	b283      	uxth	r3, r0
 8006b40:	1acb      	subs	r3, r1, r3
 8006b42:	0c00      	lsrs	r0, r0, #16
 8006b44:	4463      	add	r3, ip
 8006b46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006b4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006b4e:	b29b      	uxth	r3, r3
 8006b50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006b54:	4576      	cmp	r6, lr
 8006b56:	f849 3b04 	str.w	r3, [r9], #4
 8006b5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006b5e:	d8e5      	bhi.n	8006b2c <__mdiff+0x88>
 8006b60:	1b33      	subs	r3, r6, r4
 8006b62:	3b15      	subs	r3, #21
 8006b64:	f023 0303 	bic.w	r3, r3, #3
 8006b68:	3415      	adds	r4, #21
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	42a6      	cmp	r6, r4
 8006b6e:	bf38      	it	cc
 8006b70:	2304      	movcc	r3, #4
 8006b72:	441d      	add	r5, r3
 8006b74:	445b      	add	r3, fp
 8006b76:	461e      	mov	r6, r3
 8006b78:	462c      	mov	r4, r5
 8006b7a:	4544      	cmp	r4, r8
 8006b7c:	d30e      	bcc.n	8006b9c <__mdiff+0xf8>
 8006b7e:	f108 0103 	add.w	r1, r8, #3
 8006b82:	1b49      	subs	r1, r1, r5
 8006b84:	f021 0103 	bic.w	r1, r1, #3
 8006b88:	3d03      	subs	r5, #3
 8006b8a:	45a8      	cmp	r8, r5
 8006b8c:	bf38      	it	cc
 8006b8e:	2100      	movcc	r1, #0
 8006b90:	440b      	add	r3, r1
 8006b92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006b96:	b191      	cbz	r1, 8006bbe <__mdiff+0x11a>
 8006b98:	6117      	str	r7, [r2, #16]
 8006b9a:	e79d      	b.n	8006ad8 <__mdiff+0x34>
 8006b9c:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ba0:	46e6      	mov	lr, ip
 8006ba2:	0c08      	lsrs	r0, r1, #16
 8006ba4:	fa1c fc81 	uxtah	ip, ip, r1
 8006ba8:	4471      	add	r1, lr
 8006baa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006bae:	b289      	uxth	r1, r1
 8006bb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006bb4:	f846 1b04 	str.w	r1, [r6], #4
 8006bb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006bbc:	e7dd      	b.n	8006b7a <__mdiff+0xd6>
 8006bbe:	3f01      	subs	r7, #1
 8006bc0:	e7e7      	b.n	8006b92 <__mdiff+0xee>
 8006bc2:	bf00      	nop
 8006bc4:	08007f60 	.word	0x08007f60
 8006bc8:	08007f71 	.word	0x08007f71

08006bcc <__d2b>:
 8006bcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006bd0:	460f      	mov	r7, r1
 8006bd2:	2101      	movs	r1, #1
 8006bd4:	ec59 8b10 	vmov	r8, r9, d0
 8006bd8:	4616      	mov	r6, r2
 8006bda:	f7ff fccd 	bl	8006578 <_Balloc>
 8006bde:	4604      	mov	r4, r0
 8006be0:	b930      	cbnz	r0, 8006bf0 <__d2b+0x24>
 8006be2:	4602      	mov	r2, r0
 8006be4:	4b23      	ldr	r3, [pc, #140]	@ (8006c74 <__d2b+0xa8>)
 8006be6:	4824      	ldr	r0, [pc, #144]	@ (8006c78 <__d2b+0xac>)
 8006be8:	f240 310f 	movw	r1, #783	@ 0x30f
 8006bec:	f000 fa82 	bl	80070f4 <__assert_func>
 8006bf0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006bf4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006bf8:	b10d      	cbz	r5, 8006bfe <__d2b+0x32>
 8006bfa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006bfe:	9301      	str	r3, [sp, #4]
 8006c00:	f1b8 0300 	subs.w	r3, r8, #0
 8006c04:	d023      	beq.n	8006c4e <__d2b+0x82>
 8006c06:	4668      	mov	r0, sp
 8006c08:	9300      	str	r3, [sp, #0]
 8006c0a:	f7ff fd7c 	bl	8006706 <__lo0bits>
 8006c0e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006c12:	b1d0      	cbz	r0, 8006c4a <__d2b+0x7e>
 8006c14:	f1c0 0320 	rsb	r3, r0, #32
 8006c18:	fa02 f303 	lsl.w	r3, r2, r3
 8006c1c:	430b      	orrs	r3, r1
 8006c1e:	40c2      	lsrs	r2, r0
 8006c20:	6163      	str	r3, [r4, #20]
 8006c22:	9201      	str	r2, [sp, #4]
 8006c24:	9b01      	ldr	r3, [sp, #4]
 8006c26:	61a3      	str	r3, [r4, #24]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	bf0c      	ite	eq
 8006c2c:	2201      	moveq	r2, #1
 8006c2e:	2202      	movne	r2, #2
 8006c30:	6122      	str	r2, [r4, #16]
 8006c32:	b1a5      	cbz	r5, 8006c5e <__d2b+0x92>
 8006c34:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006c38:	4405      	add	r5, r0
 8006c3a:	603d      	str	r5, [r7, #0]
 8006c3c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006c40:	6030      	str	r0, [r6, #0]
 8006c42:	4620      	mov	r0, r4
 8006c44:	b003      	add	sp, #12
 8006c46:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006c4a:	6161      	str	r1, [r4, #20]
 8006c4c:	e7ea      	b.n	8006c24 <__d2b+0x58>
 8006c4e:	a801      	add	r0, sp, #4
 8006c50:	f7ff fd59 	bl	8006706 <__lo0bits>
 8006c54:	9b01      	ldr	r3, [sp, #4]
 8006c56:	6163      	str	r3, [r4, #20]
 8006c58:	3020      	adds	r0, #32
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	e7e8      	b.n	8006c30 <__d2b+0x64>
 8006c5e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006c62:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006c66:	6038      	str	r0, [r7, #0]
 8006c68:	6918      	ldr	r0, [r3, #16]
 8006c6a:	f7ff fd2d 	bl	80066c8 <__hi0bits>
 8006c6e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006c72:	e7e5      	b.n	8006c40 <__d2b+0x74>
 8006c74:	08007f60 	.word	0x08007f60
 8006c78:	08007f71 	.word	0x08007f71

08006c7c <__ssputs_r>:
 8006c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c80:	688e      	ldr	r6, [r1, #8]
 8006c82:	461f      	mov	r7, r3
 8006c84:	42be      	cmp	r6, r7
 8006c86:	680b      	ldr	r3, [r1, #0]
 8006c88:	4682      	mov	sl, r0
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	4690      	mov	r8, r2
 8006c8e:	d82d      	bhi.n	8006cec <__ssputs_r+0x70>
 8006c90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006c94:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8006c98:	d026      	beq.n	8006ce8 <__ssputs_r+0x6c>
 8006c9a:	6965      	ldr	r5, [r4, #20]
 8006c9c:	6909      	ldr	r1, [r1, #16]
 8006c9e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ca2:	eba3 0901 	sub.w	r9, r3, r1
 8006ca6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006caa:	1c7b      	adds	r3, r7, #1
 8006cac:	444b      	add	r3, r9
 8006cae:	106d      	asrs	r5, r5, #1
 8006cb0:	429d      	cmp	r5, r3
 8006cb2:	bf38      	it	cc
 8006cb4:	461d      	movcc	r5, r3
 8006cb6:	0553      	lsls	r3, r2, #21
 8006cb8:	d527      	bpl.n	8006d0a <__ssputs_r+0x8e>
 8006cba:	4629      	mov	r1, r5
 8006cbc:	f7ff fbd0 	bl	8006460 <_malloc_r>
 8006cc0:	4606      	mov	r6, r0
 8006cc2:	b360      	cbz	r0, 8006d1e <__ssputs_r+0xa2>
 8006cc4:	6921      	ldr	r1, [r4, #16]
 8006cc6:	464a      	mov	r2, r9
 8006cc8:	f000 fa06 	bl	80070d8 <memcpy>
 8006ccc:	89a3      	ldrh	r3, [r4, #12]
 8006cce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8006cd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006cd6:	81a3      	strh	r3, [r4, #12]
 8006cd8:	6126      	str	r6, [r4, #16]
 8006cda:	6165      	str	r5, [r4, #20]
 8006cdc:	444e      	add	r6, r9
 8006cde:	eba5 0509 	sub.w	r5, r5, r9
 8006ce2:	6026      	str	r6, [r4, #0]
 8006ce4:	60a5      	str	r5, [r4, #8]
 8006ce6:	463e      	mov	r6, r7
 8006ce8:	42be      	cmp	r6, r7
 8006cea:	d900      	bls.n	8006cee <__ssputs_r+0x72>
 8006cec:	463e      	mov	r6, r7
 8006cee:	6820      	ldr	r0, [r4, #0]
 8006cf0:	4632      	mov	r2, r6
 8006cf2:	4641      	mov	r1, r8
 8006cf4:	f000 f9c6 	bl	8007084 <memmove>
 8006cf8:	68a3      	ldr	r3, [r4, #8]
 8006cfa:	1b9b      	subs	r3, r3, r6
 8006cfc:	60a3      	str	r3, [r4, #8]
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	4433      	add	r3, r6
 8006d02:	6023      	str	r3, [r4, #0]
 8006d04:	2000      	movs	r0, #0
 8006d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0a:	462a      	mov	r2, r5
 8006d0c:	f000 fa36 	bl	800717c <_realloc_r>
 8006d10:	4606      	mov	r6, r0
 8006d12:	2800      	cmp	r0, #0
 8006d14:	d1e0      	bne.n	8006cd8 <__ssputs_r+0x5c>
 8006d16:	6921      	ldr	r1, [r4, #16]
 8006d18:	4650      	mov	r0, sl
 8006d1a:	f7ff fb2d 	bl	8006378 <_free_r>
 8006d1e:	230c      	movs	r3, #12
 8006d20:	f8ca 3000 	str.w	r3, [sl]
 8006d24:	89a3      	ldrh	r3, [r4, #12]
 8006d26:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006d2a:	81a3      	strh	r3, [r4, #12]
 8006d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d30:	e7e9      	b.n	8006d06 <__ssputs_r+0x8a>
	...

08006d34 <_svfiprintf_r>:
 8006d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d38:	4698      	mov	r8, r3
 8006d3a:	898b      	ldrh	r3, [r1, #12]
 8006d3c:	061b      	lsls	r3, r3, #24
 8006d3e:	b09d      	sub	sp, #116	@ 0x74
 8006d40:	4607      	mov	r7, r0
 8006d42:	460d      	mov	r5, r1
 8006d44:	4614      	mov	r4, r2
 8006d46:	d510      	bpl.n	8006d6a <_svfiprintf_r+0x36>
 8006d48:	690b      	ldr	r3, [r1, #16]
 8006d4a:	b973      	cbnz	r3, 8006d6a <_svfiprintf_r+0x36>
 8006d4c:	2140      	movs	r1, #64	@ 0x40
 8006d4e:	f7ff fb87 	bl	8006460 <_malloc_r>
 8006d52:	6028      	str	r0, [r5, #0]
 8006d54:	6128      	str	r0, [r5, #16]
 8006d56:	b930      	cbnz	r0, 8006d66 <_svfiprintf_r+0x32>
 8006d58:	230c      	movs	r3, #12
 8006d5a:	603b      	str	r3, [r7, #0]
 8006d5c:	f04f 30ff 	mov.w	r0, #4294967295
 8006d60:	b01d      	add	sp, #116	@ 0x74
 8006d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d66:	2340      	movs	r3, #64	@ 0x40
 8006d68:	616b      	str	r3, [r5, #20]
 8006d6a:	2300      	movs	r3, #0
 8006d6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006d6e:	2320      	movs	r3, #32
 8006d70:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006d74:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d78:	2330      	movs	r3, #48	@ 0x30
 8006d7a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8006f18 <_svfiprintf_r+0x1e4>
 8006d7e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006d82:	f04f 0901 	mov.w	r9, #1
 8006d86:	4623      	mov	r3, r4
 8006d88:	469a      	mov	sl, r3
 8006d8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d8e:	b10a      	cbz	r2, 8006d94 <_svfiprintf_r+0x60>
 8006d90:	2a25      	cmp	r2, #37	@ 0x25
 8006d92:	d1f9      	bne.n	8006d88 <_svfiprintf_r+0x54>
 8006d94:	ebba 0b04 	subs.w	fp, sl, r4
 8006d98:	d00b      	beq.n	8006db2 <_svfiprintf_r+0x7e>
 8006d9a:	465b      	mov	r3, fp
 8006d9c:	4622      	mov	r2, r4
 8006d9e:	4629      	mov	r1, r5
 8006da0:	4638      	mov	r0, r7
 8006da2:	f7ff ff6b 	bl	8006c7c <__ssputs_r>
 8006da6:	3001      	adds	r0, #1
 8006da8:	f000 80a7 	beq.w	8006efa <_svfiprintf_r+0x1c6>
 8006dac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006dae:	445a      	add	r2, fp
 8006db0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006db2:	f89a 3000 	ldrb.w	r3, [sl]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	f000 809f 	beq.w	8006efa <_svfiprintf_r+0x1c6>
 8006dbc:	2300      	movs	r3, #0
 8006dbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006dc2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dc6:	f10a 0a01 	add.w	sl, sl, #1
 8006dca:	9304      	str	r3, [sp, #16]
 8006dcc:	9307      	str	r3, [sp, #28]
 8006dce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006dd2:	931a      	str	r3, [sp, #104]	@ 0x68
 8006dd4:	4654      	mov	r4, sl
 8006dd6:	2205      	movs	r2, #5
 8006dd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ddc:	484e      	ldr	r0, [pc, #312]	@ (8006f18 <_svfiprintf_r+0x1e4>)
 8006dde:	f7f9 fa1f 	bl	8000220 <memchr>
 8006de2:	9a04      	ldr	r2, [sp, #16]
 8006de4:	b9d8      	cbnz	r0, 8006e1e <_svfiprintf_r+0xea>
 8006de6:	06d0      	lsls	r0, r2, #27
 8006de8:	bf44      	itt	mi
 8006dea:	2320      	movmi	r3, #32
 8006dec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006df0:	0711      	lsls	r1, r2, #28
 8006df2:	bf44      	itt	mi
 8006df4:	232b      	movmi	r3, #43	@ 0x2b
 8006df6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8006dfe:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e00:	d015      	beq.n	8006e2e <_svfiprintf_r+0xfa>
 8006e02:	9a07      	ldr	r2, [sp, #28]
 8006e04:	4654      	mov	r4, sl
 8006e06:	2000      	movs	r0, #0
 8006e08:	f04f 0c0a 	mov.w	ip, #10
 8006e0c:	4621      	mov	r1, r4
 8006e0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e12:	3b30      	subs	r3, #48	@ 0x30
 8006e14:	2b09      	cmp	r3, #9
 8006e16:	d94b      	bls.n	8006eb0 <_svfiprintf_r+0x17c>
 8006e18:	b1b0      	cbz	r0, 8006e48 <_svfiprintf_r+0x114>
 8006e1a:	9207      	str	r2, [sp, #28]
 8006e1c:	e014      	b.n	8006e48 <_svfiprintf_r+0x114>
 8006e1e:	eba0 0308 	sub.w	r3, r0, r8
 8006e22:	fa09 f303 	lsl.w	r3, r9, r3
 8006e26:	4313      	orrs	r3, r2
 8006e28:	9304      	str	r3, [sp, #16]
 8006e2a:	46a2      	mov	sl, r4
 8006e2c:	e7d2      	b.n	8006dd4 <_svfiprintf_r+0xa0>
 8006e2e:	9b03      	ldr	r3, [sp, #12]
 8006e30:	1d19      	adds	r1, r3, #4
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	9103      	str	r1, [sp, #12]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	bfbb      	ittet	lt
 8006e3a:	425b      	neglt	r3, r3
 8006e3c:	f042 0202 	orrlt.w	r2, r2, #2
 8006e40:	9307      	strge	r3, [sp, #28]
 8006e42:	9307      	strlt	r3, [sp, #28]
 8006e44:	bfb8      	it	lt
 8006e46:	9204      	strlt	r2, [sp, #16]
 8006e48:	7823      	ldrb	r3, [r4, #0]
 8006e4a:	2b2e      	cmp	r3, #46	@ 0x2e
 8006e4c:	d10a      	bne.n	8006e64 <_svfiprintf_r+0x130>
 8006e4e:	7863      	ldrb	r3, [r4, #1]
 8006e50:	2b2a      	cmp	r3, #42	@ 0x2a
 8006e52:	d132      	bne.n	8006eba <_svfiprintf_r+0x186>
 8006e54:	9b03      	ldr	r3, [sp, #12]
 8006e56:	1d1a      	adds	r2, r3, #4
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	9203      	str	r2, [sp, #12]
 8006e5c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006e60:	3402      	adds	r4, #2
 8006e62:	9305      	str	r3, [sp, #20]
 8006e64:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8006f28 <_svfiprintf_r+0x1f4>
 8006e68:	7821      	ldrb	r1, [r4, #0]
 8006e6a:	2203      	movs	r2, #3
 8006e6c:	4650      	mov	r0, sl
 8006e6e:	f7f9 f9d7 	bl	8000220 <memchr>
 8006e72:	b138      	cbz	r0, 8006e84 <_svfiprintf_r+0x150>
 8006e74:	9b04      	ldr	r3, [sp, #16]
 8006e76:	eba0 000a 	sub.w	r0, r0, sl
 8006e7a:	2240      	movs	r2, #64	@ 0x40
 8006e7c:	4082      	lsls	r2, r0
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	3401      	adds	r4, #1
 8006e82:	9304      	str	r3, [sp, #16]
 8006e84:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e88:	4824      	ldr	r0, [pc, #144]	@ (8006f1c <_svfiprintf_r+0x1e8>)
 8006e8a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006e8e:	2206      	movs	r2, #6
 8006e90:	f7f9 f9c6 	bl	8000220 <memchr>
 8006e94:	2800      	cmp	r0, #0
 8006e96:	d036      	beq.n	8006f06 <_svfiprintf_r+0x1d2>
 8006e98:	4b21      	ldr	r3, [pc, #132]	@ (8006f20 <_svfiprintf_r+0x1ec>)
 8006e9a:	bb1b      	cbnz	r3, 8006ee4 <_svfiprintf_r+0x1b0>
 8006e9c:	9b03      	ldr	r3, [sp, #12]
 8006e9e:	3307      	adds	r3, #7
 8006ea0:	f023 0307 	bic.w	r3, r3, #7
 8006ea4:	3308      	adds	r3, #8
 8006ea6:	9303      	str	r3, [sp, #12]
 8006ea8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006eaa:	4433      	add	r3, r6
 8006eac:	9309      	str	r3, [sp, #36]	@ 0x24
 8006eae:	e76a      	b.n	8006d86 <_svfiprintf_r+0x52>
 8006eb0:	fb0c 3202 	mla	r2, ip, r2, r3
 8006eb4:	460c      	mov	r4, r1
 8006eb6:	2001      	movs	r0, #1
 8006eb8:	e7a8      	b.n	8006e0c <_svfiprintf_r+0xd8>
 8006eba:	2300      	movs	r3, #0
 8006ebc:	3401      	adds	r4, #1
 8006ebe:	9305      	str	r3, [sp, #20]
 8006ec0:	4619      	mov	r1, r3
 8006ec2:	f04f 0c0a 	mov.w	ip, #10
 8006ec6:	4620      	mov	r0, r4
 8006ec8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ecc:	3a30      	subs	r2, #48	@ 0x30
 8006ece:	2a09      	cmp	r2, #9
 8006ed0:	d903      	bls.n	8006eda <_svfiprintf_r+0x1a6>
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d0c6      	beq.n	8006e64 <_svfiprintf_r+0x130>
 8006ed6:	9105      	str	r1, [sp, #20]
 8006ed8:	e7c4      	b.n	8006e64 <_svfiprintf_r+0x130>
 8006eda:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ede:	4604      	mov	r4, r0
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e7f0      	b.n	8006ec6 <_svfiprintf_r+0x192>
 8006ee4:	ab03      	add	r3, sp, #12
 8006ee6:	9300      	str	r3, [sp, #0]
 8006ee8:	462a      	mov	r2, r5
 8006eea:	4b0e      	ldr	r3, [pc, #56]	@ (8006f24 <_svfiprintf_r+0x1f0>)
 8006eec:	a904      	add	r1, sp, #16
 8006eee:	4638      	mov	r0, r7
 8006ef0:	f7fd fe84 	bl	8004bfc <_printf_float>
 8006ef4:	1c42      	adds	r2, r0, #1
 8006ef6:	4606      	mov	r6, r0
 8006ef8:	d1d6      	bne.n	8006ea8 <_svfiprintf_r+0x174>
 8006efa:	89ab      	ldrh	r3, [r5, #12]
 8006efc:	065b      	lsls	r3, r3, #25
 8006efe:	f53f af2d 	bmi.w	8006d5c <_svfiprintf_r+0x28>
 8006f02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006f04:	e72c      	b.n	8006d60 <_svfiprintf_r+0x2c>
 8006f06:	ab03      	add	r3, sp, #12
 8006f08:	9300      	str	r3, [sp, #0]
 8006f0a:	462a      	mov	r2, r5
 8006f0c:	4b05      	ldr	r3, [pc, #20]	@ (8006f24 <_svfiprintf_r+0x1f0>)
 8006f0e:	a904      	add	r1, sp, #16
 8006f10:	4638      	mov	r0, r7
 8006f12:	f7fe f90b 	bl	800512c <_printf_i>
 8006f16:	e7ed      	b.n	8006ef4 <_svfiprintf_r+0x1c0>
 8006f18:	080080c8 	.word	0x080080c8
 8006f1c:	080080d2 	.word	0x080080d2
 8006f20:	08004bfd 	.word	0x08004bfd
 8006f24:	08006c7d 	.word	0x08006c7d
 8006f28:	080080ce 	.word	0x080080ce

08006f2c <__sflush_r>:
 8006f2c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8006f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f34:	0716      	lsls	r6, r2, #28
 8006f36:	4605      	mov	r5, r0
 8006f38:	460c      	mov	r4, r1
 8006f3a:	d454      	bmi.n	8006fe6 <__sflush_r+0xba>
 8006f3c:	684b      	ldr	r3, [r1, #4]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	dc02      	bgt.n	8006f48 <__sflush_r+0x1c>
 8006f42:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	dd48      	ble.n	8006fda <__sflush_r+0xae>
 8006f48:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f4a:	2e00      	cmp	r6, #0
 8006f4c:	d045      	beq.n	8006fda <__sflush_r+0xae>
 8006f4e:	2300      	movs	r3, #0
 8006f50:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8006f54:	682f      	ldr	r7, [r5, #0]
 8006f56:	6a21      	ldr	r1, [r4, #32]
 8006f58:	602b      	str	r3, [r5, #0]
 8006f5a:	d030      	beq.n	8006fbe <__sflush_r+0x92>
 8006f5c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8006f5e:	89a3      	ldrh	r3, [r4, #12]
 8006f60:	0759      	lsls	r1, r3, #29
 8006f62:	d505      	bpl.n	8006f70 <__sflush_r+0x44>
 8006f64:	6863      	ldr	r3, [r4, #4]
 8006f66:	1ad2      	subs	r2, r2, r3
 8006f68:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8006f6a:	b10b      	cbz	r3, 8006f70 <__sflush_r+0x44>
 8006f6c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8006f6e:	1ad2      	subs	r2, r2, r3
 8006f70:	2300      	movs	r3, #0
 8006f72:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8006f74:	6a21      	ldr	r1, [r4, #32]
 8006f76:	4628      	mov	r0, r5
 8006f78:	47b0      	blx	r6
 8006f7a:	1c43      	adds	r3, r0, #1
 8006f7c:	89a3      	ldrh	r3, [r4, #12]
 8006f7e:	d106      	bne.n	8006f8e <__sflush_r+0x62>
 8006f80:	6829      	ldr	r1, [r5, #0]
 8006f82:	291d      	cmp	r1, #29
 8006f84:	d82b      	bhi.n	8006fde <__sflush_r+0xb2>
 8006f86:	4a2a      	ldr	r2, [pc, #168]	@ (8007030 <__sflush_r+0x104>)
 8006f88:	410a      	asrs	r2, r1
 8006f8a:	07d6      	lsls	r6, r2, #31
 8006f8c:	d427      	bmi.n	8006fde <__sflush_r+0xb2>
 8006f8e:	2200      	movs	r2, #0
 8006f90:	6062      	str	r2, [r4, #4]
 8006f92:	04d9      	lsls	r1, r3, #19
 8006f94:	6922      	ldr	r2, [r4, #16]
 8006f96:	6022      	str	r2, [r4, #0]
 8006f98:	d504      	bpl.n	8006fa4 <__sflush_r+0x78>
 8006f9a:	1c42      	adds	r2, r0, #1
 8006f9c:	d101      	bne.n	8006fa2 <__sflush_r+0x76>
 8006f9e:	682b      	ldr	r3, [r5, #0]
 8006fa0:	b903      	cbnz	r3, 8006fa4 <__sflush_r+0x78>
 8006fa2:	6560      	str	r0, [r4, #84]	@ 0x54
 8006fa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006fa6:	602f      	str	r7, [r5, #0]
 8006fa8:	b1b9      	cbz	r1, 8006fda <__sflush_r+0xae>
 8006faa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006fae:	4299      	cmp	r1, r3
 8006fb0:	d002      	beq.n	8006fb8 <__sflush_r+0x8c>
 8006fb2:	4628      	mov	r0, r5
 8006fb4:	f7ff f9e0 	bl	8006378 <_free_r>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	6363      	str	r3, [r4, #52]	@ 0x34
 8006fbc:	e00d      	b.n	8006fda <__sflush_r+0xae>
 8006fbe:	2301      	movs	r3, #1
 8006fc0:	4628      	mov	r0, r5
 8006fc2:	47b0      	blx	r6
 8006fc4:	4602      	mov	r2, r0
 8006fc6:	1c50      	adds	r0, r2, #1
 8006fc8:	d1c9      	bne.n	8006f5e <__sflush_r+0x32>
 8006fca:	682b      	ldr	r3, [r5, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d0c6      	beq.n	8006f5e <__sflush_r+0x32>
 8006fd0:	2b1d      	cmp	r3, #29
 8006fd2:	d001      	beq.n	8006fd8 <__sflush_r+0xac>
 8006fd4:	2b16      	cmp	r3, #22
 8006fd6:	d11e      	bne.n	8007016 <__sflush_r+0xea>
 8006fd8:	602f      	str	r7, [r5, #0]
 8006fda:	2000      	movs	r0, #0
 8006fdc:	e022      	b.n	8007024 <__sflush_r+0xf8>
 8006fde:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fe2:	b21b      	sxth	r3, r3
 8006fe4:	e01b      	b.n	800701e <__sflush_r+0xf2>
 8006fe6:	690f      	ldr	r7, [r1, #16]
 8006fe8:	2f00      	cmp	r7, #0
 8006fea:	d0f6      	beq.n	8006fda <__sflush_r+0xae>
 8006fec:	0793      	lsls	r3, r2, #30
 8006fee:	680e      	ldr	r6, [r1, #0]
 8006ff0:	bf08      	it	eq
 8006ff2:	694b      	ldreq	r3, [r1, #20]
 8006ff4:	600f      	str	r7, [r1, #0]
 8006ff6:	bf18      	it	ne
 8006ff8:	2300      	movne	r3, #0
 8006ffa:	eba6 0807 	sub.w	r8, r6, r7
 8006ffe:	608b      	str	r3, [r1, #8]
 8007000:	f1b8 0f00 	cmp.w	r8, #0
 8007004:	dde9      	ble.n	8006fda <__sflush_r+0xae>
 8007006:	6a21      	ldr	r1, [r4, #32]
 8007008:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800700a:	4643      	mov	r3, r8
 800700c:	463a      	mov	r2, r7
 800700e:	4628      	mov	r0, r5
 8007010:	47b0      	blx	r6
 8007012:	2800      	cmp	r0, #0
 8007014:	dc08      	bgt.n	8007028 <__sflush_r+0xfc>
 8007016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800701a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800701e:	81a3      	strh	r3, [r4, #12]
 8007020:	f04f 30ff 	mov.w	r0, #4294967295
 8007024:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007028:	4407      	add	r7, r0
 800702a:	eba8 0800 	sub.w	r8, r8, r0
 800702e:	e7e7      	b.n	8007000 <__sflush_r+0xd4>
 8007030:	dfbffffe 	.word	0xdfbffffe

08007034 <_fflush_r>:
 8007034:	b538      	push	{r3, r4, r5, lr}
 8007036:	690b      	ldr	r3, [r1, #16]
 8007038:	4605      	mov	r5, r0
 800703a:	460c      	mov	r4, r1
 800703c:	b913      	cbnz	r3, 8007044 <_fflush_r+0x10>
 800703e:	2500      	movs	r5, #0
 8007040:	4628      	mov	r0, r5
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	b118      	cbz	r0, 800704e <_fflush_r+0x1a>
 8007046:	6a03      	ldr	r3, [r0, #32]
 8007048:	b90b      	cbnz	r3, 800704e <_fflush_r+0x1a>
 800704a:	f7fe fa1b 	bl	8005484 <__sinit>
 800704e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d0f3      	beq.n	800703e <_fflush_r+0xa>
 8007056:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007058:	07d0      	lsls	r0, r2, #31
 800705a:	d404      	bmi.n	8007066 <_fflush_r+0x32>
 800705c:	0599      	lsls	r1, r3, #22
 800705e:	d402      	bmi.n	8007066 <_fflush_r+0x32>
 8007060:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007062:	f7fe fb3a 	bl	80056da <__retarget_lock_acquire_recursive>
 8007066:	4628      	mov	r0, r5
 8007068:	4621      	mov	r1, r4
 800706a:	f7ff ff5f 	bl	8006f2c <__sflush_r>
 800706e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007070:	07da      	lsls	r2, r3, #31
 8007072:	4605      	mov	r5, r0
 8007074:	d4e4      	bmi.n	8007040 <_fflush_r+0xc>
 8007076:	89a3      	ldrh	r3, [r4, #12]
 8007078:	059b      	lsls	r3, r3, #22
 800707a:	d4e1      	bmi.n	8007040 <_fflush_r+0xc>
 800707c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800707e:	f7fe fb2d 	bl	80056dc <__retarget_lock_release_recursive>
 8007082:	e7dd      	b.n	8007040 <_fflush_r+0xc>

08007084 <memmove>:
 8007084:	4288      	cmp	r0, r1
 8007086:	b510      	push	{r4, lr}
 8007088:	eb01 0402 	add.w	r4, r1, r2
 800708c:	d902      	bls.n	8007094 <memmove+0x10>
 800708e:	4284      	cmp	r4, r0
 8007090:	4623      	mov	r3, r4
 8007092:	d807      	bhi.n	80070a4 <memmove+0x20>
 8007094:	1e43      	subs	r3, r0, #1
 8007096:	42a1      	cmp	r1, r4
 8007098:	d008      	beq.n	80070ac <memmove+0x28>
 800709a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800709e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80070a2:	e7f8      	b.n	8007096 <memmove+0x12>
 80070a4:	4402      	add	r2, r0
 80070a6:	4601      	mov	r1, r0
 80070a8:	428a      	cmp	r2, r1
 80070aa:	d100      	bne.n	80070ae <memmove+0x2a>
 80070ac:	bd10      	pop	{r4, pc}
 80070ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80070b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80070b6:	e7f7      	b.n	80070a8 <memmove+0x24>

080070b8 <_sbrk_r>:
 80070b8:	b538      	push	{r3, r4, r5, lr}
 80070ba:	4d06      	ldr	r5, [pc, #24]	@ (80070d4 <_sbrk_r+0x1c>)
 80070bc:	2300      	movs	r3, #0
 80070be:	4604      	mov	r4, r0
 80070c0:	4608      	mov	r0, r1
 80070c2:	602b      	str	r3, [r5, #0]
 80070c4:	f7fa fc28 	bl	8001918 <_sbrk>
 80070c8:	1c43      	adds	r3, r0, #1
 80070ca:	d102      	bne.n	80070d2 <_sbrk_r+0x1a>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	b103      	cbz	r3, 80070d2 <_sbrk_r+0x1a>
 80070d0:	6023      	str	r3, [r4, #0]
 80070d2:	bd38      	pop	{r3, r4, r5, pc}
 80070d4:	20000430 	.word	0x20000430

080070d8 <memcpy>:
 80070d8:	440a      	add	r2, r1
 80070da:	4291      	cmp	r1, r2
 80070dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80070e0:	d100      	bne.n	80070e4 <memcpy+0xc>
 80070e2:	4770      	bx	lr
 80070e4:	b510      	push	{r4, lr}
 80070e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070ee:	4291      	cmp	r1, r2
 80070f0:	d1f9      	bne.n	80070e6 <memcpy+0xe>
 80070f2:	bd10      	pop	{r4, pc}

080070f4 <__assert_func>:
 80070f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80070f6:	4614      	mov	r4, r2
 80070f8:	461a      	mov	r2, r3
 80070fa:	4b09      	ldr	r3, [pc, #36]	@ (8007120 <__assert_func+0x2c>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	4605      	mov	r5, r0
 8007100:	68d8      	ldr	r0, [r3, #12]
 8007102:	b954      	cbnz	r4, 800711a <__assert_func+0x26>
 8007104:	4b07      	ldr	r3, [pc, #28]	@ (8007124 <__assert_func+0x30>)
 8007106:	461c      	mov	r4, r3
 8007108:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800710c:	9100      	str	r1, [sp, #0]
 800710e:	462b      	mov	r3, r5
 8007110:	4905      	ldr	r1, [pc, #20]	@ (8007128 <__assert_func+0x34>)
 8007112:	f000 f86f 	bl	80071f4 <fiprintf>
 8007116:	f000 f87f 	bl	8007218 <abort>
 800711a:	4b04      	ldr	r3, [pc, #16]	@ (800712c <__assert_func+0x38>)
 800711c:	e7f4      	b.n	8007108 <__assert_func+0x14>
 800711e:	bf00      	nop
 8007120:	20000018 	.word	0x20000018
 8007124:	0800811e 	.word	0x0800811e
 8007128:	080080f0 	.word	0x080080f0
 800712c:	080080e3 	.word	0x080080e3

08007130 <_calloc_r>:
 8007130:	b570      	push	{r4, r5, r6, lr}
 8007132:	fba1 5402 	umull	r5, r4, r1, r2
 8007136:	b93c      	cbnz	r4, 8007148 <_calloc_r+0x18>
 8007138:	4629      	mov	r1, r5
 800713a:	f7ff f991 	bl	8006460 <_malloc_r>
 800713e:	4606      	mov	r6, r0
 8007140:	b928      	cbnz	r0, 800714e <_calloc_r+0x1e>
 8007142:	2600      	movs	r6, #0
 8007144:	4630      	mov	r0, r6
 8007146:	bd70      	pop	{r4, r5, r6, pc}
 8007148:	220c      	movs	r2, #12
 800714a:	6002      	str	r2, [r0, #0]
 800714c:	e7f9      	b.n	8007142 <_calloc_r+0x12>
 800714e:	462a      	mov	r2, r5
 8007150:	4621      	mov	r1, r4
 8007152:	f7fe fa44 	bl	80055de <memset>
 8007156:	e7f5      	b.n	8007144 <_calloc_r+0x14>

08007158 <__ascii_mbtowc>:
 8007158:	b082      	sub	sp, #8
 800715a:	b901      	cbnz	r1, 800715e <__ascii_mbtowc+0x6>
 800715c:	a901      	add	r1, sp, #4
 800715e:	b142      	cbz	r2, 8007172 <__ascii_mbtowc+0x1a>
 8007160:	b14b      	cbz	r3, 8007176 <__ascii_mbtowc+0x1e>
 8007162:	7813      	ldrb	r3, [r2, #0]
 8007164:	600b      	str	r3, [r1, #0]
 8007166:	7812      	ldrb	r2, [r2, #0]
 8007168:	1e10      	subs	r0, r2, #0
 800716a:	bf18      	it	ne
 800716c:	2001      	movne	r0, #1
 800716e:	b002      	add	sp, #8
 8007170:	4770      	bx	lr
 8007172:	4610      	mov	r0, r2
 8007174:	e7fb      	b.n	800716e <__ascii_mbtowc+0x16>
 8007176:	f06f 0001 	mvn.w	r0, #1
 800717a:	e7f8      	b.n	800716e <__ascii_mbtowc+0x16>

0800717c <_realloc_r>:
 800717c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007180:	4680      	mov	r8, r0
 8007182:	4615      	mov	r5, r2
 8007184:	460c      	mov	r4, r1
 8007186:	b921      	cbnz	r1, 8007192 <_realloc_r+0x16>
 8007188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800718c:	4611      	mov	r1, r2
 800718e:	f7ff b967 	b.w	8006460 <_malloc_r>
 8007192:	b92a      	cbnz	r2, 80071a0 <_realloc_r+0x24>
 8007194:	f7ff f8f0 	bl	8006378 <_free_r>
 8007198:	2400      	movs	r4, #0
 800719a:	4620      	mov	r0, r4
 800719c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071a0:	f000 f841 	bl	8007226 <_malloc_usable_size_r>
 80071a4:	4285      	cmp	r5, r0
 80071a6:	4606      	mov	r6, r0
 80071a8:	d802      	bhi.n	80071b0 <_realloc_r+0x34>
 80071aa:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80071ae:	d8f4      	bhi.n	800719a <_realloc_r+0x1e>
 80071b0:	4629      	mov	r1, r5
 80071b2:	4640      	mov	r0, r8
 80071b4:	f7ff f954 	bl	8006460 <_malloc_r>
 80071b8:	4607      	mov	r7, r0
 80071ba:	2800      	cmp	r0, #0
 80071bc:	d0ec      	beq.n	8007198 <_realloc_r+0x1c>
 80071be:	42b5      	cmp	r5, r6
 80071c0:	462a      	mov	r2, r5
 80071c2:	4621      	mov	r1, r4
 80071c4:	bf28      	it	cs
 80071c6:	4632      	movcs	r2, r6
 80071c8:	f7ff ff86 	bl	80070d8 <memcpy>
 80071cc:	4621      	mov	r1, r4
 80071ce:	4640      	mov	r0, r8
 80071d0:	f7ff f8d2 	bl	8006378 <_free_r>
 80071d4:	463c      	mov	r4, r7
 80071d6:	e7e0      	b.n	800719a <_realloc_r+0x1e>

080071d8 <__ascii_wctomb>:
 80071d8:	4603      	mov	r3, r0
 80071da:	4608      	mov	r0, r1
 80071dc:	b141      	cbz	r1, 80071f0 <__ascii_wctomb+0x18>
 80071de:	2aff      	cmp	r2, #255	@ 0xff
 80071e0:	d904      	bls.n	80071ec <__ascii_wctomb+0x14>
 80071e2:	228a      	movs	r2, #138	@ 0x8a
 80071e4:	601a      	str	r2, [r3, #0]
 80071e6:	f04f 30ff 	mov.w	r0, #4294967295
 80071ea:	4770      	bx	lr
 80071ec:	700a      	strb	r2, [r1, #0]
 80071ee:	2001      	movs	r0, #1
 80071f0:	4770      	bx	lr
	...

080071f4 <fiprintf>:
 80071f4:	b40e      	push	{r1, r2, r3}
 80071f6:	b503      	push	{r0, r1, lr}
 80071f8:	4601      	mov	r1, r0
 80071fa:	ab03      	add	r3, sp, #12
 80071fc:	4805      	ldr	r0, [pc, #20]	@ (8007214 <fiprintf+0x20>)
 80071fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8007202:	6800      	ldr	r0, [r0, #0]
 8007204:	9301      	str	r3, [sp, #4]
 8007206:	f000 f83f 	bl	8007288 <_vfiprintf_r>
 800720a:	b002      	add	sp, #8
 800720c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007210:	b003      	add	sp, #12
 8007212:	4770      	bx	lr
 8007214:	20000018 	.word	0x20000018

08007218 <abort>:
 8007218:	b508      	push	{r3, lr}
 800721a:	2006      	movs	r0, #6
 800721c:	f000 fa08 	bl	8007630 <raise>
 8007220:	2001      	movs	r0, #1
 8007222:	f7fa fb00 	bl	8001826 <_exit>

08007226 <_malloc_usable_size_r>:
 8007226:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800722a:	1f18      	subs	r0, r3, #4
 800722c:	2b00      	cmp	r3, #0
 800722e:	bfbc      	itt	lt
 8007230:	580b      	ldrlt	r3, [r1, r0]
 8007232:	18c0      	addlt	r0, r0, r3
 8007234:	4770      	bx	lr

08007236 <__sfputc_r>:
 8007236:	6893      	ldr	r3, [r2, #8]
 8007238:	3b01      	subs	r3, #1
 800723a:	2b00      	cmp	r3, #0
 800723c:	b410      	push	{r4}
 800723e:	6093      	str	r3, [r2, #8]
 8007240:	da08      	bge.n	8007254 <__sfputc_r+0x1e>
 8007242:	6994      	ldr	r4, [r2, #24]
 8007244:	42a3      	cmp	r3, r4
 8007246:	db01      	blt.n	800724c <__sfputc_r+0x16>
 8007248:	290a      	cmp	r1, #10
 800724a:	d103      	bne.n	8007254 <__sfputc_r+0x1e>
 800724c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007250:	f000 b932 	b.w	80074b8 <__swbuf_r>
 8007254:	6813      	ldr	r3, [r2, #0]
 8007256:	1c58      	adds	r0, r3, #1
 8007258:	6010      	str	r0, [r2, #0]
 800725a:	7019      	strb	r1, [r3, #0]
 800725c:	4608      	mov	r0, r1
 800725e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007262:	4770      	bx	lr

08007264 <__sfputs_r>:
 8007264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007266:	4606      	mov	r6, r0
 8007268:	460f      	mov	r7, r1
 800726a:	4614      	mov	r4, r2
 800726c:	18d5      	adds	r5, r2, r3
 800726e:	42ac      	cmp	r4, r5
 8007270:	d101      	bne.n	8007276 <__sfputs_r+0x12>
 8007272:	2000      	movs	r0, #0
 8007274:	e007      	b.n	8007286 <__sfputs_r+0x22>
 8007276:	f814 1b01 	ldrb.w	r1, [r4], #1
 800727a:	463a      	mov	r2, r7
 800727c:	4630      	mov	r0, r6
 800727e:	f7ff ffda 	bl	8007236 <__sfputc_r>
 8007282:	1c43      	adds	r3, r0, #1
 8007284:	d1f3      	bne.n	800726e <__sfputs_r+0xa>
 8007286:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007288 <_vfiprintf_r>:
 8007288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728c:	460d      	mov	r5, r1
 800728e:	b09d      	sub	sp, #116	@ 0x74
 8007290:	4614      	mov	r4, r2
 8007292:	4698      	mov	r8, r3
 8007294:	4606      	mov	r6, r0
 8007296:	b118      	cbz	r0, 80072a0 <_vfiprintf_r+0x18>
 8007298:	6a03      	ldr	r3, [r0, #32]
 800729a:	b90b      	cbnz	r3, 80072a0 <_vfiprintf_r+0x18>
 800729c:	f7fe f8f2 	bl	8005484 <__sinit>
 80072a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072a2:	07d9      	lsls	r1, r3, #31
 80072a4:	d405      	bmi.n	80072b2 <_vfiprintf_r+0x2a>
 80072a6:	89ab      	ldrh	r3, [r5, #12]
 80072a8:	059a      	lsls	r2, r3, #22
 80072aa:	d402      	bmi.n	80072b2 <_vfiprintf_r+0x2a>
 80072ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072ae:	f7fe fa14 	bl	80056da <__retarget_lock_acquire_recursive>
 80072b2:	89ab      	ldrh	r3, [r5, #12]
 80072b4:	071b      	lsls	r3, r3, #28
 80072b6:	d501      	bpl.n	80072bc <_vfiprintf_r+0x34>
 80072b8:	692b      	ldr	r3, [r5, #16]
 80072ba:	b99b      	cbnz	r3, 80072e4 <_vfiprintf_r+0x5c>
 80072bc:	4629      	mov	r1, r5
 80072be:	4630      	mov	r0, r6
 80072c0:	f000 f938 	bl	8007534 <__swsetup_r>
 80072c4:	b170      	cbz	r0, 80072e4 <_vfiprintf_r+0x5c>
 80072c6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80072c8:	07dc      	lsls	r4, r3, #31
 80072ca:	d504      	bpl.n	80072d6 <_vfiprintf_r+0x4e>
 80072cc:	f04f 30ff 	mov.w	r0, #4294967295
 80072d0:	b01d      	add	sp, #116	@ 0x74
 80072d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072d6:	89ab      	ldrh	r3, [r5, #12]
 80072d8:	0598      	lsls	r0, r3, #22
 80072da:	d4f7      	bmi.n	80072cc <_vfiprintf_r+0x44>
 80072dc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80072de:	f7fe f9fd 	bl	80056dc <__retarget_lock_release_recursive>
 80072e2:	e7f3      	b.n	80072cc <_vfiprintf_r+0x44>
 80072e4:	2300      	movs	r3, #0
 80072e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80072e8:	2320      	movs	r3, #32
 80072ea:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80072ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80072f2:	2330      	movs	r3, #48	@ 0x30
 80072f4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80074a4 <_vfiprintf_r+0x21c>
 80072f8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80072fc:	f04f 0901 	mov.w	r9, #1
 8007300:	4623      	mov	r3, r4
 8007302:	469a      	mov	sl, r3
 8007304:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007308:	b10a      	cbz	r2, 800730e <_vfiprintf_r+0x86>
 800730a:	2a25      	cmp	r2, #37	@ 0x25
 800730c:	d1f9      	bne.n	8007302 <_vfiprintf_r+0x7a>
 800730e:	ebba 0b04 	subs.w	fp, sl, r4
 8007312:	d00b      	beq.n	800732c <_vfiprintf_r+0xa4>
 8007314:	465b      	mov	r3, fp
 8007316:	4622      	mov	r2, r4
 8007318:	4629      	mov	r1, r5
 800731a:	4630      	mov	r0, r6
 800731c:	f7ff ffa2 	bl	8007264 <__sfputs_r>
 8007320:	3001      	adds	r0, #1
 8007322:	f000 80a7 	beq.w	8007474 <_vfiprintf_r+0x1ec>
 8007326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007328:	445a      	add	r2, fp
 800732a:	9209      	str	r2, [sp, #36]	@ 0x24
 800732c:	f89a 3000 	ldrb.w	r3, [sl]
 8007330:	2b00      	cmp	r3, #0
 8007332:	f000 809f 	beq.w	8007474 <_vfiprintf_r+0x1ec>
 8007336:	2300      	movs	r3, #0
 8007338:	f04f 32ff 	mov.w	r2, #4294967295
 800733c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007340:	f10a 0a01 	add.w	sl, sl, #1
 8007344:	9304      	str	r3, [sp, #16]
 8007346:	9307      	str	r3, [sp, #28]
 8007348:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800734c:	931a      	str	r3, [sp, #104]	@ 0x68
 800734e:	4654      	mov	r4, sl
 8007350:	2205      	movs	r2, #5
 8007352:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007356:	4853      	ldr	r0, [pc, #332]	@ (80074a4 <_vfiprintf_r+0x21c>)
 8007358:	f7f8 ff62 	bl	8000220 <memchr>
 800735c:	9a04      	ldr	r2, [sp, #16]
 800735e:	b9d8      	cbnz	r0, 8007398 <_vfiprintf_r+0x110>
 8007360:	06d1      	lsls	r1, r2, #27
 8007362:	bf44      	itt	mi
 8007364:	2320      	movmi	r3, #32
 8007366:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800736a:	0713      	lsls	r3, r2, #28
 800736c:	bf44      	itt	mi
 800736e:	232b      	movmi	r3, #43	@ 0x2b
 8007370:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007374:	f89a 3000 	ldrb.w	r3, [sl]
 8007378:	2b2a      	cmp	r3, #42	@ 0x2a
 800737a:	d015      	beq.n	80073a8 <_vfiprintf_r+0x120>
 800737c:	9a07      	ldr	r2, [sp, #28]
 800737e:	4654      	mov	r4, sl
 8007380:	2000      	movs	r0, #0
 8007382:	f04f 0c0a 	mov.w	ip, #10
 8007386:	4621      	mov	r1, r4
 8007388:	f811 3b01 	ldrb.w	r3, [r1], #1
 800738c:	3b30      	subs	r3, #48	@ 0x30
 800738e:	2b09      	cmp	r3, #9
 8007390:	d94b      	bls.n	800742a <_vfiprintf_r+0x1a2>
 8007392:	b1b0      	cbz	r0, 80073c2 <_vfiprintf_r+0x13a>
 8007394:	9207      	str	r2, [sp, #28]
 8007396:	e014      	b.n	80073c2 <_vfiprintf_r+0x13a>
 8007398:	eba0 0308 	sub.w	r3, r0, r8
 800739c:	fa09 f303 	lsl.w	r3, r9, r3
 80073a0:	4313      	orrs	r3, r2
 80073a2:	9304      	str	r3, [sp, #16]
 80073a4:	46a2      	mov	sl, r4
 80073a6:	e7d2      	b.n	800734e <_vfiprintf_r+0xc6>
 80073a8:	9b03      	ldr	r3, [sp, #12]
 80073aa:	1d19      	adds	r1, r3, #4
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	9103      	str	r1, [sp, #12]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	bfbb      	ittet	lt
 80073b4:	425b      	neglt	r3, r3
 80073b6:	f042 0202 	orrlt.w	r2, r2, #2
 80073ba:	9307      	strge	r3, [sp, #28]
 80073bc:	9307      	strlt	r3, [sp, #28]
 80073be:	bfb8      	it	lt
 80073c0:	9204      	strlt	r2, [sp, #16]
 80073c2:	7823      	ldrb	r3, [r4, #0]
 80073c4:	2b2e      	cmp	r3, #46	@ 0x2e
 80073c6:	d10a      	bne.n	80073de <_vfiprintf_r+0x156>
 80073c8:	7863      	ldrb	r3, [r4, #1]
 80073ca:	2b2a      	cmp	r3, #42	@ 0x2a
 80073cc:	d132      	bne.n	8007434 <_vfiprintf_r+0x1ac>
 80073ce:	9b03      	ldr	r3, [sp, #12]
 80073d0:	1d1a      	adds	r2, r3, #4
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	9203      	str	r2, [sp, #12]
 80073d6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80073da:	3402      	adds	r4, #2
 80073dc:	9305      	str	r3, [sp, #20]
 80073de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80074b4 <_vfiprintf_r+0x22c>
 80073e2:	7821      	ldrb	r1, [r4, #0]
 80073e4:	2203      	movs	r2, #3
 80073e6:	4650      	mov	r0, sl
 80073e8:	f7f8 ff1a 	bl	8000220 <memchr>
 80073ec:	b138      	cbz	r0, 80073fe <_vfiprintf_r+0x176>
 80073ee:	9b04      	ldr	r3, [sp, #16]
 80073f0:	eba0 000a 	sub.w	r0, r0, sl
 80073f4:	2240      	movs	r2, #64	@ 0x40
 80073f6:	4082      	lsls	r2, r0
 80073f8:	4313      	orrs	r3, r2
 80073fa:	3401      	adds	r4, #1
 80073fc:	9304      	str	r3, [sp, #16]
 80073fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007402:	4829      	ldr	r0, [pc, #164]	@ (80074a8 <_vfiprintf_r+0x220>)
 8007404:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007408:	2206      	movs	r2, #6
 800740a:	f7f8 ff09 	bl	8000220 <memchr>
 800740e:	2800      	cmp	r0, #0
 8007410:	d03f      	beq.n	8007492 <_vfiprintf_r+0x20a>
 8007412:	4b26      	ldr	r3, [pc, #152]	@ (80074ac <_vfiprintf_r+0x224>)
 8007414:	bb1b      	cbnz	r3, 800745e <_vfiprintf_r+0x1d6>
 8007416:	9b03      	ldr	r3, [sp, #12]
 8007418:	3307      	adds	r3, #7
 800741a:	f023 0307 	bic.w	r3, r3, #7
 800741e:	3308      	adds	r3, #8
 8007420:	9303      	str	r3, [sp, #12]
 8007422:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007424:	443b      	add	r3, r7
 8007426:	9309      	str	r3, [sp, #36]	@ 0x24
 8007428:	e76a      	b.n	8007300 <_vfiprintf_r+0x78>
 800742a:	fb0c 3202 	mla	r2, ip, r2, r3
 800742e:	460c      	mov	r4, r1
 8007430:	2001      	movs	r0, #1
 8007432:	e7a8      	b.n	8007386 <_vfiprintf_r+0xfe>
 8007434:	2300      	movs	r3, #0
 8007436:	3401      	adds	r4, #1
 8007438:	9305      	str	r3, [sp, #20]
 800743a:	4619      	mov	r1, r3
 800743c:	f04f 0c0a 	mov.w	ip, #10
 8007440:	4620      	mov	r0, r4
 8007442:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007446:	3a30      	subs	r2, #48	@ 0x30
 8007448:	2a09      	cmp	r2, #9
 800744a:	d903      	bls.n	8007454 <_vfiprintf_r+0x1cc>
 800744c:	2b00      	cmp	r3, #0
 800744e:	d0c6      	beq.n	80073de <_vfiprintf_r+0x156>
 8007450:	9105      	str	r1, [sp, #20]
 8007452:	e7c4      	b.n	80073de <_vfiprintf_r+0x156>
 8007454:	fb0c 2101 	mla	r1, ip, r1, r2
 8007458:	4604      	mov	r4, r0
 800745a:	2301      	movs	r3, #1
 800745c:	e7f0      	b.n	8007440 <_vfiprintf_r+0x1b8>
 800745e:	ab03      	add	r3, sp, #12
 8007460:	9300      	str	r3, [sp, #0]
 8007462:	462a      	mov	r2, r5
 8007464:	4b12      	ldr	r3, [pc, #72]	@ (80074b0 <_vfiprintf_r+0x228>)
 8007466:	a904      	add	r1, sp, #16
 8007468:	4630      	mov	r0, r6
 800746a:	f7fd fbc7 	bl	8004bfc <_printf_float>
 800746e:	4607      	mov	r7, r0
 8007470:	1c78      	adds	r0, r7, #1
 8007472:	d1d6      	bne.n	8007422 <_vfiprintf_r+0x19a>
 8007474:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007476:	07d9      	lsls	r1, r3, #31
 8007478:	d405      	bmi.n	8007486 <_vfiprintf_r+0x1fe>
 800747a:	89ab      	ldrh	r3, [r5, #12]
 800747c:	059a      	lsls	r2, r3, #22
 800747e:	d402      	bmi.n	8007486 <_vfiprintf_r+0x1fe>
 8007480:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007482:	f7fe f92b 	bl	80056dc <__retarget_lock_release_recursive>
 8007486:	89ab      	ldrh	r3, [r5, #12]
 8007488:	065b      	lsls	r3, r3, #25
 800748a:	f53f af1f 	bmi.w	80072cc <_vfiprintf_r+0x44>
 800748e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007490:	e71e      	b.n	80072d0 <_vfiprintf_r+0x48>
 8007492:	ab03      	add	r3, sp, #12
 8007494:	9300      	str	r3, [sp, #0]
 8007496:	462a      	mov	r2, r5
 8007498:	4b05      	ldr	r3, [pc, #20]	@ (80074b0 <_vfiprintf_r+0x228>)
 800749a:	a904      	add	r1, sp, #16
 800749c:	4630      	mov	r0, r6
 800749e:	f7fd fe45 	bl	800512c <_printf_i>
 80074a2:	e7e4      	b.n	800746e <_vfiprintf_r+0x1e6>
 80074a4:	080080c8 	.word	0x080080c8
 80074a8:	080080d2 	.word	0x080080d2
 80074ac:	08004bfd 	.word	0x08004bfd
 80074b0:	08007265 	.word	0x08007265
 80074b4:	080080ce 	.word	0x080080ce

080074b8 <__swbuf_r>:
 80074b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074ba:	460e      	mov	r6, r1
 80074bc:	4614      	mov	r4, r2
 80074be:	4605      	mov	r5, r0
 80074c0:	b118      	cbz	r0, 80074ca <__swbuf_r+0x12>
 80074c2:	6a03      	ldr	r3, [r0, #32]
 80074c4:	b90b      	cbnz	r3, 80074ca <__swbuf_r+0x12>
 80074c6:	f7fd ffdd 	bl	8005484 <__sinit>
 80074ca:	69a3      	ldr	r3, [r4, #24]
 80074cc:	60a3      	str	r3, [r4, #8]
 80074ce:	89a3      	ldrh	r3, [r4, #12]
 80074d0:	071a      	lsls	r2, r3, #28
 80074d2:	d501      	bpl.n	80074d8 <__swbuf_r+0x20>
 80074d4:	6923      	ldr	r3, [r4, #16]
 80074d6:	b943      	cbnz	r3, 80074ea <__swbuf_r+0x32>
 80074d8:	4621      	mov	r1, r4
 80074da:	4628      	mov	r0, r5
 80074dc:	f000 f82a 	bl	8007534 <__swsetup_r>
 80074e0:	b118      	cbz	r0, 80074ea <__swbuf_r+0x32>
 80074e2:	f04f 37ff 	mov.w	r7, #4294967295
 80074e6:	4638      	mov	r0, r7
 80074e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	6922      	ldr	r2, [r4, #16]
 80074ee:	1a98      	subs	r0, r3, r2
 80074f0:	6963      	ldr	r3, [r4, #20]
 80074f2:	b2f6      	uxtb	r6, r6
 80074f4:	4283      	cmp	r3, r0
 80074f6:	4637      	mov	r7, r6
 80074f8:	dc05      	bgt.n	8007506 <__swbuf_r+0x4e>
 80074fa:	4621      	mov	r1, r4
 80074fc:	4628      	mov	r0, r5
 80074fe:	f7ff fd99 	bl	8007034 <_fflush_r>
 8007502:	2800      	cmp	r0, #0
 8007504:	d1ed      	bne.n	80074e2 <__swbuf_r+0x2a>
 8007506:	68a3      	ldr	r3, [r4, #8]
 8007508:	3b01      	subs	r3, #1
 800750a:	60a3      	str	r3, [r4, #8]
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	1c5a      	adds	r2, r3, #1
 8007510:	6022      	str	r2, [r4, #0]
 8007512:	701e      	strb	r6, [r3, #0]
 8007514:	6962      	ldr	r2, [r4, #20]
 8007516:	1c43      	adds	r3, r0, #1
 8007518:	429a      	cmp	r2, r3
 800751a:	d004      	beq.n	8007526 <__swbuf_r+0x6e>
 800751c:	89a3      	ldrh	r3, [r4, #12]
 800751e:	07db      	lsls	r3, r3, #31
 8007520:	d5e1      	bpl.n	80074e6 <__swbuf_r+0x2e>
 8007522:	2e0a      	cmp	r6, #10
 8007524:	d1df      	bne.n	80074e6 <__swbuf_r+0x2e>
 8007526:	4621      	mov	r1, r4
 8007528:	4628      	mov	r0, r5
 800752a:	f7ff fd83 	bl	8007034 <_fflush_r>
 800752e:	2800      	cmp	r0, #0
 8007530:	d0d9      	beq.n	80074e6 <__swbuf_r+0x2e>
 8007532:	e7d6      	b.n	80074e2 <__swbuf_r+0x2a>

08007534 <__swsetup_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4b29      	ldr	r3, [pc, #164]	@ (80075dc <__swsetup_r+0xa8>)
 8007538:	4605      	mov	r5, r0
 800753a:	6818      	ldr	r0, [r3, #0]
 800753c:	460c      	mov	r4, r1
 800753e:	b118      	cbz	r0, 8007548 <__swsetup_r+0x14>
 8007540:	6a03      	ldr	r3, [r0, #32]
 8007542:	b90b      	cbnz	r3, 8007548 <__swsetup_r+0x14>
 8007544:	f7fd ff9e 	bl	8005484 <__sinit>
 8007548:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800754c:	0719      	lsls	r1, r3, #28
 800754e:	d422      	bmi.n	8007596 <__swsetup_r+0x62>
 8007550:	06da      	lsls	r2, r3, #27
 8007552:	d407      	bmi.n	8007564 <__swsetup_r+0x30>
 8007554:	2209      	movs	r2, #9
 8007556:	602a      	str	r2, [r5, #0]
 8007558:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800755c:	81a3      	strh	r3, [r4, #12]
 800755e:	f04f 30ff 	mov.w	r0, #4294967295
 8007562:	e033      	b.n	80075cc <__swsetup_r+0x98>
 8007564:	0758      	lsls	r0, r3, #29
 8007566:	d512      	bpl.n	800758e <__swsetup_r+0x5a>
 8007568:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800756a:	b141      	cbz	r1, 800757e <__swsetup_r+0x4a>
 800756c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007570:	4299      	cmp	r1, r3
 8007572:	d002      	beq.n	800757a <__swsetup_r+0x46>
 8007574:	4628      	mov	r0, r5
 8007576:	f7fe feff 	bl	8006378 <_free_r>
 800757a:	2300      	movs	r3, #0
 800757c:	6363      	str	r3, [r4, #52]	@ 0x34
 800757e:	89a3      	ldrh	r3, [r4, #12]
 8007580:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007584:	81a3      	strh	r3, [r4, #12]
 8007586:	2300      	movs	r3, #0
 8007588:	6063      	str	r3, [r4, #4]
 800758a:	6923      	ldr	r3, [r4, #16]
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	89a3      	ldrh	r3, [r4, #12]
 8007590:	f043 0308 	orr.w	r3, r3, #8
 8007594:	81a3      	strh	r3, [r4, #12]
 8007596:	6923      	ldr	r3, [r4, #16]
 8007598:	b94b      	cbnz	r3, 80075ae <__swsetup_r+0x7a>
 800759a:	89a3      	ldrh	r3, [r4, #12]
 800759c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80075a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075a4:	d003      	beq.n	80075ae <__swsetup_r+0x7a>
 80075a6:	4621      	mov	r1, r4
 80075a8:	4628      	mov	r0, r5
 80075aa:	f000 f883 	bl	80076b4 <__smakebuf_r>
 80075ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075b2:	f013 0201 	ands.w	r2, r3, #1
 80075b6:	d00a      	beq.n	80075ce <__swsetup_r+0x9a>
 80075b8:	2200      	movs	r2, #0
 80075ba:	60a2      	str	r2, [r4, #8]
 80075bc:	6962      	ldr	r2, [r4, #20]
 80075be:	4252      	negs	r2, r2
 80075c0:	61a2      	str	r2, [r4, #24]
 80075c2:	6922      	ldr	r2, [r4, #16]
 80075c4:	b942      	cbnz	r2, 80075d8 <__swsetup_r+0xa4>
 80075c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80075ca:	d1c5      	bne.n	8007558 <__swsetup_r+0x24>
 80075cc:	bd38      	pop	{r3, r4, r5, pc}
 80075ce:	0799      	lsls	r1, r3, #30
 80075d0:	bf58      	it	pl
 80075d2:	6962      	ldrpl	r2, [r4, #20]
 80075d4:	60a2      	str	r2, [r4, #8]
 80075d6:	e7f4      	b.n	80075c2 <__swsetup_r+0x8e>
 80075d8:	2000      	movs	r0, #0
 80075da:	e7f7      	b.n	80075cc <__swsetup_r+0x98>
 80075dc:	20000018 	.word	0x20000018

080075e0 <_raise_r>:
 80075e0:	291f      	cmp	r1, #31
 80075e2:	b538      	push	{r3, r4, r5, lr}
 80075e4:	4605      	mov	r5, r0
 80075e6:	460c      	mov	r4, r1
 80075e8:	d904      	bls.n	80075f4 <_raise_r+0x14>
 80075ea:	2316      	movs	r3, #22
 80075ec:	6003      	str	r3, [r0, #0]
 80075ee:	f04f 30ff 	mov.w	r0, #4294967295
 80075f2:	bd38      	pop	{r3, r4, r5, pc}
 80075f4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80075f6:	b112      	cbz	r2, 80075fe <_raise_r+0x1e>
 80075f8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80075fc:	b94b      	cbnz	r3, 8007612 <_raise_r+0x32>
 80075fe:	4628      	mov	r0, r5
 8007600:	f000 f830 	bl	8007664 <_getpid_r>
 8007604:	4622      	mov	r2, r4
 8007606:	4601      	mov	r1, r0
 8007608:	4628      	mov	r0, r5
 800760a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800760e:	f000 b817 	b.w	8007640 <_kill_r>
 8007612:	2b01      	cmp	r3, #1
 8007614:	d00a      	beq.n	800762c <_raise_r+0x4c>
 8007616:	1c59      	adds	r1, r3, #1
 8007618:	d103      	bne.n	8007622 <_raise_r+0x42>
 800761a:	2316      	movs	r3, #22
 800761c:	6003      	str	r3, [r0, #0]
 800761e:	2001      	movs	r0, #1
 8007620:	e7e7      	b.n	80075f2 <_raise_r+0x12>
 8007622:	2100      	movs	r1, #0
 8007624:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007628:	4620      	mov	r0, r4
 800762a:	4798      	blx	r3
 800762c:	2000      	movs	r0, #0
 800762e:	e7e0      	b.n	80075f2 <_raise_r+0x12>

08007630 <raise>:
 8007630:	4b02      	ldr	r3, [pc, #8]	@ (800763c <raise+0xc>)
 8007632:	4601      	mov	r1, r0
 8007634:	6818      	ldr	r0, [r3, #0]
 8007636:	f7ff bfd3 	b.w	80075e0 <_raise_r>
 800763a:	bf00      	nop
 800763c:	20000018 	.word	0x20000018

08007640 <_kill_r>:
 8007640:	b538      	push	{r3, r4, r5, lr}
 8007642:	4d07      	ldr	r5, [pc, #28]	@ (8007660 <_kill_r+0x20>)
 8007644:	2300      	movs	r3, #0
 8007646:	4604      	mov	r4, r0
 8007648:	4608      	mov	r0, r1
 800764a:	4611      	mov	r1, r2
 800764c:	602b      	str	r3, [r5, #0]
 800764e:	f7fa f8da 	bl	8001806 <_kill>
 8007652:	1c43      	adds	r3, r0, #1
 8007654:	d102      	bne.n	800765c <_kill_r+0x1c>
 8007656:	682b      	ldr	r3, [r5, #0]
 8007658:	b103      	cbz	r3, 800765c <_kill_r+0x1c>
 800765a:	6023      	str	r3, [r4, #0]
 800765c:	bd38      	pop	{r3, r4, r5, pc}
 800765e:	bf00      	nop
 8007660:	20000430 	.word	0x20000430

08007664 <_getpid_r>:
 8007664:	f7fa b8c7 	b.w	80017f6 <_getpid>

08007668 <__swhatbuf_r>:
 8007668:	b570      	push	{r4, r5, r6, lr}
 800766a:	460c      	mov	r4, r1
 800766c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007670:	2900      	cmp	r1, #0
 8007672:	b096      	sub	sp, #88	@ 0x58
 8007674:	4615      	mov	r5, r2
 8007676:	461e      	mov	r6, r3
 8007678:	da0d      	bge.n	8007696 <__swhatbuf_r+0x2e>
 800767a:	89a3      	ldrh	r3, [r4, #12]
 800767c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007680:	f04f 0100 	mov.w	r1, #0
 8007684:	bf14      	ite	ne
 8007686:	2340      	movne	r3, #64	@ 0x40
 8007688:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800768c:	2000      	movs	r0, #0
 800768e:	6031      	str	r1, [r6, #0]
 8007690:	602b      	str	r3, [r5, #0]
 8007692:	b016      	add	sp, #88	@ 0x58
 8007694:	bd70      	pop	{r4, r5, r6, pc}
 8007696:	466a      	mov	r2, sp
 8007698:	f000 f848 	bl	800772c <_fstat_r>
 800769c:	2800      	cmp	r0, #0
 800769e:	dbec      	blt.n	800767a <__swhatbuf_r+0x12>
 80076a0:	9901      	ldr	r1, [sp, #4]
 80076a2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80076a6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80076aa:	4259      	negs	r1, r3
 80076ac:	4159      	adcs	r1, r3
 80076ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80076b2:	e7eb      	b.n	800768c <__swhatbuf_r+0x24>

080076b4 <__smakebuf_r>:
 80076b4:	898b      	ldrh	r3, [r1, #12]
 80076b6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80076b8:	079d      	lsls	r5, r3, #30
 80076ba:	4606      	mov	r6, r0
 80076bc:	460c      	mov	r4, r1
 80076be:	d507      	bpl.n	80076d0 <__smakebuf_r+0x1c>
 80076c0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80076c4:	6023      	str	r3, [r4, #0]
 80076c6:	6123      	str	r3, [r4, #16]
 80076c8:	2301      	movs	r3, #1
 80076ca:	6163      	str	r3, [r4, #20]
 80076cc:	b003      	add	sp, #12
 80076ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80076d0:	ab01      	add	r3, sp, #4
 80076d2:	466a      	mov	r2, sp
 80076d4:	f7ff ffc8 	bl	8007668 <__swhatbuf_r>
 80076d8:	9f00      	ldr	r7, [sp, #0]
 80076da:	4605      	mov	r5, r0
 80076dc:	4639      	mov	r1, r7
 80076de:	4630      	mov	r0, r6
 80076e0:	f7fe febe 	bl	8006460 <_malloc_r>
 80076e4:	b948      	cbnz	r0, 80076fa <__smakebuf_r+0x46>
 80076e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ea:	059a      	lsls	r2, r3, #22
 80076ec:	d4ee      	bmi.n	80076cc <__smakebuf_r+0x18>
 80076ee:	f023 0303 	bic.w	r3, r3, #3
 80076f2:	f043 0302 	orr.w	r3, r3, #2
 80076f6:	81a3      	strh	r3, [r4, #12]
 80076f8:	e7e2      	b.n	80076c0 <__smakebuf_r+0xc>
 80076fa:	89a3      	ldrh	r3, [r4, #12]
 80076fc:	6020      	str	r0, [r4, #0]
 80076fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007702:	81a3      	strh	r3, [r4, #12]
 8007704:	9b01      	ldr	r3, [sp, #4]
 8007706:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800770a:	b15b      	cbz	r3, 8007724 <__smakebuf_r+0x70>
 800770c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007710:	4630      	mov	r0, r6
 8007712:	f000 f81d 	bl	8007750 <_isatty_r>
 8007716:	b128      	cbz	r0, 8007724 <__smakebuf_r+0x70>
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	f023 0303 	bic.w	r3, r3, #3
 800771e:	f043 0301 	orr.w	r3, r3, #1
 8007722:	81a3      	strh	r3, [r4, #12]
 8007724:	89a3      	ldrh	r3, [r4, #12]
 8007726:	431d      	orrs	r5, r3
 8007728:	81a5      	strh	r5, [r4, #12]
 800772a:	e7cf      	b.n	80076cc <__smakebuf_r+0x18>

0800772c <_fstat_r>:
 800772c:	b538      	push	{r3, r4, r5, lr}
 800772e:	4d07      	ldr	r5, [pc, #28]	@ (800774c <_fstat_r+0x20>)
 8007730:	2300      	movs	r3, #0
 8007732:	4604      	mov	r4, r0
 8007734:	4608      	mov	r0, r1
 8007736:	4611      	mov	r1, r2
 8007738:	602b      	str	r3, [r5, #0]
 800773a:	f7fa f8c4 	bl	80018c6 <_fstat>
 800773e:	1c43      	adds	r3, r0, #1
 8007740:	d102      	bne.n	8007748 <_fstat_r+0x1c>
 8007742:	682b      	ldr	r3, [r5, #0]
 8007744:	b103      	cbz	r3, 8007748 <_fstat_r+0x1c>
 8007746:	6023      	str	r3, [r4, #0]
 8007748:	bd38      	pop	{r3, r4, r5, pc}
 800774a:	bf00      	nop
 800774c:	20000430 	.word	0x20000430

08007750 <_isatty_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4d06      	ldr	r5, [pc, #24]	@ (800776c <_isatty_r+0x1c>)
 8007754:	2300      	movs	r3, #0
 8007756:	4604      	mov	r4, r0
 8007758:	4608      	mov	r0, r1
 800775a:	602b      	str	r3, [r5, #0]
 800775c:	f7fa f8c3 	bl	80018e6 <_isatty>
 8007760:	1c43      	adds	r3, r0, #1
 8007762:	d102      	bne.n	800776a <_isatty_r+0x1a>
 8007764:	682b      	ldr	r3, [r5, #0]
 8007766:	b103      	cbz	r3, 800776a <_isatty_r+0x1a>
 8007768:	6023      	str	r3, [r4, #0]
 800776a:	bd38      	pop	{r3, r4, r5, pc}
 800776c:	20000430 	.word	0x20000430

08007770 <atan2>:
 8007770:	f000 b906 	b.w	8007980 <__ieee754_atan2>

08007774 <sqrt>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	ed2d 8b02 	vpush	{d8}
 800777a:	ec55 4b10 	vmov	r4, r5, d0
 800777e:	f000 f825 	bl	80077cc <__ieee754_sqrt>
 8007782:	4622      	mov	r2, r4
 8007784:	462b      	mov	r3, r5
 8007786:	4620      	mov	r0, r4
 8007788:	4629      	mov	r1, r5
 800778a:	eeb0 8a40 	vmov.f32	s16, s0
 800778e:	eef0 8a60 	vmov.f32	s17, s1
 8007792:	f7f9 f9f3 	bl	8000b7c <__aeabi_dcmpun>
 8007796:	b990      	cbnz	r0, 80077be <sqrt+0x4a>
 8007798:	2200      	movs	r2, #0
 800779a:	2300      	movs	r3, #0
 800779c:	4620      	mov	r0, r4
 800779e:	4629      	mov	r1, r5
 80077a0:	f7f9 f9c4 	bl	8000b2c <__aeabi_dcmplt>
 80077a4:	b158      	cbz	r0, 80077be <sqrt+0x4a>
 80077a6:	f7fd ff6d 	bl	8005684 <__errno>
 80077aa:	2321      	movs	r3, #33	@ 0x21
 80077ac:	6003      	str	r3, [r0, #0]
 80077ae:	2200      	movs	r2, #0
 80077b0:	2300      	movs	r3, #0
 80077b2:	4610      	mov	r0, r2
 80077b4:	4619      	mov	r1, r3
 80077b6:	f7f9 f871 	bl	800089c <__aeabi_ddiv>
 80077ba:	ec41 0b18 	vmov	d8, r0, r1
 80077be:	eeb0 0a48 	vmov.f32	s0, s16
 80077c2:	eef0 0a68 	vmov.f32	s1, s17
 80077c6:	ecbd 8b02 	vpop	{d8}
 80077ca:	bd38      	pop	{r3, r4, r5, pc}

080077cc <__ieee754_sqrt>:
 80077cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d0:	4a68      	ldr	r2, [pc, #416]	@ (8007974 <__ieee754_sqrt+0x1a8>)
 80077d2:	ec55 4b10 	vmov	r4, r5, d0
 80077d6:	43aa      	bics	r2, r5
 80077d8:	462b      	mov	r3, r5
 80077da:	4621      	mov	r1, r4
 80077dc:	d110      	bne.n	8007800 <__ieee754_sqrt+0x34>
 80077de:	4622      	mov	r2, r4
 80077e0:	4620      	mov	r0, r4
 80077e2:	4629      	mov	r1, r5
 80077e4:	f7f8 ff30 	bl	8000648 <__aeabi_dmul>
 80077e8:	4602      	mov	r2, r0
 80077ea:	460b      	mov	r3, r1
 80077ec:	4620      	mov	r0, r4
 80077ee:	4629      	mov	r1, r5
 80077f0:	f7f8 fd74 	bl	80002dc <__adddf3>
 80077f4:	4604      	mov	r4, r0
 80077f6:	460d      	mov	r5, r1
 80077f8:	ec45 4b10 	vmov	d0, r4, r5
 80077fc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007800:	2d00      	cmp	r5, #0
 8007802:	dc0e      	bgt.n	8007822 <__ieee754_sqrt+0x56>
 8007804:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8007808:	4322      	orrs	r2, r4
 800780a:	d0f5      	beq.n	80077f8 <__ieee754_sqrt+0x2c>
 800780c:	b19d      	cbz	r5, 8007836 <__ieee754_sqrt+0x6a>
 800780e:	4622      	mov	r2, r4
 8007810:	4620      	mov	r0, r4
 8007812:	4629      	mov	r1, r5
 8007814:	f7f8 fd60 	bl	80002d8 <__aeabi_dsub>
 8007818:	4602      	mov	r2, r0
 800781a:	460b      	mov	r3, r1
 800781c:	f7f9 f83e 	bl	800089c <__aeabi_ddiv>
 8007820:	e7e8      	b.n	80077f4 <__ieee754_sqrt+0x28>
 8007822:	152a      	asrs	r2, r5, #20
 8007824:	d115      	bne.n	8007852 <__ieee754_sqrt+0x86>
 8007826:	2000      	movs	r0, #0
 8007828:	e009      	b.n	800783e <__ieee754_sqrt+0x72>
 800782a:	0acb      	lsrs	r3, r1, #11
 800782c:	3a15      	subs	r2, #21
 800782e:	0549      	lsls	r1, r1, #21
 8007830:	2b00      	cmp	r3, #0
 8007832:	d0fa      	beq.n	800782a <__ieee754_sqrt+0x5e>
 8007834:	e7f7      	b.n	8007826 <__ieee754_sqrt+0x5a>
 8007836:	462a      	mov	r2, r5
 8007838:	e7fa      	b.n	8007830 <__ieee754_sqrt+0x64>
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	3001      	adds	r0, #1
 800783e:	02dc      	lsls	r4, r3, #11
 8007840:	d5fb      	bpl.n	800783a <__ieee754_sqrt+0x6e>
 8007842:	1e44      	subs	r4, r0, #1
 8007844:	1b12      	subs	r2, r2, r4
 8007846:	f1c0 0420 	rsb	r4, r0, #32
 800784a:	fa21 f404 	lsr.w	r4, r1, r4
 800784e:	4323      	orrs	r3, r4
 8007850:	4081      	lsls	r1, r0
 8007852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007856:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800785a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800785e:	07d2      	lsls	r2, r2, #31
 8007860:	bf5c      	itt	pl
 8007862:	005b      	lslpl	r3, r3, #1
 8007864:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8007868:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800786c:	bf58      	it	pl
 800786e:	0049      	lslpl	r1, r1, #1
 8007870:	2600      	movs	r6, #0
 8007872:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8007876:	106d      	asrs	r5, r5, #1
 8007878:	0049      	lsls	r1, r1, #1
 800787a:	2016      	movs	r0, #22
 800787c:	4632      	mov	r2, r6
 800787e:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8007882:	1917      	adds	r7, r2, r4
 8007884:	429f      	cmp	r7, r3
 8007886:	bfde      	ittt	le
 8007888:	193a      	addle	r2, r7, r4
 800788a:	1bdb      	suble	r3, r3, r7
 800788c:	1936      	addle	r6, r6, r4
 800788e:	0fcf      	lsrs	r7, r1, #31
 8007890:	3801      	subs	r0, #1
 8007892:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8007896:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800789a:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800789e:	d1f0      	bne.n	8007882 <__ieee754_sqrt+0xb6>
 80078a0:	4604      	mov	r4, r0
 80078a2:	2720      	movs	r7, #32
 80078a4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80078a8:	429a      	cmp	r2, r3
 80078aa:	eb00 0e0c 	add.w	lr, r0, ip
 80078ae:	db02      	blt.n	80078b6 <__ieee754_sqrt+0xea>
 80078b0:	d113      	bne.n	80078da <__ieee754_sqrt+0x10e>
 80078b2:	458e      	cmp	lr, r1
 80078b4:	d811      	bhi.n	80078da <__ieee754_sqrt+0x10e>
 80078b6:	f1be 0f00 	cmp.w	lr, #0
 80078ba:	eb0e 000c 	add.w	r0, lr, ip
 80078be:	da42      	bge.n	8007946 <__ieee754_sqrt+0x17a>
 80078c0:	2800      	cmp	r0, #0
 80078c2:	db40      	blt.n	8007946 <__ieee754_sqrt+0x17a>
 80078c4:	f102 0801 	add.w	r8, r2, #1
 80078c8:	1a9b      	subs	r3, r3, r2
 80078ca:	458e      	cmp	lr, r1
 80078cc:	bf88      	it	hi
 80078ce:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80078d2:	eba1 010e 	sub.w	r1, r1, lr
 80078d6:	4464      	add	r4, ip
 80078d8:	4642      	mov	r2, r8
 80078da:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80078de:	3f01      	subs	r7, #1
 80078e0:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80078e4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80078e8:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80078ec:	d1dc      	bne.n	80078a8 <__ieee754_sqrt+0xdc>
 80078ee:	4319      	orrs	r1, r3
 80078f0:	d01b      	beq.n	800792a <__ieee754_sqrt+0x15e>
 80078f2:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8007978 <__ieee754_sqrt+0x1ac>
 80078f6:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800797c <__ieee754_sqrt+0x1b0>
 80078fa:	e9da 0100 	ldrd	r0, r1, [sl]
 80078fe:	e9db 2300 	ldrd	r2, r3, [fp]
 8007902:	f7f8 fce9 	bl	80002d8 <__aeabi_dsub>
 8007906:	e9da 8900 	ldrd	r8, r9, [sl]
 800790a:	4602      	mov	r2, r0
 800790c:	460b      	mov	r3, r1
 800790e:	4640      	mov	r0, r8
 8007910:	4649      	mov	r1, r9
 8007912:	f7f9 f915 	bl	8000b40 <__aeabi_dcmple>
 8007916:	b140      	cbz	r0, 800792a <__ieee754_sqrt+0x15e>
 8007918:	f1b4 3fff 	cmp.w	r4, #4294967295
 800791c:	e9da 0100 	ldrd	r0, r1, [sl]
 8007920:	e9db 2300 	ldrd	r2, r3, [fp]
 8007924:	d111      	bne.n	800794a <__ieee754_sqrt+0x17e>
 8007926:	3601      	adds	r6, #1
 8007928:	463c      	mov	r4, r7
 800792a:	1072      	asrs	r2, r6, #1
 800792c:	0863      	lsrs	r3, r4, #1
 800792e:	07f1      	lsls	r1, r6, #31
 8007930:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8007934:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8007938:	bf48      	it	mi
 800793a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800793e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8007942:	4618      	mov	r0, r3
 8007944:	e756      	b.n	80077f4 <__ieee754_sqrt+0x28>
 8007946:	4690      	mov	r8, r2
 8007948:	e7be      	b.n	80078c8 <__ieee754_sqrt+0xfc>
 800794a:	f7f8 fcc7 	bl	80002dc <__adddf3>
 800794e:	e9da 8900 	ldrd	r8, r9, [sl]
 8007952:	4602      	mov	r2, r0
 8007954:	460b      	mov	r3, r1
 8007956:	4640      	mov	r0, r8
 8007958:	4649      	mov	r1, r9
 800795a:	f7f9 f8e7 	bl	8000b2c <__aeabi_dcmplt>
 800795e:	b120      	cbz	r0, 800796a <__ieee754_sqrt+0x19e>
 8007960:	1ca0      	adds	r0, r4, #2
 8007962:	bf08      	it	eq
 8007964:	3601      	addeq	r6, #1
 8007966:	3402      	adds	r4, #2
 8007968:	e7df      	b.n	800792a <__ieee754_sqrt+0x15e>
 800796a:	1c63      	adds	r3, r4, #1
 800796c:	f023 0401 	bic.w	r4, r3, #1
 8007970:	e7db      	b.n	800792a <__ieee754_sqrt+0x15e>
 8007972:	bf00      	nop
 8007974:	7ff00000 	.word	0x7ff00000
 8007978:	200001e0 	.word	0x200001e0
 800797c:	200001d8 	.word	0x200001d8

08007980 <__ieee754_atan2>:
 8007980:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007984:	ec57 6b11 	vmov	r6, r7, d1
 8007988:	4273      	negs	r3, r6
 800798a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8007b08 <__ieee754_atan2+0x188>
 800798e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 8007992:	4333      	orrs	r3, r6
 8007994:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 8007998:	4543      	cmp	r3, r8
 800799a:	ec51 0b10 	vmov	r0, r1, d0
 800799e:	4635      	mov	r5, r6
 80079a0:	d809      	bhi.n	80079b6 <__ieee754_atan2+0x36>
 80079a2:	4244      	negs	r4, r0
 80079a4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80079a8:	4304      	orrs	r4, r0
 80079aa:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 80079ae:	4544      	cmp	r4, r8
 80079b0:	468e      	mov	lr, r1
 80079b2:	4681      	mov	r9, r0
 80079b4:	d907      	bls.n	80079c6 <__ieee754_atan2+0x46>
 80079b6:	4632      	mov	r2, r6
 80079b8:	463b      	mov	r3, r7
 80079ba:	f7f8 fc8f 	bl	80002dc <__adddf3>
 80079be:	ec41 0b10 	vmov	d0, r0, r1
 80079c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80079c6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 80079ca:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 80079ce:	4334      	orrs	r4, r6
 80079d0:	d103      	bne.n	80079da <__ieee754_atan2+0x5a>
 80079d2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80079d6:	f000 b89b 	b.w	8007b10 <atan>
 80079da:	17bc      	asrs	r4, r7, #30
 80079dc:	f004 0402 	and.w	r4, r4, #2
 80079e0:	ea53 0909 	orrs.w	r9, r3, r9
 80079e4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 80079e8:	d107      	bne.n	80079fa <__ieee754_atan2+0x7a>
 80079ea:	2c02      	cmp	r4, #2
 80079ec:	d05f      	beq.n	8007aae <__ieee754_atan2+0x12e>
 80079ee:	2c03      	cmp	r4, #3
 80079f0:	d1e5      	bne.n	80079be <__ieee754_atan2+0x3e>
 80079f2:	a141      	add	r1, pc, #260	@ (adr r1, 8007af8 <__ieee754_atan2+0x178>)
 80079f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80079f8:	e7e1      	b.n	80079be <__ieee754_atan2+0x3e>
 80079fa:	4315      	orrs	r5, r2
 80079fc:	d106      	bne.n	8007a0c <__ieee754_atan2+0x8c>
 80079fe:	f1be 0f00 	cmp.w	lr, #0
 8007a02:	da5f      	bge.n	8007ac4 <__ieee754_atan2+0x144>
 8007a04:	a13e      	add	r1, pc, #248	@ (adr r1, 8007b00 <__ieee754_atan2+0x180>)
 8007a06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a0a:	e7d8      	b.n	80079be <__ieee754_atan2+0x3e>
 8007a0c:	4542      	cmp	r2, r8
 8007a0e:	d10f      	bne.n	8007a30 <__ieee754_atan2+0xb0>
 8007a10:	4293      	cmp	r3, r2
 8007a12:	f104 34ff 	add.w	r4, r4, #4294967295
 8007a16:	d107      	bne.n	8007a28 <__ieee754_atan2+0xa8>
 8007a18:	2c02      	cmp	r4, #2
 8007a1a:	d84c      	bhi.n	8007ab6 <__ieee754_atan2+0x136>
 8007a1c:	4b34      	ldr	r3, [pc, #208]	@ (8007af0 <__ieee754_atan2+0x170>)
 8007a1e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007a22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007a26:	e7ca      	b.n	80079be <__ieee754_atan2+0x3e>
 8007a28:	2c02      	cmp	r4, #2
 8007a2a:	d848      	bhi.n	8007abe <__ieee754_atan2+0x13e>
 8007a2c:	4b31      	ldr	r3, [pc, #196]	@ (8007af4 <__ieee754_atan2+0x174>)
 8007a2e:	e7f6      	b.n	8007a1e <__ieee754_atan2+0x9e>
 8007a30:	4543      	cmp	r3, r8
 8007a32:	d0e4      	beq.n	80079fe <__ieee754_atan2+0x7e>
 8007a34:	1a9b      	subs	r3, r3, r2
 8007a36:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8007a3a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007a3e:	da1e      	bge.n	8007a7e <__ieee754_atan2+0xfe>
 8007a40:	2f00      	cmp	r7, #0
 8007a42:	da01      	bge.n	8007a48 <__ieee754_atan2+0xc8>
 8007a44:	323c      	adds	r2, #60	@ 0x3c
 8007a46:	db1e      	blt.n	8007a86 <__ieee754_atan2+0x106>
 8007a48:	4632      	mov	r2, r6
 8007a4a:	463b      	mov	r3, r7
 8007a4c:	f7f8 ff26 	bl	800089c <__aeabi_ddiv>
 8007a50:	ec41 0b10 	vmov	d0, r0, r1
 8007a54:	f000 f9f4 	bl	8007e40 <fabs>
 8007a58:	f000 f85a 	bl	8007b10 <atan>
 8007a5c:	ec51 0b10 	vmov	r0, r1, d0
 8007a60:	2c01      	cmp	r4, #1
 8007a62:	d013      	beq.n	8007a8c <__ieee754_atan2+0x10c>
 8007a64:	2c02      	cmp	r4, #2
 8007a66:	d015      	beq.n	8007a94 <__ieee754_atan2+0x114>
 8007a68:	2c00      	cmp	r4, #0
 8007a6a:	d0a8      	beq.n	80079be <__ieee754_atan2+0x3e>
 8007a6c:	a318      	add	r3, pc, #96	@ (adr r3, 8007ad0 <__ieee754_atan2+0x150>)
 8007a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a72:	f7f8 fc31 	bl	80002d8 <__aeabi_dsub>
 8007a76:	a318      	add	r3, pc, #96	@ (adr r3, 8007ad8 <__ieee754_atan2+0x158>)
 8007a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a7c:	e014      	b.n	8007aa8 <__ieee754_atan2+0x128>
 8007a7e:	a118      	add	r1, pc, #96	@ (adr r1, 8007ae0 <__ieee754_atan2+0x160>)
 8007a80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007a84:	e7ec      	b.n	8007a60 <__ieee754_atan2+0xe0>
 8007a86:	2000      	movs	r0, #0
 8007a88:	2100      	movs	r1, #0
 8007a8a:	e7e9      	b.n	8007a60 <__ieee754_atan2+0xe0>
 8007a8c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007a90:	4619      	mov	r1, r3
 8007a92:	e794      	b.n	80079be <__ieee754_atan2+0x3e>
 8007a94:	a30e      	add	r3, pc, #56	@ (adr r3, 8007ad0 <__ieee754_atan2+0x150>)
 8007a96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a9a:	f7f8 fc1d 	bl	80002d8 <__aeabi_dsub>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	a10d      	add	r1, pc, #52	@ (adr r1, 8007ad8 <__ieee754_atan2+0x158>)
 8007aa4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aa8:	f7f8 fc16 	bl	80002d8 <__aeabi_dsub>
 8007aac:	e787      	b.n	80079be <__ieee754_atan2+0x3e>
 8007aae:	a10a      	add	r1, pc, #40	@ (adr r1, 8007ad8 <__ieee754_atan2+0x158>)
 8007ab0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007ab4:	e783      	b.n	80079be <__ieee754_atan2+0x3e>
 8007ab6:	a10c      	add	r1, pc, #48	@ (adr r1, 8007ae8 <__ieee754_atan2+0x168>)
 8007ab8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007abc:	e77f      	b.n	80079be <__ieee754_atan2+0x3e>
 8007abe:	2000      	movs	r0, #0
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	e77c      	b.n	80079be <__ieee754_atan2+0x3e>
 8007ac4:	a106      	add	r1, pc, #24	@ (adr r1, 8007ae0 <__ieee754_atan2+0x160>)
 8007ac6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007aca:	e778      	b.n	80079be <__ieee754_atan2+0x3e>
 8007acc:	f3af 8000 	nop.w
 8007ad0:	33145c07 	.word	0x33145c07
 8007ad4:	3ca1a626 	.word	0x3ca1a626
 8007ad8:	54442d18 	.word	0x54442d18
 8007adc:	400921fb 	.word	0x400921fb
 8007ae0:	54442d18 	.word	0x54442d18
 8007ae4:	3ff921fb 	.word	0x3ff921fb
 8007ae8:	54442d18 	.word	0x54442d18
 8007aec:	3fe921fb 	.word	0x3fe921fb
 8007af0:	08008238 	.word	0x08008238
 8007af4:	08008220 	.word	0x08008220
 8007af8:	54442d18 	.word	0x54442d18
 8007afc:	c00921fb 	.word	0xc00921fb
 8007b00:	54442d18 	.word	0x54442d18
 8007b04:	bff921fb 	.word	0xbff921fb
 8007b08:	7ff00000 	.word	0x7ff00000
 8007b0c:	00000000 	.word	0x00000000

08007b10 <atan>:
 8007b10:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b14:	ec55 4b10 	vmov	r4, r5, d0
 8007b18:	4bbf      	ldr	r3, [pc, #764]	@ (8007e18 <atan+0x308>)
 8007b1a:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 8007b1e:	429e      	cmp	r6, r3
 8007b20:	46ab      	mov	fp, r5
 8007b22:	d918      	bls.n	8007b56 <atan+0x46>
 8007b24:	4bbd      	ldr	r3, [pc, #756]	@ (8007e1c <atan+0x30c>)
 8007b26:	429e      	cmp	r6, r3
 8007b28:	d801      	bhi.n	8007b2e <atan+0x1e>
 8007b2a:	d109      	bne.n	8007b40 <atan+0x30>
 8007b2c:	b144      	cbz	r4, 8007b40 <atan+0x30>
 8007b2e:	4622      	mov	r2, r4
 8007b30:	462b      	mov	r3, r5
 8007b32:	4620      	mov	r0, r4
 8007b34:	4629      	mov	r1, r5
 8007b36:	f7f8 fbd1 	bl	80002dc <__adddf3>
 8007b3a:	4604      	mov	r4, r0
 8007b3c:	460d      	mov	r5, r1
 8007b3e:	e006      	b.n	8007b4e <atan+0x3e>
 8007b40:	f1bb 0f00 	cmp.w	fp, #0
 8007b44:	f340 812b 	ble.w	8007d9e <atan+0x28e>
 8007b48:	a597      	add	r5, pc, #604	@ (adr r5, 8007da8 <atan+0x298>)
 8007b4a:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007b4e:	ec45 4b10 	vmov	d0, r4, r5
 8007b52:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b56:	4bb2      	ldr	r3, [pc, #712]	@ (8007e20 <atan+0x310>)
 8007b58:	429e      	cmp	r6, r3
 8007b5a:	d813      	bhi.n	8007b84 <atan+0x74>
 8007b5c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 8007b60:	429e      	cmp	r6, r3
 8007b62:	d80c      	bhi.n	8007b7e <atan+0x6e>
 8007b64:	a392      	add	r3, pc, #584	@ (adr r3, 8007db0 <atan+0x2a0>)
 8007b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b6a:	4620      	mov	r0, r4
 8007b6c:	4629      	mov	r1, r5
 8007b6e:	f7f8 fbb5 	bl	80002dc <__adddf3>
 8007b72:	4bac      	ldr	r3, [pc, #688]	@ (8007e24 <atan+0x314>)
 8007b74:	2200      	movs	r2, #0
 8007b76:	f7f8 fff7 	bl	8000b68 <__aeabi_dcmpgt>
 8007b7a:	2800      	cmp	r0, #0
 8007b7c:	d1e7      	bne.n	8007b4e <atan+0x3e>
 8007b7e:	f04f 3aff 	mov.w	sl, #4294967295
 8007b82:	e029      	b.n	8007bd8 <atan+0xc8>
 8007b84:	f000 f95c 	bl	8007e40 <fabs>
 8007b88:	4ba7      	ldr	r3, [pc, #668]	@ (8007e28 <atan+0x318>)
 8007b8a:	429e      	cmp	r6, r3
 8007b8c:	ec55 4b10 	vmov	r4, r5, d0
 8007b90:	f200 80bc 	bhi.w	8007d0c <atan+0x1fc>
 8007b94:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 8007b98:	429e      	cmp	r6, r3
 8007b9a:	f200 809e 	bhi.w	8007cda <atan+0x1ca>
 8007b9e:	4622      	mov	r2, r4
 8007ba0:	462b      	mov	r3, r5
 8007ba2:	4620      	mov	r0, r4
 8007ba4:	4629      	mov	r1, r5
 8007ba6:	f7f8 fb99 	bl	80002dc <__adddf3>
 8007baa:	4b9e      	ldr	r3, [pc, #632]	@ (8007e24 <atan+0x314>)
 8007bac:	2200      	movs	r2, #0
 8007bae:	f7f8 fb93 	bl	80002d8 <__aeabi_dsub>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	4606      	mov	r6, r0
 8007bb6:	460f      	mov	r7, r1
 8007bb8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007bbc:	4620      	mov	r0, r4
 8007bbe:	4629      	mov	r1, r5
 8007bc0:	f7f8 fb8c 	bl	80002dc <__adddf3>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	460b      	mov	r3, r1
 8007bc8:	4630      	mov	r0, r6
 8007bca:	4639      	mov	r1, r7
 8007bcc:	f7f8 fe66 	bl	800089c <__aeabi_ddiv>
 8007bd0:	f04f 0a00 	mov.w	sl, #0
 8007bd4:	4604      	mov	r4, r0
 8007bd6:	460d      	mov	r5, r1
 8007bd8:	4622      	mov	r2, r4
 8007bda:	462b      	mov	r3, r5
 8007bdc:	4620      	mov	r0, r4
 8007bde:	4629      	mov	r1, r5
 8007be0:	f7f8 fd32 	bl	8000648 <__aeabi_dmul>
 8007be4:	4602      	mov	r2, r0
 8007be6:	460b      	mov	r3, r1
 8007be8:	4680      	mov	r8, r0
 8007bea:	4689      	mov	r9, r1
 8007bec:	f7f8 fd2c 	bl	8000648 <__aeabi_dmul>
 8007bf0:	a371      	add	r3, pc, #452	@ (adr r3, 8007db8 <atan+0x2a8>)
 8007bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	460f      	mov	r7, r1
 8007bfa:	f7f8 fd25 	bl	8000648 <__aeabi_dmul>
 8007bfe:	a370      	add	r3, pc, #448	@ (adr r3, 8007dc0 <atan+0x2b0>)
 8007c00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c04:	f7f8 fb6a 	bl	80002dc <__adddf3>
 8007c08:	4632      	mov	r2, r6
 8007c0a:	463b      	mov	r3, r7
 8007c0c:	f7f8 fd1c 	bl	8000648 <__aeabi_dmul>
 8007c10:	a36d      	add	r3, pc, #436	@ (adr r3, 8007dc8 <atan+0x2b8>)
 8007c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c16:	f7f8 fb61 	bl	80002dc <__adddf3>
 8007c1a:	4632      	mov	r2, r6
 8007c1c:	463b      	mov	r3, r7
 8007c1e:	f7f8 fd13 	bl	8000648 <__aeabi_dmul>
 8007c22:	a36b      	add	r3, pc, #428	@ (adr r3, 8007dd0 <atan+0x2c0>)
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	f7f8 fb58 	bl	80002dc <__adddf3>
 8007c2c:	4632      	mov	r2, r6
 8007c2e:	463b      	mov	r3, r7
 8007c30:	f7f8 fd0a 	bl	8000648 <__aeabi_dmul>
 8007c34:	a368      	add	r3, pc, #416	@ (adr r3, 8007dd8 <atan+0x2c8>)
 8007c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c3a:	f7f8 fb4f 	bl	80002dc <__adddf3>
 8007c3e:	4632      	mov	r2, r6
 8007c40:	463b      	mov	r3, r7
 8007c42:	f7f8 fd01 	bl	8000648 <__aeabi_dmul>
 8007c46:	a366      	add	r3, pc, #408	@ (adr r3, 8007de0 <atan+0x2d0>)
 8007c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c4c:	f7f8 fb46 	bl	80002dc <__adddf3>
 8007c50:	4642      	mov	r2, r8
 8007c52:	464b      	mov	r3, r9
 8007c54:	f7f8 fcf8 	bl	8000648 <__aeabi_dmul>
 8007c58:	a363      	add	r3, pc, #396	@ (adr r3, 8007de8 <atan+0x2d8>)
 8007c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c5e:	4680      	mov	r8, r0
 8007c60:	4689      	mov	r9, r1
 8007c62:	4630      	mov	r0, r6
 8007c64:	4639      	mov	r1, r7
 8007c66:	f7f8 fcef 	bl	8000648 <__aeabi_dmul>
 8007c6a:	a361      	add	r3, pc, #388	@ (adr r3, 8007df0 <atan+0x2e0>)
 8007c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c70:	f7f8 fb32 	bl	80002d8 <__aeabi_dsub>
 8007c74:	4632      	mov	r2, r6
 8007c76:	463b      	mov	r3, r7
 8007c78:	f7f8 fce6 	bl	8000648 <__aeabi_dmul>
 8007c7c:	a35e      	add	r3, pc, #376	@ (adr r3, 8007df8 <atan+0x2e8>)
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f7f8 fb29 	bl	80002d8 <__aeabi_dsub>
 8007c86:	4632      	mov	r2, r6
 8007c88:	463b      	mov	r3, r7
 8007c8a:	f7f8 fcdd 	bl	8000648 <__aeabi_dmul>
 8007c8e:	a35c      	add	r3, pc, #368	@ (adr r3, 8007e00 <atan+0x2f0>)
 8007c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c94:	f7f8 fb20 	bl	80002d8 <__aeabi_dsub>
 8007c98:	4632      	mov	r2, r6
 8007c9a:	463b      	mov	r3, r7
 8007c9c:	f7f8 fcd4 	bl	8000648 <__aeabi_dmul>
 8007ca0:	a359      	add	r3, pc, #356	@ (adr r3, 8007e08 <atan+0x2f8>)
 8007ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ca6:	f7f8 fb17 	bl	80002d8 <__aeabi_dsub>
 8007caa:	4632      	mov	r2, r6
 8007cac:	463b      	mov	r3, r7
 8007cae:	f7f8 fccb 	bl	8000648 <__aeabi_dmul>
 8007cb2:	4602      	mov	r2, r0
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	4640      	mov	r0, r8
 8007cb8:	4649      	mov	r1, r9
 8007cba:	f7f8 fb0f 	bl	80002dc <__adddf3>
 8007cbe:	4622      	mov	r2, r4
 8007cc0:	462b      	mov	r3, r5
 8007cc2:	f7f8 fcc1 	bl	8000648 <__aeabi_dmul>
 8007cc6:	f1ba 3fff 	cmp.w	sl, #4294967295
 8007cca:	4602      	mov	r2, r0
 8007ccc:	460b      	mov	r3, r1
 8007cce:	d148      	bne.n	8007d62 <atan+0x252>
 8007cd0:	4620      	mov	r0, r4
 8007cd2:	4629      	mov	r1, r5
 8007cd4:	f7f8 fb00 	bl	80002d8 <__aeabi_dsub>
 8007cd8:	e72f      	b.n	8007b3a <atan+0x2a>
 8007cda:	4b52      	ldr	r3, [pc, #328]	@ (8007e24 <atan+0x314>)
 8007cdc:	2200      	movs	r2, #0
 8007cde:	4620      	mov	r0, r4
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	f7f8 faf9 	bl	80002d8 <__aeabi_dsub>
 8007ce6:	4b4f      	ldr	r3, [pc, #316]	@ (8007e24 <atan+0x314>)
 8007ce8:	4606      	mov	r6, r0
 8007cea:	460f      	mov	r7, r1
 8007cec:	2200      	movs	r2, #0
 8007cee:	4620      	mov	r0, r4
 8007cf0:	4629      	mov	r1, r5
 8007cf2:	f7f8 faf3 	bl	80002dc <__adddf3>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4630      	mov	r0, r6
 8007cfc:	4639      	mov	r1, r7
 8007cfe:	f7f8 fdcd 	bl	800089c <__aeabi_ddiv>
 8007d02:	f04f 0a01 	mov.w	sl, #1
 8007d06:	4604      	mov	r4, r0
 8007d08:	460d      	mov	r5, r1
 8007d0a:	e765      	b.n	8007bd8 <atan+0xc8>
 8007d0c:	4b47      	ldr	r3, [pc, #284]	@ (8007e2c <atan+0x31c>)
 8007d0e:	429e      	cmp	r6, r3
 8007d10:	d21c      	bcs.n	8007d4c <atan+0x23c>
 8007d12:	4b47      	ldr	r3, [pc, #284]	@ (8007e30 <atan+0x320>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	4620      	mov	r0, r4
 8007d18:	4629      	mov	r1, r5
 8007d1a:	f7f8 fadd 	bl	80002d8 <__aeabi_dsub>
 8007d1e:	4b44      	ldr	r3, [pc, #272]	@ (8007e30 <atan+0x320>)
 8007d20:	4606      	mov	r6, r0
 8007d22:	460f      	mov	r7, r1
 8007d24:	2200      	movs	r2, #0
 8007d26:	4620      	mov	r0, r4
 8007d28:	4629      	mov	r1, r5
 8007d2a:	f7f8 fc8d 	bl	8000648 <__aeabi_dmul>
 8007d2e:	4b3d      	ldr	r3, [pc, #244]	@ (8007e24 <atan+0x314>)
 8007d30:	2200      	movs	r2, #0
 8007d32:	f7f8 fad3 	bl	80002dc <__adddf3>
 8007d36:	4602      	mov	r2, r0
 8007d38:	460b      	mov	r3, r1
 8007d3a:	4630      	mov	r0, r6
 8007d3c:	4639      	mov	r1, r7
 8007d3e:	f7f8 fdad 	bl	800089c <__aeabi_ddiv>
 8007d42:	f04f 0a02 	mov.w	sl, #2
 8007d46:	4604      	mov	r4, r0
 8007d48:	460d      	mov	r5, r1
 8007d4a:	e745      	b.n	8007bd8 <atan+0xc8>
 8007d4c:	4622      	mov	r2, r4
 8007d4e:	462b      	mov	r3, r5
 8007d50:	4938      	ldr	r1, [pc, #224]	@ (8007e34 <atan+0x324>)
 8007d52:	2000      	movs	r0, #0
 8007d54:	f7f8 fda2 	bl	800089c <__aeabi_ddiv>
 8007d58:	f04f 0a03 	mov.w	sl, #3
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	460d      	mov	r5, r1
 8007d60:	e73a      	b.n	8007bd8 <atan+0xc8>
 8007d62:	4b35      	ldr	r3, [pc, #212]	@ (8007e38 <atan+0x328>)
 8007d64:	4e35      	ldr	r6, [pc, #212]	@ (8007e3c <atan+0x32c>)
 8007d66:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8007d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d6e:	f7f8 fab3 	bl	80002d8 <__aeabi_dsub>
 8007d72:	4622      	mov	r2, r4
 8007d74:	462b      	mov	r3, r5
 8007d76:	f7f8 faaf 	bl	80002d8 <__aeabi_dsub>
 8007d7a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	e9d6 0100 	ldrd	r0, r1, [r6]
 8007d86:	f7f8 faa7 	bl	80002d8 <__aeabi_dsub>
 8007d8a:	f1bb 0f00 	cmp.w	fp, #0
 8007d8e:	4604      	mov	r4, r0
 8007d90:	460d      	mov	r5, r1
 8007d92:	f6bf aedc 	bge.w	8007b4e <atan+0x3e>
 8007d96:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007d9a:	461d      	mov	r5, r3
 8007d9c:	e6d7      	b.n	8007b4e <atan+0x3e>
 8007d9e:	a51c      	add	r5, pc, #112	@ (adr r5, 8007e10 <atan+0x300>)
 8007da0:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007da4:	e6d3      	b.n	8007b4e <atan+0x3e>
 8007da6:	bf00      	nop
 8007da8:	54442d18 	.word	0x54442d18
 8007dac:	3ff921fb 	.word	0x3ff921fb
 8007db0:	8800759c 	.word	0x8800759c
 8007db4:	7e37e43c 	.word	0x7e37e43c
 8007db8:	e322da11 	.word	0xe322da11
 8007dbc:	3f90ad3a 	.word	0x3f90ad3a
 8007dc0:	24760deb 	.word	0x24760deb
 8007dc4:	3fa97b4b 	.word	0x3fa97b4b
 8007dc8:	a0d03d51 	.word	0xa0d03d51
 8007dcc:	3fb10d66 	.word	0x3fb10d66
 8007dd0:	c54c206e 	.word	0xc54c206e
 8007dd4:	3fb745cd 	.word	0x3fb745cd
 8007dd8:	920083ff 	.word	0x920083ff
 8007ddc:	3fc24924 	.word	0x3fc24924
 8007de0:	5555550d 	.word	0x5555550d
 8007de4:	3fd55555 	.word	0x3fd55555
 8007de8:	2c6a6c2f 	.word	0x2c6a6c2f
 8007dec:	bfa2b444 	.word	0xbfa2b444
 8007df0:	52defd9a 	.word	0x52defd9a
 8007df4:	3fadde2d 	.word	0x3fadde2d
 8007df8:	af749a6d 	.word	0xaf749a6d
 8007dfc:	3fb3b0f2 	.word	0x3fb3b0f2
 8007e00:	fe231671 	.word	0xfe231671
 8007e04:	3fbc71c6 	.word	0x3fbc71c6
 8007e08:	9998ebc4 	.word	0x9998ebc4
 8007e0c:	3fc99999 	.word	0x3fc99999
 8007e10:	54442d18 	.word	0x54442d18
 8007e14:	bff921fb 	.word	0xbff921fb
 8007e18:	440fffff 	.word	0x440fffff
 8007e1c:	7ff00000 	.word	0x7ff00000
 8007e20:	3fdbffff 	.word	0x3fdbffff
 8007e24:	3ff00000 	.word	0x3ff00000
 8007e28:	3ff2ffff 	.word	0x3ff2ffff
 8007e2c:	40038000 	.word	0x40038000
 8007e30:	3ff80000 	.word	0x3ff80000
 8007e34:	bff00000 	.word	0xbff00000
 8007e38:	08008250 	.word	0x08008250
 8007e3c:	08008270 	.word	0x08008270

08007e40 <fabs>:
 8007e40:	ec51 0b10 	vmov	r0, r1, d0
 8007e44:	4602      	mov	r2, r0
 8007e46:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8007e4a:	ec43 2b10 	vmov	d0, r2, r3
 8007e4e:	4770      	bx	lr

08007e50 <_init>:
 8007e50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e52:	bf00      	nop
 8007e54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e56:	bc08      	pop	{r3}
 8007e58:	469e      	mov	lr, r3
 8007e5a:	4770      	bx	lr

08007e5c <_fini>:
 8007e5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e5e:	bf00      	nop
 8007e60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007e62:	bc08      	pop	{r3}
 8007e64:	469e      	mov	lr, r3
 8007e66:	4770      	bx	lr
