
ThreadX_Uart_TX_RX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e88  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000408  08009068  08009068  0000a068  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009470  08009470  0000b1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08009470  08009470  0000a470  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009478  08009478  0000b1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009478  08009478  0000a478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800947c  0800947c  0000a47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08009480  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001740  200001d8  08009658  0000b1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001918  08009658  0000b918  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff76  00000000  00000000  0000b208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004e22  00000000  00000000  0002b17e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001898  00000000  00000000  0002ffa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001284  00000000  00000000  00031838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002553a  00000000  00000000  00032abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00023f88  00000000  00000000  00057ff6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e6280  00000000  00000000  0007bf7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001621fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007064  00000000  00000000  00162244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000108  00000000  00000000  001692a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	200001d8 	.word	0x200001d8
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009050 	.word	0x08009050

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	200001dc 	.word	0x200001dc
 800021c:	08009050 	.word	0x08009050

08000220 <_tx_initialize_low_level>:
    .thumb_func
_tx_initialize_low_level:
@
@    /* Disable interrupts during ThreadX initialization.  */
@
    CPSID   i
 8000220:	b672      	cpsid	i
    STR     r1, [r0]                                @ Setup first unused memory pointer
#endif
@
@    /* Setup Vector Table Offset Register.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 8000222:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 8000226:	4919      	ldr	r1, [pc, #100]	@ (800028c <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        @ Set vector table address
 8000228:	f8c0 1d08 	str.w	r1, [r0, #3336]	@ 0xd08
@
@    /* Set system stack pointer from vector value.  */
@
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 800022c:	4818      	ldr	r0, [pc, #96]	@ (8000290 <__tx_DBGHandler+0x8>)
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800022e:	4917      	ldr	r1, [pc, #92]	@ (800028c <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                @ Pickup reset stack pointer
 8000230:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                @ Save system stack pointer
 8000232:	6001      	str	r1, [r0, #0]
@
@    /* Enable the cycle count register.  */
@
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000234:	4817      	ldr	r0, [pc, #92]	@ (8000294 <__tx_DBGHandler+0xc>)
    LDR     r1, [r0]                                @ Pickup the current value
 8000236:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              @ Set the CYCCNTENA bit
 8000238:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                @ Enable the cycle count register
 800023c:	6001      	str	r1, [r0, #0]
@
@    /* Configure SysTick for 100Hz clock, or 16384 cycles if no reference.  */
@
    MOV     r0, #0xE000E000                         @ Build address of NVIC registers
 800023e:	f04f 20e0 	mov.w	r0, #3758153728	@ 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 8000242:	4915      	ldr	r1, [pc, #84]	@ (8000298 <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0x14]                         @ Setup SysTick Reload Value
 8000244:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                @ Build SysTick Control Enable Value
 8000246:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         @ Setup SysTick Control
 800024a:	6101      	str	r1, [r0, #16]
@
@    /* Configure handler priorities.  */
@
    LDR     r1, =0x00000000                         @ Rsrv, UsgF, BusF, MemM
 800024c:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        @ Setup System Handlers 4-7 Priority Registers
 8000250:	f8c0 1d18 	str.w	r1, [r0, #3352]	@ 0xd18

    LDR     r1, =0xFF000000                         @ SVCl, Rsrv, Rsrv, Rsrv
 8000254:	f04f 417f 	mov.w	r1, #4278190080	@ 0xff000000
    STR     r1, [r0, #0xD1C]                        @ Setup System Handlers 8-11 Priority Registers
 8000258:	f8c0 1d1c 	str.w	r1, [r0, #3356]	@ 0xd1c
                                                    @ Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800025c:	490f      	ldr	r1, [pc, #60]	@ (800029c <__tx_DBGHandler+0x14>)
    STR     r1, [r0, #0xD20]                        @ Setup System Handlers 12-15 Priority Registers
 800025e:	f8c0 1d20 	str.w	r1, [r0, #3360]	@ 0xd20
                                                    @ Note: PnSV must be lowest priority, which is 0xFF
@
@    /* Return to caller.  */
@
    BX      lr
 8000262:	4770      	bx	lr

08000264 <__tx_BadHandler>:
@/* Define shells for each of the unused vectors.  */
@
    .global  __tx_BadHandler
    .thumb_func
__tx_BadHandler:
    B       __tx_BadHandler
 8000264:	f7ff bffe 	b.w	8000264 <__tx_BadHandler>

08000268 <__tx_HardfaultHandler>:
@ /* added to catch the hardfault */

    .global  __tx_HardfaultHandler
    .thumb_func
__tx_HardfaultHandler:
    B       __tx_HardfaultHandler
 8000268:	f7ff bffe 	b.w	8000268 <__tx_HardfaultHandler>

0800026c <__tx_SVCallHandler>:
@ /* added to catch the SVC */

    .global  __tx_SVCallHandler
    .thumb_func
__tx_SVCallHandler:
    B       __tx_SVCallHandler
 800026c:	f7ff bffe 	b.w	800026c <__tx_SVCallHandler>

08000270 <__tx_IntHandler>:
    .global  __tx_IntHandler
    .thumb_func
__tx_IntHandler:
@ VOID InterruptHandler (VOID)
@ {
    PUSH    {r0, lr}
 8000270:	b501      	push	{r0, lr}
@    /* BL <your C Function>.... */

#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 8000272:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000276:	4770      	bx	lr

08000278 <SysTick_Handler>:
    .thumb_func
SysTick_Handler:
@ VOID TimerInterruptHandler (VOID)
@ {
@
    PUSH    {r0, lr}
 8000278:	b501      	push	{r0, lr}
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_enter             @ Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 800027a:	f000 f891 	bl	80003a0 <_tx_timer_interrupt>
#ifdef TX_EXECUTION_PROFILE_ENABLE
    BL      _tx_execution_isr_exit              @ Call the ISR exit function
#endif
    POP     {r0, lr}
 800027e:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      LR
 8000282:	4770      	bx	lr

08000284 <__tx_NMIHandler>:

@ /* NMI, DBG handlers */
    .global  __tx_NMIHandler
    .thumb_func
__tx_NMIHandler:
    B       __tx_NMIHandler
 8000284:	f7ff bffe 	b.w	8000284 <__tx_NMIHandler>

08000288 <__tx_DBGHandler>:

    .global  __tx_DBGHandler
    .thumb_func
__tx_DBGHandler:
    B       __tx_DBGHandler
 8000288:	f7ff bffe 	b.w	8000288 <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                           @ Pickup address of vector table
 800028c:	08000000 	.word	0x08000000
    LDR     r0, =_tx_thread_system_stack_ptr        @ Build address of system stack pointer
 8000290:	200011c0 	.word	0x200011c0
    LDR     r0, =0xE0001000                         @ Build address of DWT register
 8000294:	e0001000 	.word	0xe0001000
    LDR     r1, =SYSTICK_CYCLES
 8000298:	000270ff 	.word	0x000270ff
    LDR     r1, =0x40FF0000                         @ SysT, PnSV, Rsrv, DbgM
 800029c:	40ff0000 	.word	0x40ff0000

080002a0 <_tx_thread_schedule>:
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */

    MOV     r0, #0                                  // Build value for TX_FALSE
 80002a0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000350 <tx_thread_fpu_disable+0x2>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002a6:	6010      	str	r0, [r2, #0]

    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */

#ifdef __ARM_FP
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002a8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002ac:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 80002b0:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 80002b4:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */

    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 80002b6:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 80002ba:	f04f 21e0 	mov.w	r1, #3758153728	@ 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 80002be:	f8c1 0d04 	str.w	r0, [r1, #3332]	@ 0xd04
    DSB                                             // Complete all memory accesses
 80002c2:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 80002c6:	f3bf 8f6f 	isb	sy

080002ca <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 80002ca:	e7fe      	b.n	80002ca <__tx_wait_here>

080002cc <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80002cc:	4821      	ldr	r0, [pc, #132]	@ (8000354 <tx_thread_fpu_disable+0x6>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80002ce:	4a22      	ldr	r2, [pc, #136]	@ (8000358 <tx_thread_fpu_disable+0xa>)
    MOV     r3, #0                                  // Build NULL value
 80002d0:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 80002d4:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 80002d6:	b191      	cbz	r1, 80002fe <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 80002d8:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 80002da:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 80002de:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 80002e2:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 80002e6:	d101      	bne.n	80002ec <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 80002e8:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

080002ec <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80002ec:	4c1b      	ldr	r4, [pc, #108]	@ (800035c <tx_thread_fpu_disable+0xe>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 80002ee:	f84c ed04 	str.w	lr, [ip, #-4]!

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 80002f2:	6825      	ldr	r5, [r4, #0]
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 80002f4:	f8c1 c008 	str.w	ip, [r1, #8]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 80002f8:	b10d      	cbz	r5, 80002fe <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 80002fa:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 80002fc:	6023      	str	r3, [r4, #0]

080002fe <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 80002fe:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000300:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000302:	b1b1      	cbz	r1, 8000332 <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000304:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000306:	b662      	cpsie	i

08000308 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000308:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800030a:	4c14      	ldr	r4, [pc, #80]	@ (800035c <tx_thread_fpu_disable+0xe>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800030c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800030e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000312:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000314:	6025      	str	r5, [r4, #0]
    POP     {r0, r1}                                // Recover r0 and r1
#endif

    /* Restore the thread context and PSP.  */

    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 8000316:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 800031a:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 800031e:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 8000322:	d101      	bne.n	8000328 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 8000324:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000328 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000328:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 800032c:	f38c 8809 	msr	PSP, ip

    /* Return to thread.  */

    BX      lr                                      // Return to thread!
 8000330:	4770      	bx	lr

08000332 <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 8000332:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 8000334:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 8000336:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000338:	b909      	cbnz	r1, 800033e <__tx_ts_ready>

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800033a:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 800033c:	e7f9      	b.n	8000332 <__tx_ts_wait>

0800033e <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */

__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 800033e:	f04f 6700 	mov.w	r7, #134217728	@ 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 8000342:	f04f 28e0 	mov.w	r8, #3758153728	@ 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 8000346:	f8c8 7d04 	str.w	r7, [r8, #3332]	@ 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 800034a:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 800034c:	e7dc      	b.n	8000308 <__tx_ts_restore>

0800034e <tx_thread_fpu_disable>:
tx_thread_fpu_disable:

    /* Automatic VPF logic is supported, this function is present only for
       backward compatibility purposes and therefore simply returns.  */

    BX      LR                                      // Return to caller
 800034e:	4770      	bx	lr
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000350:	2000125c 	.word	0x2000125c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000354:	200011c4 	.word	0x200011c4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000358:	200011c8 	.word	0x200011c8
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035c:	200017c8 	.word	0x200017c8

08000360 <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 8000360:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 8000362:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 8000366:	f1a2 0244 	sub.w	r2, r2, #68	@ 0x44
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value
 800036a:	f06f 0302 	mvn.w	r3, #2
    STR     r3, [r2, #0]                            // Save on the stack
 800036e:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 8000370:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 8000374:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 8000376:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 8000378:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 800037a:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 800037c:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 800037e:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 8000380:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 8000382:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 8000384:	6253      	str	r3, [r2, #36]	@ 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 8000386:	6293      	str	r3, [r2, #40]	@ 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 8000388:	62d3      	str	r3, [r2, #44]	@ 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 800038c:	6353      	str	r3, [r2, #52]	@ 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 800038e:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 8000392:	6393      	str	r3, [r2, #56]	@ 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000394:	63d1      	str	r1, [r2, #60]	@ 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000396:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 800039a:	6413      	str	r3, [r2, #64]	@ 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 800039c:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800039e:	4770      	bx	lr

080003a0 <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 80003a0:	4922      	ldr	r1, [pc, #136]	@ (800042c <__tx_timer_nothing_expired+0x6>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 80003a2:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 80003a4:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 80003a8:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 80003aa:	4b21      	ldr	r3, [pc, #132]	@ (8000430 <__tx_timer_nothing_expired+0xa>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 80003ac:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 80003ae:	b13a      	cbz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 80003b0:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 80003b4:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 80003b6:	b91a      	cbnz	r2, 80003c0 <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80003b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    MOV     r0, #1                                  // Build expired value
 80003ba:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 80003be:	6018      	str	r0, [r3, #0]

080003c0 <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80003c0:	491d      	ldr	r1, [pc, #116]	@ (8000438 <__tx_timer_nothing_expired+0x12>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 80003c2:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 80003c4:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 80003c6:	b122      	cbz	r2, 80003d2 <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80003c8:	4b1c      	ldr	r3, [pc, #112]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    MOV     r2, #1                                  // Build expired value
 80003ca:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 80003ce:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 80003d0:	e008      	b.n	80003e4 <__tx_timer_done>

080003d2 <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 80003d2:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80003d6:	4b1a      	ldr	r3, [pc, #104]	@ (8000440 <__tx_timer_nothing_expired+0x1a>)
    LDR     r2, [r3, #0]                            // Pickup list end
 80003d8:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 80003da:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 80003dc:	d101      	bne.n	80003e2 <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80003de:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <__tx_timer_nothing_expired+0x1e>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 80003e0:	6818      	ldr	r0, [r3, #0]

080003e2 <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 80003e2:	6008      	str	r0, [r1, #0]

080003e4 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 80003e4:	4b13      	ldr	r3, [pc, #76]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 80003e6:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 80003e8:	b912      	cbnz	r2, 80003f0 <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 80003ea:	4914      	ldr	r1, [pc, #80]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003ec:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 80003ee:	b1d0      	cbz	r0, 8000426 <__tx_timer_nothing_expired>

080003f0 <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    STMDB   sp!, {r0, lr}                           // Save the lr register on the stack
 80003f0:	e92d 4001 	stmdb	sp!, {r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 80003f4:	4911      	ldr	r1, [pc, #68]	@ (800043c <__tx_timer_nothing_expired+0x16>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 80003f6:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 80003f8:	b108      	cbz	r0, 80003fe <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 80003fa:	f005 fdcf 	bl	8005f9c <_tx_timer_expiration_process>

080003fe <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 80003fe:	4b0d      	ldr	r3, [pc, #52]	@ (8000434 <__tx_timer_nothing_expired+0xe>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 8000400:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 8000402:	b172      	cbz	r2, 8000422 <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 8000404:	f005 fd3c 	bl	8005e80 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000408:	480f      	ldr	r0, [pc, #60]	@ (8000448 <__tx_timer_nothing_expired+0x22>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 800040a:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 800040c:	b949      	cbnz	r1, 8000422 <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800040e:	480f      	ldr	r0, [pc, #60]	@ (800044c <__tx_timer_nothing_expired+0x26>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 8000410:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000412:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <__tx_timer_nothing_expired+0x2a>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 8000414:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000416:	480f      	ldr	r0, [pc, #60]	@ (8000454 <__tx_timer_nothing_expired+0x2e>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000418:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
    CMP     r1, r3                                  // Are they the same?
 800041c:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 800041e:	d000      	beq.n	8000422 <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 8000420:	6002      	str	r2, [r0, #0]

08000422 <__tx_timer_not_ts_expiration>:

    // }

__tx_timer_not_ts_expiration:

    LDMIA   sp!, {r0, lr}                           // Recover lr register (r0 is just there for
 8000422:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000426 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000426:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 800042a:	4770      	bx	lr
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800042c:	20001268 	.word	0x20001268
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000430:	200017c8 	.word	0x200017c8
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000434:	2000126c 	.word	0x2000126c
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 8000438:	200012f8 	.word	0x200012f8
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 800043c:	200012fc 	.word	0x200012fc
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000440:	200012f4 	.word	0x200012f4
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 8000444:	200012f0 	.word	0x200012f0
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000448:	2000125c 	.word	0x2000125c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800044c:	200011c4 	.word	0x200011c4
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 8000450:	200011c8 	.word	0x200011c8
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000454:	e000ed04 	.word	0xe000ed04
	...

08000460 <memchr>:
 8000460:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000464:	2a10      	cmp	r2, #16
 8000466:	db2b      	blt.n	80004c0 <memchr+0x60>
 8000468:	f010 0f07 	tst.w	r0, #7
 800046c:	d008      	beq.n	8000480 <memchr+0x20>
 800046e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000472:	3a01      	subs	r2, #1
 8000474:	428b      	cmp	r3, r1
 8000476:	d02d      	beq.n	80004d4 <memchr+0x74>
 8000478:	f010 0f07 	tst.w	r0, #7
 800047c:	b342      	cbz	r2, 80004d0 <memchr+0x70>
 800047e:	d1f6      	bne.n	800046e <memchr+0xe>
 8000480:	b4f0      	push	{r4, r5, r6, r7}
 8000482:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000486:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800048a:	f022 0407 	bic.w	r4, r2, #7
 800048e:	f07f 0700 	mvns.w	r7, #0
 8000492:	2300      	movs	r3, #0
 8000494:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000498:	3c08      	subs	r4, #8
 800049a:	ea85 0501 	eor.w	r5, r5, r1
 800049e:	ea86 0601 	eor.w	r6, r6, r1
 80004a2:	fa85 f547 	uadd8	r5, r5, r7
 80004a6:	faa3 f587 	sel	r5, r3, r7
 80004aa:	fa86 f647 	uadd8	r6, r6, r7
 80004ae:	faa5 f687 	sel	r6, r5, r7
 80004b2:	b98e      	cbnz	r6, 80004d8 <memchr+0x78>
 80004b4:	d1ee      	bne.n	8000494 <memchr+0x34>
 80004b6:	bcf0      	pop	{r4, r5, r6, r7}
 80004b8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80004bc:	f002 0207 	and.w	r2, r2, #7
 80004c0:	b132      	cbz	r2, 80004d0 <memchr+0x70>
 80004c2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80004c6:	3a01      	subs	r2, #1
 80004c8:	ea83 0301 	eor.w	r3, r3, r1
 80004cc:	b113      	cbz	r3, 80004d4 <memchr+0x74>
 80004ce:	d1f8      	bne.n	80004c2 <memchr+0x62>
 80004d0:	2000      	movs	r0, #0
 80004d2:	4770      	bx	lr
 80004d4:	3801      	subs	r0, #1
 80004d6:	4770      	bx	lr
 80004d8:	2d00      	cmp	r5, #0
 80004da:	bf06      	itte	eq
 80004dc:	4635      	moveq	r5, r6
 80004de:	3803      	subeq	r0, #3
 80004e0:	3807      	subne	r0, #7
 80004e2:	f015 0f01 	tst.w	r5, #1
 80004e6:	d107      	bne.n	80004f8 <memchr+0x98>
 80004e8:	3001      	adds	r0, #1
 80004ea:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80004ee:	bf02      	ittt	eq
 80004f0:	3001      	addeq	r0, #1
 80004f2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80004f6:	3001      	addeq	r0, #1
 80004f8:	bcf0      	pop	{r4, r5, r6, r7}
 80004fa:	3801      	subs	r0, #1
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <strlen>:
 8000500:	4603      	mov	r3, r0
 8000502:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000506:	2a00      	cmp	r2, #0
 8000508:	d1fb      	bne.n	8000502 <strlen+0x2>
 800050a:	1a18      	subs	r0, r3, r0
 800050c:	3801      	subs	r0, #1
 800050e:	4770      	bx	lr

08000510 <__aeabi_drsub>:
 8000510:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000514:	e002      	b.n	800051c <__adddf3>
 8000516:	bf00      	nop

08000518 <__aeabi_dsub>:
 8000518:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800051c <__adddf3>:
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000522:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	bf1f      	itttt	ne
 8000532:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000536:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800053e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000542:	f000 80e2 	beq.w	800070a <__adddf3+0x1ee>
 8000546:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800054e:	bfb8      	it	lt
 8000550:	426d      	neglt	r5, r5
 8000552:	dd0c      	ble.n	800056e <__adddf3+0x52>
 8000554:	442c      	add	r4, r5
 8000556:	ea80 0202 	eor.w	r2, r0, r2
 800055a:	ea81 0303 	eor.w	r3, r1, r3
 800055e:	ea82 0000 	eor.w	r0, r2, r0
 8000562:	ea83 0101 	eor.w	r1, r3, r1
 8000566:	ea80 0202 	eor.w	r2, r0, r2
 800056a:	ea81 0303 	eor.w	r3, r1, r3
 800056e:	2d36      	cmp	r5, #54	@ 0x36
 8000570:	bf88      	it	hi
 8000572:	bd30      	pophi	{r4, r5, pc}
 8000574:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000578:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800057c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000580:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000584:	d002      	beq.n	800058c <__adddf3+0x70>
 8000586:	4240      	negs	r0, r0
 8000588:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800058c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000590:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000594:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000598:	d002      	beq.n	80005a0 <__adddf3+0x84>
 800059a:	4252      	negs	r2, r2
 800059c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a0:	ea94 0f05 	teq	r4, r5
 80005a4:	f000 80a7 	beq.w	80006f6 <__adddf3+0x1da>
 80005a8:	f1a4 0401 	sub.w	r4, r4, #1
 80005ac:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b0:	db0d      	blt.n	80005ce <__adddf3+0xb2>
 80005b2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005b6:	fa22 f205 	lsr.w	r2, r2, r5
 80005ba:	1880      	adds	r0, r0, r2
 80005bc:	f141 0100 	adc.w	r1, r1, #0
 80005c0:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c4:	1880      	adds	r0, r0, r2
 80005c6:	fa43 f305 	asr.w	r3, r3, r5
 80005ca:	4159      	adcs	r1, r3
 80005cc:	e00e      	b.n	80005ec <__adddf3+0xd0>
 80005ce:	f1a5 0520 	sub.w	r5, r5, #32
 80005d2:	f10e 0e20 	add.w	lr, lr, #32
 80005d6:	2a01      	cmp	r2, #1
 80005d8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005dc:	bf28      	it	cs
 80005de:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e2:	fa43 f305 	asr.w	r3, r3, r5
 80005e6:	18c0      	adds	r0, r0, r3
 80005e8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005f0:	d507      	bpl.n	8000602 <__adddf3+0xe6>
 80005f2:	f04f 0e00 	mov.w	lr, #0
 80005f6:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005fe:	eb6e 0101 	sbc.w	r1, lr, r1
 8000602:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000606:	d31b      	bcc.n	8000640 <__adddf3+0x124>
 8000608:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800060c:	d30c      	bcc.n	8000628 <__adddf3+0x10c>
 800060e:	0849      	lsrs	r1, r1, #1
 8000610:	ea5f 0030 	movs.w	r0, r0, rrx
 8000614:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000618:	f104 0401 	add.w	r4, r4, #1
 800061c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000620:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000624:	f080 809a 	bcs.w	800075c <__adddf3+0x240>
 8000628:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800062c:	bf08      	it	eq
 800062e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000632:	f150 0000 	adcs.w	r0, r0, #0
 8000636:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063a:	ea41 0105 	orr.w	r1, r1, r5
 800063e:	bd30      	pop	{r4, r5, pc}
 8000640:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000644:	4140      	adcs	r0, r0
 8000646:	eb41 0101 	adc.w	r1, r1, r1
 800064a:	3c01      	subs	r4, #1
 800064c:	bf28      	it	cs
 800064e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000652:	d2e9      	bcs.n	8000628 <__adddf3+0x10c>
 8000654:	f091 0f00 	teq	r1, #0
 8000658:	bf04      	itt	eq
 800065a:	4601      	moveq	r1, r0
 800065c:	2000      	moveq	r0, #0
 800065e:	fab1 f381 	clz	r3, r1
 8000662:	bf08      	it	eq
 8000664:	3320      	addeq	r3, #32
 8000666:	f1a3 030b 	sub.w	r3, r3, #11
 800066a:	f1b3 0220 	subs.w	r2, r3, #32
 800066e:	da0c      	bge.n	800068a <__adddf3+0x16e>
 8000670:	320c      	adds	r2, #12
 8000672:	dd08      	ble.n	8000686 <__adddf3+0x16a>
 8000674:	f102 0c14 	add.w	ip, r2, #20
 8000678:	f1c2 020c 	rsb	r2, r2, #12
 800067c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000680:	fa21 f102 	lsr.w	r1, r1, r2
 8000684:	e00c      	b.n	80006a0 <__adddf3+0x184>
 8000686:	f102 0214 	add.w	r2, r2, #20
 800068a:	bfd8      	it	le
 800068c:	f1c2 0c20 	rsble	ip, r2, #32
 8000690:	fa01 f102 	lsl.w	r1, r1, r2
 8000694:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000698:	bfdc      	itt	le
 800069a:	ea41 010c 	orrle.w	r1, r1, ip
 800069e:	4090      	lslle	r0, r2
 80006a0:	1ae4      	subs	r4, r4, r3
 80006a2:	bfa2      	ittt	ge
 80006a4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006a8:	4329      	orrge	r1, r5
 80006aa:	bd30      	popge	{r4, r5, pc}
 80006ac:	ea6f 0404 	mvn.w	r4, r4
 80006b0:	3c1f      	subs	r4, #31
 80006b2:	da1c      	bge.n	80006ee <__adddf3+0x1d2>
 80006b4:	340c      	adds	r4, #12
 80006b6:	dc0e      	bgt.n	80006d6 <__adddf3+0x1ba>
 80006b8:	f104 0414 	add.w	r4, r4, #20
 80006bc:	f1c4 0220 	rsb	r2, r4, #32
 80006c0:	fa20 f004 	lsr.w	r0, r0, r4
 80006c4:	fa01 f302 	lsl.w	r3, r1, r2
 80006c8:	ea40 0003 	orr.w	r0, r0, r3
 80006cc:	fa21 f304 	lsr.w	r3, r1, r4
 80006d0:	ea45 0103 	orr.w	r1, r5, r3
 80006d4:	bd30      	pop	{r4, r5, pc}
 80006d6:	f1c4 040c 	rsb	r4, r4, #12
 80006da:	f1c4 0220 	rsb	r2, r4, #32
 80006de:	fa20 f002 	lsr.w	r0, r0, r2
 80006e2:	fa01 f304 	lsl.w	r3, r1, r4
 80006e6:	ea40 0003 	orr.w	r0, r0, r3
 80006ea:	4629      	mov	r1, r5
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	fa21 f004 	lsr.w	r0, r1, r4
 80006f2:	4629      	mov	r1, r5
 80006f4:	bd30      	pop	{r4, r5, pc}
 80006f6:	f094 0f00 	teq	r4, #0
 80006fa:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006fe:	bf06      	itte	eq
 8000700:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000704:	3401      	addeq	r4, #1
 8000706:	3d01      	subne	r5, #1
 8000708:	e74e      	b.n	80005a8 <__adddf3+0x8c>
 800070a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800070e:	bf18      	it	ne
 8000710:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000714:	d029      	beq.n	800076a <__adddf3+0x24e>
 8000716:	ea94 0f05 	teq	r4, r5
 800071a:	bf08      	it	eq
 800071c:	ea90 0f02 	teqeq	r0, r2
 8000720:	d005      	beq.n	800072e <__adddf3+0x212>
 8000722:	ea54 0c00 	orrs.w	ip, r4, r0
 8000726:	bf04      	itt	eq
 8000728:	4619      	moveq	r1, r3
 800072a:	4610      	moveq	r0, r2
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea91 0f03 	teq	r1, r3
 8000732:	bf1e      	ittt	ne
 8000734:	2100      	movne	r1, #0
 8000736:	2000      	movne	r0, #0
 8000738:	bd30      	popne	{r4, r5, pc}
 800073a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800073e:	d105      	bne.n	800074c <__adddf3+0x230>
 8000740:	0040      	lsls	r0, r0, #1
 8000742:	4149      	adcs	r1, r1
 8000744:	bf28      	it	cs
 8000746:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800074a:	bd30      	pop	{r4, r5, pc}
 800074c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000750:	bf3c      	itt	cc
 8000752:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000756:	bd30      	popcc	{r4, r5, pc}
 8000758:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800075c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000760:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000764:	f04f 0000 	mov.w	r0, #0
 8000768:	bd30      	pop	{r4, r5, pc}
 800076a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800076e:	bf1a      	itte	ne
 8000770:	4619      	movne	r1, r3
 8000772:	4610      	movne	r0, r2
 8000774:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000778:	bf1c      	itt	ne
 800077a:	460b      	movne	r3, r1
 800077c:	4602      	movne	r2, r0
 800077e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000782:	bf06      	itte	eq
 8000784:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000788:	ea91 0f03 	teqeq	r1, r3
 800078c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000790:	bd30      	pop	{r4, r5, pc}
 8000792:	bf00      	nop

08000794 <__aeabi_ui2d>:
 8000794:	f090 0f00 	teq	r0, #0
 8000798:	bf04      	itt	eq
 800079a:	2100      	moveq	r1, #0
 800079c:	4770      	bxeq	lr
 800079e:	b530      	push	{r4, r5, lr}
 80007a0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007a4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007a8:	f04f 0500 	mov.w	r5, #0
 80007ac:	f04f 0100 	mov.w	r1, #0
 80007b0:	e750      	b.n	8000654 <__adddf3+0x138>
 80007b2:	bf00      	nop

080007b4 <__aeabi_i2d>:
 80007b4:	f090 0f00 	teq	r0, #0
 80007b8:	bf04      	itt	eq
 80007ba:	2100      	moveq	r1, #0
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007c8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80007cc:	bf48      	it	mi
 80007ce:	4240      	negmi	r0, r0
 80007d0:	f04f 0100 	mov.w	r1, #0
 80007d4:	e73e      	b.n	8000654 <__adddf3+0x138>
 80007d6:	bf00      	nop

080007d8 <__aeabi_f2d>:
 80007d8:	0042      	lsls	r2, r0, #1
 80007da:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007de:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007e6:	bf1f      	itttt	ne
 80007e8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007ec:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007f0:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007f4:	4770      	bxne	lr
 80007f6:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007fa:	bf08      	it	eq
 80007fc:	4770      	bxeq	lr
 80007fe:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000802:	bf04      	itt	eq
 8000804:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000808:	4770      	bxeq	lr
 800080a:	b530      	push	{r4, r5, lr}
 800080c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000810:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000814:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	e71c      	b.n	8000654 <__adddf3+0x138>
 800081a:	bf00      	nop

0800081c <__aeabi_ul2d>:
 800081c:	ea50 0201 	orrs.w	r2, r0, r1
 8000820:	bf08      	it	eq
 8000822:	4770      	bxeq	lr
 8000824:	b530      	push	{r4, r5, lr}
 8000826:	f04f 0500 	mov.w	r5, #0
 800082a:	e00a      	b.n	8000842 <__aeabi_l2d+0x16>

0800082c <__aeabi_l2d>:
 800082c:	ea50 0201 	orrs.w	r2, r0, r1
 8000830:	bf08      	it	eq
 8000832:	4770      	bxeq	lr
 8000834:	b530      	push	{r4, r5, lr}
 8000836:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800083a:	d502      	bpl.n	8000842 <__aeabi_l2d+0x16>
 800083c:	4240      	negs	r0, r0
 800083e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000842:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000846:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800084a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800084e:	f43f aed8 	beq.w	8000602 <__adddf3+0xe6>
 8000852:	f04f 0203 	mov.w	r2, #3
 8000856:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085a:	bf18      	it	ne
 800085c:	3203      	addne	r2, #3
 800085e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000862:	bf18      	it	ne
 8000864:	3203      	addne	r2, #3
 8000866:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086a:	f1c2 0320 	rsb	r3, r2, #32
 800086e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000872:	fa20 f002 	lsr.w	r0, r0, r2
 8000876:	fa01 fe03 	lsl.w	lr, r1, r3
 800087a:	ea40 000e 	orr.w	r0, r0, lr
 800087e:	fa21 f102 	lsr.w	r1, r1, r2
 8000882:	4414      	add	r4, r2
 8000884:	e6bd      	b.n	8000602 <__adddf3+0xe6>
 8000886:	bf00      	nop

08000888 <__aeabi_dmul>:
 8000888:	b570      	push	{r4, r5, r6, lr}
 800088a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800088e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000892:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000896:	bf1d      	ittte	ne
 8000898:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800089c:	ea94 0f0c 	teqne	r4, ip
 80008a0:	ea95 0f0c 	teqne	r5, ip
 80008a4:	f000 f8de 	bleq	8000a64 <__aeabi_dmul+0x1dc>
 80008a8:	442c      	add	r4, r5
 80008aa:	ea81 0603 	eor.w	r6, r1, r3
 80008ae:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80008b2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80008b6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80008ba:	bf18      	it	ne
 80008bc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80008c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008c4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80008c8:	d038      	beq.n	800093c <__aeabi_dmul+0xb4>
 80008ca:	fba0 ce02 	umull	ip, lr, r0, r2
 80008ce:	f04f 0500 	mov.w	r5, #0
 80008d2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008d6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80008da:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008de:	f04f 0600 	mov.w	r6, #0
 80008e2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008e6:	f09c 0f00 	teq	ip, #0
 80008ea:	bf18      	it	ne
 80008ec:	f04e 0e01 	orrne.w	lr, lr, #1
 80008f0:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80008f4:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80008f8:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80008fc:	d204      	bcs.n	8000908 <__aeabi_dmul+0x80>
 80008fe:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000902:	416d      	adcs	r5, r5
 8000904:	eb46 0606 	adc.w	r6, r6, r6
 8000908:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800090c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000910:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000914:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000918:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800091c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000920:	bf88      	it	hi
 8000922:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000926:	d81e      	bhi.n	8000966 <__aeabi_dmul+0xde>
 8000928:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800092c:	bf08      	it	eq
 800092e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000932:	f150 0000 	adcs.w	r0, r0, #0
 8000936:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800093a:	bd70      	pop	{r4, r5, r6, pc}
 800093c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000940:	ea46 0101 	orr.w	r1, r6, r1
 8000944:	ea40 0002 	orr.w	r0, r0, r2
 8000948:	ea81 0103 	eor.w	r1, r1, r3
 800094c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000950:	bfc2      	ittt	gt
 8000952:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000956:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800095a:	bd70      	popgt	{r4, r5, r6, pc}
 800095c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000960:	f04f 0e00 	mov.w	lr, #0
 8000964:	3c01      	subs	r4, #1
 8000966:	f300 80ab 	bgt.w	8000ac0 <__aeabi_dmul+0x238>
 800096a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800096e:	bfde      	ittt	le
 8000970:	2000      	movle	r0, #0
 8000972:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000976:	bd70      	pople	{r4, r5, r6, pc}
 8000978:	f1c4 0400 	rsb	r4, r4, #0
 800097c:	3c20      	subs	r4, #32
 800097e:	da35      	bge.n	80009ec <__aeabi_dmul+0x164>
 8000980:	340c      	adds	r4, #12
 8000982:	dc1b      	bgt.n	80009bc <__aeabi_dmul+0x134>
 8000984:	f104 0414 	add.w	r4, r4, #20
 8000988:	f1c4 0520 	rsb	r5, r4, #32
 800098c:	fa00 f305 	lsl.w	r3, r0, r5
 8000990:	fa20 f004 	lsr.w	r0, r0, r4
 8000994:	fa01 f205 	lsl.w	r2, r1, r5
 8000998:	ea40 0002 	orr.w	r0, r0, r2
 800099c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80009a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80009a4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009a8:	fa21 f604 	lsr.w	r6, r1, r4
 80009ac:	eb42 0106 	adc.w	r1, r2, r6
 80009b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009b4:	bf08      	it	eq
 80009b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ba:	bd70      	pop	{r4, r5, r6, pc}
 80009bc:	f1c4 040c 	rsb	r4, r4, #12
 80009c0:	f1c4 0520 	rsb	r5, r4, #32
 80009c4:	fa00 f304 	lsl.w	r3, r0, r4
 80009c8:	fa20 f005 	lsr.w	r0, r0, r5
 80009cc:	fa01 f204 	lsl.w	r2, r1, r4
 80009d0:	ea40 0002 	orr.w	r0, r0, r2
 80009d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80009d8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009dc:	f141 0100 	adc.w	r1, r1, #0
 80009e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009e4:	bf08      	it	eq
 80009e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ea:	bd70      	pop	{r4, r5, r6, pc}
 80009ec:	f1c4 0520 	rsb	r5, r4, #32
 80009f0:	fa00 f205 	lsl.w	r2, r0, r5
 80009f4:	ea4e 0e02 	orr.w	lr, lr, r2
 80009f8:	fa20 f304 	lsr.w	r3, r0, r4
 80009fc:	fa01 f205 	lsl.w	r2, r1, r5
 8000a00:	ea43 0302 	orr.w	r3, r3, r2
 8000a04:	fa21 f004 	lsr.w	r0, r1, r4
 8000a08:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000a0c:	fa21 f204 	lsr.w	r2, r1, r4
 8000a10:	ea20 0002 	bic.w	r0, r0, r2
 8000a14:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000a18:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000a1c:	bf08      	it	eq
 8000a1e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000a22:	bd70      	pop	{r4, r5, r6, pc}
 8000a24:	f094 0f00 	teq	r4, #0
 8000a28:	d10f      	bne.n	8000a4a <__aeabi_dmul+0x1c2>
 8000a2a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000a2e:	0040      	lsls	r0, r0, #1
 8000a30:	eb41 0101 	adc.w	r1, r1, r1
 8000a34:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a38:	bf08      	it	eq
 8000a3a:	3c01      	subeq	r4, #1
 8000a3c:	d0f7      	beq.n	8000a2e <__aeabi_dmul+0x1a6>
 8000a3e:	ea41 0106 	orr.w	r1, r1, r6
 8000a42:	f095 0f00 	teq	r5, #0
 8000a46:	bf18      	it	ne
 8000a48:	4770      	bxne	lr
 8000a4a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000a4e:	0052      	lsls	r2, r2, #1
 8000a50:	eb43 0303 	adc.w	r3, r3, r3
 8000a54:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000a58:	bf08      	it	eq
 8000a5a:	3d01      	subeq	r5, #1
 8000a5c:	d0f7      	beq.n	8000a4e <__aeabi_dmul+0x1c6>
 8000a5e:	ea43 0306 	orr.w	r3, r3, r6
 8000a62:	4770      	bx	lr
 8000a64:	ea94 0f0c 	teq	r4, ip
 8000a68:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6c:	bf18      	it	ne
 8000a6e:	ea95 0f0c 	teqne	r5, ip
 8000a72:	d00c      	beq.n	8000a8e <__aeabi_dmul+0x206>
 8000a74:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a78:	bf18      	it	ne
 8000a7a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a7e:	d1d1      	bne.n	8000a24 <__aeabi_dmul+0x19c>
 8000a80:	ea81 0103 	eor.w	r1, r1, r3
 8000a84:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000a88:	f04f 0000 	mov.w	r0, #0
 8000a8c:	bd70      	pop	{r4, r5, r6, pc}
 8000a8e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a92:	bf06      	itte	eq
 8000a94:	4610      	moveq	r0, r2
 8000a96:	4619      	moveq	r1, r3
 8000a98:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a9c:	d019      	beq.n	8000ad2 <__aeabi_dmul+0x24a>
 8000a9e:	ea94 0f0c 	teq	r4, ip
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dmul+0x222>
 8000aa4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000aa8:	d113      	bne.n	8000ad2 <__aeabi_dmul+0x24a>
 8000aaa:	ea95 0f0c 	teq	r5, ip
 8000aae:	d105      	bne.n	8000abc <__aeabi_dmul+0x234>
 8000ab0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000ab4:	bf1c      	itt	ne
 8000ab6:	4610      	movne	r0, r2
 8000ab8:	4619      	movne	r1, r3
 8000aba:	d10a      	bne.n	8000ad2 <__aeabi_dmul+0x24a>
 8000abc:	ea81 0103 	eor.w	r1, r1, r3
 8000ac0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000ac4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000ac8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	bd70      	pop	{r4, r5, r6, pc}
 8000ad2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000ad6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000ada:	bd70      	pop	{r4, r5, r6, pc}

08000adc <__aeabi_ddiv>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ae2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000ae6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000aea:	bf1d      	ittte	ne
 8000aec:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000af0:	ea94 0f0c 	teqne	r4, ip
 8000af4:	ea95 0f0c 	teqne	r5, ip
 8000af8:	f000 f8a7 	bleq	8000c4a <__aeabi_ddiv+0x16e>
 8000afc:	eba4 0405 	sub.w	r4, r4, r5
 8000b00:	ea81 0e03 	eor.w	lr, r1, r3
 8000b04:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000b08:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000b0c:	f000 8088 	beq.w	8000c20 <__aeabi_ddiv+0x144>
 8000b10:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000b14:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000b18:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000b1c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000b20:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000b24:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b28:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b2c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b30:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000b34:	429d      	cmp	r5, r3
 8000b36:	bf08      	it	eq
 8000b38:	4296      	cmpeq	r6, r2
 8000b3a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000b3e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000b42:	d202      	bcs.n	8000b4a <__aeabi_ddiv+0x6e>
 8000b44:	085b      	lsrs	r3, r3, #1
 8000b46:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b4a:	1ab6      	subs	r6, r6, r2
 8000b4c:	eb65 0503 	sbc.w	r5, r5, r3
 8000b50:	085b      	lsrs	r3, r3, #1
 8000b52:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b56:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000b5a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000b5e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b62:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b66:	bf22      	ittt	cs
 8000b68:	1ab6      	subcs	r6, r6, r2
 8000b6a:	4675      	movcs	r5, lr
 8000b6c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b70:	085b      	lsrs	r3, r3, #1
 8000b72:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b76:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b7a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b7e:	bf22      	ittt	cs
 8000b80:	1ab6      	subcs	r6, r6, r2
 8000b82:	4675      	movcs	r5, lr
 8000b84:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b88:	085b      	lsrs	r3, r3, #1
 8000b8a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b8e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b92:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b96:	bf22      	ittt	cs
 8000b98:	1ab6      	subcs	r6, r6, r2
 8000b9a:	4675      	movcs	r5, lr
 8000b9c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ba0:	085b      	lsrs	r3, r3, #1
 8000ba2:	ea4f 0232 	mov.w	r2, r2, rrx
 8000ba6:	ebb6 0e02 	subs.w	lr, r6, r2
 8000baa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000bae:	bf22      	ittt	cs
 8000bb0:	1ab6      	subcs	r6, r6, r2
 8000bb2:	4675      	movcs	r5, lr
 8000bb4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000bb8:	ea55 0e06 	orrs.w	lr, r5, r6
 8000bbc:	d018      	beq.n	8000bf0 <__aeabi_ddiv+0x114>
 8000bbe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000bc2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000bc6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000bca:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000bce:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000bd2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bd6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bda:	d1c0      	bne.n	8000b5e <__aeabi_ddiv+0x82>
 8000bdc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000be0:	d10b      	bne.n	8000bfa <__aeabi_ddiv+0x11e>
 8000be2:	ea41 0100 	orr.w	r1, r1, r0
 8000be6:	f04f 0000 	mov.w	r0, #0
 8000bea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000bee:	e7b6      	b.n	8000b5e <__aeabi_ddiv+0x82>
 8000bf0:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000bf4:	bf04      	itt	eq
 8000bf6:	4301      	orreq	r1, r0
 8000bf8:	2000      	moveq	r0, #0
 8000bfa:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000bfe:	bf88      	it	hi
 8000c00:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000c04:	f63f aeaf 	bhi.w	8000966 <__aeabi_dmul+0xde>
 8000c08:	ebb5 0c03 	subs.w	ip, r5, r3
 8000c0c:	bf04      	itt	eq
 8000c0e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000c12:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000c16:	f150 0000 	adcs.w	r0, r0, #0
 8000c1a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000c1e:	bd70      	pop	{r4, r5, r6, pc}
 8000c20:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000c24:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c28:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c2c:	bfc2      	ittt	gt
 8000c2e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c32:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c36:	bd70      	popgt	{r4, r5, r6, pc}
 8000c38:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3c:	f04f 0e00 	mov.w	lr, #0
 8000c40:	3c01      	subs	r4, #1
 8000c42:	e690      	b.n	8000966 <__aeabi_dmul+0xde>
 8000c44:	ea45 0e06 	orr.w	lr, r5, r6
 8000c48:	e68d      	b.n	8000966 <__aeabi_dmul+0xde>
 8000c4a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c4e:	ea94 0f0c 	teq	r4, ip
 8000c52:	bf08      	it	eq
 8000c54:	ea95 0f0c 	teqeq	r5, ip
 8000c58:	f43f af3b 	beq.w	8000ad2 <__aeabi_dmul+0x24a>
 8000c5c:	ea94 0f0c 	teq	r4, ip
 8000c60:	d10a      	bne.n	8000c78 <__aeabi_ddiv+0x19c>
 8000c62:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c66:	f47f af34 	bne.w	8000ad2 <__aeabi_dmul+0x24a>
 8000c6a:	ea95 0f0c 	teq	r5, ip
 8000c6e:	f47f af25 	bne.w	8000abc <__aeabi_dmul+0x234>
 8000c72:	4610      	mov	r0, r2
 8000c74:	4619      	mov	r1, r3
 8000c76:	e72c      	b.n	8000ad2 <__aeabi_dmul+0x24a>
 8000c78:	ea95 0f0c 	teq	r5, ip
 8000c7c:	d106      	bne.n	8000c8c <__aeabi_ddiv+0x1b0>
 8000c7e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c82:	f43f aefd 	beq.w	8000a80 <__aeabi_dmul+0x1f8>
 8000c86:	4610      	mov	r0, r2
 8000c88:	4619      	mov	r1, r3
 8000c8a:	e722      	b.n	8000ad2 <__aeabi_dmul+0x24a>
 8000c8c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c90:	bf18      	it	ne
 8000c92:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c96:	f47f aec5 	bne.w	8000a24 <__aeabi_dmul+0x19c>
 8000c9a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c9e:	f47f af0d 	bne.w	8000abc <__aeabi_dmul+0x234>
 8000ca2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ca6:	f47f aeeb 	bne.w	8000a80 <__aeabi_dmul+0x1f8>
 8000caa:	e712      	b.n	8000ad2 <__aeabi_dmul+0x24a>

08000cac <__gedf2>:
 8000cac:	f04f 3cff 	mov.w	ip, #4294967295
 8000cb0:	e006      	b.n	8000cc0 <__cmpdf2+0x4>
 8000cb2:	bf00      	nop

08000cb4 <__ledf2>:
 8000cb4:	f04f 0c01 	mov.w	ip, #1
 8000cb8:	e002      	b.n	8000cc0 <__cmpdf2+0x4>
 8000cba:	bf00      	nop

08000cbc <__cmpdf2>:
 8000cbc:	f04f 0c01 	mov.w	ip, #1
 8000cc0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000cc4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cc8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ccc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cd0:	bf18      	it	ne
 8000cd2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cd6:	d01b      	beq.n	8000d10 <__cmpdf2+0x54>
 8000cd8:	b001      	add	sp, #4
 8000cda:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cde:	bf0c      	ite	eq
 8000ce0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ce4:	ea91 0f03 	teqne	r1, r3
 8000ce8:	bf02      	ittt	eq
 8000cea:	ea90 0f02 	teqeq	r0, r2
 8000cee:	2000      	moveq	r0, #0
 8000cf0:	4770      	bxeq	lr
 8000cf2:	f110 0f00 	cmn.w	r0, #0
 8000cf6:	ea91 0f03 	teq	r1, r3
 8000cfa:	bf58      	it	pl
 8000cfc:	4299      	cmppl	r1, r3
 8000cfe:	bf08      	it	eq
 8000d00:	4290      	cmpeq	r0, r2
 8000d02:	bf2c      	ite	cs
 8000d04:	17d8      	asrcs	r0, r3, #31
 8000d06:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000d0a:	f040 0001 	orr.w	r0, r0, #1
 8000d0e:	4770      	bx	lr
 8000d10:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000d14:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d18:	d102      	bne.n	8000d20 <__cmpdf2+0x64>
 8000d1a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000d1e:	d107      	bne.n	8000d30 <__cmpdf2+0x74>
 8000d20:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000d24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d28:	d1d6      	bne.n	8000cd8 <__cmpdf2+0x1c>
 8000d2a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d2e:	d0d3      	beq.n	8000cd8 <__cmpdf2+0x1c>
 8000d30:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <__aeabi_cdrcmple>:
 8000d38:	4684      	mov	ip, r0
 8000d3a:	4610      	mov	r0, r2
 8000d3c:	4662      	mov	r2, ip
 8000d3e:	468c      	mov	ip, r1
 8000d40:	4619      	mov	r1, r3
 8000d42:	4663      	mov	r3, ip
 8000d44:	e000      	b.n	8000d48 <__aeabi_cdcmpeq>
 8000d46:	bf00      	nop

08000d48 <__aeabi_cdcmpeq>:
 8000d48:	b501      	push	{r0, lr}
 8000d4a:	f7ff ffb7 	bl	8000cbc <__cmpdf2>
 8000d4e:	2800      	cmp	r0, #0
 8000d50:	bf48      	it	mi
 8000d52:	f110 0f00 	cmnmi.w	r0, #0
 8000d56:	bd01      	pop	{r0, pc}

08000d58 <__aeabi_dcmpeq>:
 8000d58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d5c:	f7ff fff4 	bl	8000d48 <__aeabi_cdcmpeq>
 8000d60:	bf0c      	ite	eq
 8000d62:	2001      	moveq	r0, #1
 8000d64:	2000      	movne	r0, #0
 8000d66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6a:	bf00      	nop

08000d6c <__aeabi_dcmplt>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff ffea 	bl	8000d48 <__aeabi_cdcmpeq>
 8000d74:	bf34      	ite	cc
 8000d76:	2001      	movcc	r0, #1
 8000d78:	2000      	movcs	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_dcmple>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffe0 	bl	8000d48 <__aeabi_cdcmpeq>
 8000d88:	bf94      	ite	ls
 8000d8a:	2001      	movls	r0, #1
 8000d8c:	2000      	movhi	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_dcmpge>:
 8000d94:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d98:	f7ff ffce 	bl	8000d38 <__aeabi_cdrcmple>
 8000d9c:	bf94      	ite	ls
 8000d9e:	2001      	movls	r0, #1
 8000da0:	2000      	movhi	r0, #0
 8000da2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000da6:	bf00      	nop

08000da8 <__aeabi_dcmpgt>:
 8000da8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000dac:	f7ff ffc4 	bl	8000d38 <__aeabi_cdrcmple>
 8000db0:	bf34      	ite	cc
 8000db2:	2001      	movcc	r0, #1
 8000db4:	2000      	movcs	r0, #0
 8000db6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000dba:	bf00      	nop

08000dbc <__aeabi_dcmpun>:
 8000dbc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000dc0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dc4:	d102      	bne.n	8000dcc <__aeabi_dcmpun+0x10>
 8000dc6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000dca:	d10a      	bne.n	8000de2 <__aeabi_dcmpun+0x26>
 8000dcc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000dd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000dd4:	d102      	bne.n	8000ddc <__aeabi_dcmpun+0x20>
 8000dd6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000dda:	d102      	bne.n	8000de2 <__aeabi_dcmpun+0x26>
 8000ddc:	f04f 0000 	mov.w	r0, #0
 8000de0:	4770      	bx	lr
 8000de2:	f04f 0001 	mov.w	r0, #1
 8000de6:	4770      	bx	lr

08000de8 <__aeabi_d2iz>:
 8000de8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000dec:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000df0:	d215      	bcs.n	8000e1e <__aeabi_d2iz+0x36>
 8000df2:	d511      	bpl.n	8000e18 <__aeabi_d2iz+0x30>
 8000df4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000df8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000dfc:	d912      	bls.n	8000e24 <__aeabi_d2iz+0x3c>
 8000dfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000e02:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e0a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000e0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000e12:	bf18      	it	ne
 8000e14:	4240      	negne	r0, r0
 8000e16:	4770      	bx	lr
 8000e18:	f04f 0000 	mov.w	r0, #0
 8000e1c:	4770      	bx	lr
 8000e1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e22:	d105      	bne.n	8000e30 <__aeabi_d2iz+0x48>
 8000e24:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000e28:	bf08      	it	eq
 8000e2a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e2e:	4770      	bx	lr
 8000e30:	f04f 0000 	mov.w	r0, #0
 8000e34:	4770      	bx	lr
 8000e36:	bf00      	nop

08000e38 <__aeabi_uldivmod>:
 8000e38:	b953      	cbnz	r3, 8000e50 <__aeabi_uldivmod+0x18>
 8000e3a:	b94a      	cbnz	r2, 8000e50 <__aeabi_uldivmod+0x18>
 8000e3c:	2900      	cmp	r1, #0
 8000e3e:	bf08      	it	eq
 8000e40:	2800      	cmpeq	r0, #0
 8000e42:	bf1c      	itt	ne
 8000e44:	f04f 31ff 	movne.w	r1, #4294967295
 8000e48:	f04f 30ff 	movne.w	r0, #4294967295
 8000e4c:	f000 b96a 	b.w	8001124 <__aeabi_idiv0>
 8000e50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e58:	f000 f806 	bl	8000e68 <__udivmoddi4>
 8000e5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e64:	b004      	add	sp, #16
 8000e66:	4770      	bx	lr

08000e68 <__udivmoddi4>:
 8000e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e6c:	9d08      	ldr	r5, [sp, #32]
 8000e6e:	460c      	mov	r4, r1
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d14e      	bne.n	8000f12 <__udivmoddi4+0xaa>
 8000e74:	4694      	mov	ip, r2
 8000e76:	458c      	cmp	ip, r1
 8000e78:	4686      	mov	lr, r0
 8000e7a:	fab2 f282 	clz	r2, r2
 8000e7e:	d962      	bls.n	8000f46 <__udivmoddi4+0xde>
 8000e80:	b14a      	cbz	r2, 8000e96 <__udivmoddi4+0x2e>
 8000e82:	f1c2 0320 	rsb	r3, r2, #32
 8000e86:	4091      	lsls	r1, r2
 8000e88:	fa20 f303 	lsr.w	r3, r0, r3
 8000e8c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e90:	4319      	orrs	r1, r3
 8000e92:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e9a:	fa1f f68c 	uxth.w	r6, ip
 8000e9e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000ea2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ea6:	fb07 1114 	mls	r1, r7, r4, r1
 8000eaa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eae:	fb04 f106 	mul.w	r1, r4, r6
 8000eb2:	4299      	cmp	r1, r3
 8000eb4:	d90a      	bls.n	8000ecc <__udivmoddi4+0x64>
 8000eb6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eba:	f104 30ff 	add.w	r0, r4, #4294967295
 8000ebe:	f080 8112 	bcs.w	80010e6 <__udivmoddi4+0x27e>
 8000ec2:	4299      	cmp	r1, r3
 8000ec4:	f240 810f 	bls.w	80010e6 <__udivmoddi4+0x27e>
 8000ec8:	3c02      	subs	r4, #2
 8000eca:	4463      	add	r3, ip
 8000ecc:	1a59      	subs	r1, r3, r1
 8000ece:	fa1f f38e 	uxth.w	r3, lr
 8000ed2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ed6:	fb07 1110 	mls	r1, r7, r0, r1
 8000eda:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ede:	fb00 f606 	mul.w	r6, r0, r6
 8000ee2:	429e      	cmp	r6, r3
 8000ee4:	d90a      	bls.n	8000efc <__udivmoddi4+0x94>
 8000ee6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eea:	f100 31ff 	add.w	r1, r0, #4294967295
 8000eee:	f080 80fc 	bcs.w	80010ea <__udivmoddi4+0x282>
 8000ef2:	429e      	cmp	r6, r3
 8000ef4:	f240 80f9 	bls.w	80010ea <__udivmoddi4+0x282>
 8000ef8:	4463      	add	r3, ip
 8000efa:	3802      	subs	r0, #2
 8000efc:	1b9b      	subs	r3, r3, r6
 8000efe:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f02:	2100      	movs	r1, #0
 8000f04:	b11d      	cbz	r5, 8000f0e <__udivmoddi4+0xa6>
 8000f06:	40d3      	lsrs	r3, r2
 8000f08:	2200      	movs	r2, #0
 8000f0a:	e9c5 3200 	strd	r3, r2, [r5]
 8000f0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f12:	428b      	cmp	r3, r1
 8000f14:	d905      	bls.n	8000f22 <__udivmoddi4+0xba>
 8000f16:	b10d      	cbz	r5, 8000f1c <__udivmoddi4+0xb4>
 8000f18:	e9c5 0100 	strd	r0, r1, [r5]
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4608      	mov	r0, r1
 8000f20:	e7f5      	b.n	8000f0e <__udivmoddi4+0xa6>
 8000f22:	fab3 f183 	clz	r1, r3
 8000f26:	2900      	cmp	r1, #0
 8000f28:	d146      	bne.n	8000fb8 <__udivmoddi4+0x150>
 8000f2a:	42a3      	cmp	r3, r4
 8000f2c:	d302      	bcc.n	8000f34 <__udivmoddi4+0xcc>
 8000f2e:	4290      	cmp	r0, r2
 8000f30:	f0c0 80f0 	bcc.w	8001114 <__udivmoddi4+0x2ac>
 8000f34:	1a86      	subs	r6, r0, r2
 8000f36:	eb64 0303 	sbc.w	r3, r4, r3
 8000f3a:	2001      	movs	r0, #1
 8000f3c:	2d00      	cmp	r5, #0
 8000f3e:	d0e6      	beq.n	8000f0e <__udivmoddi4+0xa6>
 8000f40:	e9c5 6300 	strd	r6, r3, [r5]
 8000f44:	e7e3      	b.n	8000f0e <__udivmoddi4+0xa6>
 8000f46:	2a00      	cmp	r2, #0
 8000f48:	f040 8090 	bne.w	800106c <__udivmoddi4+0x204>
 8000f4c:	eba1 040c 	sub.w	r4, r1, ip
 8000f50:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	2101      	movs	r1, #1
 8000f5a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000f5e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f62:	fb08 4416 	mls	r4, r8, r6, r4
 8000f66:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f6a:	fb07 f006 	mul.w	r0, r7, r6
 8000f6e:	4298      	cmp	r0, r3
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x11c>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f106 34ff 	add.w	r4, r6, #4294967295
 8000f7a:	d202      	bcs.n	8000f82 <__udivmoddi4+0x11a>
 8000f7c:	4298      	cmp	r0, r3
 8000f7e:	f200 80cd 	bhi.w	800111c <__udivmoddi4+0x2b4>
 8000f82:	4626      	mov	r6, r4
 8000f84:	1a1c      	subs	r4, r3, r0
 8000f86:	fa1f f38e 	uxth.w	r3, lr
 8000f8a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000f8e:	fb08 4410 	mls	r4, r8, r0, r4
 8000f92:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000f96:	fb00 f707 	mul.w	r7, r0, r7
 8000f9a:	429f      	cmp	r7, r3
 8000f9c:	d908      	bls.n	8000fb0 <__udivmoddi4+0x148>
 8000f9e:	eb1c 0303 	adds.w	r3, ip, r3
 8000fa2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000fa6:	d202      	bcs.n	8000fae <__udivmoddi4+0x146>
 8000fa8:	429f      	cmp	r7, r3
 8000faa:	f200 80b0 	bhi.w	800110e <__udivmoddi4+0x2a6>
 8000fae:	4620      	mov	r0, r4
 8000fb0:	1bdb      	subs	r3, r3, r7
 8000fb2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000fb6:	e7a5      	b.n	8000f04 <__udivmoddi4+0x9c>
 8000fb8:	f1c1 0620 	rsb	r6, r1, #32
 8000fbc:	408b      	lsls	r3, r1
 8000fbe:	fa22 f706 	lsr.w	r7, r2, r6
 8000fc2:	431f      	orrs	r7, r3
 8000fc4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000fc8:	fa04 f301 	lsl.w	r3, r4, r1
 8000fcc:	ea43 030c 	orr.w	r3, r3, ip
 8000fd0:	40f4      	lsrs	r4, r6
 8000fd2:	fa00 f801 	lsl.w	r8, r0, r1
 8000fd6:	0c38      	lsrs	r0, r7, #16
 8000fd8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000fdc:	fbb4 fef0 	udiv	lr, r4, r0
 8000fe0:	fa1f fc87 	uxth.w	ip, r7
 8000fe4:	fb00 441e 	mls	r4, r0, lr, r4
 8000fe8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000fec:	fb0e f90c 	mul.w	r9, lr, ip
 8000ff0:	45a1      	cmp	r9, r4
 8000ff2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ff6:	d90a      	bls.n	800100e <__udivmoddi4+0x1a6>
 8000ff8:	193c      	adds	r4, r7, r4
 8000ffa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000ffe:	f080 8084 	bcs.w	800110a <__udivmoddi4+0x2a2>
 8001002:	45a1      	cmp	r9, r4
 8001004:	f240 8081 	bls.w	800110a <__udivmoddi4+0x2a2>
 8001008:	f1ae 0e02 	sub.w	lr, lr, #2
 800100c:	443c      	add	r4, r7
 800100e:	eba4 0409 	sub.w	r4, r4, r9
 8001012:	fa1f f983 	uxth.w	r9, r3
 8001016:	fbb4 f3f0 	udiv	r3, r4, r0
 800101a:	fb00 4413 	mls	r4, r0, r3, r4
 800101e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001022:	fb03 fc0c 	mul.w	ip, r3, ip
 8001026:	45a4      	cmp	ip, r4
 8001028:	d907      	bls.n	800103a <__udivmoddi4+0x1d2>
 800102a:	193c      	adds	r4, r7, r4
 800102c:	f103 30ff 	add.w	r0, r3, #4294967295
 8001030:	d267      	bcs.n	8001102 <__udivmoddi4+0x29a>
 8001032:	45a4      	cmp	ip, r4
 8001034:	d965      	bls.n	8001102 <__udivmoddi4+0x29a>
 8001036:	3b02      	subs	r3, #2
 8001038:	443c      	add	r4, r7
 800103a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800103e:	fba0 9302 	umull	r9, r3, r0, r2
 8001042:	eba4 040c 	sub.w	r4, r4, ip
 8001046:	429c      	cmp	r4, r3
 8001048:	46ce      	mov	lr, r9
 800104a:	469c      	mov	ip, r3
 800104c:	d351      	bcc.n	80010f2 <__udivmoddi4+0x28a>
 800104e:	d04e      	beq.n	80010ee <__udivmoddi4+0x286>
 8001050:	b155      	cbz	r5, 8001068 <__udivmoddi4+0x200>
 8001052:	ebb8 030e 	subs.w	r3, r8, lr
 8001056:	eb64 040c 	sbc.w	r4, r4, ip
 800105a:	fa04 f606 	lsl.w	r6, r4, r6
 800105e:	40cb      	lsrs	r3, r1
 8001060:	431e      	orrs	r6, r3
 8001062:	40cc      	lsrs	r4, r1
 8001064:	e9c5 6400 	strd	r6, r4, [r5]
 8001068:	2100      	movs	r1, #0
 800106a:	e750      	b.n	8000f0e <__udivmoddi4+0xa6>
 800106c:	f1c2 0320 	rsb	r3, r2, #32
 8001070:	fa20 f103 	lsr.w	r1, r0, r3
 8001074:	fa0c fc02 	lsl.w	ip, ip, r2
 8001078:	fa24 f303 	lsr.w	r3, r4, r3
 800107c:	4094      	lsls	r4, r2
 800107e:	430c      	orrs	r4, r1
 8001080:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8001084:	fa00 fe02 	lsl.w	lr, r0, r2
 8001088:	fa1f f78c 	uxth.w	r7, ip
 800108c:	fbb3 f0f8 	udiv	r0, r3, r8
 8001090:	fb08 3110 	mls	r1, r8, r0, r3
 8001094:	0c23      	lsrs	r3, r4, #16
 8001096:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800109a:	fb00 f107 	mul.w	r1, r0, r7
 800109e:	4299      	cmp	r1, r3
 80010a0:	d908      	bls.n	80010b4 <__udivmoddi4+0x24c>
 80010a2:	eb1c 0303 	adds.w	r3, ip, r3
 80010a6:	f100 36ff 	add.w	r6, r0, #4294967295
 80010aa:	d22c      	bcs.n	8001106 <__udivmoddi4+0x29e>
 80010ac:	4299      	cmp	r1, r3
 80010ae:	d92a      	bls.n	8001106 <__udivmoddi4+0x29e>
 80010b0:	3802      	subs	r0, #2
 80010b2:	4463      	add	r3, ip
 80010b4:	1a5b      	subs	r3, r3, r1
 80010b6:	b2a4      	uxth	r4, r4
 80010b8:	fbb3 f1f8 	udiv	r1, r3, r8
 80010bc:	fb08 3311 	mls	r3, r8, r1, r3
 80010c0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80010c4:	fb01 f307 	mul.w	r3, r1, r7
 80010c8:	42a3      	cmp	r3, r4
 80010ca:	d908      	bls.n	80010de <__udivmoddi4+0x276>
 80010cc:	eb1c 0404 	adds.w	r4, ip, r4
 80010d0:	f101 36ff 	add.w	r6, r1, #4294967295
 80010d4:	d213      	bcs.n	80010fe <__udivmoddi4+0x296>
 80010d6:	42a3      	cmp	r3, r4
 80010d8:	d911      	bls.n	80010fe <__udivmoddi4+0x296>
 80010da:	3902      	subs	r1, #2
 80010dc:	4464      	add	r4, ip
 80010de:	1ae4      	subs	r4, r4, r3
 80010e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80010e4:	e739      	b.n	8000f5a <__udivmoddi4+0xf2>
 80010e6:	4604      	mov	r4, r0
 80010e8:	e6f0      	b.n	8000ecc <__udivmoddi4+0x64>
 80010ea:	4608      	mov	r0, r1
 80010ec:	e706      	b.n	8000efc <__udivmoddi4+0x94>
 80010ee:	45c8      	cmp	r8, r9
 80010f0:	d2ae      	bcs.n	8001050 <__udivmoddi4+0x1e8>
 80010f2:	ebb9 0e02 	subs.w	lr, r9, r2
 80010f6:	eb63 0c07 	sbc.w	ip, r3, r7
 80010fa:	3801      	subs	r0, #1
 80010fc:	e7a8      	b.n	8001050 <__udivmoddi4+0x1e8>
 80010fe:	4631      	mov	r1, r6
 8001100:	e7ed      	b.n	80010de <__udivmoddi4+0x276>
 8001102:	4603      	mov	r3, r0
 8001104:	e799      	b.n	800103a <__udivmoddi4+0x1d2>
 8001106:	4630      	mov	r0, r6
 8001108:	e7d4      	b.n	80010b4 <__udivmoddi4+0x24c>
 800110a:	46d6      	mov	lr, sl
 800110c:	e77f      	b.n	800100e <__udivmoddi4+0x1a6>
 800110e:	4463      	add	r3, ip
 8001110:	3802      	subs	r0, #2
 8001112:	e74d      	b.n	8000fb0 <__udivmoddi4+0x148>
 8001114:	4606      	mov	r6, r0
 8001116:	4623      	mov	r3, r4
 8001118:	4608      	mov	r0, r1
 800111a:	e70f      	b.n	8000f3c <__udivmoddi4+0xd4>
 800111c:	3e02      	subs	r6, #2
 800111e:	4463      	add	r3, ip
 8001120:	e730      	b.n	8000f84 <__udivmoddi4+0x11c>
 8001122:	bf00      	nop

08001124 <__aeabi_idiv0>:
 8001124:	4770      	bx	lr
 8001126:	bf00      	nop

08001128 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b086      	sub	sp, #24
 800112c:	af02      	add	r7, sp, #8
 800112e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001134:	2334      	movs	r3, #52	@ 0x34
 8001136:	9300      	str	r3, [sp, #0]
 8001138:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800113c:	4a0b      	ldr	r2, [pc, #44]	@ (800116c <tx_application_define+0x44>)
 800113e:	490c      	ldr	r1, [pc, #48]	@ (8001170 <tx_application_define+0x48>)
 8001140:	480c      	ldr	r0, [pc, #48]	@ (8001174 <tx_application_define+0x4c>)
 8001142:	f005 f961 	bl	8006408 <_txe_byte_pool_create>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d10a      	bne.n	8001162 <tx_application_define+0x3a>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 800114c:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <tx_application_define+0x4c>)
 800114e:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8001150:	68b8      	ldr	r0, [r7, #8]
 8001152:	f000 f811 	bl	8001178 <App_ThreadX_Init>
 8001156:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <tx_application_define+0x3a>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800115e:	bf00      	nop
 8001160:	e7fd      	b.n	800115e <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8001162:	bf00      	nop
 8001164:	3710      	adds	r7, #16
 8001166:	46bd      	mov	sp, r7
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200001f4 	.word	0x200001f4
 8001170:	08009068 	.word	0x08009068
 8001174:	200005f4 	.word	0x200005f4

08001178 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b08c      	sub	sp, #48	@ 0x30
 800117c:	af08      	add	r7, sp, #32
 800117e:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8001180:	2300      	movs	r3, #0
 8001182:	60fb      	str	r3, [r7, #12]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */
  TX_BYTE_POOL *byte_pool = (TX_BYTE_POOL*)memory_ptr;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	60bb      	str	r3, [r7, #8]
  /* USER CODE BEGIN App_ThreadX_Init */
//  tx_queue_create(&queue_ptr, "Queue0", 3, queue_stack, 128);
//
//  tx_thread_create(&sender1_ptr, "Sender1", Sender1, 0, thread_sender1, THREAD_STACK_SIZE, 5, 5, 1, TX_AUTO_START);
//  tx_thread_create(&receiver_ptr, "Receiver", Receiver, 0, thread_receiver, THREAD_STACK_SIZE, 5, 5, 1, TX_AUTO_START);
  tx_thread_create(&LED_1_ptr, "LD1_thread", LD1_thread_entry, 0x1234, thread_LED_1, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 8001188:	23b0      	movs	r3, #176	@ 0xb0
 800118a:	9306      	str	r3, [sp, #24]
 800118c:	2301      	movs	r3, #1
 800118e:	9305      	str	r3, [sp, #20]
 8001190:	2301      	movs	r3, #1
 8001192:	9304      	str	r3, [sp, #16]
 8001194:	230f      	movs	r3, #15
 8001196:	9303      	str	r3, [sp, #12]
 8001198:	230f      	movs	r3, #15
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011a0:	9301      	str	r3, [sp, #4]
 80011a2:	4b11      	ldr	r3, [pc, #68]	@ (80011e8 <App_ThreadX_Init+0x70>)
 80011a4:	9300      	str	r3, [sp, #0]
 80011a6:	f241 2334 	movw	r3, #4660	@ 0x1234
 80011aa:	4a10      	ldr	r2, [pc, #64]	@ (80011ec <App_ThreadX_Init+0x74>)
 80011ac:	4910      	ldr	r1, [pc, #64]	@ (80011f0 <App_ThreadX_Init+0x78>)
 80011ae:	4811      	ldr	r0, [pc, #68]	@ (80011f4 <App_ThreadX_Init+0x7c>)
 80011b0:	f005 f9ca 	bl	8006548 <_txe_thread_create>
//  tx_thread_create(&thread_mpu6050, "MPU6050_thread", MPU6050_thread_entry, 0, thread_stack_mpu6050, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
  tx_thread_create(&sender_receiver_ptr, "SenderReceiver", SenderReceiver, 0, thread_sender_receiver, THREAD_STACK_SIZE, 15, 15, 1, TX_AUTO_START);
 80011b4:	23b0      	movs	r3, #176	@ 0xb0
 80011b6:	9306      	str	r3, [sp, #24]
 80011b8:	2301      	movs	r3, #1
 80011ba:	9305      	str	r3, [sp, #20]
 80011bc:	2301      	movs	r3, #1
 80011be:	9304      	str	r3, [sp, #16]
 80011c0:	230f      	movs	r3, #15
 80011c2:	9303      	str	r3, [sp, #12]
 80011c4:	230f      	movs	r3, #15
 80011c6:	9302      	str	r3, [sp, #8]
 80011c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011cc:	9301      	str	r3, [sp, #4]
 80011ce:	4b0a      	ldr	r3, [pc, #40]	@ (80011f8 <App_ThreadX_Init+0x80>)
 80011d0:	9300      	str	r3, [sp, #0]
 80011d2:	2300      	movs	r3, #0
 80011d4:	4a09      	ldr	r2, [pc, #36]	@ (80011fc <App_ThreadX_Init+0x84>)
 80011d6:	490a      	ldr	r1, [pc, #40]	@ (8001200 <App_ThreadX_Init+0x88>)
 80011d8:	480a      	ldr	r0, [pc, #40]	@ (8001204 <App_ThreadX_Init+0x8c>)
 80011da:	f005 f9b5 	bl	8006548 <_txe_thread_create>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 80011de:	68fb      	ldr	r3, [r7, #12]
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	3710      	adds	r7, #16
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}
 80011e8:	20000628 	.word	0x20000628
 80011ec:	080013bd 	.word	0x080013bd
 80011f0:	0800907c 	.word	0x0800907c
 80011f4:	20000e28 	.word	0x20000e28
 80011f8:	20000a28 	.word	0x20000a28
 80011fc:	08001215 	.word	0x08001215
 8001200:	08009088 	.word	0x08009088
 8001204:	20000ed8 	.word	0x20000ed8

08001208 <MX_ThreadX_Init>:
  * @brief  Function that implements the kernel's initialization.
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8001208:	b580      	push	{r7, lr}
 800120a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 800120c:	f004 f9be 	bl	800558c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}

08001214 <SenderReceiver>:

/* USER CODE BEGIN 1 */
VOID SenderReceiver(ULONG initial_input) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
    uint8_t uart_rx_buffer[3];
    for (;;) {
        if (HAL_UART_Receive(&huart1, uart_rx_buffer, 3, HAL_MAX_DELAY) == HAL_OK) {
 800121c:	f107 0114 	add.w	r1, r7, #20
 8001220:	f04f 33ff 	mov.w	r3, #4294967295
 8001224:	2203      	movs	r2, #3
 8001226:	485e      	ldr	r0, [pc, #376]	@ (80013a0 <SenderReceiver+0x18c>)
 8001228:	f003 f9f0 	bl	800460c <HAL_UART_Receive>
 800122c:	4603      	mov	r3, r0
 800122e:	2b00      	cmp	r3, #0
 8001230:	d1f4      	bne.n	800121c <SenderReceiver+0x8>
            if (strncmp((char*)uart_rx_buffer, "led", 3) == 0) {
 8001232:	f107 0314 	add.w	r3, r7, #20
 8001236:	2203      	movs	r2, #3
 8001238:	495a      	ldr	r1, [pc, #360]	@ (80013a4 <SenderReceiver+0x190>)
 800123a:	4618      	mov	r0, r3
 800123c:	f005 ffdb 	bl	80071f6 <strncmp>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d143      	bne.n	80012ce <SenderReceiver+0xba>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001246:	2101      	movs	r1, #1
 8001248:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800124c:	f001 f882 	bl	8002354 <HAL_GPIO_TogglePin>
                uint8_t data1 = 0xFE;
 8001250:	23fe      	movs	r3, #254	@ 0xfe
 8001252:	74fb      	strb	r3, [r7, #19]
                HAL_SPI_Transmit(&hspi1, &data1, 1, HAL_MAX_DELAY);
 8001254:	f107 0113 	add.w	r1, r7, #19
 8001258:	f04f 33ff 	mov.w	r3, #4294967295
 800125c:	2201      	movs	r2, #1
 800125e:	4852      	ldr	r0, [pc, #328]	@ (80013a8 <SenderReceiver+0x194>)
 8001260:	f002 fad1 	bl	8003806 <HAL_SPI_Transmit>
                tx_thread_sleep(50);
 8001264:	2032      	movs	r0, #50	@ 0x32
 8001266:	f004 fb39 	bl	80058dc <_tx_thread_sleep>
                uint8_t data2 = 0xFD;
 800126a:	23fd      	movs	r3, #253	@ 0xfd
 800126c:	74bb      	strb	r3, [r7, #18]
                HAL_SPI_Transmit(&hspi1, &data2, 1, HAL_MAX_DELAY);
 800126e:	f107 0112 	add.w	r1, r7, #18
 8001272:	f04f 33ff 	mov.w	r3, #4294967295
 8001276:	2201      	movs	r2, #1
 8001278:	484b      	ldr	r0, [pc, #300]	@ (80013a8 <SenderReceiver+0x194>)
 800127a:	f002 fac4 	bl	8003806 <HAL_SPI_Transmit>
                tx_thread_sleep(50);
 800127e:	2032      	movs	r0, #50	@ 0x32
 8001280:	f004 fb2c 	bl	80058dc <_tx_thread_sleep>
                uint8_t data4 = 0xFB;
 8001284:	23fb      	movs	r3, #251	@ 0xfb
 8001286:	747b      	strb	r3, [r7, #17]
                HAL_SPI_Transmit(&hspi1, &data4, 1, HAL_MAX_DELAY);
 8001288:	f107 0111 	add.w	r1, r7, #17
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	2201      	movs	r2, #1
 8001292:	4845      	ldr	r0, [pc, #276]	@ (80013a8 <SenderReceiver+0x194>)
 8001294:	f002 fab7 	bl	8003806 <HAL_SPI_Transmit>
                tx_thread_sleep(50);
 8001298:	2032      	movs	r0, #50	@ 0x32
 800129a:	f004 fb1f 	bl	80058dc <_tx_thread_sleep>
                uint8_t data3 = 0xF7;
 800129e:	23f7      	movs	r3, #247	@ 0xf7
 80012a0:	743b      	strb	r3, [r7, #16]
                HAL_SPI_Transmit(&hspi1, &data3, 1, HAL_MAX_DELAY);
 80012a2:	f107 0110 	add.w	r1, r7, #16
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	2201      	movs	r2, #1
 80012ac:	483e      	ldr	r0, [pc, #248]	@ (80013a8 <SenderReceiver+0x194>)
 80012ae:	f002 faaa 	bl	8003806 <HAL_SPI_Transmit>
                tx_thread_sleep(50);
 80012b2:	2032      	movs	r0, #50	@ 0x32
 80012b4:	f004 fb12 	bl	80058dc <_tx_thread_sleep>
                uint8_t data0 = 0xFF;
 80012b8:	23ff      	movs	r3, #255	@ 0xff
 80012ba:	73fb      	strb	r3, [r7, #15]
                HAL_SPI_Transmit(&hspi1, &data0, 1, HAL_MAX_DELAY);
 80012bc:	f107 010f 	add.w	r1, r7, #15
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	2201      	movs	r2, #1
 80012c6:	4838      	ldr	r0, [pc, #224]	@ (80013a8 <SenderReceiver+0x194>)
 80012c8:	f002 fa9d 	bl	8003806 <HAL_SPI_Transmit>
 80012cc:	e7a6      	b.n	800121c <SenderReceiver+0x8>
            } else if (strncmp((char*)uart_rx_buffer, "xtp", 3) == 0) {
 80012ce:	f107 0314 	add.w	r3, r7, #20
 80012d2:	2203      	movs	r2, #3
 80012d4:	4935      	ldr	r1, [pc, #212]	@ (80013ac <SenderReceiver+0x198>)
 80012d6:	4618      	mov	r0, r3
 80012d8:	f005 ff8d 	bl	80071f6 <strncmp>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <SenderReceiver+0xee>
                uint8_t data = 0xFE;
 80012e2:	23fe      	movs	r3, #254	@ 0xfe
 80012e4:	73bb      	strb	r3, [r7, #14]
                HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 80012e6:	f107 010e 	add.w	r1, r7, #14
 80012ea:	f04f 33ff 	mov.w	r3, #4294967295
 80012ee:	2201      	movs	r2, #1
 80012f0:	482d      	ldr	r0, [pc, #180]	@ (80013a8 <SenderReceiver+0x194>)
 80012f2:	f002 fa88 	bl	8003806 <HAL_SPI_Transmit>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 80012f6:	2101      	movs	r1, #1
 80012f8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80012fc:	f001 f82a 	bl	8002354 <HAL_GPIO_TogglePin>
 8001300:	e78c      	b.n	800121c <SenderReceiver+0x8>
            } else if (strncmp((char*)uart_rx_buffer, "pcr", 3) == 0) {
 8001302:	f107 0314 	add.w	r3, r7, #20
 8001306:	2203      	movs	r2, #3
 8001308:	4929      	ldr	r1, [pc, #164]	@ (80013b0 <SenderReceiver+0x19c>)
 800130a:	4618      	mov	r0, r3
 800130c:	f005 ff73 	bl	80071f6 <strncmp>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d10f      	bne.n	8001336 <SenderReceiver+0x122>
                uint8_t data = 0xFD;
 8001316:	23fd      	movs	r3, #253	@ 0xfd
 8001318:	737b      	strb	r3, [r7, #13]
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800131a:	2101      	movs	r1, #1
 800131c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001320:	f001 f818 	bl	8002354 <HAL_GPIO_TogglePin>
                HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 8001324:	f107 010d 	add.w	r1, r7, #13
 8001328:	f04f 33ff 	mov.w	r3, #4294967295
 800132c:	2201      	movs	r2, #1
 800132e:	481e      	ldr	r0, [pc, #120]	@ (80013a8 <SenderReceiver+0x194>)
 8001330:	f002 fa69 	bl	8003806 <HAL_SPI_Transmit>
 8001334:	e772      	b.n	800121c <SenderReceiver+0x8>
            } else if (strncmp((char*)uart_rx_buffer, "eis", 3) == 0) {
 8001336:	f107 0314 	add.w	r3, r7, #20
 800133a:	2203      	movs	r2, #3
 800133c:	491d      	ldr	r1, [pc, #116]	@ (80013b4 <SenderReceiver+0x1a0>)
 800133e:	4618      	mov	r0, r3
 8001340:	f005 ff59 	bl	80071f6 <strncmp>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d10f      	bne.n	800136a <SenderReceiver+0x156>
                uint8_t data = 0xFB;
 800134a:	23fb      	movs	r3, #251	@ 0xfb
 800134c:	733b      	strb	r3, [r7, #12]
                HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 800134e:	f107 010c 	add.w	r1, r7, #12
 8001352:	f04f 33ff 	mov.w	r3, #4294967295
 8001356:	2201      	movs	r2, #1
 8001358:	4813      	ldr	r0, [pc, #76]	@ (80013a8 <SenderReceiver+0x194>)
 800135a:	f002 fa54 	bl	8003806 <HAL_SPI_Transmit>
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 800135e:	2101      	movs	r1, #1
 8001360:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001364:	f000 fff6 	bl	8002354 <HAL_GPIO_TogglePin>
 8001368:	e758      	b.n	800121c <SenderReceiver+0x8>
            } else if (strncmp((char*)uart_rx_buffer, "hks", 3) == 0) {
 800136a:	f107 0314 	add.w	r3, r7, #20
 800136e:	2203      	movs	r2, #3
 8001370:	4911      	ldr	r1, [pc, #68]	@ (80013b8 <SenderReceiver+0x1a4>)
 8001372:	4618      	mov	r0, r3
 8001374:	f005 ff3f 	bl	80071f6 <strncmp>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	f47f af4e 	bne.w	800121c <SenderReceiver+0x8>
                uint8_t data = 0xF7;
 8001380:	23f7      	movs	r3, #247	@ 0xf7
 8001382:	72fb      	strb	r3, [r7, #11]
                HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_0);
 8001384:	2101      	movs	r1, #1
 8001386:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800138a:	f000 ffe3 	bl	8002354 <HAL_GPIO_TogglePin>
                HAL_SPI_Transmit(&hspi1, &data, 1, HAL_MAX_DELAY);
 800138e:	f107 010b 	add.w	r1, r7, #11
 8001392:	f04f 33ff 	mov.w	r3, #4294967295
 8001396:	2201      	movs	r2, #1
 8001398:	4803      	ldr	r0, [pc, #12]	@ (80013a8 <SenderReceiver+0x194>)
 800139a:	f002 fa34 	bl	8003806 <HAL_SPI_Transmit>
        if (HAL_UART_Receive(&huart1, uart_rx_buffer, 3, HAL_MAX_DELAY) == HAL_OK) {
 800139e:	e73d      	b.n	800121c <SenderReceiver+0x8>
 80013a0:	200010a4 	.word	0x200010a4
 80013a4:	08009098 	.word	0x08009098
 80013a8:	20000fdc 	.word	0x20000fdc
 80013ac:	0800909c 	.word	0x0800909c
 80013b0:	080090a0 	.word	0x080090a0
 80013b4:	080090a4 	.word	0x080090a4
 80013b8:	080090a8 	.word	0x080090a8

080013bc <LD1_thread_entry>:
//
//        tx_thread_sleep(100);
//    }
//}

VOID LD1_thread_entry (ULONG initial_input){
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
    while(1){
        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80013c4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80013c8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013cc:	f000 ffc2 	bl	8002354 <HAL_GPIO_TogglePin>
        tx_thread_sleep(100);
 80013d0:	2064      	movs	r0, #100	@ 0x64
 80013d2:	f004 fa83 	bl	80058dc <_tx_thread_sleep>
        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80013d6:	bf00      	nop
 80013d8:	e7f4      	b.n	80013c4 <LD1_thread_entry+0x8>
	...

080013dc <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void __io_putchar(char ch) {
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	4603      	mov	r3, r0
 80013e4:	71fb      	strb	r3, [r7, #7]

    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 10);
 80013e6:	1df9      	adds	r1, r7, #7
 80013e8:	230a      	movs	r3, #10
 80013ea:	2201      	movs	r2, #1
 80013ec:	4803      	ldr	r0, [pc, #12]	@ (80013fc <__io_putchar+0x20>)
 80013ee:	f003 f87f 	bl	80044f0 <HAL_UART_Transmit>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200010a4 	.word	0x200010a4

08001400 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001404:	f000 fcf5 	bl	8001df2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001408:	f000 f80e 	bl	8001428 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800140c:	f000 f954 	bl	80016b8 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001410:	f000 f906 	bl	8001620 <MX_USART1_UART_Init>
  MX_SPI2_Init();
 8001414:	f000 f8c6 	bl	80015a4 <MX_SPI2_Init>
  MX_SPI1_Init();
 8001418:	f000 f886 	bl	8001528 <MX_SPI1_Init>
  MX_I2C1_Init();
 800141c:	f000 f846 	bl	80014ac <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8001420:	f7ff fef2 	bl	8001208 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <main+0x24>

08001428 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b094      	sub	sp, #80	@ 0x50
 800142c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800142e:	f107 0318 	add.w	r3, r7, #24
 8001432:	2238      	movs	r2, #56	@ 0x38
 8001434:	2100      	movs	r1, #0
 8001436:	4618      	mov	r0, r3
 8001438:	f005 fed5 	bl	80071e6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800143c:	1d3b      	adds	r3, r7, #4
 800143e:	2200      	movs	r2, #0
 8001440:	601a      	str	r2, [r3, #0]
 8001442:	605a      	str	r2, [r3, #4]
 8001444:	609a      	str	r2, [r3, #8]
 8001446:	60da      	str	r2, [r3, #12]
 8001448:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800144a:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800144e:	f001 f8cd 	bl	80025ec <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001452:	2302      	movs	r3, #2
 8001454:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001456:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800145a:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800145c:	2340      	movs	r3, #64	@ 0x40
 800145e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001460:	2300      	movs	r3, #0
 8001462:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001464:	f107 0318 	add.w	r3, r7, #24
 8001468:	4618      	mov	r0, r3
 800146a:	f001 f973 	bl	8002754 <HAL_RCC_OscConfig>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001474:	f000 f99c 	bl	80017b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001478:	230f      	movs	r3, #15
 800147a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800147c:	2301      	movs	r3, #1
 800147e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001484:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001488:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800148a:	2300      	movs	r3, #0
 800148c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800148e:	1d3b      	adds	r3, r7, #4
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f001 fc70 	bl	8002d78 <HAL_RCC_ClockConfig>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800149e:	f000 f987 	bl	80017b0 <Error_Handler>
  }
}
 80014a2:	bf00      	nop
 80014a4:	3750      	adds	r7, #80	@ 0x50
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
	...

080014ac <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001520 <MX_I2C1_Init+0x74>)
 80014b2:	4a1c      	ldr	r2, [pc, #112]	@ (8001524 <MX_I2C1_Init+0x78>)
 80014b4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00000E14;
 80014b6:	4b1a      	ldr	r3, [pc, #104]	@ (8001520 <MX_I2C1_Init+0x74>)
 80014b8:	f640 6214 	movw	r2, #3604	@ 0xe14
 80014bc:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014be:	4b18      	ldr	r3, [pc, #96]	@ (8001520 <MX_I2C1_Init+0x74>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014c4:	4b16      	ldr	r3, [pc, #88]	@ (8001520 <MX_I2C1_Init+0x74>)
 80014c6:	2201      	movs	r2, #1
 80014c8:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014ca:	4b15      	ldr	r3, [pc, #84]	@ (8001520 <MX_I2C1_Init+0x74>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014d0:	4b13      	ldr	r3, [pc, #76]	@ (8001520 <MX_I2C1_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80014d6:	4b12      	ldr	r3, [pc, #72]	@ (8001520 <MX_I2C1_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80014dc:	4b10      	ldr	r3, [pc, #64]	@ (8001520 <MX_I2C1_Init+0x74>)
 80014de:	2200      	movs	r2, #0
 80014e0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001520 <MX_I2C1_Init+0x74>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014e8:	480d      	ldr	r0, [pc, #52]	@ (8001520 <MX_I2C1_Init+0x74>)
 80014ea:	f000 ff4d 	bl	8002388 <HAL_I2C_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014f4:	f000 f95c 	bl	80017b0 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80014f8:	2100      	movs	r1, #0
 80014fa:	4809      	ldr	r0, [pc, #36]	@ (8001520 <MX_I2C1_Init+0x74>)
 80014fc:	f000 ffdf 	bl	80024be <HAL_I2CEx_ConfigAnalogFilter>
 8001500:	4603      	mov	r3, r0
 8001502:	2b00      	cmp	r3, #0
 8001504:	d001      	beq.n	800150a <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8001506:	f000 f953 	bl	80017b0 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800150a:	2100      	movs	r1, #0
 800150c:	4804      	ldr	r0, [pc, #16]	@ (8001520 <MX_I2C1_Init+0x74>)
 800150e:	f001 f821 	bl	8002554 <HAL_I2CEx_ConfigDigitalFilter>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8001518:	f000 f94a 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	bd80      	pop	{r7, pc}
 8001520:	20000f88 	.word	0x20000f88
 8001524:	40005400 	.word	0x40005400

08001528 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800152c:	4b1b      	ldr	r3, [pc, #108]	@ (800159c <MX_SPI1_Init+0x74>)
 800152e:	4a1c      	ldr	r2, [pc, #112]	@ (80015a0 <MX_SPI1_Init+0x78>)
 8001530:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001532:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <MX_SPI1_Init+0x74>)
 8001534:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001538:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800153a:	4b18      	ldr	r3, [pc, #96]	@ (800159c <MX_SPI1_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001540:	4b16      	ldr	r3, [pc, #88]	@ (800159c <MX_SPI1_Init+0x74>)
 8001542:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8001546:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001548:	4b14      	ldr	r3, [pc, #80]	@ (800159c <MX_SPI1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800154e:	4b13      	ldr	r3, [pc, #76]	@ (800159c <MX_SPI1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001554:	4b11      	ldr	r3, [pc, #68]	@ (800159c <MX_SPI1_Init+0x74>)
 8001556:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800155a:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 800155c:	4b0f      	ldr	r3, [pc, #60]	@ (800159c <MX_SPI1_Init+0x74>)
 800155e:	2238      	movs	r2, #56	@ 0x38
 8001560:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001562:	4b0e      	ldr	r3, [pc, #56]	@ (800159c <MX_SPI1_Init+0x74>)
 8001564:	2200      	movs	r2, #0
 8001566:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001568:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <MX_SPI1_Init+0x74>)
 800156a:	2200      	movs	r2, #0
 800156c:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800156e:	4b0b      	ldr	r3, [pc, #44]	@ (800159c <MX_SPI1_Init+0x74>)
 8001570:	2200      	movs	r2, #0
 8001572:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001574:	4b09      	ldr	r3, [pc, #36]	@ (800159c <MX_SPI1_Init+0x74>)
 8001576:	2207      	movs	r2, #7
 8001578:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800157a:	4b08      	ldr	r3, [pc, #32]	@ (800159c <MX_SPI1_Init+0x74>)
 800157c:	2200      	movs	r2, #0
 800157e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <MX_SPI1_Init+0x74>)
 8001582:	2208      	movs	r2, #8
 8001584:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001586:	4805      	ldr	r0, [pc, #20]	@ (800159c <MX_SPI1_Init+0x74>)
 8001588:	f002 f892 	bl	80036b0 <HAL_SPI_Init>
 800158c:	4603      	mov	r3, r0
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001592:	f000 f90d 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001596:	bf00      	nop
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000fdc 	.word	0x20000fdc
 80015a0:	40013000 	.word	0x40013000

080015a4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80015a8:	4b1b      	ldr	r3, [pc, #108]	@ (8001618 <MX_SPI2_Init+0x74>)
 80015aa:	4a1c      	ldr	r2, [pc, #112]	@ (800161c <MX_SPI2_Init+0x78>)
 80015ac:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80015ae:	4b1a      	ldr	r3, [pc, #104]	@ (8001618 <MX_SPI2_Init+0x74>)
 80015b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80015b4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80015b6:	4b18      	ldr	r3, [pc, #96]	@ (8001618 <MX_SPI2_Init+0x74>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80015bc:	4b16      	ldr	r3, [pc, #88]	@ (8001618 <MX_SPI2_Init+0x74>)
 80015be:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80015c2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c4:	4b14      	ldr	r3, [pc, #80]	@ (8001618 <MX_SPI2_Init+0x74>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015ca:	4b13      	ldr	r3, [pc, #76]	@ (8001618 <MX_SPI2_Init+0x74>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80015d0:	4b11      	ldr	r3, [pc, #68]	@ (8001618 <MX_SPI2_Init+0x74>)
 80015d2:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80015d6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80015d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001618 <MX_SPI2_Init+0x74>)
 80015da:	2238      	movs	r2, #56	@ 0x38
 80015dc:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015de:	4b0e      	ldr	r3, [pc, #56]	@ (8001618 <MX_SPI2_Init+0x74>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e4:	4b0c      	ldr	r3, [pc, #48]	@ (8001618 <MX_SPI2_Init+0x74>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001618 <MX_SPI2_Init+0x74>)
 80015ec:	2200      	movs	r2, #0
 80015ee:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 80015f0:	4b09      	ldr	r3, [pc, #36]	@ (8001618 <MX_SPI2_Init+0x74>)
 80015f2:	2207      	movs	r2, #7
 80015f4:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015f6:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <MX_SPI2_Init+0x74>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80015fc:	4b06      	ldr	r3, [pc, #24]	@ (8001618 <MX_SPI2_Init+0x74>)
 80015fe:	2208      	movs	r2, #8
 8001600:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001602:	4805      	ldr	r0, [pc, #20]	@ (8001618 <MX_SPI2_Init+0x74>)
 8001604:	f002 f854 	bl	80036b0 <HAL_SPI_Init>
 8001608:	4603      	mov	r3, r0
 800160a:	2b00      	cmp	r3, #0
 800160c:	d001      	beq.n	8001612 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800160e:	f000 f8cf 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	20001040 	.word	0x20001040
 800161c:	40003800 	.word	0x40003800

08001620 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001624:	4b22      	ldr	r3, [pc, #136]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 8001626:	4a23      	ldr	r2, [pc, #140]	@ (80016b4 <MX_USART1_UART_Init+0x94>)
 8001628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800162a:	4b21      	ldr	r3, [pc, #132]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 800162c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001632:	4b1f      	ldr	r3, [pc, #124]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001638:	4b1d      	ldr	r3, [pc, #116]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 800163a:	2200      	movs	r2, #0
 800163c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800163e:	4b1c      	ldr	r3, [pc, #112]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001644:	4b1a      	ldr	r3, [pc, #104]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 8001646:	220c      	movs	r2, #12
 8001648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800164a:	4b19      	ldr	r3, [pc, #100]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 800164c:	2200      	movs	r2, #0
 800164e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001650:	4b17      	ldr	r3, [pc, #92]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001656:	4b16      	ldr	r3, [pc, #88]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800165c:	4b14      	ldr	r3, [pc, #80]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001662:	4b13      	ldr	r3, [pc, #76]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 8001664:	2200      	movs	r2, #0
 8001666:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001668:	4811      	ldr	r0, [pc, #68]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 800166a:	f002 fef1 	bl	8004450 <HAL_UART_Init>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001674:	f000 f89c 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001678:	2100      	movs	r1, #0
 800167a:	480d      	ldr	r0, [pc, #52]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 800167c:	f003 fde2 	bl	8005244 <HAL_UARTEx_SetTxFifoThreshold>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001686:	f000 f893 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800168a:	2100      	movs	r1, #0
 800168c:	4808      	ldr	r0, [pc, #32]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 800168e:	f003 fe17 	bl	80052c0 <HAL_UARTEx_SetRxFifoThreshold>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001698:	f000 f88a 	bl	80017b0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800169c:	4804      	ldr	r0, [pc, #16]	@ (80016b0 <MX_USART1_UART_Init+0x90>)
 800169e:	f003 fd98 	bl	80051d2 <HAL_UARTEx_DisableFifoMode>
 80016a2:	4603      	mov	r3, r0
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d001      	beq.n	80016ac <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80016a8:	f000 f882 	bl	80017b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200010a4 	.word	0x200010a4
 80016b4:	40013800 	.word	0x40013800

080016b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b088      	sub	sp, #32
 80016bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016be:	f107 030c 	add.w	r3, r7, #12
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ce:	4b2d      	ldr	r3, [pc, #180]	@ (8001784 <MX_GPIO_Init+0xcc>)
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	4a2c      	ldr	r2, [pc, #176]	@ (8001784 <MX_GPIO_Init+0xcc>)
 80016d4:	f043 0304 	orr.w	r3, r3, #4
 80016d8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016da:	4b2a      	ldr	r3, [pc, #168]	@ (8001784 <MX_GPIO_Init+0xcc>)
 80016dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	60bb      	str	r3, [r7, #8]
 80016e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e6:	4b27      	ldr	r3, [pc, #156]	@ (8001784 <MX_GPIO_Init+0xcc>)
 80016e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ea:	4a26      	ldr	r2, [pc, #152]	@ (8001784 <MX_GPIO_Init+0xcc>)
 80016ec:	f043 0301 	orr.w	r3, r3, #1
 80016f0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f2:	4b24      	ldr	r3, [pc, #144]	@ (8001784 <MX_GPIO_Init+0xcc>)
 80016f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	607b      	str	r3, [r7, #4]
 80016fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	4b21      	ldr	r3, [pc, #132]	@ (8001784 <MX_GPIO_Init+0xcc>)
 8001700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001702:	4a20      	ldr	r2, [pc, #128]	@ (8001784 <MX_GPIO_Init+0xcc>)
 8001704:	f043 0302 	orr.w	r3, r3, #2
 8001708:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800170a:	4b1e      	ldr	r3, [pc, #120]	@ (8001784 <MX_GPIO_Init+0xcc>)
 800170c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800170e:	f003 0302 	and.w	r3, r3, #2
 8001712:	603b      	str	r3, [r7, #0]
 8001714:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001716:	2200      	movs	r2, #0
 8001718:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800171c:	481a      	ldr	r0, [pc, #104]	@ (8001788 <MX_GPIO_Init+0xd0>)
 800171e:	f000 fe01 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);
 8001722:	2200      	movs	r2, #0
 8001724:	2101      	movs	r1, #1
 8001726:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800172a:	f000 fdfb 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_SET);
 800172e:	2201      	movs	r2, #1
 8001730:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001734:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001738:	f000 fdf4 	bl	8002324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800173c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001740:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001742:	2301      	movs	r3, #1
 8001744:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001746:	2300      	movs	r3, #0
 8001748:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800174a:	2300      	movs	r3, #0
 800174c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800174e:	f107 030c 	add.w	r3, r7, #12
 8001752:	4619      	mov	r1, r3
 8001754:	480c      	ldr	r0, [pc, #48]	@ (8001788 <MX_GPIO_Init+0xd0>)
 8001756:	f000 fc63 	bl	8002020 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 LD1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD1_Pin;
 800175a:	f244 0301 	movw	r3, #16385	@ 0x4001
 800175e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001760:	2301      	movs	r3, #1
 8001762:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001768:	2300      	movs	r3, #0
 800176a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800176c:	f107 030c 	add.w	r3, r7, #12
 8001770:	4619      	mov	r1, r3
 8001772:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001776:	f000 fc53 	bl	8002020 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800177a:	bf00      	nop
 800177c:	3720      	adds	r7, #32
 800177e:	46bd      	mov	sp, r7
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	40021000 	.word	0x40021000
 8001788:	48000800 	.word	0x48000800

0800178c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a04      	ldr	r2, [pc, #16]	@ (80017ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d101      	bne.n	80017a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800179e:	f000 fb41 	bl	8001e24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80017a2:	bf00      	nop
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40001000 	.word	0x40001000

080017b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b4:	b672      	cpsid	i
}
 80017b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b8:	bf00      	nop
 80017ba:	e7fd      	b.n	80017b8 <Error_Handler+0x8>

080017bc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017c2:	4b0f      	ldr	r3, [pc, #60]	@ (8001800 <HAL_MspInit+0x44>)
 80017c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017c6:	4a0e      	ldr	r2, [pc, #56]	@ (8001800 <HAL_MspInit+0x44>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001800 <HAL_MspInit+0x44>)
 80017d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	607b      	str	r3, [r7, #4]
 80017d8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80017da:	4b09      	ldr	r3, [pc, #36]	@ (8001800 <HAL_MspInit+0x44>)
 80017dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017de:	4a08      	ldr	r2, [pc, #32]	@ (8001800 <HAL_MspInit+0x44>)
 80017e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017e4:	6593      	str	r3, [r2, #88]	@ 0x58
 80017e6:	4b06      	ldr	r3, [pc, #24]	@ (8001800 <HAL_MspInit+0x44>)
 80017e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80017ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017ee:	603b      	str	r3, [r7, #0]
 80017f0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017f2:	f000 ff9f 	bl	8002734 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017f6:	bf00      	nop
 80017f8:	3708      	adds	r7, #8
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bd80      	pop	{r7, pc}
 80017fe:	bf00      	nop
 8001800:	40021000 	.word	0x40021000

08001804 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b0a0      	sub	sp, #128	@ 0x80
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800180c:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001810:	2200      	movs	r2, #0
 8001812:	601a      	str	r2, [r3, #0]
 8001814:	605a      	str	r2, [r3, #4]
 8001816:	609a      	str	r2, [r3, #8]
 8001818:	60da      	str	r2, [r3, #12]
 800181a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800181c:	f107 0318 	add.w	r3, r7, #24
 8001820:	2254      	movs	r2, #84	@ 0x54
 8001822:	2100      	movs	r1, #0
 8001824:	4618      	mov	r0, r3
 8001826:	f005 fcde 	bl	80071e6 <memset>
  if(hi2c->Instance==I2C1)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a2e      	ldr	r2, [pc, #184]	@ (80018e8 <HAL_I2C_MspInit+0xe4>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d154      	bne.n	80018de <HAL_I2C_MspInit+0xda>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001834:	2340      	movs	r3, #64	@ 0x40
 8001836:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001838:	2300      	movs	r3, #0
 800183a:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800183c:	f107 0318 	add.w	r3, r7, #24
 8001840:	4618      	mov	r0, r3
 8001842:	f001 fce7 	bl	8003214 <HAL_RCCEx_PeriphCLKConfig>
 8001846:	4603      	mov	r3, r0
 8001848:	2b00      	cmp	r3, #0
 800184a:	d001      	beq.n	8001850 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 800184c:	f7ff ffb0 	bl	80017b0 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001850:	4b26      	ldr	r3, [pc, #152]	@ (80018ec <HAL_I2C_MspInit+0xe8>)
 8001852:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001854:	4a25      	ldr	r2, [pc, #148]	@ (80018ec <HAL_I2C_MspInit+0xe8>)
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800185c:	4b23      	ldr	r3, [pc, #140]	@ (80018ec <HAL_I2C_MspInit+0xe8>)
 800185e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001860:	f003 0301 	and.w	r3, r3, #1
 8001864:	617b      	str	r3, [r7, #20]
 8001866:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001868:	4b20      	ldr	r3, [pc, #128]	@ (80018ec <HAL_I2C_MspInit+0xe8>)
 800186a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800186c:	4a1f      	ldr	r2, [pc, #124]	@ (80018ec <HAL_I2C_MspInit+0xe8>)
 800186e:	f043 0302 	orr.w	r3, r3, #2
 8001872:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001874:	4b1d      	ldr	r3, [pc, #116]	@ (80018ec <HAL_I2C_MspInit+0xe8>)
 8001876:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	613b      	str	r3, [r7, #16]
 800187e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001880:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001884:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001886:	2312      	movs	r3, #18
 8001888:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001892:	2304      	movs	r3, #4
 8001894:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001896:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800189a:	4619      	mov	r1, r3
 800189c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80018a0:	f000 fbbe 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80018a4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80018a8:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80018aa:	2312      	movs	r3, #18
 80018ac:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b2:	2300      	movs	r3, #0
 80018b4:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80018b6:	2304      	movs	r3, #4
 80018b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ba:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80018be:	4619      	mov	r1, r3
 80018c0:	480b      	ldr	r0, [pc, #44]	@ (80018f0 <HAL_I2C_MspInit+0xec>)
 80018c2:	f000 fbad 	bl	8002020 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80018c6:	4b09      	ldr	r3, [pc, #36]	@ (80018ec <HAL_I2C_MspInit+0xe8>)
 80018c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018ca:	4a08      	ldr	r2, [pc, #32]	@ (80018ec <HAL_I2C_MspInit+0xe8>)
 80018cc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80018d0:	6593      	str	r3, [r2, #88]	@ 0x58
 80018d2:	4b06      	ldr	r3, [pc, #24]	@ (80018ec <HAL_I2C_MspInit+0xe8>)
 80018d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	3780      	adds	r7, #128	@ 0x80
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40005400 	.word	0x40005400
 80018ec:	40021000 	.word	0x40021000
 80018f0:	48000400 	.word	0x48000400

080018f4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08c      	sub	sp, #48	@ 0x30
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018fc:	f107 031c 	add.w	r3, r7, #28
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a3d      	ldr	r2, [pc, #244]	@ (8001a08 <HAL_SPI_MspInit+0x114>)
 8001912:	4293      	cmp	r3, r2
 8001914:	d145      	bne.n	80019a2 <HAL_SPI_MspInit+0xae>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001916:	4b3d      	ldr	r3, [pc, #244]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 8001918:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800191a:	4a3c      	ldr	r2, [pc, #240]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 800191c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001920:	6613      	str	r3, [r2, #96]	@ 0x60
 8001922:	4b3a      	ldr	r3, [pc, #232]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 8001924:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001926:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800192a:	61bb      	str	r3, [r7, #24]
 800192c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192e:	4b37      	ldr	r3, [pc, #220]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 8001930:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001932:	4a36      	ldr	r2, [pc, #216]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800193a:	4b34      	ldr	r3, [pc, #208]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 800193c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001946:	4b31      	ldr	r3, [pc, #196]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 8001948:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800194a:	4a30      	ldr	r2, [pc, #192]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001952:	4b2e      	ldr	r3, [pc, #184]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 8001954:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	613b      	str	r3, [r7, #16]
 800195c:	693b      	ldr	r3, [r7, #16]
    PA4     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800195e:	2310      	movs	r3, #16
 8001960:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001962:	2302      	movs	r3, #2
 8001964:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001966:	2300      	movs	r3, #0
 8001968:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196a:	2300      	movs	r3, #0
 800196c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800196e:	2305      	movs	r3, #5
 8001970:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001972:	f107 031c 	add.w	r3, r7, #28
 8001976:	4619      	mov	r1, r3
 8001978:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800197c:	f000 fb50 	bl	8002020 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001980:	2338      	movs	r3, #56	@ 0x38
 8001982:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	2302      	movs	r3, #2
 8001986:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001988:	2300      	movs	r3, #0
 800198a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198c:	2300      	movs	r3, #0
 800198e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001990:	2305      	movs	r3, #5
 8001992:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001994:	f107 031c 	add.w	r3, r7, #28
 8001998:	4619      	mov	r1, r3
 800199a:	481d      	ldr	r0, [pc, #116]	@ (8001a10 <HAL_SPI_MspInit+0x11c>)
 800199c:	f000 fb40 	bl	8002020 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80019a0:	e02d      	b.n	80019fe <HAL_SPI_MspInit+0x10a>
  else if(hspi->Instance==SPI2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001a14 <HAL_SPI_MspInit+0x120>)
 80019a8:	4293      	cmp	r3, r2
 80019aa:	d128      	bne.n	80019fe <HAL_SPI_MspInit+0x10a>
    __HAL_RCC_SPI2_CLK_ENABLE();
 80019ac:	4b17      	ldr	r3, [pc, #92]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 80019ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b0:	4a16      	ldr	r2, [pc, #88]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 80019b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80019b8:	4b14      	ldr	r3, [pc, #80]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 80019ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c4:	4b11      	ldr	r3, [pc, #68]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 80019c6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019c8:	4a10      	ldr	r2, [pc, #64]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 80019ca:	f043 0302 	orr.w	r3, r3, #2
 80019ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80019d0:	4b0e      	ldr	r3, [pc, #56]	@ (8001a0c <HAL_SPI_MspInit+0x118>)
 80019d2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80019d4:	f003 0302 	and.w	r3, r3, #2
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80019dc:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80019e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ea:	2300      	movs	r3, #0
 80019ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80019ee:	2305      	movs	r3, #5
 80019f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	4619      	mov	r1, r3
 80019f8:	4805      	ldr	r0, [pc, #20]	@ (8001a10 <HAL_SPI_MspInit+0x11c>)
 80019fa:	f000 fb11 	bl	8002020 <HAL_GPIO_Init>
}
 80019fe:	bf00      	nop
 8001a00:	3730      	adds	r7, #48	@ 0x30
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}
 8001a06:	bf00      	nop
 8001a08:	40013000 	.word	0x40013000
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	48000400 	.word	0x48000400
 8001a14:	40003800 	.word	0x40003800

08001a18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	b09e      	sub	sp, #120	@ 0x78
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a20:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]
 8001a28:	605a      	str	r2, [r3, #4]
 8001a2a:	609a      	str	r2, [r3, #8]
 8001a2c:	60da      	str	r2, [r3, #12]
 8001a2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a30:	f107 0310 	add.w	r3, r7, #16
 8001a34:	2254      	movs	r2, #84	@ 0x54
 8001a36:	2100      	movs	r1, #0
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f005 fbd4 	bl	80071e6 <memset>
  if(huart->Instance==USART1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	4a1f      	ldr	r2, [pc, #124]	@ (8001ac0 <HAL_UART_MspInit+0xa8>)
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d137      	bne.n	8001ab8 <HAL_UART_MspInit+0xa0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a50:	f107 0310 	add.w	r3, r7, #16
 8001a54:	4618      	mov	r0, r3
 8001a56:	f001 fbdd 	bl	8003214 <HAL_RCCEx_PeriphCLKConfig>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001a60:	f7ff fea6 	bl	80017b0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a64:	4b17      	ldr	r3, [pc, #92]	@ (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a68:	4a16      	ldr	r2, [pc, #88]	@ (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001a6e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001a70:	4b14      	ldr	r3, [pc, #80]	@ (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a74:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a78:	60fb      	str	r3, [r7, #12]
 8001a7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a7c:	4b11      	ldr	r3, [pc, #68]	@ (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a80:	4a10      	ldr	r2, [pc, #64]	@ (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a82:	f043 0301 	orr.w	r3, r3, #1
 8001a86:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001a88:	4b0e      	ldr	r3, [pc, #56]	@ (8001ac4 <HAL_UART_MspInit+0xac>)
 8001a8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a8c:	f003 0301 	and.w	r3, r3, #1
 8001a90:	60bb      	str	r3, [r7, #8]
 8001a92:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001a94:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001a98:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a9a:	2302      	movs	r3, #2
 8001a9c:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aa6:	2307      	movs	r3, #7
 8001aa8:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aaa:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8001aae:	4619      	mov	r1, r3
 8001ab0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001ab4:	f000 fab4 	bl	8002020 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ab8:	bf00      	nop
 8001aba:	3778      	adds	r7, #120	@ 0x78
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}
 8001ac0:	40013800 	.word	0x40013800
 8001ac4:	40021000 	.word	0x40021000

08001ac8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b08c      	sub	sp, #48	@ 0x30
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8001b90 <HAL_InitTick+0xc8>)
 8001ada:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001adc:	4a2c      	ldr	r2, [pc, #176]	@ (8001b90 <HAL_InitTick+0xc8>)
 8001ade:	f043 0310 	orr.w	r3, r3, #16
 8001ae2:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ae4:	4b2a      	ldr	r3, [pc, #168]	@ (8001b90 <HAL_InitTick+0xc8>)
 8001ae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	60bb      	str	r3, [r7, #8]
 8001aee:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001af0:	f107 020c 	add.w	r2, r7, #12
 8001af4:	f107 0310 	add.w	r3, r7, #16
 8001af8:	4611      	mov	r1, r2
 8001afa:	4618      	mov	r0, r3
 8001afc:	f001 fb12 	bl	8003124 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8001b00:	f001 fae4 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 8001b04:	4603      	mov	r3, r0
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b0c:	4a21      	ldr	r2, [pc, #132]	@ (8001b94 <HAL_InitTick+0xcc>)
 8001b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001b12:	0c9b      	lsrs	r3, r3, #18
 8001b14:	3b01      	subs	r3, #1
 8001b16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001b18:	4b1f      	ldr	r3, [pc, #124]	@ (8001b98 <HAL_InitTick+0xd0>)
 8001b1a:	4a20      	ldr	r2, [pc, #128]	@ (8001b9c <HAL_InitTick+0xd4>)
 8001b1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001b1e:	4b1e      	ldr	r3, [pc, #120]	@ (8001b98 <HAL_InitTick+0xd0>)
 8001b20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001b24:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b26:	4a1c      	ldr	r2, [pc, #112]	@ (8001b98 <HAL_InitTick+0xd0>)
 8001b28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b2a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001b2c:	4b1a      	ldr	r3, [pc, #104]	@ (8001b98 <HAL_InitTick+0xd0>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b32:	4b19      	ldr	r3, [pc, #100]	@ (8001b98 <HAL_InitTick+0xd0>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001b38:	4817      	ldr	r0, [pc, #92]	@ (8001b98 <HAL_InitTick+0xd0>)
 8001b3a:	f002 f93d 	bl	8003db8 <HAL_TIM_Base_Init>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001b44:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d11b      	bne.n	8001b84 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001b4c:	4812      	ldr	r0, [pc, #72]	@ (8001b98 <HAL_InitTick+0xd0>)
 8001b4e:	f002 f995 	bl	8003e7c <HAL_TIM_Base_Start_IT>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001b58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d111      	bne.n	8001b84 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b60:	2036      	movs	r0, #54	@ 0x36
 8001b62:	f000 fa4f 	bl	8002004 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	2b0f      	cmp	r3, #15
 8001b6a:	d808      	bhi.n	8001b7e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	6879      	ldr	r1, [r7, #4]
 8001b70:	2036      	movs	r0, #54	@ 0x36
 8001b72:	f000 fa2d 	bl	8001fd0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001b76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ba0 <HAL_InitTick+0xd8>)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6013      	str	r3, [r2, #0]
 8001b7c:	e002      	b.n	8001b84 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001b84:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001b88:	4618      	mov	r0, r3
 8001b8a:	3730      	adds	r7, #48	@ 0x30
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40021000 	.word	0x40021000
 8001b94:	431bde83 	.word	0x431bde83
 8001b98:	20001138 	.word	0x20001138
 8001b9c:	40001000 	.word	0x40001000
 8001ba0:	20000004 	.word	0x20000004

08001ba4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001ba8:	bf00      	nop
 8001baa:	e7fd      	b.n	8001ba8 <NMI_Handler+0x4>

08001bac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001bac:	b480      	push	{r7}
 8001bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001bb0:	bf00      	nop
 8001bb2:	e7fd      	b.n	8001bb0 <HardFault_Handler+0x4>

08001bb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001bb8:	bf00      	nop
 8001bba:	e7fd      	b.n	8001bb8 <MemManage_Handler+0x4>

08001bbc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001bc0:	bf00      	nop
 8001bc2:	e7fd      	b.n	8001bc0 <BusFault_Handler+0x4>

08001bc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001bc4:	b480      	push	{r7}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001bc8:	bf00      	nop
 8001bca:	e7fd      	b.n	8001bc8 <UsageFault_Handler+0x4>

08001bcc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
	...

08001bdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001be0:	4802      	ldr	r0, [pc, #8]	@ (8001bec <TIM6_DAC_IRQHandler+0x10>)
 8001be2:	f002 f9c3 	bl	8003f6c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	20001138 	.word	0x20001138

08001bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return 1;
 8001bf4:	2301      	movs	r3, #1
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr

08001c00 <_kill>:

int _kill(int pid, int sig)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b082      	sub	sp, #8
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c0a:	f005 fb51 	bl	80072b0 <__errno>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2216      	movs	r2, #22
 8001c12:	601a      	str	r2, [r3, #0]
  return -1;
 8001c14:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3708      	adds	r7, #8
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <_exit>:

void _exit (int status)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001c28:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2c:	6878      	ldr	r0, [r7, #4]
 8001c2e:	f7ff ffe7 	bl	8001c00 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001c32:	bf00      	nop
 8001c34:	e7fd      	b.n	8001c32 <_exit+0x12>

08001c36 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e00a      	b.n	8001c5e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c48:	f3af 8000 	nop.w
 8001c4c:	4601      	mov	r1, r0
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	1c5a      	adds	r2, r3, #1
 8001c52:	60ba      	str	r2, [r7, #8]
 8001c54:	b2ca      	uxtb	r2, r1
 8001c56:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c58:	697b      	ldr	r3, [r7, #20]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	617b      	str	r3, [r7, #20]
 8001c5e:	697a      	ldr	r2, [r7, #20]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	429a      	cmp	r2, r3
 8001c64:	dbf0      	blt.n	8001c48 <_read+0x12>
  }

  return len;
 8001c66:	687b      	ldr	r3, [r7, #4]
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b086      	sub	sp, #24
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	60f8      	str	r0, [r7, #12]
 8001c78:	60b9      	str	r1, [r7, #8]
 8001c7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	617b      	str	r3, [r7, #20]
 8001c80:	e009      	b.n	8001c96 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	1c5a      	adds	r2, r3, #1
 8001c86:	60ba      	str	r2, [r7, #8]
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fba6 	bl	80013dc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	3301      	adds	r3, #1
 8001c94:	617b      	str	r3, [r7, #20]
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	dbf1      	blt.n	8001c82 <_write+0x12>
  }
  return len;
 8001c9e:	687b      	ldr	r3, [r7, #4]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3718      	adds	r7, #24
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <_close>:

int _close(int file)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b083      	sub	sp, #12
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001cb0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cb4:	4618      	mov	r0, r3
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001cd0:	605a      	str	r2, [r3, #4]
  return 0;
 8001cd2:	2300      	movs	r3, #0
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	370c      	adds	r7, #12
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cde:	4770      	bx	lr

08001ce0 <_isatty>:

int _isatty(int file)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ce8:	2301      	movs	r3, #1
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b085      	sub	sp, #20
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d02:	2300      	movs	r3, #0
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	3714      	adds	r7, #20
 8001d08:	46bd      	mov	sp, r7
 8001d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0e:	4770      	bx	lr

08001d10 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d18:	4a14      	ldr	r2, [pc, #80]	@ (8001d6c <_sbrk+0x5c>)
 8001d1a:	4b15      	ldr	r3, [pc, #84]	@ (8001d70 <_sbrk+0x60>)
 8001d1c:	1ad3      	subs	r3, r2, r3
 8001d1e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d20:	697b      	ldr	r3, [r7, #20]
 8001d22:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d24:	4b13      	ldr	r3, [pc, #76]	@ (8001d74 <_sbrk+0x64>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d102      	bne.n	8001d32 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d2c:	4b11      	ldr	r3, [pc, #68]	@ (8001d74 <_sbrk+0x64>)
 8001d2e:	4a12      	ldr	r2, [pc, #72]	@ (8001d78 <_sbrk+0x68>)
 8001d30:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d32:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <_sbrk+0x64>)
 8001d34:	681a      	ldr	r2, [r3, #0]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d207      	bcs.n	8001d50 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d40:	f005 fab6 	bl	80072b0 <__errno>
 8001d44:	4603      	mov	r3, r0
 8001d46:	220c      	movs	r2, #12
 8001d48:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4e:	e009      	b.n	8001d64 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d50:	4b08      	ldr	r3, [pc, #32]	@ (8001d74 <_sbrk+0x64>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d56:	4b07      	ldr	r3, [pc, #28]	@ (8001d74 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	4a05      	ldr	r2, [pc, #20]	@ (8001d74 <_sbrk+0x64>)
 8001d60:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d62:	68fb      	ldr	r3, [r7, #12]
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	3718      	adds	r7, #24
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}
 8001d6c:	20020000 	.word	0x20020000
 8001d70:	00000400 	.word	0x00000400
 8001d74:	20001184 	.word	0x20001184
 8001d78:	20001918 	.word	0x20001918

08001d7c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001d80:	4b06      	ldr	r3, [pc, #24]	@ (8001d9c <SystemInit+0x20>)
 8001d82:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001d86:	4a05      	ldr	r2, [pc, #20]	@ (8001d9c <SystemInit+0x20>)
 8001d88:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001d8c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d90:	bf00      	nop
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	e000ed00 	.word	0xe000ed00

08001da0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001da0:	480d      	ldr	r0, [pc, #52]	@ (8001dd8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001da2:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001da4:	f7ff ffea 	bl	8001d7c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001da8:	480c      	ldr	r0, [pc, #48]	@ (8001ddc <LoopForever+0x6>)
  ldr r1, =_edata
 8001daa:	490d      	ldr	r1, [pc, #52]	@ (8001de0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001dac:	4a0d      	ldr	r2, [pc, #52]	@ (8001de4 <LoopForever+0xe>)
  movs r3, #0
 8001dae:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001db0:	e002      	b.n	8001db8 <LoopCopyDataInit>

08001db2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001db2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001db4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001db6:	3304      	adds	r3, #4

08001db8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001db8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dbc:	d3f9      	bcc.n	8001db2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dbe:	4a0a      	ldr	r2, [pc, #40]	@ (8001de8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001dc0:	4c0a      	ldr	r4, [pc, #40]	@ (8001dec <LoopForever+0x16>)
  movs r3, #0
 8001dc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dc4:	e001      	b.n	8001dca <LoopFillZerobss>

08001dc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dc8:	3204      	adds	r2, #4

08001dca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dcc:	d3fb      	bcc.n	8001dc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dce:	f005 fa75 	bl	80072bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001dd2:	f7ff fb15 	bl	8001400 <main>

08001dd6 <LoopForever>:

LoopForever:
    b LoopForever
 8001dd6:	e7fe      	b.n	8001dd6 <LoopForever>
  ldr   r0, =_estack
 8001dd8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ddc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de0:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001de4:	08009480 	.word	0x08009480
  ldr r2, =_sbss
 8001de8:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001dec:	20001918 	.word	0x20001918

08001df0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001df0:	e7fe      	b.n	8001df0 <ADC1_2_IRQHandler>

08001df2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b082      	sub	sp, #8
 8001df6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dfc:	2003      	movs	r0, #3
 8001dfe:	f000 f8dc 	bl	8001fba <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001e02:	200f      	movs	r0, #15
 8001e04:	f7ff fe60 	bl	8001ac8 <HAL_InitTick>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d002      	beq.n	8001e14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001e0e:	2301      	movs	r3, #1
 8001e10:	71fb      	strb	r3, [r7, #7]
 8001e12:	e001      	b.n	8001e18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001e14:	f7ff fcd2 	bl	80017bc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001e18:	79fb      	ldrb	r3, [r7, #7]

}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3708      	adds	r7, #8
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}
	...

08001e24 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e28:	4b05      	ldr	r3, [pc, #20]	@ (8001e40 <HAL_IncTick+0x1c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b05      	ldr	r3, [pc, #20]	@ (8001e44 <HAL_IncTick+0x20>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4413      	add	r3, r2
 8001e32:	4a03      	ldr	r2, [pc, #12]	@ (8001e40 <HAL_IncTick+0x1c>)
 8001e34:	6013      	str	r3, [r2, #0]
}
 8001e36:	bf00      	nop
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr
 8001e40:	20001188 	.word	0x20001188
 8001e44:	20000008 	.word	0x20000008

08001e48 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e48:	b480      	push	{r7}
 8001e4a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e4c:	4b03      	ldr	r3, [pc, #12]	@ (8001e5c <HAL_GetTick+0x14>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
}
 8001e50:	4618      	mov	r0, r3
 8001e52:	46bd      	mov	sp, r7
 8001e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e58:	4770      	bx	lr
 8001e5a:	bf00      	nop
 8001e5c:	20001188 	.word	0x20001188

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e92:	4a04      	ldr	r2, [pc, #16]	@ (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	60d3      	str	r3, [r2, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db0b      	blt.n	8001eee <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4907      	ldr	r1, [pc, #28]	@ (8001efc <__NVIC_EnableIRQ+0x38>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db0a      	blt.n	8001f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	490c      	ldr	r1, [pc, #48]	@ (8001f4c <__NVIC_SetPriority+0x4c>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f28:	e00a      	b.n	8001f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4908      	ldr	r1, [pc, #32]	@ (8001f50 <__NVIC_SetPriority+0x50>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3b04      	subs	r3, #4
 8001f38:	0112      	lsls	r2, r2, #4
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	761a      	strb	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	@ 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f1c3 0307 	rsb	r3, r3, #7
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf28      	it	cs
 8001f72:	2304      	movcs	r3, #4
 8001f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d902      	bls.n	8001f84 <NVIC_EncodePriority+0x30>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3b03      	subs	r3, #3
 8001f82:	e000      	b.n	8001f86 <NVIC_EncodePriority+0x32>
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	4313      	orrs	r3, r2
         );
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	@ 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fba:	b580      	push	{r7, lr}
 8001fbc:	b082      	sub	sp, #8
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f7ff ff4c 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 8001fc8:	bf00      	nop
 8001fca:	3708      	adds	r7, #8
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}

08001fd0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b086      	sub	sp, #24
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	4603      	mov	r3, r0
 8001fd8:	60b9      	str	r1, [r7, #8]
 8001fda:	607a      	str	r2, [r7, #4]
 8001fdc:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001fde:	f7ff ff63 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 8001fe2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	68b9      	ldr	r1, [r7, #8]
 8001fe8:	6978      	ldr	r0, [r7, #20]
 8001fea:	f7ff ffb3 	bl	8001f54 <NVIC_EncodePriority>
 8001fee:	4602      	mov	r2, r0
 8001ff0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ff4:	4611      	mov	r1, r2
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f7ff ff82 	bl	8001f00 <__NVIC_SetPriority>
}
 8001ffc:	bf00      	nop
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002004:	b580      	push	{r7, lr}
 8002006:	b082      	sub	sp, #8
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800200e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff ff56 	bl	8001ec4 <__NVIC_EnableIRQ>
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}

08002020 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002020:	b480      	push	{r7}
 8002022:	b087      	sub	sp, #28
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]
 8002028:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800202a:	2300      	movs	r3, #0
 800202c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800202e:	e15a      	b.n	80022e6 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681a      	ldr	r2, [r3, #0]
 8002034:	2101      	movs	r1, #1
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	fa01 f303 	lsl.w	r3, r1, r3
 800203c:	4013      	ands	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2b00      	cmp	r3, #0
 8002044:	f000 814c 	beq.w	80022e0 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002048:	683b      	ldr	r3, [r7, #0]
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 0303 	and.w	r3, r3, #3
 8002050:	2b01      	cmp	r3, #1
 8002052:	d005      	beq.n	8002060 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800205c:	2b02      	cmp	r3, #2
 800205e:	d130      	bne.n	80020c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	697b      	ldr	r3, [r7, #20]
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	693a      	ldr	r2, [r7, #16]
 8002086:	4313      	orrs	r3, r2
 8002088:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	693a      	ldr	r2, [r7, #16]
 800208e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002096:	2201      	movs	r2, #1
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43db      	mvns	r3, r3
 80020a0:	693a      	ldr	r2, [r7, #16]
 80020a2:	4013      	ands	r3, r2
 80020a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	685b      	ldr	r3, [r3, #4]
 80020aa:	091b      	lsrs	r3, r3, #4
 80020ac:	f003 0201 	and.w	r2, r3, #1
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	fa02 f303 	lsl.w	r3, r2, r3
 80020b6:	693a      	ldr	r2, [r7, #16]
 80020b8:	4313      	orrs	r3, r2
 80020ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	693a      	ldr	r2, [r7, #16]
 80020c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	f003 0303 	and.w	r3, r3, #3
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d017      	beq.n	80020fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80020d4:	697b      	ldr	r3, [r7, #20]
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	2203      	movs	r2, #3
 80020da:	fa02 f303 	lsl.w	r3, r2, r3
 80020de:	43db      	mvns	r3, r3
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	4013      	ands	r3, r2
 80020e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	693a      	ldr	r2, [r7, #16]
 80020fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	f003 0303 	and.w	r3, r3, #3
 8002106:	2b02      	cmp	r3, #2
 8002108:	d123      	bne.n	8002152 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	08da      	lsrs	r2, r3, #3
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	3208      	adds	r2, #8
 8002112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002116:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	f003 0307 	and.w	r3, r3, #7
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	691a      	ldr	r2, [r3, #16]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f003 0307 	and.w	r3, r3, #7
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	fa02 f303 	lsl.w	r3, r2, r3
 800213e:	693a      	ldr	r2, [r7, #16]
 8002140:	4313      	orrs	r3, r2
 8002142:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	08da      	lsrs	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	3208      	adds	r2, #8
 800214c:	6939      	ldr	r1, [r7, #16]
 800214e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	005b      	lsls	r3, r3, #1
 800215c:	2203      	movs	r2, #3
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	43db      	mvns	r3, r3
 8002164:	693a      	ldr	r2, [r7, #16]
 8002166:	4013      	ands	r3, r2
 8002168:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f003 0203 	and.w	r2, r3, #3
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	005b      	lsls	r3, r3, #1
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	693a      	ldr	r2, [r7, #16]
 800217c:	4313      	orrs	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	693a      	ldr	r2, [r7, #16]
 8002184:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800218e:	2b00      	cmp	r3, #0
 8002190:	f000 80a6 	beq.w	80022e0 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002194:	4b5b      	ldr	r3, [pc, #364]	@ (8002304 <HAL_GPIO_Init+0x2e4>)
 8002196:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002198:	4a5a      	ldr	r2, [pc, #360]	@ (8002304 <HAL_GPIO_Init+0x2e4>)
 800219a:	f043 0301 	orr.w	r3, r3, #1
 800219e:	6613      	str	r3, [r2, #96]	@ 0x60
 80021a0:	4b58      	ldr	r3, [pc, #352]	@ (8002304 <HAL_GPIO_Init+0x2e4>)
 80021a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80021a4:	f003 0301 	and.w	r3, r3, #1
 80021a8:	60bb      	str	r3, [r7, #8]
 80021aa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80021ac:	4a56      	ldr	r2, [pc, #344]	@ (8002308 <HAL_GPIO_Init+0x2e8>)
 80021ae:	697b      	ldr	r3, [r7, #20]
 80021b0:	089b      	lsrs	r3, r3, #2
 80021b2:	3302      	adds	r3, #2
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	f003 0303 	and.w	r3, r3, #3
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	220f      	movs	r2, #15
 80021c4:	fa02 f303 	lsl.w	r3, r2, r3
 80021c8:	43db      	mvns	r3, r3
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4013      	ands	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80021d6:	d01f      	beq.n	8002218 <HAL_GPIO_Init+0x1f8>
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	4a4c      	ldr	r2, [pc, #304]	@ (800230c <HAL_GPIO_Init+0x2ec>)
 80021dc:	4293      	cmp	r3, r2
 80021de:	d019      	beq.n	8002214 <HAL_GPIO_Init+0x1f4>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a4b      	ldr	r2, [pc, #300]	@ (8002310 <HAL_GPIO_Init+0x2f0>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d013      	beq.n	8002210 <HAL_GPIO_Init+0x1f0>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a4a      	ldr	r2, [pc, #296]	@ (8002314 <HAL_GPIO_Init+0x2f4>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d00d      	beq.n	800220c <HAL_GPIO_Init+0x1ec>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a49      	ldr	r2, [pc, #292]	@ (8002318 <HAL_GPIO_Init+0x2f8>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d007      	beq.n	8002208 <HAL_GPIO_Init+0x1e8>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a48      	ldr	r2, [pc, #288]	@ (800231c <HAL_GPIO_Init+0x2fc>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d101      	bne.n	8002204 <HAL_GPIO_Init+0x1e4>
 8002200:	2305      	movs	r3, #5
 8002202:	e00a      	b.n	800221a <HAL_GPIO_Init+0x1fa>
 8002204:	2306      	movs	r3, #6
 8002206:	e008      	b.n	800221a <HAL_GPIO_Init+0x1fa>
 8002208:	2304      	movs	r3, #4
 800220a:	e006      	b.n	800221a <HAL_GPIO_Init+0x1fa>
 800220c:	2303      	movs	r3, #3
 800220e:	e004      	b.n	800221a <HAL_GPIO_Init+0x1fa>
 8002210:	2302      	movs	r3, #2
 8002212:	e002      	b.n	800221a <HAL_GPIO_Init+0x1fa>
 8002214:	2301      	movs	r3, #1
 8002216:	e000      	b.n	800221a <HAL_GPIO_Init+0x1fa>
 8002218:	2300      	movs	r3, #0
 800221a:	697a      	ldr	r2, [r7, #20]
 800221c:	f002 0203 	and.w	r2, r2, #3
 8002220:	0092      	lsls	r2, r2, #2
 8002222:	4093      	lsls	r3, r2
 8002224:	693a      	ldr	r2, [r7, #16]
 8002226:	4313      	orrs	r3, r2
 8002228:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800222a:	4937      	ldr	r1, [pc, #220]	@ (8002308 <HAL_GPIO_Init+0x2e8>)
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	089b      	lsrs	r3, r3, #2
 8002230:	3302      	adds	r3, #2
 8002232:	693a      	ldr	r2, [r7, #16]
 8002234:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002238:	4b39      	ldr	r3, [pc, #228]	@ (8002320 <HAL_GPIO_Init+0x300>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	43db      	mvns	r3, r3
 8002242:	693a      	ldr	r2, [r7, #16]
 8002244:	4013      	ands	r3, r2
 8002246:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8002254:	693a      	ldr	r2, [r7, #16]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800225c:	4a30      	ldr	r2, [pc, #192]	@ (8002320 <HAL_GPIO_Init+0x300>)
 800225e:	693b      	ldr	r3, [r7, #16]
 8002260:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8002262:	4b2f      	ldr	r3, [pc, #188]	@ (8002320 <HAL_GPIO_Init+0x300>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	43db      	mvns	r3, r3
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	4013      	ands	r3, r2
 8002270:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	685b      	ldr	r3, [r3, #4]
 8002276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800227a:	2b00      	cmp	r3, #0
 800227c:	d003      	beq.n	8002286 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800227e:	693a      	ldr	r2, [r7, #16]
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4313      	orrs	r3, r2
 8002284:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002286:	4a26      	ldr	r2, [pc, #152]	@ (8002320 <HAL_GPIO_Init+0x300>)
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800228c:	4b24      	ldr	r3, [pc, #144]	@ (8002320 <HAL_GPIO_Init+0x300>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	43db      	mvns	r3, r3
 8002296:	693a      	ldr	r2, [r7, #16]
 8002298:	4013      	ands	r3, r2
 800229a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d003      	beq.n	80022b0 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80022b0:	4a1b      	ldr	r2, [pc, #108]	@ (8002320 <HAL_GPIO_Init+0x300>)
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80022b6:	4b1a      	ldr	r3, [pc, #104]	@ (8002320 <HAL_GPIO_Init+0x300>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	43db      	mvns	r3, r3
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	4013      	ands	r3, r2
 80022c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d003      	beq.n	80022da <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 80022d2:	693a      	ldr	r2, [r7, #16]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	4313      	orrs	r3, r2
 80022d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80022da:	4a11      	ldr	r2, [pc, #68]	@ (8002320 <HAL_GPIO_Init+0x300>)
 80022dc:	693b      	ldr	r3, [r7, #16]
 80022de:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	3301      	adds	r3, #1
 80022e4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	681a      	ldr	r2, [r3, #0]
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	fa22 f303 	lsr.w	r3, r2, r3
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	f47f ae9d 	bne.w	8002030 <HAL_GPIO_Init+0x10>
  }
}
 80022f6:	bf00      	nop
 80022f8:	bf00      	nop
 80022fa:	371c      	adds	r7, #28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002302:	4770      	bx	lr
 8002304:	40021000 	.word	0x40021000
 8002308:	40010000 	.word	0x40010000
 800230c:	48000400 	.word	0x48000400
 8002310:	48000800 	.word	0x48000800
 8002314:	48000c00 	.word	0x48000c00
 8002318:	48001000 	.word	0x48001000
 800231c:	48001400 	.word	0x48001400
 8002320:	40010400 	.word	0x40010400

08002324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002324:	b480      	push	{r7}
 8002326:	b083      	sub	sp, #12
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	460b      	mov	r3, r1
 800232e:	807b      	strh	r3, [r7, #2]
 8002330:	4613      	mov	r3, r2
 8002332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002334:	787b      	ldrb	r3, [r7, #1]
 8002336:	2b00      	cmp	r3, #0
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800233a:	887a      	ldrh	r2, [r7, #2]
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002340:	e002      	b.n	8002348 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002342:	887a      	ldrh	r2, [r7, #2]
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002354:	b480      	push	{r7}
 8002356:	b085      	sub	sp, #20
 8002358:	af00      	add	r7, sp, #0
 800235a:	6078      	str	r0, [r7, #4]
 800235c:	460b      	mov	r3, r1
 800235e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	695b      	ldr	r3, [r3, #20]
 8002364:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002366:	887a      	ldrh	r2, [r7, #2]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	4013      	ands	r3, r2
 800236c:	041a      	lsls	r2, r3, #16
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	43d9      	mvns	r1, r3
 8002372:	887b      	ldrh	r3, [r7, #2]
 8002374:	400b      	ands	r3, r1
 8002376:	431a      	orrs	r2, r3
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	619a      	str	r2, [r3, #24]
}
 800237c:	bf00      	nop
 800237e:	3714      	adds	r7, #20
 8002380:	46bd      	mov	sp, r7
 8002382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002386:	4770      	bx	lr

08002388 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002388:	b580      	push	{r7, lr}
 800238a:	b082      	sub	sp, #8
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e08d      	b.n	80024b6 <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d106      	bne.n	80023b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2200      	movs	r2, #0
 80023aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7ff fa28 	bl	8001804 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	2224      	movs	r2, #36	@ 0x24
 80023b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f022 0201 	bic.w	r2, r2, #1
 80023ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	685a      	ldr	r2, [r3, #4]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80023d8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80023e8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	2b01      	cmp	r3, #1
 80023f0:	d107      	bne.n	8002402 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	689a      	ldr	r2, [r3, #8]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	e006      	b.n	8002410 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689a      	ldr	r2, [r3, #8]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800240e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	68db      	ldr	r3, [r3, #12]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d108      	bne.n	800242a <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	685a      	ldr	r2, [r3, #4]
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002426:	605a      	str	r2, [r3, #4]
 8002428:	e007      	b.n	800243a <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685a      	ldr	r2, [r3, #4]
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002438:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	685b      	ldr	r3, [r3, #4]
 8002440:	687a      	ldr	r2, [r7, #4]
 8002442:	6812      	ldr	r2, [r2, #0]
 8002444:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002448:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800244c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	68da      	ldr	r2, [r3, #12]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800245c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	691a      	ldr	r2, [r3, #16]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	430a      	orrs	r2, r1
 8002476:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	69d9      	ldr	r1, [r3, #28]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a1a      	ldr	r2, [r3, #32]
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	430a      	orrs	r2, r1
 8002486:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	681a      	ldr	r2, [r3, #0]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f042 0201 	orr.w	r2, r2, #1
 8002496:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2200      	movs	r2, #0
 800249c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	2200      	movs	r2, #0
 80024aa:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80024b4:	2300      	movs	r3, #0
}
 80024b6:	4618      	mov	r0, r3
 80024b8:	3708      	adds	r7, #8
 80024ba:	46bd      	mov	sp, r7
 80024bc:	bd80      	pop	{r7, pc}

080024be <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024be:	b480      	push	{r7}
 80024c0:	b083      	sub	sp, #12
 80024c2:	af00      	add	r7, sp, #0
 80024c4:	6078      	str	r0, [r7, #4]
 80024c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80024ce:	b2db      	uxtb	r3, r3
 80024d0:	2b20      	cmp	r3, #32
 80024d2:	d138      	bne.n	8002546 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80024da:	2b01      	cmp	r3, #1
 80024dc:	d101      	bne.n	80024e2 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80024de:	2302      	movs	r3, #2
 80024e0:	e032      	b.n	8002548 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2201      	movs	r2, #1
 80024e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2224      	movs	r2, #36	@ 0x24
 80024ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	681a      	ldr	r2, [r3, #0]
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f022 0201 	bic.w	r2, r2, #1
 8002500:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	681a      	ldr	r2, [r3, #0]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8002510:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6819      	ldr	r1, [r3, #0]
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	683a      	ldr	r2, [r7, #0]
 800251e:	430a      	orrs	r2, r1
 8002520:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	681a      	ldr	r2, [r3, #0]
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	f042 0201 	orr.w	r2, r2, #1
 8002530:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2220      	movs	r2, #32
 8002536:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2200      	movs	r2, #0
 800253e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002542:	2300      	movs	r3, #0
 8002544:	e000      	b.n	8002548 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8002546:	2302      	movs	r3, #2
  }
}
 8002548:	4618      	mov	r0, r3
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
 800255c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b20      	cmp	r3, #32
 8002568:	d139      	bne.n	80025de <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002570:	2b01      	cmp	r3, #1
 8002572:	d101      	bne.n	8002578 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8002574:	2302      	movs	r3, #2
 8002576:	e033      	b.n	80025e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2201      	movs	r2, #1
 800257c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2224      	movs	r2, #36	@ 0x24
 8002584:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 0201 	bic.w	r2, r2, #1
 8002596:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80025a0:	68fb      	ldr	r3, [r7, #12]
 80025a2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80025a6:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	021b      	lsls	r3, r3, #8
 80025ac:	68fa      	ldr	r2, [r7, #12]
 80025ae:	4313      	orrs	r3, r2
 80025b0:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f042 0201 	orr.w	r2, r2, #1
 80025c8:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	2220      	movs	r2, #32
 80025ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80025da:	2300      	movs	r3, #0
 80025dc:	e000      	b.n	80025e0 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80025de:	2302      	movs	r3, #2
  }
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3714      	adds	r7, #20
 80025e4:	46bd      	mov	sp, r7
 80025e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ea:	4770      	bx	lr

080025ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b085      	sub	sp, #20
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d141      	bne.n	800267e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80025fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002602:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002606:	d131      	bne.n	800266c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002608:	4b47      	ldr	r3, [pc, #284]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800260a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800260e:	4a46      	ldr	r2, [pc, #280]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002614:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002618:	4b43      	ldr	r3, [pc, #268]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002620:	4a41      	ldr	r2, [pc, #260]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002622:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002626:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002628:	4b40      	ldr	r3, [pc, #256]	@ (800272c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	2232      	movs	r2, #50	@ 0x32
 800262e:	fb02 f303 	mul.w	r3, r2, r3
 8002632:	4a3f      	ldr	r2, [pc, #252]	@ (8002730 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002634:	fba2 2303 	umull	r2, r3, r2, r3
 8002638:	0c9b      	lsrs	r3, r3, #18
 800263a:	3301      	adds	r3, #1
 800263c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800263e:	e002      	b.n	8002646 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	3b01      	subs	r3, #1
 8002644:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002646:	4b38      	ldr	r3, [pc, #224]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800264e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002652:	d102      	bne.n	800265a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2b00      	cmp	r3, #0
 8002658:	d1f2      	bne.n	8002640 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800265a:	4b33      	ldr	r3, [pc, #204]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800265c:	695b      	ldr	r3, [r3, #20]
 800265e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002662:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002666:	d158      	bne.n	800271a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e057      	b.n	800271c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800266c:	4b2e      	ldr	r3, [pc, #184]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800266e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002672:	4a2d      	ldr	r2, [pc, #180]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002674:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002678:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800267c:	e04d      	b.n	800271a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002684:	d141      	bne.n	800270a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002686:	4b28      	ldr	r3, [pc, #160]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800268e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002692:	d131      	bne.n	80026f8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002694:	4b24      	ldr	r3, [pc, #144]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002696:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800269a:	4a23      	ldr	r2, [pc, #140]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800269c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80026a4:	4b20      	ldr	r3, [pc, #128]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80026ac:	4a1e      	ldr	r2, [pc, #120]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80026b2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80026b4:	4b1d      	ldr	r3, [pc, #116]	@ (800272c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	2232      	movs	r2, #50	@ 0x32
 80026ba:	fb02 f303 	mul.w	r3, r2, r3
 80026be:	4a1c      	ldr	r2, [pc, #112]	@ (8002730 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80026c0:	fba2 2303 	umull	r2, r3, r2, r3
 80026c4:	0c9b      	lsrs	r3, r3, #18
 80026c6:	3301      	adds	r3, #1
 80026c8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026ca:	e002      	b.n	80026d2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	3b01      	subs	r3, #1
 80026d0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80026d2:	4b15      	ldr	r3, [pc, #84]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026da:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026de:	d102      	bne.n	80026e6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d1f2      	bne.n	80026cc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80026e6:	4b10      	ldr	r3, [pc, #64]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80026f2:	d112      	bne.n	800271a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80026f4:	2303      	movs	r3, #3
 80026f6:	e011      	b.n	800271c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80026f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80026fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80026fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002700:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002704:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002708:	e007      	b.n	800271a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800270a:	4b07      	ldr	r3, [pc, #28]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002712:	4a05      	ldr	r2, [pc, #20]	@ (8002728 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002714:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002718:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800271a:	2300      	movs	r3, #0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3714      	adds	r7, #20
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr
 8002728:	40007000 	.word	0x40007000
 800272c:	20000000 	.word	0x20000000
 8002730:	431bde83 	.word	0x431bde83

08002734 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8002738:	4b05      	ldr	r3, [pc, #20]	@ (8002750 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	4a04      	ldr	r2, [pc, #16]	@ (8002750 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800273e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002742:	6093      	str	r3, [r2, #8]
}
 8002744:	bf00      	nop
 8002746:	46bd      	mov	sp, r7
 8002748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274c:	4770      	bx	lr
 800274e:	bf00      	nop
 8002750:	40007000 	.word	0x40007000

08002754 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b088      	sub	sp, #32
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	e2fe      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	f003 0301 	and.w	r3, r3, #1
 800276e:	2b00      	cmp	r3, #0
 8002770:	d075      	beq.n	800285e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002772:	4b97      	ldr	r3, [pc, #604]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 030c 	and.w	r3, r3, #12
 800277a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800277c:	4b94      	ldr	r3, [pc, #592]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 800277e:	68db      	ldr	r3, [r3, #12]
 8002780:	f003 0303 	and.w	r3, r3, #3
 8002784:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	2b0c      	cmp	r3, #12
 800278a:	d102      	bne.n	8002792 <HAL_RCC_OscConfig+0x3e>
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	2b03      	cmp	r3, #3
 8002790:	d002      	beq.n	8002798 <HAL_RCC_OscConfig+0x44>
 8002792:	69bb      	ldr	r3, [r7, #24]
 8002794:	2b08      	cmp	r3, #8
 8002796:	d10b      	bne.n	80027b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002798:	4b8d      	ldr	r3, [pc, #564]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d05b      	beq.n	800285c <HAL_RCC_OscConfig+0x108>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	685b      	ldr	r3, [r3, #4]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d157      	bne.n	800285c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027ac:	2301      	movs	r3, #1
 80027ae:	e2d9      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b8:	d106      	bne.n	80027c8 <HAL_RCC_OscConfig+0x74>
 80027ba:	4b85      	ldr	r3, [pc, #532]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4a84      	ldr	r2, [pc, #528]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80027c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027c4:	6013      	str	r3, [r2, #0]
 80027c6:	e01d      	b.n	8002804 <HAL_RCC_OscConfig+0xb0>
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027d0:	d10c      	bne.n	80027ec <HAL_RCC_OscConfig+0x98>
 80027d2:	4b7f      	ldr	r3, [pc, #508]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a7e      	ldr	r2, [pc, #504]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80027d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	4b7c      	ldr	r3, [pc, #496]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a7b      	ldr	r2, [pc, #492]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80027e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e8:	6013      	str	r3, [r2, #0]
 80027ea:	e00b      	b.n	8002804 <HAL_RCC_OscConfig+0xb0>
 80027ec:	4b78      	ldr	r3, [pc, #480]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a77      	ldr	r2, [pc, #476]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80027f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80027f6:	6013      	str	r3, [r2, #0]
 80027f8:	4b75      	ldr	r3, [pc, #468]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a74      	ldr	r2, [pc, #464]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80027fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002802:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d013      	beq.n	8002834 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800280c:	f7ff fb1c 	bl	8001e48 <HAL_GetTick>
 8002810:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002812:	e008      	b.n	8002826 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002814:	f7ff fb18 	bl	8001e48 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	693b      	ldr	r3, [r7, #16]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	2b64      	cmp	r3, #100	@ 0x64
 8002820:	d901      	bls.n	8002826 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002822:	2303      	movs	r3, #3
 8002824:	e29e      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002826:	4b6a      	ldr	r3, [pc, #424]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d0f0      	beq.n	8002814 <HAL_RCC_OscConfig+0xc0>
 8002832:	e014      	b.n	800285e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002834:	f7ff fb08 	bl	8001e48 <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800283c:	f7ff fb04 	bl	8001e48 <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b64      	cmp	r3, #100	@ 0x64
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e28a      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800284e:	4b60      	ldr	r3, [pc, #384]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0xe8>
 800285a:	e000      	b.n	800285e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800285c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0302 	and.w	r3, r3, #2
 8002866:	2b00      	cmp	r3, #0
 8002868:	d075      	beq.n	8002956 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800286a:	4b59      	ldr	r3, [pc, #356]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 800286c:	689b      	ldr	r3, [r3, #8]
 800286e:	f003 030c 	and.w	r3, r3, #12
 8002872:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002874:	4b56      	ldr	r3, [pc, #344]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 8002876:	68db      	ldr	r3, [r3, #12]
 8002878:	f003 0303 	and.w	r3, r3, #3
 800287c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800287e:	69bb      	ldr	r3, [r7, #24]
 8002880:	2b0c      	cmp	r3, #12
 8002882:	d102      	bne.n	800288a <HAL_RCC_OscConfig+0x136>
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	2b02      	cmp	r3, #2
 8002888:	d002      	beq.n	8002890 <HAL_RCC_OscConfig+0x13c>
 800288a:	69bb      	ldr	r3, [r7, #24]
 800288c:	2b04      	cmp	r3, #4
 800288e:	d11f      	bne.n	80028d0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002890:	4b4f      	ldr	r3, [pc, #316]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002898:	2b00      	cmp	r3, #0
 800289a:	d005      	beq.n	80028a8 <HAL_RCC_OscConfig+0x154>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d101      	bne.n	80028a8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	e25d      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028a8:	4b49      	ldr	r3, [pc, #292]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	691b      	ldr	r3, [r3, #16]
 80028b4:	061b      	lsls	r3, r3, #24
 80028b6:	4946      	ldr	r1, [pc, #280]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80028b8:	4313      	orrs	r3, r2
 80028ba:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80028bc:	4b45      	ldr	r3, [pc, #276]	@ (80029d4 <HAL_RCC_OscConfig+0x280>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff f901 	bl	8001ac8 <HAL_InitTick>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d043      	beq.n	8002954 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80028cc:	2301      	movs	r3, #1
 80028ce:	e249      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	68db      	ldr	r3, [r3, #12]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d023      	beq.n	8002920 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028d8:	4b3d      	ldr	r3, [pc, #244]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a3c      	ldr	r2, [pc, #240]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80028de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028e2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e4:	f7ff fab0 	bl	8001e48 <HAL_GetTick>
 80028e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028ea:	e008      	b.n	80028fe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ec:	f7ff faac 	bl	8001e48 <HAL_GetTick>
 80028f0:	4602      	mov	r2, r0
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	1ad3      	subs	r3, r2, r3
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	d901      	bls.n	80028fe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80028fa:	2303      	movs	r3, #3
 80028fc:	e232      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80028fe:	4b34      	ldr	r3, [pc, #208]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002906:	2b00      	cmp	r3, #0
 8002908:	d0f0      	beq.n	80028ec <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290a:	4b31      	ldr	r3, [pc, #196]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	061b      	lsls	r3, r3, #24
 8002918:	492d      	ldr	r1, [pc, #180]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 800291a:	4313      	orrs	r3, r2
 800291c:	604b      	str	r3, [r1, #4]
 800291e:	e01a      	b.n	8002956 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002920:	4b2b      	ldr	r3, [pc, #172]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a2a      	ldr	r2, [pc, #168]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 8002926:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800292a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800292c:	f7ff fa8c 	bl	8001e48 <HAL_GetTick>
 8002930:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002932:	e008      	b.n	8002946 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002934:	f7ff fa88 	bl	8001e48 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e20e      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002946:	4b22      	ldr	r3, [pc, #136]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1f0      	bne.n	8002934 <HAL_RCC_OscConfig+0x1e0>
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002954:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0308 	and.w	r3, r3, #8
 800295e:	2b00      	cmp	r3, #0
 8002960:	d041      	beq.n	80029e6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d01c      	beq.n	80029a4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800296a:	4b19      	ldr	r3, [pc, #100]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 800296c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002970:	4a17      	ldr	r2, [pc, #92]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 8002972:	f043 0301 	orr.w	r3, r3, #1
 8002976:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297a:	f7ff fa65 	bl	8001e48 <HAL_GetTick>
 800297e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002980:	e008      	b.n	8002994 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002982:	f7ff fa61 	bl	8001e48 <HAL_GetTick>
 8002986:	4602      	mov	r2, r0
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	1ad3      	subs	r3, r2, r3
 800298c:	2b02      	cmp	r3, #2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e1e7      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002994:	4b0e      	ldr	r3, [pc, #56]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 8002996:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d0ef      	beq.n	8002982 <HAL_RCC_OscConfig+0x22e>
 80029a2:	e020      	b.n	80029e6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029a4:	4b0a      	ldr	r3, [pc, #40]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80029a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029aa:	4a09      	ldr	r2, [pc, #36]	@ (80029d0 <HAL_RCC_OscConfig+0x27c>)
 80029ac:	f023 0301 	bic.w	r3, r3, #1
 80029b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b4:	f7ff fa48 	bl	8001e48 <HAL_GetTick>
 80029b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029ba:	e00d      	b.n	80029d8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029bc:	f7ff fa44 	bl	8001e48 <HAL_GetTick>
 80029c0:	4602      	mov	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d906      	bls.n	80029d8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e1ca      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
 80029ce:	bf00      	nop
 80029d0:	40021000 	.word	0x40021000
 80029d4:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80029d8:	4b8c      	ldr	r3, [pc, #560]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 80029da:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1ea      	bne.n	80029bc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0304 	and.w	r3, r3, #4
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	f000 80a6 	beq.w	8002b40 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029f4:	2300      	movs	r3, #0
 80029f6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80029f8:	4b84      	ldr	r3, [pc, #528]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 80029fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029fc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d101      	bne.n	8002a08 <HAL_RCC_OscConfig+0x2b4>
 8002a04:	2301      	movs	r3, #1
 8002a06:	e000      	b.n	8002a0a <HAL_RCC_OscConfig+0x2b6>
 8002a08:	2300      	movs	r3, #0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d00d      	beq.n	8002a2a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a0e:	4b7f      	ldr	r3, [pc, #508]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002a10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a12:	4a7e      	ldr	r2, [pc, #504]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002a14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a18:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a1a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002a1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a1e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a26:	2301      	movs	r3, #1
 8002a28:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a2a:	4b79      	ldr	r3, [pc, #484]	@ (8002c10 <HAL_RCC_OscConfig+0x4bc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d118      	bne.n	8002a68 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002a36:	4b76      	ldr	r3, [pc, #472]	@ (8002c10 <HAL_RCC_OscConfig+0x4bc>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a75      	ldr	r2, [pc, #468]	@ (8002c10 <HAL_RCC_OscConfig+0x4bc>)
 8002a3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a40:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a42:	f7ff fa01 	bl	8001e48 <HAL_GetTick>
 8002a46:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a48:	e008      	b.n	8002a5c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a4a:	f7ff f9fd 	bl	8001e48 <HAL_GetTick>
 8002a4e:	4602      	mov	r2, r0
 8002a50:	693b      	ldr	r3, [r7, #16]
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d901      	bls.n	8002a5c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8002a58:	2303      	movs	r3, #3
 8002a5a:	e183      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002a5c:	4b6c      	ldr	r3, [pc, #432]	@ (8002c10 <HAL_RCC_OscConfig+0x4bc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d0f0      	beq.n	8002a4a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	2b01      	cmp	r3, #1
 8002a6e:	d108      	bne.n	8002a82 <HAL_RCC_OscConfig+0x32e>
 8002a70:	4b66      	ldr	r3, [pc, #408]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a76:	4a65      	ldr	r2, [pc, #404]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a80:	e024      	b.n	8002acc <HAL_RCC_OscConfig+0x378>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	2b05      	cmp	r3, #5
 8002a88:	d110      	bne.n	8002aac <HAL_RCC_OscConfig+0x358>
 8002a8a:	4b60      	ldr	r3, [pc, #384]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002a8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002a90:	4a5e      	ldr	r2, [pc, #376]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002a92:	f043 0304 	orr.w	r3, r3, #4
 8002a96:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002a9a:	4b5c      	ldr	r3, [pc, #368]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002aa0:	4a5a      	ldr	r2, [pc, #360]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002aa2:	f043 0301 	orr.w	r3, r3, #1
 8002aa6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002aaa:	e00f      	b.n	8002acc <HAL_RCC_OscConfig+0x378>
 8002aac:	4b57      	ldr	r3, [pc, #348]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002aae:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ab2:	4a56      	ldr	r2, [pc, #344]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002ab4:	f023 0301 	bic.w	r3, r3, #1
 8002ab8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002abc:	4b53      	ldr	r3, [pc, #332]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002ac2:	4a52      	ldr	r2, [pc, #328]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002ac4:	f023 0304 	bic.w	r3, r3, #4
 8002ac8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d016      	beq.n	8002b02 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad4:	f7ff f9b8 	bl	8001e48 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ada:	e00a      	b.n	8002af2 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002adc:	f7ff f9b4 	bl	8001e48 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002aea:	4293      	cmp	r3, r2
 8002aec:	d901      	bls.n	8002af2 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e138      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002af2:	4b46      	ldr	r3, [pc, #280]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002af4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d0ed      	beq.n	8002adc <HAL_RCC_OscConfig+0x388>
 8002b00:	e015      	b.n	8002b2e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b02:	f7ff f9a1 	bl	8001e48 <HAL_GetTick>
 8002b06:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b08:	e00a      	b.n	8002b20 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b0a:	f7ff f99d 	bl	8001e48 <HAL_GetTick>
 8002b0e:	4602      	mov	r2, r0
 8002b10:	693b      	ldr	r3, [r7, #16]
 8002b12:	1ad3      	subs	r3, r2, r3
 8002b14:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002b18:	4293      	cmp	r3, r2
 8002b1a:	d901      	bls.n	8002b20 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	e121      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002b20:	4b3a      	ldr	r3, [pc, #232]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1ed      	bne.n	8002b0a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002b2e:	7ffb      	ldrb	r3, [r7, #31]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d105      	bne.n	8002b40 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b34:	4b35      	ldr	r3, [pc, #212]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002b36:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b38:	4a34      	ldr	r2, [pc, #208]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002b3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b3e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 0320 	and.w	r3, r3, #32
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d03c      	beq.n	8002bc6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d01c      	beq.n	8002b8e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b54:	4b2d      	ldr	r3, [pc, #180]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002b56:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b5a:	4a2c      	ldr	r2, [pc, #176]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002b5c:	f043 0301 	orr.w	r3, r3, #1
 8002b60:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7ff f970 	bl	8001e48 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b6c:	f7ff f96c 	bl	8001e48 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e0f2      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b7e:	4b23      	ldr	r3, [pc, #140]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b84:	f003 0302 	and.w	r3, r3, #2
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d0ef      	beq.n	8002b6c <HAL_RCC_OscConfig+0x418>
 8002b8c:	e01b      	b.n	8002bc6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b8e:	4b1f      	ldr	r3, [pc, #124]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002b90:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002b94:	4a1d      	ldr	r2, [pc, #116]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002b96:	f023 0301 	bic.w	r3, r3, #1
 8002b9a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b9e:	f7ff f953 	bl	8001e48 <HAL_GetTick>
 8002ba2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002ba4:	e008      	b.n	8002bb8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002ba6:	f7ff f94f 	bl	8001e48 <HAL_GetTick>
 8002baa:	4602      	mov	r2, r0
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e0d5      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002bb8:	4b14      	ldr	r3, [pc, #80]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002bba:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d1ef      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	69db      	ldr	r3, [r3, #28]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	f000 80c9 	beq.w	8002d62 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002bd0:	4b0e      	ldr	r3, [pc, #56]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 030c 	and.w	r3, r3, #12
 8002bd8:	2b0c      	cmp	r3, #12
 8002bda:	f000 8083 	beq.w	8002ce4 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	2b02      	cmp	r3, #2
 8002be4:	d15e      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002be6:	4b09      	ldr	r3, [pc, #36]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a08      	ldr	r2, [pc, #32]	@ (8002c0c <HAL_RCC_OscConfig+0x4b8>)
 8002bec:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002bf0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf2:	f7ff f929 	bl	8001e48 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002bf8:	e00c      	b.n	8002c14 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bfa:	f7ff f925 	bl	8001e48 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d905      	bls.n	8002c14 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e0ab      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c14:	4b55      	ldr	r3, [pc, #340]	@ (8002d6c <HAL_RCC_OscConfig+0x618>)
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d1ec      	bne.n	8002bfa <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c20:	4b52      	ldr	r3, [pc, #328]	@ (8002d6c <HAL_RCC_OscConfig+0x618>)
 8002c22:	68da      	ldr	r2, [r3, #12]
 8002c24:	4b52      	ldr	r3, [pc, #328]	@ (8002d70 <HAL_RCC_OscConfig+0x61c>)
 8002c26:	4013      	ands	r3, r2
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6a11      	ldr	r1, [r2, #32]
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c30:	3a01      	subs	r2, #1
 8002c32:	0112      	lsls	r2, r2, #4
 8002c34:	4311      	orrs	r1, r2
 8002c36:	687a      	ldr	r2, [r7, #4]
 8002c38:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8002c3a:	0212      	lsls	r2, r2, #8
 8002c3c:	4311      	orrs	r1, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002c42:	0852      	lsrs	r2, r2, #1
 8002c44:	3a01      	subs	r2, #1
 8002c46:	0552      	lsls	r2, r2, #21
 8002c48:	4311      	orrs	r1, r2
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002c4e:	0852      	lsrs	r2, r2, #1
 8002c50:	3a01      	subs	r2, #1
 8002c52:	0652      	lsls	r2, r2, #25
 8002c54:	4311      	orrs	r1, r2
 8002c56:	687a      	ldr	r2, [r7, #4]
 8002c58:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8002c5a:	06d2      	lsls	r2, r2, #27
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	4943      	ldr	r1, [pc, #268]	@ (8002d6c <HAL_RCC_OscConfig+0x618>)
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c64:	4b41      	ldr	r3, [pc, #260]	@ (8002d6c <HAL_RCC_OscConfig+0x618>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a40      	ldr	r2, [pc, #256]	@ (8002d6c <HAL_RCC_OscConfig+0x618>)
 8002c6a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c6e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c70:	4b3e      	ldr	r3, [pc, #248]	@ (8002d6c <HAL_RCC_OscConfig+0x618>)
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	4a3d      	ldr	r2, [pc, #244]	@ (8002d6c <HAL_RCC_OscConfig+0x618>)
 8002c76:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002c7a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c7c:	f7ff f8e4 	bl	8001e48 <HAL_GetTick>
 8002c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c82:	e008      	b.n	8002c96 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c84:	f7ff f8e0 	bl	8001e48 <HAL_GetTick>
 8002c88:	4602      	mov	r2, r0
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	1ad3      	subs	r3, r2, r3
 8002c8e:	2b02      	cmp	r3, #2
 8002c90:	d901      	bls.n	8002c96 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002c92:	2303      	movs	r3, #3
 8002c94:	e066      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c96:	4b35      	ldr	r3, [pc, #212]	@ (8002d6c <HAL_RCC_OscConfig+0x618>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d0f0      	beq.n	8002c84 <HAL_RCC_OscConfig+0x530>
 8002ca2:	e05e      	b.n	8002d62 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca4:	4b31      	ldr	r3, [pc, #196]	@ (8002d6c <HAL_RCC_OscConfig+0x618>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4a30      	ldr	r2, [pc, #192]	@ (8002d6c <HAL_RCC_OscConfig+0x618>)
 8002caa:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002cae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb0:	f7ff f8ca 	bl	8001e48 <HAL_GetTick>
 8002cb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cb6:	e008      	b.n	8002cca <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb8:	f7ff f8c6 	bl	8001e48 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	2b02      	cmp	r3, #2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e04c      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002cca:	4b28      	ldr	r3, [pc, #160]	@ (8002d6c <HAL_RCC_OscConfig+0x618>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d1f0      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002cd6:	4b25      	ldr	r3, [pc, #148]	@ (8002d6c <HAL_RCC_OscConfig+0x618>)
 8002cd8:	68da      	ldr	r2, [r3, #12]
 8002cda:	4924      	ldr	r1, [pc, #144]	@ (8002d6c <HAL_RCC_OscConfig+0x618>)
 8002cdc:	4b25      	ldr	r3, [pc, #148]	@ (8002d74 <HAL_RCC_OscConfig+0x620>)
 8002cde:	4013      	ands	r3, r2
 8002ce0:	60cb      	str	r3, [r1, #12]
 8002ce2:	e03e      	b.n	8002d62 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	e039      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002cf0:	4b1e      	ldr	r3, [pc, #120]	@ (8002d6c <HAL_RCC_OscConfig+0x618>)
 8002cf2:	68db      	ldr	r3, [r3, #12]
 8002cf4:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	f003 0203 	and.w	r2, r3, #3
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a1b      	ldr	r3, [r3, #32]
 8002d00:	429a      	cmp	r2, r3
 8002d02:	d12c      	bne.n	8002d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	429a      	cmp	r2, r3
 8002d14:	d123      	bne.n	8002d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d20:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d11b      	bne.n	8002d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d30:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002d32:	429a      	cmp	r2, r3
 8002d34:	d113      	bne.n	8002d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d36:	697b      	ldr	r3, [r7, #20]
 8002d38:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d40:	085b      	lsrs	r3, r3, #1
 8002d42:	3b01      	subs	r3, #1
 8002d44:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d109      	bne.n	8002d5e <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002d4a:	697b      	ldr	r3, [r7, #20]
 8002d4c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d54:	085b      	lsrs	r3, r3, #1
 8002d56:	3b01      	subs	r3, #1
 8002d58:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d5a:	429a      	cmp	r2, r3
 8002d5c:	d001      	beq.n	8002d62 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3720      	adds	r7, #32
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	019f800c 	.word	0x019f800c
 8002d74:	feeefffc 	.word	0xfeeefffc

08002d78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b086      	sub	sp, #24
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d82:	2300      	movs	r3, #0
 8002d84:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e11e      	b.n	8002fce <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002d90:	4b91      	ldr	r3, [pc, #580]	@ (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f003 030f 	and.w	r3, r3, #15
 8002d98:	683a      	ldr	r2, [r7, #0]
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d910      	bls.n	8002dc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9e:	4b8e      	ldr	r3, [pc, #568]	@ (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f023 020f 	bic.w	r2, r3, #15
 8002da6:	498c      	ldr	r1, [pc, #560]	@ (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dae:	4b8a      	ldr	r3, [pc, #552]	@ (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 030f 	and.w	r3, r3, #15
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	429a      	cmp	r2, r3
 8002dba:	d001      	beq.n	8002dc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002dbc:	2301      	movs	r3, #1
 8002dbe:	e106      	b.n	8002fce <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d073      	beq.n	8002eb4 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	685b      	ldr	r3, [r3, #4]
 8002dd0:	2b03      	cmp	r3, #3
 8002dd2:	d129      	bne.n	8002e28 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd4:	4b81      	ldr	r3, [pc, #516]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d101      	bne.n	8002de4 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002de0:	2301      	movs	r3, #1
 8002de2:	e0f4      	b.n	8002fce <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002de4:	f000 f9d0 	bl	8003188 <RCC_GetSysClockFreqFromPLLSource>
 8002de8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	4a7c      	ldr	r2, [pc, #496]	@ (8002fe0 <HAL_RCC_ClockConfig+0x268>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d93f      	bls.n	8002e72 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002df2:	4b7a      	ldr	r3, [pc, #488]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d009      	beq.n	8002e12 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d033      	beq.n	8002e72 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d12f      	bne.n	8002e72 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e12:	4b72      	ldr	r3, [pc, #456]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e1a:	4a70      	ldr	r2, [pc, #448]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e22:	2380      	movs	r3, #128	@ 0x80
 8002e24:	617b      	str	r3, [r7, #20]
 8002e26:	e024      	b.n	8002e72 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	685b      	ldr	r3, [r3, #4]
 8002e2c:	2b02      	cmp	r3, #2
 8002e2e:	d107      	bne.n	8002e40 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e30:	4b6a      	ldr	r3, [pc, #424]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d109      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e0c6      	b.n	8002fce <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e40:	4b66      	ldr	r3, [pc, #408]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d101      	bne.n	8002e50 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e0be      	b.n	8002fce <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8002e50:	f000 f8ce 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002e54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	4a61      	ldr	r2, [pc, #388]	@ (8002fe0 <HAL_RCC_ClockConfig+0x268>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d909      	bls.n	8002e72 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e5e:	4b5f      	ldr	r3, [pc, #380]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002e66:	4a5d      	ldr	r2, [pc, #372]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002e6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e6e:	2380      	movs	r3, #128	@ 0x80
 8002e70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e72:	4b5a      	ldr	r3, [pc, #360]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f023 0203 	bic.w	r2, r3, #3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	4957      	ldr	r1, [pc, #348]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002e84:	f7fe ffe0 	bl	8001e48 <HAL_GetTick>
 8002e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e8c:	f7fe ffdc 	bl	8001e48 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e095      	b.n	8002fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ea2:	4b4e      	ldr	r3, [pc, #312]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 020c 	and.w	r2, r3, #12
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	009b      	lsls	r3, r3, #2
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d1eb      	bne.n	8002e8c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	f003 0302 	and.w	r3, r3, #2
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d023      	beq.n	8002f08 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0304 	and.w	r3, r3, #4
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d005      	beq.n	8002ed8 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ecc:	4b43      	ldr	r3, [pc, #268]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	4a42      	ldr	r2, [pc, #264]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002ed2:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ed6:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0308 	and.w	r3, r3, #8
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d007      	beq.n	8002ef4 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002ee4:	4b3d      	ldr	r3, [pc, #244]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002eec:	4a3b      	ldr	r2, [pc, #236]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002eee:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002ef2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ef4:	4b39      	ldr	r3, [pc, #228]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002ef6:	689b      	ldr	r3, [r3, #8]
 8002ef8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	4936      	ldr	r1, [pc, #216]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002f02:	4313      	orrs	r3, r2
 8002f04:	608b      	str	r3, [r1, #8]
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002f08:	697b      	ldr	r3, [r7, #20]
 8002f0a:	2b80      	cmp	r3, #128	@ 0x80
 8002f0c:	d105      	bne.n	8002f1a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f0e:	4b33      	ldr	r3, [pc, #204]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002f10:	689b      	ldr	r3, [r3, #8]
 8002f12:	4a32      	ldr	r2, [pc, #200]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002f14:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f18:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f1a:	4b2f      	ldr	r3, [pc, #188]	@ (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 030f 	and.w	r3, r3, #15
 8002f22:	683a      	ldr	r2, [r7, #0]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d21d      	bcs.n	8002f64 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f28:	4b2b      	ldr	r3, [pc, #172]	@ (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f023 020f 	bic.w	r2, r3, #15
 8002f30:	4929      	ldr	r1, [pc, #164]	@ (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002f38:	f7fe ff86 	bl	8001e48 <HAL_GetTick>
 8002f3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f3e:	e00a      	b.n	8002f56 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f40:	f7fe ff82 	bl	8001e48 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e03b      	b.n	8002fce <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f56:	4b20      	ldr	r3, [pc, #128]	@ (8002fd8 <HAL_RCC_ClockConfig+0x260>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	683a      	ldr	r2, [r7, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d1ed      	bne.n	8002f40 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0304 	and.w	r3, r3, #4
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d008      	beq.n	8002f82 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f70:	4b1a      	ldr	r3, [pc, #104]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002f72:	689b      	ldr	r3, [r3, #8]
 8002f74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4917      	ldr	r1, [pc, #92]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 0308 	and.w	r3, r3, #8
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d009      	beq.n	8002fa2 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f8e:	4b13      	ldr	r3, [pc, #76]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	00db      	lsls	r3, r3, #3
 8002f9c:	490f      	ldr	r1, [pc, #60]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002fa2:	f000 f825 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8002fdc <HAL_RCC_ClockConfig+0x264>)
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	091b      	lsrs	r3, r3, #4
 8002fae:	f003 030f 	and.w	r3, r3, #15
 8002fb2:	490c      	ldr	r1, [pc, #48]	@ (8002fe4 <HAL_RCC_ClockConfig+0x26c>)
 8002fb4:	5ccb      	ldrb	r3, [r1, r3]
 8002fb6:	f003 031f 	and.w	r3, r3, #31
 8002fba:	fa22 f303 	lsr.w	r3, r2, r3
 8002fbe:	4a0a      	ldr	r2, [pc, #40]	@ (8002fe8 <HAL_RCC_ClockConfig+0x270>)
 8002fc0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002fc2:	4b0a      	ldr	r3, [pc, #40]	@ (8002fec <HAL_RCC_ClockConfig+0x274>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fe fd7e 	bl	8001ac8 <HAL_InitTick>
 8002fcc:	4603      	mov	r3, r0
}
 8002fce:	4618      	mov	r0, r3
 8002fd0:	3718      	adds	r7, #24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bd80      	pop	{r7, pc}
 8002fd6:	bf00      	nop
 8002fd8:	40022000 	.word	0x40022000
 8002fdc:	40021000 	.word	0x40021000
 8002fe0:	04c4b400 	.word	0x04c4b400
 8002fe4:	080090c0 	.word	0x080090c0
 8002fe8:	20000000 	.word	0x20000000
 8002fec:	20000004 	.word	0x20000004

08002ff0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b087      	sub	sp, #28
 8002ff4:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002ff6:	4b2c      	ldr	r3, [pc, #176]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f003 030c 	and.w	r3, r3, #12
 8002ffe:	2b04      	cmp	r3, #4
 8003000:	d102      	bne.n	8003008 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003002:	4b2a      	ldr	r3, [pc, #168]	@ (80030ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003004:	613b      	str	r3, [r7, #16]
 8003006:	e047      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003008:	4b27      	ldr	r3, [pc, #156]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800300a:	689b      	ldr	r3, [r3, #8]
 800300c:	f003 030c 	and.w	r3, r3, #12
 8003010:	2b08      	cmp	r3, #8
 8003012:	d102      	bne.n	800301a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003014:	4b26      	ldr	r3, [pc, #152]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003016:	613b      	str	r3, [r7, #16]
 8003018:	e03e      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800301a:	4b23      	ldr	r3, [pc, #140]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b0c      	cmp	r3, #12
 8003024:	d136      	bne.n	8003094 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003026:	4b20      	ldr	r3, [pc, #128]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	f003 0303 	and.w	r3, r3, #3
 800302e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003030:	4b1d      	ldr	r3, [pc, #116]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	091b      	lsrs	r3, r3, #4
 8003036:	f003 030f 	and.w	r3, r3, #15
 800303a:	3301      	adds	r3, #1
 800303c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2b03      	cmp	r3, #3
 8003042:	d10c      	bne.n	800305e <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003044:	4a1a      	ldr	r2, [pc, #104]	@ (80030b0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	fbb2 f3f3 	udiv	r3, r2, r3
 800304c:	4a16      	ldr	r2, [pc, #88]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800304e:	68d2      	ldr	r2, [r2, #12]
 8003050:	0a12      	lsrs	r2, r2, #8
 8003052:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003056:	fb02 f303 	mul.w	r3, r2, r3
 800305a:	617b      	str	r3, [r7, #20]
      break;
 800305c:	e00c      	b.n	8003078 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800305e:	4a13      	ldr	r2, [pc, #76]	@ (80030ac <HAL_RCC_GetSysClockFreq+0xbc>)
 8003060:	68bb      	ldr	r3, [r7, #8]
 8003062:	fbb2 f3f3 	udiv	r3, r2, r3
 8003066:	4a10      	ldr	r2, [pc, #64]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003068:	68d2      	ldr	r2, [r2, #12]
 800306a:	0a12      	lsrs	r2, r2, #8
 800306c:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8003070:	fb02 f303 	mul.w	r3, r2, r3
 8003074:	617b      	str	r3, [r7, #20]
      break;
 8003076:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003078:	4b0b      	ldr	r3, [pc, #44]	@ (80030a8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800307a:	68db      	ldr	r3, [r3, #12]
 800307c:	0e5b      	lsrs	r3, r3, #25
 800307e:	f003 0303 	and.w	r3, r3, #3
 8003082:	3301      	adds	r3, #1
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003088:	697a      	ldr	r2, [r7, #20]
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003090:	613b      	str	r3, [r7, #16]
 8003092:	e001      	b.n	8003098 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003094:	2300      	movs	r3, #0
 8003096:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003098:	693b      	ldr	r3, [r7, #16]
}
 800309a:	4618      	mov	r0, r3
 800309c:	371c      	adds	r7, #28
 800309e:	46bd      	mov	sp, r7
 80030a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a4:	4770      	bx	lr
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000
 80030ac:	00f42400 	.word	0x00f42400
 80030b0:	007a1200 	.word	0x007a1200

080030b4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030b4:	b480      	push	{r7}
 80030b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030b8:	4b03      	ldr	r3, [pc, #12]	@ (80030c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80030ba:	681b      	ldr	r3, [r3, #0]
}
 80030bc:	4618      	mov	r0, r3
 80030be:	46bd      	mov	sp, r7
 80030c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c4:	4770      	bx	lr
 80030c6:	bf00      	nop
 80030c8:	20000000 	.word	0x20000000

080030cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030d0:	f7ff fff0 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 80030d4:	4602      	mov	r2, r0
 80030d6:	4b06      	ldr	r3, [pc, #24]	@ (80030f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	0a1b      	lsrs	r3, r3, #8
 80030dc:	f003 0307 	and.w	r3, r3, #7
 80030e0:	4904      	ldr	r1, [pc, #16]	@ (80030f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80030e2:	5ccb      	ldrb	r3, [r1, r3]
 80030e4:	f003 031f 	and.w	r3, r3, #31
 80030e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000
 80030f4:	080090d0 	.word	0x080090d0

080030f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80030fc:	f7ff ffda 	bl	80030b4 <HAL_RCC_GetHCLKFreq>
 8003100:	4602      	mov	r2, r0
 8003102:	4b06      	ldr	r3, [pc, #24]	@ (800311c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	0adb      	lsrs	r3, r3, #11
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	4904      	ldr	r1, [pc, #16]	@ (8003120 <HAL_RCC_GetPCLK2Freq+0x28>)
 800310e:	5ccb      	ldrb	r3, [r1, r3]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	080090d0 	.word	0x080090d0

08003124 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003124:	b480      	push	{r7}
 8003126:	b083      	sub	sp, #12
 8003128:	af00      	add	r7, sp, #0
 800312a:	6078      	str	r0, [r7, #4]
 800312c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	220f      	movs	r2, #15
 8003132:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003134:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <HAL_RCC_GetClockConfig+0x5c>)
 8003136:	689b      	ldr	r3, [r3, #8]
 8003138:	f003 0203 	and.w	r2, r3, #3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003140:	4b0f      	ldr	r3, [pc, #60]	@ (8003180 <HAL_RCC_GetClockConfig+0x5c>)
 8003142:	689b      	ldr	r3, [r3, #8]
 8003144:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800314c:	4b0c      	ldr	r3, [pc, #48]	@ (8003180 <HAL_RCC_GetClockConfig+0x5c>)
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003158:	4b09      	ldr	r3, [pc, #36]	@ (8003180 <HAL_RCC_GetClockConfig+0x5c>)
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	08db      	lsrs	r3, r3, #3
 800315e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003166:	4b07      	ldr	r3, [pc, #28]	@ (8003184 <HAL_RCC_GetClockConfig+0x60>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 020f 	and.w	r2, r3, #15
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	601a      	str	r2, [r3, #0]
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	40022000 	.word	0x40022000

08003188 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800318e:	4b1e      	ldr	r3, [pc, #120]	@ (8003208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003190:	68db      	ldr	r3, [r3, #12]
 8003192:	f003 0303 	and.w	r3, r3, #3
 8003196:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003198:	4b1b      	ldr	r3, [pc, #108]	@ (8003208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	091b      	lsrs	r3, r3, #4
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	3301      	adds	r3, #1
 80031a4:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	2b03      	cmp	r3, #3
 80031aa:	d10c      	bne.n	80031c6 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031ac:	4a17      	ldr	r2, [pc, #92]	@ (800320c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80031b4:	4a14      	ldr	r2, [pc, #80]	@ (8003208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031b6:	68d2      	ldr	r2, [r2, #12]
 80031b8:	0a12      	lsrs	r2, r2, #8
 80031ba:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	617b      	str	r3, [r7, #20]
    break;
 80031c4:	e00c      	b.n	80031e0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80031c6:	4a12      	ldr	r2, [pc, #72]	@ (8003210 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ce:	4a0e      	ldr	r2, [pc, #56]	@ (8003208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031d0:	68d2      	ldr	r2, [r2, #12]
 80031d2:	0a12      	lsrs	r2, r2, #8
 80031d4:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80031d8:	fb02 f303 	mul.w	r3, r2, r3
 80031dc:	617b      	str	r3, [r7, #20]
    break;
 80031de:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80031e0:	4b09      	ldr	r3, [pc, #36]	@ (8003208 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80031e2:	68db      	ldr	r3, [r3, #12]
 80031e4:	0e5b      	lsrs	r3, r3, #25
 80031e6:	f003 0303 	and.w	r3, r3, #3
 80031ea:	3301      	adds	r3, #1
 80031ec:	005b      	lsls	r3, r3, #1
 80031ee:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80031f0:	697a      	ldr	r2, [r7, #20]
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80031fa:	687b      	ldr	r3, [r7, #4]
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	371c      	adds	r7, #28
 8003200:	46bd      	mov	sp, r7
 8003202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003206:	4770      	bx	lr
 8003208:	40021000 	.word	0x40021000
 800320c:	007a1200 	.word	0x007a1200
 8003210:	00f42400 	.word	0x00f42400

08003214 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800321c:	2300      	movs	r3, #0
 800321e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003220:	2300      	movs	r3, #0
 8003222:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800322c:	2b00      	cmp	r3, #0
 800322e:	f000 8098 	beq.w	8003362 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003232:	2300      	movs	r3, #0
 8003234:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003236:	4b43      	ldr	r3, [pc, #268]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003238:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800323a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d10d      	bne.n	800325e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003242:	4b40      	ldr	r3, [pc, #256]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003244:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003246:	4a3f      	ldr	r2, [pc, #252]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003248:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800324c:	6593      	str	r3, [r2, #88]	@ 0x58
 800324e:	4b3d      	ldr	r3, [pc, #244]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003252:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003256:	60bb      	str	r3, [r7, #8]
 8003258:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800325a:	2301      	movs	r3, #1
 800325c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800325e:	4b3a      	ldr	r3, [pc, #232]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4a39      	ldr	r2, [pc, #228]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003264:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003268:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800326a:	f7fe fded 	bl	8001e48 <HAL_GetTick>
 800326e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003270:	e009      	b.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003272:	f7fe fde9 	bl	8001e48 <HAL_GetTick>
 8003276:	4602      	mov	r2, r0
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	1ad3      	subs	r3, r2, r3
 800327c:	2b02      	cmp	r3, #2
 800327e:	d902      	bls.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003280:	2303      	movs	r3, #3
 8003282:	74fb      	strb	r3, [r7, #19]
        break;
 8003284:	e005      	b.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003286:	4b30      	ldr	r3, [pc, #192]	@ (8003348 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0ef      	beq.n	8003272 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003292:	7cfb      	ldrb	r3, [r7, #19]
 8003294:	2b00      	cmp	r3, #0
 8003296:	d159      	bne.n	800334c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003298:	4b2a      	ldr	r3, [pc, #168]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800329a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800329e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80032a2:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d01e      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	429a      	cmp	r2, r3
 80032b2:	d019      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80032b4:	4b23      	ldr	r3, [pc, #140]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032ba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80032be:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80032c0:	4b20      	ldr	r3, [pc, #128]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032c6:	4a1f      	ldr	r2, [pc, #124]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80032d0:	4b1c      	ldr	r3, [pc, #112]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80032d6:	4a1b      	ldr	r2, [pc, #108]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80032e0:	4a18      	ldr	r2, [pc, #96]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	f003 0301 	and.w	r3, r3, #1
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d016      	beq.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032f2:	f7fe fda9 	bl	8001e48 <HAL_GetTick>
 80032f6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80032f8:	e00b      	b.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80032fa:	f7fe fda5 	bl	8001e48 <HAL_GetTick>
 80032fe:	4602      	mov	r2, r0
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1ad3      	subs	r3, r2, r3
 8003304:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003308:	4293      	cmp	r3, r2
 800330a:	d902      	bls.n	8003312 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800330c:	2303      	movs	r3, #3
 800330e:	74fb      	strb	r3, [r7, #19]
            break;
 8003310:	e006      	b.n	8003320 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003312:	4b0c      	ldr	r3, [pc, #48]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003314:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003318:	f003 0302 	and.w	r3, r3, #2
 800331c:	2b00      	cmp	r3, #0
 800331e:	d0ec      	beq.n	80032fa <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003320:	7cfb      	ldrb	r3, [r7, #19]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d10b      	bne.n	800333e <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003326:	4b07      	ldr	r3, [pc, #28]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003328:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800332c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003334:	4903      	ldr	r1, [pc, #12]	@ (8003344 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800333c:	e008      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800333e:	7cfb      	ldrb	r3, [r7, #19]
 8003340:	74bb      	strb	r3, [r7, #18]
 8003342:	e005      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003344:	40021000 	.word	0x40021000
 8003348:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800334c:	7cfb      	ldrb	r3, [r7, #19]
 800334e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003350:	7c7b      	ldrb	r3, [r7, #17]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d105      	bne.n	8003362 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003356:	4ba7      	ldr	r3, [pc, #668]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003358:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800335a:	4aa6      	ldr	r2, [pc, #664]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800335c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003360:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	2b00      	cmp	r3, #0
 800336c:	d00a      	beq.n	8003384 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800336e:	4ba1      	ldr	r3, [pc, #644]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003370:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003374:	f023 0203 	bic.w	r2, r3, #3
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	499d      	ldr	r1, [pc, #628]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800337e:	4313      	orrs	r3, r2
 8003380:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f003 0302 	and.w	r3, r3, #2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003390:	4b98      	ldr	r3, [pc, #608]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003392:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003396:	f023 020c 	bic.w	r2, r3, #12
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	689b      	ldr	r3, [r3, #8]
 800339e:	4995      	ldr	r1, [pc, #596]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033a0:	4313      	orrs	r3, r2
 80033a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0304 	and.w	r3, r3, #4
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d00a      	beq.n	80033c8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80033b2:	4b90      	ldr	r3, [pc, #576]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	498c      	ldr	r1, [pc, #560]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033c2:	4313      	orrs	r3, r2
 80033c4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	f003 0308 	and.w	r3, r3, #8
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d00a      	beq.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80033d4:	4b87      	ldr	r3, [pc, #540]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033da:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	691b      	ldr	r3, [r3, #16]
 80033e2:	4984      	ldr	r1, [pc, #528]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033e4:	4313      	orrs	r3, r2
 80033e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0310 	and.w	r3, r3, #16
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00a      	beq.n	800340c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80033f6:	4b7f      	ldr	r3, [pc, #508]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80033f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033fc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	695b      	ldr	r3, [r3, #20]
 8003404:	497b      	ldr	r1, [pc, #492]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003406:	4313      	orrs	r3, r2
 8003408:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0320 	and.w	r3, r3, #32
 8003414:	2b00      	cmp	r3, #0
 8003416:	d00a      	beq.n	800342e <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003418:	4b76      	ldr	r3, [pc, #472]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800341a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	4973      	ldr	r1, [pc, #460]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003428:	4313      	orrs	r3, r2
 800342a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003436:	2b00      	cmp	r3, #0
 8003438:	d00a      	beq.n	8003450 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800343a:	4b6e      	ldr	r3, [pc, #440]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800343c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003440:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	69db      	ldr	r3, [r3, #28]
 8003448:	496a      	ldr	r1, [pc, #424]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800344a:	4313      	orrs	r3, r2
 800344c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003458:	2b00      	cmp	r3, #0
 800345a:	d00a      	beq.n	8003472 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800345c:	4b65      	ldr	r3, [pc, #404]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800345e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003462:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	4962      	ldr	r1, [pc, #392]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800346c:	4313      	orrs	r3, r2
 800346e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800347a:	2b00      	cmp	r3, #0
 800347c:	d00a      	beq.n	8003494 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800347e:	4b5d      	ldr	r3, [pc, #372]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003480:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003484:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800348c:	4959      	ldr	r1, [pc, #356]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800348e:	4313      	orrs	r3, r2
 8003490:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349c:	2b00      	cmp	r3, #0
 800349e:	d00a      	beq.n	80034b6 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034a0:	4b54      	ldr	r3, [pc, #336]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034a6:	f023 0203 	bic.w	r2, r3, #3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034ae:	4951      	ldr	r1, [pc, #324]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034b0:	4313      	orrs	r3, r2
 80034b2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d00a      	beq.n	80034d8 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80034c2:	4b4c      	ldr	r3, [pc, #304]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034d0:	4948      	ldr	r1, [pc, #288]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034e0:	2b00      	cmp	r3, #0
 80034e2:	d015      	beq.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80034e4:	4b43      	ldr	r3, [pc, #268]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f2:	4940      	ldr	r1, [pc, #256]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003502:	d105      	bne.n	8003510 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003504:	4b3b      	ldr	r3, [pc, #236]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003506:	68db      	ldr	r3, [r3, #12]
 8003508:	4a3a      	ldr	r2, [pc, #232]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800350a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800350e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003518:	2b00      	cmp	r3, #0
 800351a:	d015      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800351c:	4b35      	ldr	r3, [pc, #212]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800351e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003522:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800352a:	4932      	ldr	r1, [pc, #200]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800352c:	4313      	orrs	r3, r2
 800352e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003536:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800353a:	d105      	bne.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800353c:	4b2d      	ldr	r3, [pc, #180]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	4a2c      	ldr	r2, [pc, #176]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003542:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8003546:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003550:	2b00      	cmp	r3, #0
 8003552:	d015      	beq.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003554:	4b27      	ldr	r3, [pc, #156]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003556:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800355a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003562:	4924      	ldr	r1, [pc, #144]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003564:	4313      	orrs	r3, r2
 8003566:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800356e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003572:	d105      	bne.n	8003580 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003574:	4b1f      	ldr	r3, [pc, #124]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4a1e      	ldr	r2, [pc, #120]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800357a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800357e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003588:	2b00      	cmp	r3, #0
 800358a:	d015      	beq.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800358c:	4b19      	ldr	r3, [pc, #100]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800358e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003592:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800359a:	4916      	ldr	r1, [pc, #88]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800359c:	4313      	orrs	r3, r2
 800359e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035aa:	d105      	bne.n	80035b8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035ac:	4b11      	ldr	r3, [pc, #68]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	4a10      	ldr	r2, [pc, #64]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d019      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80035c4:	4b0b      	ldr	r3, [pc, #44]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035ca:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d2:	4908      	ldr	r1, [pc, #32]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80035e2:	d109      	bne.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80035e4:	4b03      	ldr	r3, [pc, #12]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	4a02      	ldr	r2, [pc, #8]	@ (80035f4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80035ea:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80035ee:	60d3      	str	r3, [r2, #12]
 80035f0:	e002      	b.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80035f2:	bf00      	nop
 80035f4:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d015      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003604:	4b29      	ldr	r3, [pc, #164]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800360a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003612:	4926      	ldr	r1, [pc, #152]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800361e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003622:	d105      	bne.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8003624:	4b21      	ldr	r3, [pc, #132]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	4a20      	ldr	r2, [pc, #128]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800362a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800362e:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003638:	2b00      	cmp	r3, #0
 800363a:	d015      	beq.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 800363c:	4b1b      	ldr	r3, [pc, #108]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800363e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003642:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800364a:	4918      	ldr	r1, [pc, #96]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800364c:	4313      	orrs	r3, r2
 800364e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003656:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800365a:	d105      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800365c:	4b13      	ldr	r3, [pc, #76]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	4a12      	ldr	r2, [pc, #72]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003662:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003666:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003670:	2b00      	cmp	r3, #0
 8003672:	d015      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003674:	4b0d      	ldr	r3, [pc, #52]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003676:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800367a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003682:	490a      	ldr	r1, [pc, #40]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003684:	4313      	orrs	r3, r2
 8003686:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800368e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003692:	d105      	bne.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003694:	4b05      	ldr	r3, [pc, #20]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4a04      	ldr	r2, [pc, #16]	@ (80036ac <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800369a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800369e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80036a0:	7cbb      	ldrb	r3, [r7, #18]
}
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	bf00      	nop
 80036ac:	40021000 	.word	0x40021000

080036b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d101      	bne.n	80036c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036be:	2301      	movs	r3, #1
 80036c0:	e09d      	b.n	80037fe <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d108      	bne.n	80036dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	685b      	ldr	r3, [r3, #4]
 80036ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036d2:	d009      	beq.n	80036e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	61da      	str	r2, [r3, #28]
 80036da:	e005      	b.n	80036e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2200      	movs	r2, #0
 80036e6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2200      	movs	r2, #0
 80036ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d106      	bne.n	8003708 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f7fe f8f6 	bl	80018f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	2202      	movs	r2, #2
 800370c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800371e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	68db      	ldr	r3, [r3, #12]
 8003724:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003728:	d902      	bls.n	8003730 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800372a:	2300      	movs	r3, #0
 800372c:	60fb      	str	r3, [r7, #12]
 800372e:	e002      	b.n	8003736 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003730:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003734:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800373e:	d007      	beq.n	8003750 <HAL_SPI_Init+0xa0>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	68db      	ldr	r3, [r3, #12]
 8003744:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003748:	d002      	beq.n	8003750 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2200      	movs	r2, #0
 800374e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003760:	431a      	orrs	r2, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	691b      	ldr	r3, [r3, #16]
 8003766:	f003 0302 	and.w	r3, r3, #2
 800376a:	431a      	orrs	r2, r3
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	695b      	ldr	r3, [r3, #20]
 8003770:	f003 0301 	and.w	r3, r3, #1
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	699b      	ldr	r3, [r3, #24]
 800377a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800377e:	431a      	orrs	r2, r3
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	69db      	ldr	r3, [r3, #28]
 8003784:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003788:	431a      	orrs	r2, r3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a1b      	ldr	r3, [r3, #32]
 800378e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003792:	ea42 0103 	orr.w	r1, r2, r3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800379a:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	430a      	orrs	r2, r1
 80037a4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	0c1b      	lsrs	r3, r3, #16
 80037ac:	f003 0204 	and.w	r2, r3, #4
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	f003 0310 	and.w	r3, r3, #16
 80037b8:	431a      	orrs	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80037be:	f003 0308 	and.w	r3, r3, #8
 80037c2:	431a      	orrs	r2, r3
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80037cc:	ea42 0103 	orr.w	r1, r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	430a      	orrs	r2, r1
 80037dc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	69da      	ldr	r2, [r3, #28]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80037ec:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}

08003806 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003806:	b580      	push	{r7, lr}
 8003808:	b088      	sub	sp, #32
 800380a:	af00      	add	r7, sp, #0
 800380c:	60f8      	str	r0, [r7, #12]
 800380e:	60b9      	str	r1, [r7, #8]
 8003810:	603b      	str	r3, [r7, #0]
 8003812:	4613      	mov	r3, r2
 8003814:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003816:	2300      	movs	r3, #0
 8003818:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003820:	2b01      	cmp	r3, #1
 8003822:	d101      	bne.n	8003828 <HAL_SPI_Transmit+0x22>
 8003824:	2302      	movs	r3, #2
 8003826:	e15f      	b.n	8003ae8 <HAL_SPI_Transmit+0x2e2>
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003830:	f7fe fb0a 	bl	8001e48 <HAL_GetTick>
 8003834:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003836:	88fb      	ldrh	r3, [r7, #6]
 8003838:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b01      	cmp	r3, #1
 8003844:	d002      	beq.n	800384c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003846:	2302      	movs	r3, #2
 8003848:	77fb      	strb	r3, [r7, #31]
    goto error;
 800384a:	e148      	b.n	8003ade <HAL_SPI_Transmit+0x2d8>
  }

  if ((pData == NULL) || (Size == 0U))
 800384c:	68bb      	ldr	r3, [r7, #8]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d002      	beq.n	8003858 <HAL_SPI_Transmit+0x52>
 8003852:	88fb      	ldrh	r3, [r7, #6]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d102      	bne.n	800385e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800385c:	e13f      	b.n	8003ade <HAL_SPI_Transmit+0x2d8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	2203      	movs	r2, #3
 8003862:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	2200      	movs	r2, #0
 800386a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	68ba      	ldr	r2, [r7, #8]
 8003870:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	88fa      	ldrh	r2, [r7, #6]
 8003876:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	88fa      	ldrh	r2, [r7, #6]
 800387c:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	2200      	movs	r2, #0
 8003882:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	2200      	movs	r2, #0
 8003888:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2200      	movs	r2, #0
 800389e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80038a8:	d10f      	bne.n	80038ca <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	681a      	ldr	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80038b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681a      	ldr	r2, [r3, #0]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038c8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d4:	2b40      	cmp	r3, #64	@ 0x40
 80038d6:	d007      	beq.n	80038e8 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80038e6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80038f0:	d94f      	bls.n	8003992 <HAL_SPI_Transmit+0x18c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d002      	beq.n	8003900 <HAL_SPI_Transmit+0xfa>
 80038fa:	8afb      	ldrh	r3, [r7, #22]
 80038fc:	2b01      	cmp	r3, #1
 80038fe:	d142      	bne.n	8003986 <HAL_SPI_Transmit+0x180>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003904:	881a      	ldrh	r2, [r3, #0]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003910:	1c9a      	adds	r2, r3, #2
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800391a:	b29b      	uxth	r3, r3
 800391c:	3b01      	subs	r3, #1
 800391e:	b29a      	uxth	r2, r3
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003924:	e02f      	b.n	8003986 <HAL_SPI_Transmit+0x180>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	689b      	ldr	r3, [r3, #8]
 800392c:	f003 0302 	and.w	r3, r3, #2
 8003930:	2b02      	cmp	r3, #2
 8003932:	d112      	bne.n	800395a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003938:	881a      	ldrh	r2, [r3, #0]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003944:	1c9a      	adds	r2, r3, #2
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800394e:	b29b      	uxth	r3, r3
 8003950:	3b01      	subs	r3, #1
 8003952:	b29a      	uxth	r2, r3
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003958:	e015      	b.n	8003986 <HAL_SPI_Transmit+0x180>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800395a:	f7fe fa75 	bl	8001e48 <HAL_GetTick>
 800395e:	4602      	mov	r2, r0
 8003960:	69bb      	ldr	r3, [r7, #24]
 8003962:	1ad3      	subs	r3, r2, r3
 8003964:	683a      	ldr	r2, [r7, #0]
 8003966:	429a      	cmp	r2, r3
 8003968:	d803      	bhi.n	8003972 <HAL_SPI_Transmit+0x16c>
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003970:	d102      	bne.n	8003978 <HAL_SPI_Transmit+0x172>
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	2b00      	cmp	r3, #0
 8003976:	d106      	bne.n	8003986 <HAL_SPI_Transmit+0x180>
        {
          errorcode = HAL_TIMEOUT;
 8003978:	2303      	movs	r3, #3
 800397a:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	2201      	movs	r2, #1
 8003980:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003984:	e0ab      	b.n	8003ade <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800398a:	b29b      	uxth	r3, r3
 800398c:	2b00      	cmp	r3, #0
 800398e:	d1ca      	bne.n	8003926 <HAL_SPI_Transmit+0x120>
 8003990:	e080      	b.n	8003a94 <HAL_SPI_Transmit+0x28e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	685b      	ldr	r3, [r3, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d002      	beq.n	80039a0 <HAL_SPI_Transmit+0x19a>
 800399a:	8afb      	ldrh	r3, [r7, #22]
 800399c:	2b01      	cmp	r3, #1
 800399e:	d174      	bne.n	8003a8a <HAL_SPI_Transmit+0x284>
    {
      if (hspi->TxXferCount > 1U)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	2b01      	cmp	r3, #1
 80039a8:	d912      	bls.n	80039d0 <HAL_SPI_Transmit+0x1ca>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ae:	881a      	ldrh	r2, [r3, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ba:	1c9a      	adds	r2, r3, #2
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	3b02      	subs	r3, #2
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80039ce:	e05c      	b.n	8003a8a <HAL_SPI_Transmit+0x284>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	330c      	adds	r3, #12
 80039da:	7812      	ldrb	r2, [r2, #0]
 80039dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039e2:	1c5a      	adds	r2, r3, #1
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	3b01      	subs	r3, #1
 80039f0:	b29a      	uxth	r2, r3
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80039f6:	e048      	b.n	8003a8a <HAL_SPI_Transmit+0x284>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689b      	ldr	r3, [r3, #8]
 80039fe:	f003 0302 	and.w	r3, r3, #2
 8003a02:	2b02      	cmp	r3, #2
 8003a04:	d12b      	bne.n	8003a5e <HAL_SPI_Transmit+0x258>
      {
        if (hspi->TxXferCount > 1U)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a0a:	b29b      	uxth	r3, r3
 8003a0c:	2b01      	cmp	r3, #1
 8003a0e:	d912      	bls.n	8003a36 <HAL_SPI_Transmit+0x230>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a14:	881a      	ldrh	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a20:	1c9a      	adds	r2, r3, #2
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	3b02      	subs	r3, #2
 8003a2e:	b29a      	uxth	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a34:	e029      	b.n	8003a8a <HAL_SPI_Transmit+0x284>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	330c      	adds	r3, #12
 8003a40:	7812      	ldrb	r2, [r2, #0]
 8003a42:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a48:	1c5a      	adds	r2, r3, #1
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a52:	b29b      	uxth	r3, r3
 8003a54:	3b01      	subs	r3, #1
 8003a56:	b29a      	uxth	r2, r3
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003a5c:	e015      	b.n	8003a8a <HAL_SPI_Transmit+0x284>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a5e:	f7fe f9f3 	bl	8001e48 <HAL_GetTick>
 8003a62:	4602      	mov	r2, r0
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	1ad3      	subs	r3, r2, r3
 8003a68:	683a      	ldr	r2, [r7, #0]
 8003a6a:	429a      	cmp	r2, r3
 8003a6c:	d803      	bhi.n	8003a76 <HAL_SPI_Transmit+0x270>
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a74:	d102      	bne.n	8003a7c <HAL_SPI_Transmit+0x276>
 8003a76:	683b      	ldr	r3, [r7, #0]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d106      	bne.n	8003a8a <HAL_SPI_Transmit+0x284>
        {
          errorcode = HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          goto error;
 8003a88:	e029      	b.n	8003ade <HAL_SPI_Transmit+0x2d8>
    while (hspi->TxXferCount > 0U)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d1b1      	bne.n	80039f8 <HAL_SPI_Transmit+0x1f2>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	6839      	ldr	r1, [r7, #0]
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f000 f947 	bl	8003d2c <SPI_EndRxTxTransaction>
 8003a9e:	4603      	mov	r3, r0
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d002      	beq.n	8003aaa <HAL_SPI_Transmit+0x2a4>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	2220      	movs	r2, #32
 8003aa8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d10a      	bne.n	8003ac8 <HAL_SPI_Transmit+0x2c2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ab2:	2300      	movs	r3, #0
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	613b      	str	r3, [r7, #16]
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	613b      	str	r3, [r7, #16]
 8003ac6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d002      	beq.n	8003ad6 <HAL_SPI_Transmit+0x2d0>
  {
    errorcode = HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	77fb      	strb	r3, [r7, #31]
 8003ad4:	e003      	b.n	8003ade <HAL_SPI_Transmit+0x2d8>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2201      	movs	r2, #1
 8003ada:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  return errorcode;
 8003ae6:	7ffb      	ldrb	r3, [r7, #31]
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3720      	adds	r7, #32
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b088      	sub	sp, #32
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	60f8      	str	r0, [r7, #12]
 8003af8:	60b9      	str	r1, [r7, #8]
 8003afa:	603b      	str	r3, [r7, #0]
 8003afc:	4613      	mov	r3, r2
 8003afe:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003b00:	f7fe f9a2 	bl	8001e48 <HAL_GetTick>
 8003b04:	4602      	mov	r2, r0
 8003b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b08:	1a9b      	subs	r3, r3, r2
 8003b0a:	683a      	ldr	r2, [r7, #0]
 8003b0c:	4413      	add	r3, r2
 8003b0e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003b10:	f7fe f99a 	bl	8001e48 <HAL_GetTick>
 8003b14:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003b16:	4b39      	ldr	r3, [pc, #228]	@ (8003bfc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	015b      	lsls	r3, r3, #5
 8003b1c:	0d1b      	lsrs	r3, r3, #20
 8003b1e:	69fa      	ldr	r2, [r7, #28]
 8003b20:	fb02 f303 	mul.w	r3, r2, r3
 8003b24:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b26:	e054      	b.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b2e:	d050      	beq.n	8003bd2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b30:	f7fe f98a 	bl	8001e48 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	69bb      	ldr	r3, [r7, #24]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	69fa      	ldr	r2, [r7, #28]
 8003b3c:	429a      	cmp	r2, r3
 8003b3e:	d902      	bls.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b40:	69fb      	ldr	r3, [r7, #28]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d13d      	bne.n	8003bc2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b54:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b5e:	d111      	bne.n	8003b84 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	689b      	ldr	r3, [r3, #8]
 8003b64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b68:	d004      	beq.n	8003b74 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b72:	d107      	bne.n	8003b84 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b82:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b8c:	d10f      	bne.n	8003bae <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b9c:	601a      	str	r2, [r3, #0]
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681a      	ldr	r2, [r3, #0]
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003bac:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2200      	movs	r2, #0
 8003bba:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003bbe:	2303      	movs	r3, #3
 8003bc0:	e017      	b.n	8003bf2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d101      	bne.n	8003bcc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003bcc:	697b      	ldr	r3, [r7, #20]
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689a      	ldr	r2, [r3, #8]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	4013      	ands	r3, r2
 8003bdc:	68ba      	ldr	r2, [r7, #8]
 8003bde:	429a      	cmp	r2, r3
 8003be0:	bf0c      	ite	eq
 8003be2:	2301      	moveq	r3, #1
 8003be4:	2300      	movne	r3, #0
 8003be6:	b2db      	uxtb	r3, r3
 8003be8:	461a      	mov	r2, r3
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d19b      	bne.n	8003b28 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3720      	adds	r7, #32
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop
 8003bfc:	20000000 	.word	0x20000000

08003c00 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08a      	sub	sp, #40	@ 0x28
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]
 8003c0c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003c12:	f7fe f919 	bl	8001e48 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	683a      	ldr	r2, [r7, #0]
 8003c1e:	4413      	add	r3, r2
 8003c20:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003c22:	f7fe f911 	bl	8001e48 <HAL_GetTick>
 8003c26:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	330c      	adds	r3, #12
 8003c2e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003c30:	4b3d      	ldr	r3, [pc, #244]	@ (8003d28 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	4613      	mov	r3, r2
 8003c36:	009b      	lsls	r3, r3, #2
 8003c38:	4413      	add	r3, r2
 8003c3a:	00da      	lsls	r2, r3, #3
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	0d1b      	lsrs	r3, r3, #20
 8003c40:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8003c48:	e060      	b.n	8003d0c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8003c50:	d107      	bne.n	8003c62 <SPI_WaitFifoStateUntilTimeout+0x62>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d104      	bne.n	8003c62 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8003c58:	69fb      	ldr	r3, [r7, #28]
 8003c5a:	781b      	ldrb	r3, [r3, #0]
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8003c60:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c68:	d050      	beq.n	8003d0c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c6a:	f7fe f8ed 	bl	8001e48 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	6a3b      	ldr	r3, [r7, #32]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c76:	429a      	cmp	r2, r3
 8003c78:	d902      	bls.n	8003c80 <SPI_WaitFifoStateUntilTimeout+0x80>
 8003c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d13d      	bne.n	8003cfc <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685a      	ldr	r2, [r3, #4]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c8e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c98:	d111      	bne.n	8003cbe <SPI_WaitFifoStateUntilTimeout+0xbe>
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ca2:	d004      	beq.n	8003cae <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cac:	d107      	bne.n	8003cbe <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	681a      	ldr	r2, [r3, #0]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cbc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003cc6:	d10f      	bne.n	8003ce8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	681a      	ldr	r2, [r3, #0]
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cd6:	601a      	str	r2, [r3, #0]
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003ce6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003cf8:	2303      	movs	r3, #3
 8003cfa:	e010      	b.n	8003d1e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cfc:	69bb      	ldr	r3, [r7, #24]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003d02:	2300      	movs	r3, #0
 8003d04:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8003d06:	69bb      	ldr	r3, [r7, #24]
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	4013      	ands	r3, r2
 8003d16:	687a      	ldr	r2, [r7, #4]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d196      	bne.n	8003c4a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003d1c:	2300      	movs	r3, #0
}
 8003d1e:	4618      	mov	r0, r3
 8003d20:	3728      	adds	r7, #40	@ 0x28
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	20000000 	.word	0x20000000

08003d2c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af02      	add	r7, sp, #8
 8003d32:	60f8      	str	r0, [r7, #12]
 8003d34:	60b9      	str	r1, [r7, #8]
 8003d36:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	9300      	str	r3, [sp, #0]
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003d44:	68f8      	ldr	r0, [r7, #12]
 8003d46:	f7ff ff5b 	bl	8003c00 <SPI_WaitFifoStateUntilTimeout>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d007      	beq.n	8003d60 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e027      	b.n	8003db0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	9300      	str	r3, [sp, #0]
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	2200      	movs	r2, #0
 8003d68:	2180      	movs	r1, #128	@ 0x80
 8003d6a:	68f8      	ldr	r0, [r7, #12]
 8003d6c:	f7ff fec0 	bl	8003af0 <SPI_WaitFlagStateUntilTimeout>
 8003d70:	4603      	mov	r3, r0
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d007      	beq.n	8003d86 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d7a:	f043 0220 	orr.w	r2, r3, #32
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003d82:	2303      	movs	r3, #3
 8003d84:	e014      	b.n	8003db0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	9300      	str	r3, [sp, #0]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f7ff ff34 	bl	8003c00 <SPI_WaitFifoStateUntilTimeout>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d007      	beq.n	8003dae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003da2:	f043 0220 	orr.w	r2, r3, #32
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e000      	b.n	8003db0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3710      	adds	r7, #16
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b082      	sub	sp, #8
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d101      	bne.n	8003dca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e049      	b.n	8003e5e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d106      	bne.n	8003de4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f000 f841 	bl	8003e66 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2202      	movs	r2, #2
 8003de8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	3304      	adds	r3, #4
 8003df4:	4619      	mov	r1, r3
 8003df6:	4610      	mov	r0, r2
 8003df8:	f000 fa30 	bl	800425c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e5c:	2300      	movs	r3, #0
}
 8003e5e:	4618      	mov	r0, r3
 8003e60:	3708      	adds	r7, #8
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}

08003e66 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
	...

08003e7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b085      	sub	sp, #20
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	2b01      	cmp	r3, #1
 8003e8e:	d001      	beq.n	8003e94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003e90:	2301      	movs	r3, #1
 8003e92:	e054      	b.n	8003f3e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68da      	ldr	r2, [r3, #12]
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f042 0201 	orr.w	r2, r2, #1
 8003eaa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4a26      	ldr	r2, [pc, #152]	@ (8003f4c <HAL_TIM_Base_Start_IT+0xd0>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d022      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ebe:	d01d      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a22      	ldr	r2, [pc, #136]	@ (8003f50 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d018      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a21      	ldr	r2, [pc, #132]	@ (8003f54 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d013      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	4a1f      	ldr	r2, [pc, #124]	@ (8003f58 <HAL_TIM_Base_Start_IT+0xdc>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d00e      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	4a1e      	ldr	r2, [pc, #120]	@ (8003f5c <HAL_TIM_Base_Start_IT+0xe0>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d009      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a1c      	ldr	r2, [pc, #112]	@ (8003f60 <HAL_TIM_Base_Start_IT+0xe4>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d004      	beq.n	8003efc <HAL_TIM_Base_Start_IT+0x80>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a1b      	ldr	r2, [pc, #108]	@ (8003f64 <HAL_TIM_Base_Start_IT+0xe8>)
 8003ef8:	4293      	cmp	r3, r2
 8003efa:	d115      	bne.n	8003f28 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	689a      	ldr	r2, [r3, #8]
 8003f02:	4b19      	ldr	r3, [pc, #100]	@ (8003f68 <HAL_TIM_Base_Start_IT+0xec>)
 8003f04:	4013      	ands	r3, r2
 8003f06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	2b06      	cmp	r3, #6
 8003f0c:	d015      	beq.n	8003f3a <HAL_TIM_Base_Start_IT+0xbe>
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f14:	d011      	beq.n	8003f3a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f042 0201 	orr.w	r2, r2, #1
 8003f24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f26:	e008      	b.n	8003f3a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	681a      	ldr	r2, [r3, #0]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	f042 0201 	orr.w	r2, r2, #1
 8003f36:	601a      	str	r2, [r3, #0]
 8003f38:	e000      	b.n	8003f3c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f3c:	2300      	movs	r3, #0
}
 8003f3e:	4618      	mov	r0, r3
 8003f40:	3714      	adds	r7, #20
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
 8003f4a:	bf00      	nop
 8003f4c:	40012c00 	.word	0x40012c00
 8003f50:	40000400 	.word	0x40000400
 8003f54:	40000800 	.word	0x40000800
 8003f58:	40000c00 	.word	0x40000c00
 8003f5c:	40013400 	.word	0x40013400
 8003f60:	40014000 	.word	0x40014000
 8003f64:	40015000 	.word	0x40015000
 8003f68:	00010007 	.word	0x00010007

08003f6c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b084      	sub	sp, #16
 8003f70:	af00      	add	r7, sp, #0
 8003f72:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
 8003f7a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	f003 0302 	and.w	r3, r3, #2
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d020      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	f003 0302 	and.w	r3, r3, #2
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d01b      	beq.n	8003fd0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0202 	mvn.w	r2, #2
 8003fa0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	699b      	ldr	r3, [r3, #24]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f931 	bl	800421e <HAL_TIM_IC_CaptureCallback>
 8003fbc:	e005      	b.n	8003fca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 f923 	bl	800420a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 f934 	bl	8004232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fd0:	68bb      	ldr	r3, [r7, #8]
 8003fd2:	f003 0304 	and.w	r3, r3, #4
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d020      	beq.n	800401c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f003 0304 	and.w	r3, r3, #4
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d01b      	beq.n	800401c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f06f 0204 	mvn.w	r2, #4
 8003fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004002:	6878      	ldr	r0, [r7, #4]
 8004004:	f000 f90b 	bl	800421e <HAL_TIM_IC_CaptureCallback>
 8004008:	e005      	b.n	8004016 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 f8fd 	bl	800420a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004010:	6878      	ldr	r0, [r7, #4]
 8004012:	f000 f90e 	bl	8004232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	f003 0308 	and.w	r3, r3, #8
 8004022:	2b00      	cmp	r3, #0
 8004024:	d020      	beq.n	8004068 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	f003 0308 	and.w	r3, r3, #8
 800402c:	2b00      	cmp	r3, #0
 800402e:	d01b      	beq.n	8004068 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f06f 0208 	mvn.w	r2, #8
 8004038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2204      	movs	r2, #4
 800403e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	69db      	ldr	r3, [r3, #28]
 8004046:	f003 0303 	and.w	r3, r3, #3
 800404a:	2b00      	cmp	r3, #0
 800404c:	d003      	beq.n	8004056 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800404e:	6878      	ldr	r0, [r7, #4]
 8004050:	f000 f8e5 	bl	800421e <HAL_TIM_IC_CaptureCallback>
 8004054:	e005      	b.n	8004062 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f000 f8d7 	bl	800420a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f000 f8e8 	bl	8004232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	f003 0310 	and.w	r3, r3, #16
 800406e:	2b00      	cmp	r3, #0
 8004070:	d020      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f003 0310 	and.w	r3, r3, #16
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01b      	beq.n	80040b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f06f 0210 	mvn.w	r2, #16
 8004084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2208      	movs	r2, #8
 800408a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	69db      	ldr	r3, [r3, #28]
 8004092:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004096:	2b00      	cmp	r3, #0
 8004098:	d003      	beq.n	80040a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800409a:	6878      	ldr	r0, [r7, #4]
 800409c:	f000 f8bf 	bl	800421e <HAL_TIM_IC_CaptureCallback>
 80040a0:	e005      	b.n	80040ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f8b1 	bl	800420a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040a8:	6878      	ldr	r0, [r7, #4]
 80040aa:	f000 f8c2 	bl	8004232 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d00c      	beq.n	80040d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f003 0301 	and.w	r3, r3, #1
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d007      	beq.n	80040d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f06f 0201 	mvn.w	r2, #1
 80040d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fd fb5a 	bl	800178c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d104      	bne.n	80040ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d00c      	beq.n	8004106 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80040fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004100:	6878      	ldr	r0, [r7, #4]
 8004102:	f000 f969 	bl	80043d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800410c:	2b00      	cmp	r3, #0
 800410e:	d00c      	beq.n	800412a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004116:	2b00      	cmp	r3, #0
 8004118:	d007      	beq.n	800412a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004122:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004124:	6878      	ldr	r0, [r7, #4]
 8004126:	f000 f961 	bl	80043ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004130:	2b00      	cmp	r3, #0
 8004132:	d00c      	beq.n	800414e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800413a:	2b00      	cmp	r3, #0
 800413c:	d007      	beq.n	800414e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004146:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004148:	6878      	ldr	r0, [r7, #4]
 800414a:	f000 f87c 	bl	8004246 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f003 0320 	and.w	r3, r3, #32
 8004154:	2b00      	cmp	r3, #0
 8004156:	d00c      	beq.n	8004172 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	f003 0320 	and.w	r3, r3, #32
 800415e:	2b00      	cmp	r3, #0
 8004160:	d007      	beq.n	8004172 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f06f 0220 	mvn.w	r2, #32
 800416a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800416c:	6878      	ldr	r0, [r7, #4]
 800416e:	f000 f929 	bl	80043c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8004172:	68bb      	ldr	r3, [r7, #8]
 8004174:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004178:	2b00      	cmp	r3, #0
 800417a:	d00c      	beq.n	8004196 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004182:	2b00      	cmp	r3, #0
 8004184:	d007      	beq.n	8004196 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800418e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f935 	bl	8004400 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00c      	beq.n	80041ba <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80041b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f000 f92d 	bl	8004414 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80041ba:	68bb      	ldr	r3, [r7, #8]
 80041bc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d00c      	beq.n	80041de <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d007      	beq.n	80041de <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80041d6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 f925 	bl	8004428 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00c      	beq.n	8004202 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d007      	beq.n	8004202 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80041fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80041fc:	6878      	ldr	r0, [r7, #4]
 80041fe:	f000 f91d 	bl	800443c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004202:	bf00      	nop
 8004204:	3710      	adds	r7, #16
 8004206:	46bd      	mov	sp, r7
 8004208:	bd80      	pop	{r7, pc}

0800420a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800420a:	b480      	push	{r7}
 800420c:	b083      	sub	sp, #12
 800420e:	af00      	add	r7, sp, #0
 8004210:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004212:	bf00      	nop
 8004214:	370c      	adds	r7, #12
 8004216:	46bd      	mov	sp, r7
 8004218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421c:	4770      	bx	lr

0800421e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800421e:	b480      	push	{r7}
 8004220:	b083      	sub	sp, #12
 8004222:	af00      	add	r7, sp, #0
 8004224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004226:	bf00      	nop
 8004228:	370c      	adds	r7, #12
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004232:	b480      	push	{r7}
 8004234:	b083      	sub	sp, #12
 8004236:	af00      	add	r7, sp, #0
 8004238:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800423a:	bf00      	nop
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004244:	4770      	bx	lr

08004246 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004246:	b480      	push	{r7}
 8004248:	b083      	sub	sp, #12
 800424a:	af00      	add	r7, sp, #0
 800424c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800424e:	bf00      	nop
 8004250:	370c      	adds	r7, #12
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
	...

0800425c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800425c:	b480      	push	{r7}
 800425e:	b085      	sub	sp, #20
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	4a4c      	ldr	r2, [pc, #304]	@ (80043a0 <TIM_Base_SetConfig+0x144>)
 8004270:	4293      	cmp	r3, r2
 8004272:	d017      	beq.n	80042a4 <TIM_Base_SetConfig+0x48>
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800427a:	d013      	beq.n	80042a4 <TIM_Base_SetConfig+0x48>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	4a49      	ldr	r2, [pc, #292]	@ (80043a4 <TIM_Base_SetConfig+0x148>)
 8004280:	4293      	cmp	r3, r2
 8004282:	d00f      	beq.n	80042a4 <TIM_Base_SetConfig+0x48>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	4a48      	ldr	r2, [pc, #288]	@ (80043a8 <TIM_Base_SetConfig+0x14c>)
 8004288:	4293      	cmp	r3, r2
 800428a:	d00b      	beq.n	80042a4 <TIM_Base_SetConfig+0x48>
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a47      	ldr	r2, [pc, #284]	@ (80043ac <TIM_Base_SetConfig+0x150>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d007      	beq.n	80042a4 <TIM_Base_SetConfig+0x48>
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	4a46      	ldr	r2, [pc, #280]	@ (80043b0 <TIM_Base_SetConfig+0x154>)
 8004298:	4293      	cmp	r3, r2
 800429a:	d003      	beq.n	80042a4 <TIM_Base_SetConfig+0x48>
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	4a45      	ldr	r2, [pc, #276]	@ (80043b4 <TIM_Base_SetConfig+0x158>)
 80042a0:	4293      	cmp	r3, r2
 80042a2:	d108      	bne.n	80042b6 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	685b      	ldr	r3, [r3, #4]
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	4313      	orrs	r3, r2
 80042b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a39      	ldr	r2, [pc, #228]	@ (80043a0 <TIM_Base_SetConfig+0x144>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d023      	beq.n	8004306 <TIM_Base_SetConfig+0xaa>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80042c4:	d01f      	beq.n	8004306 <TIM_Base_SetConfig+0xaa>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a36      	ldr	r2, [pc, #216]	@ (80043a4 <TIM_Base_SetConfig+0x148>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d01b      	beq.n	8004306 <TIM_Base_SetConfig+0xaa>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a35      	ldr	r2, [pc, #212]	@ (80043a8 <TIM_Base_SetConfig+0x14c>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d017      	beq.n	8004306 <TIM_Base_SetConfig+0xaa>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a34      	ldr	r2, [pc, #208]	@ (80043ac <TIM_Base_SetConfig+0x150>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d013      	beq.n	8004306 <TIM_Base_SetConfig+0xaa>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	4a33      	ldr	r2, [pc, #204]	@ (80043b0 <TIM_Base_SetConfig+0x154>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00f      	beq.n	8004306 <TIM_Base_SetConfig+0xaa>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	4a33      	ldr	r2, [pc, #204]	@ (80043b8 <TIM_Base_SetConfig+0x15c>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d00b      	beq.n	8004306 <TIM_Base_SetConfig+0xaa>
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	4a32      	ldr	r2, [pc, #200]	@ (80043bc <TIM_Base_SetConfig+0x160>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d007      	beq.n	8004306 <TIM_Base_SetConfig+0xaa>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	4a31      	ldr	r2, [pc, #196]	@ (80043c0 <TIM_Base_SetConfig+0x164>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d003      	beq.n	8004306 <TIM_Base_SetConfig+0xaa>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	4a2c      	ldr	r2, [pc, #176]	@ (80043b4 <TIM_Base_SetConfig+0x158>)
 8004302:	4293      	cmp	r3, r2
 8004304:	d108      	bne.n	8004318 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800430c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	68db      	ldr	r3, [r3, #12]
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	689a      	ldr	r2, [r3, #8]
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681a      	ldr	r2, [r3, #0]
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	4a18      	ldr	r2, [pc, #96]	@ (80043a0 <TIM_Base_SetConfig+0x144>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d013      	beq.n	800436c <TIM_Base_SetConfig+0x110>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	4a1a      	ldr	r2, [pc, #104]	@ (80043b0 <TIM_Base_SetConfig+0x154>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d00f      	beq.n	800436c <TIM_Base_SetConfig+0x110>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	4a1a      	ldr	r2, [pc, #104]	@ (80043b8 <TIM_Base_SetConfig+0x15c>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d00b      	beq.n	800436c <TIM_Base_SetConfig+0x110>
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a19      	ldr	r2, [pc, #100]	@ (80043bc <TIM_Base_SetConfig+0x160>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d007      	beq.n	800436c <TIM_Base_SetConfig+0x110>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	4a18      	ldr	r2, [pc, #96]	@ (80043c0 <TIM_Base_SetConfig+0x164>)
 8004360:	4293      	cmp	r3, r2
 8004362:	d003      	beq.n	800436c <TIM_Base_SetConfig+0x110>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a13      	ldr	r2, [pc, #76]	@ (80043b4 <TIM_Base_SetConfig+0x158>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d103      	bne.n	8004374 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	691b      	ldr	r3, [r3, #16]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b01      	cmp	r3, #1
 8004384:	d105      	bne.n	8004392 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	f023 0201 	bic.w	r2, r3, #1
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	611a      	str	r2, [r3, #16]
  }
}
 8004392:	bf00      	nop
 8004394:	3714      	adds	r7, #20
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr
 800439e:	bf00      	nop
 80043a0:	40012c00 	.word	0x40012c00
 80043a4:	40000400 	.word	0x40000400
 80043a8:	40000800 	.word	0x40000800
 80043ac:	40000c00 	.word	0x40000c00
 80043b0:	40013400 	.word	0x40013400
 80043b4:	40015000 	.word	0x40015000
 80043b8:	40014000 	.word	0x40014000
 80043bc:	40014400 	.word	0x40014400
 80043c0:	40014800 	.word	0x40014800

080043c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b083      	sub	sp, #12
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80043cc:	bf00      	nop
 80043ce:	370c      	adds	r7, #12
 80043d0:	46bd      	mov	sp, r7
 80043d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d6:	4770      	bx	lr

080043d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80043d8:	b480      	push	{r7}
 80043da:	b083      	sub	sp, #12
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80043e0:	bf00      	nop
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b083      	sub	sp, #12
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80043f4:	bf00      	nop
 80043f6:	370c      	adds	r7, #12
 80043f8:	46bd      	mov	sp, r7
 80043fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043fe:	4770      	bx	lr

08004400 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr

08004414 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8004414:	b480      	push	{r7}
 8004416:	b083      	sub	sp, #12
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800441c:	bf00      	nop
 800441e:	370c      	adds	r7, #12
 8004420:	46bd      	mov	sp, r7
 8004422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004426:	4770      	bx	lr

08004428 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8004428:	b480      	push	{r7}
 800442a:	b083      	sub	sp, #12
 800442c:	af00      	add	r7, sp, #0
 800442e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8004430:	bf00      	nop
 8004432:	370c      	adds	r7, #12
 8004434:	46bd      	mov	sp, r7
 8004436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443a:	4770      	bx	lr

0800443c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8004444:	bf00      	nop
 8004446:	370c      	adds	r7, #12
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e042      	b.n	80044e8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004468:	2b00      	cmp	r3, #0
 800446a:	d106      	bne.n	800447a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004474:	6878      	ldr	r0, [r7, #4]
 8004476:	f7fd facf 	bl	8001a18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2224      	movs	r2, #36	@ 0x24
 800447e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004496:	2b00      	cmp	r3, #0
 8004498:	d002      	beq.n	80044a0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800449a:	6878      	ldr	r0, [r7, #4]
 800449c:	f000 fc7a 	bl	8004d94 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044a0:	6878      	ldr	r0, [r7, #4]
 80044a2:	f000 f97b 	bl	800479c <UART_SetConfig>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d101      	bne.n	80044b0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80044ac:	2301      	movs	r3, #1
 80044ae:	e01b      	b.n	80044e8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80044be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80044ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fcf9 	bl	8004ed8 <UART_CheckIdleState>
 80044e6:	4603      	mov	r3, r0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b08a      	sub	sp, #40	@ 0x28
 80044f4:	af02      	add	r7, sp, #8
 80044f6:	60f8      	str	r0, [r7, #12]
 80044f8:	60b9      	str	r1, [r7, #8]
 80044fa:	603b      	str	r3, [r7, #0]
 80044fc:	4613      	mov	r3, r2
 80044fe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004506:	2b20      	cmp	r3, #32
 8004508:	d17b      	bne.n	8004602 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	2b00      	cmp	r3, #0
 800450e:	d002      	beq.n	8004516 <HAL_UART_Transmit+0x26>
 8004510:	88fb      	ldrh	r3, [r7, #6]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d101      	bne.n	800451a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e074      	b.n	8004604 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	2200      	movs	r2, #0
 800451e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2221      	movs	r2, #33	@ 0x21
 8004526:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800452a:	f7fd fc8d 	bl	8001e48 <HAL_GetTick>
 800452e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	88fa      	ldrh	r2, [r7, #6]
 8004534:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	88fa      	ldrh	r2, [r7, #6]
 800453c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004548:	d108      	bne.n	800455c <HAL_UART_Transmit+0x6c>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004552:	2300      	movs	r3, #0
 8004554:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004556:	68bb      	ldr	r3, [r7, #8]
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	e003      	b.n	8004564 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004560:	2300      	movs	r3, #0
 8004562:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004564:	e030      	b.n	80045c8 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	9300      	str	r3, [sp, #0]
 800456a:	697b      	ldr	r3, [r7, #20]
 800456c:	2200      	movs	r2, #0
 800456e:	2180      	movs	r1, #128	@ 0x80
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 fd5b 	bl	800502c <UART_WaitOnFlagUntilTimeout>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	2220      	movs	r2, #32
 8004580:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e03d      	b.n	8004604 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	2b00      	cmp	r3, #0
 800458c:	d10b      	bne.n	80045a6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800458e:	69bb      	ldr	r3, [r7, #24]
 8004590:	881b      	ldrh	r3, [r3, #0]
 8004592:	461a      	mov	r2, r3
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800459c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	3302      	adds	r3, #2
 80045a2:	61bb      	str	r3, [r7, #24]
 80045a4:	e007      	b.n	80045b6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045a6:	69fb      	ldr	r3, [r7, #28]
 80045a8:	781a      	ldrb	r2, [r3, #0]
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80045b0:	69fb      	ldr	r3, [r7, #28]
 80045b2:	3301      	adds	r3, #1
 80045b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1c8      	bne.n	8004566 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	9300      	str	r3, [sp, #0]
 80045d8:	697b      	ldr	r3, [r7, #20]
 80045da:	2200      	movs	r2, #0
 80045dc:	2140      	movs	r1, #64	@ 0x40
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 fd24 	bl	800502c <UART_WaitOnFlagUntilTimeout>
 80045e4:	4603      	mov	r3, r0
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d005      	beq.n	80045f6 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	2220      	movs	r2, #32
 80045ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80045f2:	2303      	movs	r3, #3
 80045f4:	e006      	b.n	8004604 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	2220      	movs	r2, #32
 80045fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80045fe:	2300      	movs	r3, #0
 8004600:	e000      	b.n	8004604 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004602:	2302      	movs	r3, #2
  }
}
 8004604:	4618      	mov	r0, r3
 8004606:	3720      	adds	r7, #32
 8004608:	46bd      	mov	sp, r7
 800460a:	bd80      	pop	{r7, pc}

0800460c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b08a      	sub	sp, #40	@ 0x28
 8004610:	af02      	add	r7, sp, #8
 8004612:	60f8      	str	r0, [r7, #12]
 8004614:	60b9      	str	r1, [r7, #8]
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	4613      	mov	r3, r2
 800461a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004622:	2b20      	cmp	r3, #32
 8004624:	f040 80b5 	bne.w	8004792 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <HAL_UART_Receive+0x28>
 800462e:	88fb      	ldrh	r3, [r7, #6]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e0ad      	b.n	8004794 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2200      	movs	r2, #0
 800463c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	2222      	movs	r2, #34	@ 0x22
 8004644:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2200      	movs	r2, #0
 800464c:	66da      	str	r2, [r3, #108]	@ 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800464e:	f7fd fbfb 	bl	8001e48 <HAL_GetTick>
 8004652:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	88fa      	ldrh	r2, [r7, #6]
 8004658:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    huart->RxXferCount = Size;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	88fa      	ldrh	r2, [r7, #6]
 8004660:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800466c:	d10e      	bne.n	800468c <HAL_UART_Receive+0x80>
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	691b      	ldr	r3, [r3, #16]
 8004672:	2b00      	cmp	r3, #0
 8004674:	d105      	bne.n	8004682 <HAL_UART_Receive+0x76>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800467c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8004680:	e02d      	b.n	80046de <HAL_UART_Receive+0xd2>
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	22ff      	movs	r2, #255	@ 0xff
 8004686:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800468a:	e028      	b.n	80046de <HAL_UART_Receive+0xd2>
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d10d      	bne.n	80046b0 <HAL_UART_Receive+0xa4>
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d104      	bne.n	80046a6 <HAL_UART_Receive+0x9a>
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	22ff      	movs	r2, #255	@ 0xff
 80046a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046a4:	e01b      	b.n	80046de <HAL_UART_Receive+0xd2>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	227f      	movs	r2, #127	@ 0x7f
 80046aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046ae:	e016      	b.n	80046de <HAL_UART_Receive+0xd2>
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80046b8:	d10d      	bne.n	80046d6 <HAL_UART_Receive+0xca>
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	691b      	ldr	r3, [r3, #16]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d104      	bne.n	80046cc <HAL_UART_Receive+0xc0>
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	227f      	movs	r2, #127	@ 0x7f
 80046c6:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046ca:	e008      	b.n	80046de <HAL_UART_Receive+0xd2>
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	223f      	movs	r2, #63	@ 0x3f
 80046d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80046d4:	e003      	b.n	80046de <HAL_UART_Receive+0xd2>
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	2200      	movs	r2, #0
 80046da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
    uhMask = huart->Mask;
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80046e4:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80046ee:	d108      	bne.n	8004702 <HAL_UART_Receive+0xf6>
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d104      	bne.n	8004702 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80046f8:	2300      	movs	r3, #0
 80046fa:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80046fc:	68bb      	ldr	r3, [r7, #8]
 80046fe:	61bb      	str	r3, [r7, #24]
 8004700:	e003      	b.n	800470a <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004706:	2300      	movs	r3, #0
 8004708:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800470a:	e036      	b.n	800477a <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	9300      	str	r3, [sp, #0]
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	2200      	movs	r2, #0
 8004714:	2120      	movs	r1, #32
 8004716:	68f8      	ldr	r0, [r7, #12]
 8004718:	f000 fc88 	bl	800502c <UART_WaitOnFlagUntilTimeout>
 800471c:	4603      	mov	r3, r0
 800471e:	2b00      	cmp	r3, #0
 8004720:	d005      	beq.n	800472e <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        return HAL_TIMEOUT;
 800472a:	2303      	movs	r3, #3
 800472c:	e032      	b.n	8004794 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10c      	bne.n	800474e <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800473a:	b29a      	uxth	r2, r3
 800473c:	8a7b      	ldrh	r3, [r7, #18]
 800473e:	4013      	ands	r3, r2
 8004740:	b29a      	uxth	r2, r3
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004746:	69bb      	ldr	r3, [r7, #24]
 8004748:	3302      	adds	r3, #2
 800474a:	61bb      	str	r3, [r7, #24]
 800474c:	e00c      	b.n	8004768 <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004754:	b2da      	uxtb	r2, r3
 8004756:	8a7b      	ldrh	r3, [r7, #18]
 8004758:	b2db      	uxtb	r3, r3
 800475a:	4013      	ands	r3, r2
 800475c:	b2da      	uxtb	r2, r3
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004762:	69fb      	ldr	r3, [r7, #28]
 8004764:	3301      	adds	r3, #1
 8004766:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
    while (huart->RxXferCount > 0U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004780:	b29b      	uxth	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1c2      	bne.n	800470c <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	2220      	movs	r2, #32
 800478a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

    return HAL_OK;
 800478e:	2300      	movs	r3, #0
 8004790:	e000      	b.n	8004794 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8004792:	2302      	movs	r3, #2
  }
}
 8004794:	4618      	mov	r0, r3
 8004796:	3720      	adds	r7, #32
 8004798:	46bd      	mov	sp, r7
 800479a:	bd80      	pop	{r7, pc}

0800479c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800479c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047a0:	b08c      	sub	sp, #48	@ 0x30
 80047a2:	af00      	add	r7, sp, #0
 80047a4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047a6:	2300      	movs	r3, #0
 80047a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	689a      	ldr	r2, [r3, #8]
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	431a      	orrs	r2, r3
 80047b6:	697b      	ldr	r3, [r7, #20]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	431a      	orrs	r2, r3
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	4baa      	ldr	r3, [pc, #680]	@ (8004a74 <UART_SetConfig+0x2d8>)
 80047cc:	4013      	ands	r3, r2
 80047ce:	697a      	ldr	r2, [r7, #20]
 80047d0:	6812      	ldr	r2, [r2, #0]
 80047d2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047d4:	430b      	orrs	r3, r1
 80047d6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	685b      	ldr	r3, [r3, #4]
 80047de:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80047e2:	697b      	ldr	r3, [r7, #20]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	697b      	ldr	r3, [r7, #20]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	430a      	orrs	r2, r1
 80047ec:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80047f4:	697b      	ldr	r3, [r7, #20]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a9f      	ldr	r2, [pc, #636]	@ (8004a78 <UART_SetConfig+0x2dc>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d004      	beq.n	8004808 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	6a1b      	ldr	r3, [r3, #32]
 8004802:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004804:	4313      	orrs	r3, r2
 8004806:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004812:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004816:	697a      	ldr	r2, [r7, #20]
 8004818:	6812      	ldr	r2, [r2, #0]
 800481a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800481c:	430b      	orrs	r3, r1
 800481e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004826:	f023 010f 	bic.w	r1, r3, #15
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800482e:	697b      	ldr	r3, [r7, #20]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4a90      	ldr	r2, [pc, #576]	@ (8004a7c <UART_SetConfig+0x2e0>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d125      	bne.n	800488c <UART_SetConfig+0xf0>
 8004840:	4b8f      	ldr	r3, [pc, #572]	@ (8004a80 <UART_SetConfig+0x2e4>)
 8004842:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004846:	f003 0303 	and.w	r3, r3, #3
 800484a:	2b03      	cmp	r3, #3
 800484c:	d81a      	bhi.n	8004884 <UART_SetConfig+0xe8>
 800484e:	a201      	add	r2, pc, #4	@ (adr r2, 8004854 <UART_SetConfig+0xb8>)
 8004850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004854:	08004865 	.word	0x08004865
 8004858:	08004875 	.word	0x08004875
 800485c:	0800486d 	.word	0x0800486d
 8004860:	0800487d 	.word	0x0800487d
 8004864:	2301      	movs	r3, #1
 8004866:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800486a:	e116      	b.n	8004a9a <UART_SetConfig+0x2fe>
 800486c:	2302      	movs	r3, #2
 800486e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004872:	e112      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004874:	2304      	movs	r3, #4
 8004876:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800487a:	e10e      	b.n	8004a9a <UART_SetConfig+0x2fe>
 800487c:	2308      	movs	r3, #8
 800487e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004882:	e10a      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004884:	2310      	movs	r3, #16
 8004886:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800488a:	e106      	b.n	8004a9a <UART_SetConfig+0x2fe>
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	4a7c      	ldr	r2, [pc, #496]	@ (8004a84 <UART_SetConfig+0x2e8>)
 8004892:	4293      	cmp	r3, r2
 8004894:	d138      	bne.n	8004908 <UART_SetConfig+0x16c>
 8004896:	4b7a      	ldr	r3, [pc, #488]	@ (8004a80 <UART_SetConfig+0x2e4>)
 8004898:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b0c      	cmp	r3, #12
 80048a2:	d82d      	bhi.n	8004900 <UART_SetConfig+0x164>
 80048a4:	a201      	add	r2, pc, #4	@ (adr r2, 80048ac <UART_SetConfig+0x110>)
 80048a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048aa:	bf00      	nop
 80048ac:	080048e1 	.word	0x080048e1
 80048b0:	08004901 	.word	0x08004901
 80048b4:	08004901 	.word	0x08004901
 80048b8:	08004901 	.word	0x08004901
 80048bc:	080048f1 	.word	0x080048f1
 80048c0:	08004901 	.word	0x08004901
 80048c4:	08004901 	.word	0x08004901
 80048c8:	08004901 	.word	0x08004901
 80048cc:	080048e9 	.word	0x080048e9
 80048d0:	08004901 	.word	0x08004901
 80048d4:	08004901 	.word	0x08004901
 80048d8:	08004901 	.word	0x08004901
 80048dc:	080048f9 	.word	0x080048f9
 80048e0:	2300      	movs	r3, #0
 80048e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048e6:	e0d8      	b.n	8004a9a <UART_SetConfig+0x2fe>
 80048e8:	2302      	movs	r3, #2
 80048ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048ee:	e0d4      	b.n	8004a9a <UART_SetConfig+0x2fe>
 80048f0:	2304      	movs	r3, #4
 80048f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048f6:	e0d0      	b.n	8004a9a <UART_SetConfig+0x2fe>
 80048f8:	2308      	movs	r3, #8
 80048fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80048fe:	e0cc      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004900:	2310      	movs	r3, #16
 8004902:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004906:	e0c8      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	4a5e      	ldr	r2, [pc, #376]	@ (8004a88 <UART_SetConfig+0x2ec>)
 800490e:	4293      	cmp	r3, r2
 8004910:	d125      	bne.n	800495e <UART_SetConfig+0x1c2>
 8004912:	4b5b      	ldr	r3, [pc, #364]	@ (8004a80 <UART_SetConfig+0x2e4>)
 8004914:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004918:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800491c:	2b30      	cmp	r3, #48	@ 0x30
 800491e:	d016      	beq.n	800494e <UART_SetConfig+0x1b2>
 8004920:	2b30      	cmp	r3, #48	@ 0x30
 8004922:	d818      	bhi.n	8004956 <UART_SetConfig+0x1ba>
 8004924:	2b20      	cmp	r3, #32
 8004926:	d00a      	beq.n	800493e <UART_SetConfig+0x1a2>
 8004928:	2b20      	cmp	r3, #32
 800492a:	d814      	bhi.n	8004956 <UART_SetConfig+0x1ba>
 800492c:	2b00      	cmp	r3, #0
 800492e:	d002      	beq.n	8004936 <UART_SetConfig+0x19a>
 8004930:	2b10      	cmp	r3, #16
 8004932:	d008      	beq.n	8004946 <UART_SetConfig+0x1aa>
 8004934:	e00f      	b.n	8004956 <UART_SetConfig+0x1ba>
 8004936:	2300      	movs	r3, #0
 8004938:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800493c:	e0ad      	b.n	8004a9a <UART_SetConfig+0x2fe>
 800493e:	2302      	movs	r3, #2
 8004940:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004944:	e0a9      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004946:	2304      	movs	r3, #4
 8004948:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800494c:	e0a5      	b.n	8004a9a <UART_SetConfig+0x2fe>
 800494e:	2308      	movs	r3, #8
 8004950:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004954:	e0a1      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004956:	2310      	movs	r3, #16
 8004958:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800495c:	e09d      	b.n	8004a9a <UART_SetConfig+0x2fe>
 800495e:	697b      	ldr	r3, [r7, #20]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	4a4a      	ldr	r2, [pc, #296]	@ (8004a8c <UART_SetConfig+0x2f0>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d125      	bne.n	80049b4 <UART_SetConfig+0x218>
 8004968:	4b45      	ldr	r3, [pc, #276]	@ (8004a80 <UART_SetConfig+0x2e4>)
 800496a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800496e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004972:	2bc0      	cmp	r3, #192	@ 0xc0
 8004974:	d016      	beq.n	80049a4 <UART_SetConfig+0x208>
 8004976:	2bc0      	cmp	r3, #192	@ 0xc0
 8004978:	d818      	bhi.n	80049ac <UART_SetConfig+0x210>
 800497a:	2b80      	cmp	r3, #128	@ 0x80
 800497c:	d00a      	beq.n	8004994 <UART_SetConfig+0x1f8>
 800497e:	2b80      	cmp	r3, #128	@ 0x80
 8004980:	d814      	bhi.n	80049ac <UART_SetConfig+0x210>
 8004982:	2b00      	cmp	r3, #0
 8004984:	d002      	beq.n	800498c <UART_SetConfig+0x1f0>
 8004986:	2b40      	cmp	r3, #64	@ 0x40
 8004988:	d008      	beq.n	800499c <UART_SetConfig+0x200>
 800498a:	e00f      	b.n	80049ac <UART_SetConfig+0x210>
 800498c:	2300      	movs	r3, #0
 800498e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004992:	e082      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004994:	2302      	movs	r3, #2
 8004996:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800499a:	e07e      	b.n	8004a9a <UART_SetConfig+0x2fe>
 800499c:	2304      	movs	r3, #4
 800499e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049a2:	e07a      	b.n	8004a9a <UART_SetConfig+0x2fe>
 80049a4:	2308      	movs	r3, #8
 80049a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049aa:	e076      	b.n	8004a9a <UART_SetConfig+0x2fe>
 80049ac:	2310      	movs	r3, #16
 80049ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049b2:	e072      	b.n	8004a9a <UART_SetConfig+0x2fe>
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a35      	ldr	r2, [pc, #212]	@ (8004a90 <UART_SetConfig+0x2f4>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d12a      	bne.n	8004a14 <UART_SetConfig+0x278>
 80049be:	4b30      	ldr	r3, [pc, #192]	@ (8004a80 <UART_SetConfig+0x2e4>)
 80049c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049cc:	d01a      	beq.n	8004a04 <UART_SetConfig+0x268>
 80049ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80049d2:	d81b      	bhi.n	8004a0c <UART_SetConfig+0x270>
 80049d4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049d8:	d00c      	beq.n	80049f4 <UART_SetConfig+0x258>
 80049da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80049de:	d815      	bhi.n	8004a0c <UART_SetConfig+0x270>
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d003      	beq.n	80049ec <UART_SetConfig+0x250>
 80049e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80049e8:	d008      	beq.n	80049fc <UART_SetConfig+0x260>
 80049ea:	e00f      	b.n	8004a0c <UART_SetConfig+0x270>
 80049ec:	2300      	movs	r3, #0
 80049ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049f2:	e052      	b.n	8004a9a <UART_SetConfig+0x2fe>
 80049f4:	2302      	movs	r3, #2
 80049f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80049fa:	e04e      	b.n	8004a9a <UART_SetConfig+0x2fe>
 80049fc:	2304      	movs	r3, #4
 80049fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a02:	e04a      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004a04:	2308      	movs	r3, #8
 8004a06:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a0a:	e046      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004a0c:	2310      	movs	r3, #16
 8004a0e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a12:	e042      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	4a17      	ldr	r2, [pc, #92]	@ (8004a78 <UART_SetConfig+0x2dc>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d13a      	bne.n	8004a94 <UART_SetConfig+0x2f8>
 8004a1e:	4b18      	ldr	r3, [pc, #96]	@ (8004a80 <UART_SetConfig+0x2e4>)
 8004a20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a24:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004a28:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a2c:	d01a      	beq.n	8004a64 <UART_SetConfig+0x2c8>
 8004a2e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004a32:	d81b      	bhi.n	8004a6c <UART_SetConfig+0x2d0>
 8004a34:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a38:	d00c      	beq.n	8004a54 <UART_SetConfig+0x2b8>
 8004a3a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004a3e:	d815      	bhi.n	8004a6c <UART_SetConfig+0x2d0>
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <UART_SetConfig+0x2b0>
 8004a44:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004a48:	d008      	beq.n	8004a5c <UART_SetConfig+0x2c0>
 8004a4a:	e00f      	b.n	8004a6c <UART_SetConfig+0x2d0>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a52:	e022      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004a54:	2302      	movs	r3, #2
 8004a56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a5a:	e01e      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004a5c:	2304      	movs	r3, #4
 8004a5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a62:	e01a      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004a64:	2308      	movs	r3, #8
 8004a66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a6a:	e016      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004a6c:	2310      	movs	r3, #16
 8004a6e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004a72:	e012      	b.n	8004a9a <UART_SetConfig+0x2fe>
 8004a74:	cfff69f3 	.word	0xcfff69f3
 8004a78:	40008000 	.word	0x40008000
 8004a7c:	40013800 	.word	0x40013800
 8004a80:	40021000 	.word	0x40021000
 8004a84:	40004400 	.word	0x40004400
 8004a88:	40004800 	.word	0x40004800
 8004a8c:	40004c00 	.word	0x40004c00
 8004a90:	40005000 	.word	0x40005000
 8004a94:	2310      	movs	r3, #16
 8004a96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a9a:	697b      	ldr	r3, [r7, #20]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	4aae      	ldr	r2, [pc, #696]	@ (8004d58 <UART_SetConfig+0x5bc>)
 8004aa0:	4293      	cmp	r3, r2
 8004aa2:	f040 8097 	bne.w	8004bd4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aa6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004aaa:	2b08      	cmp	r3, #8
 8004aac:	d823      	bhi.n	8004af6 <UART_SetConfig+0x35a>
 8004aae:	a201      	add	r2, pc, #4	@ (adr r2, 8004ab4 <UART_SetConfig+0x318>)
 8004ab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab4:	08004ad9 	.word	0x08004ad9
 8004ab8:	08004af7 	.word	0x08004af7
 8004abc:	08004ae1 	.word	0x08004ae1
 8004ac0:	08004af7 	.word	0x08004af7
 8004ac4:	08004ae7 	.word	0x08004ae7
 8004ac8:	08004af7 	.word	0x08004af7
 8004acc:	08004af7 	.word	0x08004af7
 8004ad0:	08004af7 	.word	0x08004af7
 8004ad4:	08004aef 	.word	0x08004aef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad8:	f7fe faf8 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 8004adc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ade:	e010      	b.n	8004b02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae0:	4b9e      	ldr	r3, [pc, #632]	@ (8004d5c <UART_SetConfig+0x5c0>)
 8004ae2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004ae4:	e00d      	b.n	8004b02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ae6:	f7fe fa83 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8004aea:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004aec:	e009      	b.n	8004b02 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004af2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004af4:	e005      	b.n	8004b02 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8004af6:	2300      	movs	r3, #0
 8004af8:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004b00:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	f000 8130 	beq.w	8004d6a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b0e:	4a94      	ldr	r2, [pc, #592]	@ (8004d60 <UART_SetConfig+0x5c4>)
 8004b10:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b14:	461a      	mov	r2, r3
 8004b16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b18:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b1c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b1e:	697b      	ldr	r3, [r7, #20]
 8004b20:	685a      	ldr	r2, [r3, #4]
 8004b22:	4613      	mov	r3, r2
 8004b24:	005b      	lsls	r3, r3, #1
 8004b26:	4413      	add	r3, r2
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	429a      	cmp	r2, r3
 8004b2c:	d305      	bcc.n	8004b3a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b2e:	697b      	ldr	r3, [r7, #20]
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	429a      	cmp	r2, r3
 8004b38:	d903      	bls.n	8004b42 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004b40:	e113      	b.n	8004d6a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b44:	2200      	movs	r2, #0
 8004b46:	60bb      	str	r3, [r7, #8]
 8004b48:	60fa      	str	r2, [r7, #12]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b4e:	4a84      	ldr	r2, [pc, #528]	@ (8004d60 <UART_SetConfig+0x5c4>)
 8004b50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2200      	movs	r2, #0
 8004b58:	603b      	str	r3, [r7, #0]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b60:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b64:	f7fc f968 	bl	8000e38 <__aeabi_uldivmod>
 8004b68:	4602      	mov	r2, r0
 8004b6a:	460b      	mov	r3, r1
 8004b6c:	4610      	mov	r0, r2
 8004b6e:	4619      	mov	r1, r3
 8004b70:	f04f 0200 	mov.w	r2, #0
 8004b74:	f04f 0300 	mov.w	r3, #0
 8004b78:	020b      	lsls	r3, r1, #8
 8004b7a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004b7e:	0202      	lsls	r2, r0, #8
 8004b80:	6979      	ldr	r1, [r7, #20]
 8004b82:	6849      	ldr	r1, [r1, #4]
 8004b84:	0849      	lsrs	r1, r1, #1
 8004b86:	2000      	movs	r0, #0
 8004b88:	460c      	mov	r4, r1
 8004b8a:	4605      	mov	r5, r0
 8004b8c:	eb12 0804 	adds.w	r8, r2, r4
 8004b90:	eb43 0905 	adc.w	r9, r3, r5
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	685b      	ldr	r3, [r3, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	469a      	mov	sl, r3
 8004b9c:	4693      	mov	fp, r2
 8004b9e:	4652      	mov	r2, sl
 8004ba0:	465b      	mov	r3, fp
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	f7fc f947 	bl	8000e38 <__aeabi_uldivmod>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4613      	mov	r3, r2
 8004bb0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bb2:	6a3b      	ldr	r3, [r7, #32]
 8004bb4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bb8:	d308      	bcc.n	8004bcc <UART_SetConfig+0x430>
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bc0:	d204      	bcs.n	8004bcc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	6a3a      	ldr	r2, [r7, #32]
 8004bc8:	60da      	str	r2, [r3, #12]
 8004bca:	e0ce      	b.n	8004d6a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004bd2:	e0ca      	b.n	8004d6a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bdc:	d166      	bne.n	8004cac <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8004bde:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004be2:	2b08      	cmp	r3, #8
 8004be4:	d827      	bhi.n	8004c36 <UART_SetConfig+0x49a>
 8004be6:	a201      	add	r2, pc, #4	@ (adr r2, 8004bec <UART_SetConfig+0x450>)
 8004be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bec:	08004c11 	.word	0x08004c11
 8004bf0:	08004c19 	.word	0x08004c19
 8004bf4:	08004c21 	.word	0x08004c21
 8004bf8:	08004c37 	.word	0x08004c37
 8004bfc:	08004c27 	.word	0x08004c27
 8004c00:	08004c37 	.word	0x08004c37
 8004c04:	08004c37 	.word	0x08004c37
 8004c08:	08004c37 	.word	0x08004c37
 8004c0c:	08004c2f 	.word	0x08004c2f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004c10:	f7fe fa5c 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 8004c14:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c16:	e014      	b.n	8004c42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004c18:	f7fe fa6e 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 8004c1c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c1e:	e010      	b.n	8004c42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004c20:	4b4e      	ldr	r3, [pc, #312]	@ (8004d5c <UART_SetConfig+0x5c0>)
 8004c22:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c24:	e00d      	b.n	8004c42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004c26:	f7fe f9e3 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8004c2a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004c2c:	e009      	b.n	8004c42 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004c2e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004c32:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004c34:	e005      	b.n	8004c42 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8004c36:	2300      	movs	r3, #0
 8004c38:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004c40:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004c42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f000 8090 	beq.w	8004d6a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c4e:	4a44      	ldr	r2, [pc, #272]	@ (8004d60 <UART_SetConfig+0x5c4>)
 8004c50:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c54:	461a      	mov	r2, r3
 8004c56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c58:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c5c:	005a      	lsls	r2, r3, #1
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	085b      	lsrs	r3, r3, #1
 8004c64:	441a      	add	r2, r3
 8004c66:	697b      	ldr	r3, [r7, #20]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c6e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c70:	6a3b      	ldr	r3, [r7, #32]
 8004c72:	2b0f      	cmp	r3, #15
 8004c74:	d916      	bls.n	8004ca4 <UART_SetConfig+0x508>
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004c7c:	d212      	bcs.n	8004ca4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	b29b      	uxth	r3, r3
 8004c82:	f023 030f 	bic.w	r3, r3, #15
 8004c86:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004c88:	6a3b      	ldr	r3, [r7, #32]
 8004c8a:	085b      	lsrs	r3, r3, #1
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f003 0307 	and.w	r3, r3, #7
 8004c92:	b29a      	uxth	r2, r3
 8004c94:	8bfb      	ldrh	r3, [r7, #30]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	8bfa      	ldrh	r2, [r7, #30]
 8004ca0:	60da      	str	r2, [r3, #12]
 8004ca2:	e062      	b.n	8004d6a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8004caa:	e05e      	b.n	8004d6a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004cac:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004cb0:	2b08      	cmp	r3, #8
 8004cb2:	d828      	bhi.n	8004d06 <UART_SetConfig+0x56a>
 8004cb4:	a201      	add	r2, pc, #4	@ (adr r2, 8004cbc <UART_SetConfig+0x520>)
 8004cb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cba:	bf00      	nop
 8004cbc:	08004ce1 	.word	0x08004ce1
 8004cc0:	08004ce9 	.word	0x08004ce9
 8004cc4:	08004cf1 	.word	0x08004cf1
 8004cc8:	08004d07 	.word	0x08004d07
 8004ccc:	08004cf7 	.word	0x08004cf7
 8004cd0:	08004d07 	.word	0x08004d07
 8004cd4:	08004d07 	.word	0x08004d07
 8004cd8:	08004d07 	.word	0x08004d07
 8004cdc:	08004cff 	.word	0x08004cff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ce0:	f7fe f9f4 	bl	80030cc <HAL_RCC_GetPCLK1Freq>
 8004ce4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004ce6:	e014      	b.n	8004d12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ce8:	f7fe fa06 	bl	80030f8 <HAL_RCC_GetPCLK2Freq>
 8004cec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cee:	e010      	b.n	8004d12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004cf0:	4b1a      	ldr	r3, [pc, #104]	@ (8004d5c <UART_SetConfig+0x5c0>)
 8004cf2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004cf4:	e00d      	b.n	8004d12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004cf6:	f7fe f97b 	bl	8002ff0 <HAL_RCC_GetSysClockFreq>
 8004cfa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8004cfc:	e009      	b.n	8004d12 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cfe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d02:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8004d04:	e005      	b.n	8004d12 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8004d06:	2300      	movs	r3, #0
 8004d08:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8004d10:	bf00      	nop
    }

    if (pclk != 0U)
 8004d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d028      	beq.n	8004d6a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d1c:	4a10      	ldr	r2, [pc, #64]	@ (8004d60 <UART_SetConfig+0x5c4>)
 8004d1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d22:	461a      	mov	r2, r3
 8004d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d26:	fbb3 f2f2 	udiv	r2, r3, r2
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	685b      	ldr	r3, [r3, #4]
 8004d2e:	085b      	lsrs	r3, r3, #1
 8004d30:	441a      	add	r2, r3
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	685b      	ldr	r3, [r3, #4]
 8004d36:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3c:	6a3b      	ldr	r3, [r7, #32]
 8004d3e:	2b0f      	cmp	r3, #15
 8004d40:	d910      	bls.n	8004d64 <UART_SetConfig+0x5c8>
 8004d42:	6a3b      	ldr	r3, [r7, #32]
 8004d44:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d48:	d20c      	bcs.n	8004d64 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	60da      	str	r2, [r3, #12]
 8004d54:	e009      	b.n	8004d6a <UART_SetConfig+0x5ce>
 8004d56:	bf00      	nop
 8004d58:	40008000 	.word	0x40008000
 8004d5c:	00f42400 	.word	0x00f42400
 8004d60:	080090d8 	.word	0x080090d8
      }
      else
      {
        ret = HAL_ERROR;
 8004d64:	2301      	movs	r3, #1
 8004d66:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004d72:	697b      	ldr	r3, [r7, #20]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004d80:	697b      	ldr	r3, [r7, #20]
 8004d82:	2200      	movs	r2, #0
 8004d84:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004d86:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	3730      	adds	r7, #48	@ 0x30
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004d94 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d00a      	beq.n	8004dbe <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	685b      	ldr	r3, [r3, #4]
 8004dae:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	430a      	orrs	r2, r1
 8004dbc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004dc2:	f003 0301 	and.w	r3, r3, #1
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d00a      	beq.n	8004de0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	685b      	ldr	r3, [r3, #4]
 8004dd0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	430a      	orrs	r2, r1
 8004dde:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004de4:	f003 0302 	and.w	r3, r3, #2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d00a      	beq.n	8004e02 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	430a      	orrs	r2, r1
 8004e00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e06:	f003 0304 	and.w	r3, r3, #4
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d00a      	beq.n	8004e24 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	430a      	orrs	r2, r1
 8004e22:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e28:	f003 0310 	and.w	r3, r3, #16
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d00a      	beq.n	8004e46 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	430a      	orrs	r2, r1
 8004e44:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d00a      	beq.n	8004e68 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	430a      	orrs	r2, r1
 8004e66:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d01a      	beq.n	8004eaa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	430a      	orrs	r2, r1
 8004e88:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004e8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004e92:	d10a      	bne.n	8004eaa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	430a      	orrs	r2, r1
 8004ea8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d00a      	beq.n	8004ecc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	430a      	orrs	r2, r1
 8004eca:	605a      	str	r2, [r3, #4]
  }
}
 8004ecc:	bf00      	nop
 8004ece:	370c      	adds	r7, #12
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed6:	4770      	bx	lr

08004ed8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b098      	sub	sp, #96	@ 0x60
 8004edc:	af02      	add	r7, sp, #8
 8004ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004ee8:	f7fc ffae 	bl	8001e48 <HAL_GetTick>
 8004eec:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f003 0308 	and.w	r3, r3, #8
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d12f      	bne.n	8004f5c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004efc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f00:	9300      	str	r3, [sp, #0]
 8004f02:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f04:	2200      	movs	r2, #0
 8004f06:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f000 f88e 	bl	800502c <UART_WaitOnFlagUntilTimeout>
 8004f10:	4603      	mov	r3, r0
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d022      	beq.n	8004f5c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f1e:	e853 3f00 	ldrex	r3, [r3]
 8004f22:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f26:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004f2a:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	461a      	mov	r2, r3
 8004f32:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004f36:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f38:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f3a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f3c:	e841 2300 	strex	r3, r2, [r1]
 8004f40:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d1e6      	bne.n	8004f16 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2220      	movs	r2, #32
 8004f4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2200      	movs	r2, #0
 8004f54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004f58:	2303      	movs	r3, #3
 8004f5a:	e063      	b.n	8005024 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 0304 	and.w	r3, r3, #4
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d149      	bne.n	8004ffe <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f6a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f6e:	9300      	str	r3, [sp, #0]
 8004f70:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f72:	2200      	movs	r2, #0
 8004f74:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f000 f857 	bl	800502c <UART_WaitOnFlagUntilTimeout>
 8004f7e:	4603      	mov	r3, r0
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d03c      	beq.n	8004ffe <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f8c:	e853 3f00 	ldrex	r3, [r3]
 8004f90:	623b      	str	r3, [r7, #32]
   return(result);
 8004f92:	6a3b      	ldr	r3, [r7, #32]
 8004f94:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f98:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fa2:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fa4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004fa8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004faa:	e841 2300 	strex	r3, r2, [r1]
 8004fae:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d1e6      	bne.n	8004f84 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	e853 3f00 	ldrex	r3, [r3]
 8004fc4:	60fb      	str	r3, [r7, #12]
   return(result);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	f023 0301 	bic.w	r3, r3, #1
 8004fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	3308      	adds	r3, #8
 8004fd4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004fd6:	61fa      	str	r2, [r7, #28]
 8004fd8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fda:	69b9      	ldr	r1, [r7, #24]
 8004fdc:	69fa      	ldr	r2, [r7, #28]
 8004fde:	e841 2300 	strex	r3, r2, [r1]
 8004fe2:	617b      	str	r3, [r7, #20]
   return(result);
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1e5      	bne.n	8004fb6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	2220      	movs	r2, #32
 8004fee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ffa:	2303      	movs	r3, #3
 8004ffc:	e012      	b.n	8005024 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3758      	adds	r7, #88	@ 0x58
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	603b      	str	r3, [r7, #0]
 8005038:	4613      	mov	r3, r2
 800503a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503c:	e04f      	b.n	80050de <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800503e:	69bb      	ldr	r3, [r7, #24]
 8005040:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005044:	d04b      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005046:	f7fc feff 	bl	8001e48 <HAL_GetTick>
 800504a:	4602      	mov	r2, r0
 800504c:	683b      	ldr	r3, [r7, #0]
 800504e:	1ad3      	subs	r3, r2, r3
 8005050:	69ba      	ldr	r2, [r7, #24]
 8005052:	429a      	cmp	r2, r3
 8005054:	d302      	bcc.n	800505c <UART_WaitOnFlagUntilTimeout+0x30>
 8005056:	69bb      	ldr	r3, [r7, #24]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d101      	bne.n	8005060 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800505c:	2303      	movs	r3, #3
 800505e:	e04e      	b.n	80050fe <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0304 	and.w	r3, r3, #4
 800506a:	2b00      	cmp	r3, #0
 800506c:	d037      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0xb2>
 800506e:	68bb      	ldr	r3, [r7, #8]
 8005070:	2b80      	cmp	r3, #128	@ 0x80
 8005072:	d034      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0xb2>
 8005074:	68bb      	ldr	r3, [r7, #8]
 8005076:	2b40      	cmp	r3, #64	@ 0x40
 8005078:	d031      	beq.n	80050de <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	69db      	ldr	r3, [r3, #28]
 8005080:	f003 0308 	and.w	r3, r3, #8
 8005084:	2b08      	cmp	r3, #8
 8005086:	d110      	bne.n	80050aa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	2208      	movs	r2, #8
 800508e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 f838 	bl	8005106 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2208      	movs	r2, #8
 800509a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80050a6:	2301      	movs	r3, #1
 80050a8:	e029      	b.n	80050fe <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	69db      	ldr	r3, [r3, #28]
 80050b0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050b4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050b8:	d111      	bne.n	80050de <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80050c2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80050c4:	68f8      	ldr	r0, [r7, #12]
 80050c6:	f000 f81e 	bl	8005106 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80050da:	2303      	movs	r3, #3
 80050dc:	e00f      	b.n	80050fe <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	69da      	ldr	r2, [r3, #28]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	4013      	ands	r3, r2
 80050e8:	68ba      	ldr	r2, [r7, #8]
 80050ea:	429a      	cmp	r2, r3
 80050ec:	bf0c      	ite	eq
 80050ee:	2301      	moveq	r3, #1
 80050f0:	2300      	movne	r3, #0
 80050f2:	b2db      	uxtb	r3, r3
 80050f4:	461a      	mov	r2, r3
 80050f6:	79fb      	ldrb	r3, [r7, #7]
 80050f8:	429a      	cmp	r2, r3
 80050fa:	d0a0      	beq.n	800503e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3710      	adds	r7, #16
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005106:	b480      	push	{r7}
 8005108:	b095      	sub	sp, #84	@ 0x54
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005114:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005116:	e853 3f00 	ldrex	r3, [r3]
 800511a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800511c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005122:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	461a      	mov	r2, r3
 800512a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800512c:	643b      	str	r3, [r7, #64]	@ 0x40
 800512e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005130:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005132:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005134:	e841 2300 	strex	r3, r2, [r1]
 8005138:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800513a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800513c:	2b00      	cmp	r3, #0
 800513e:	d1e6      	bne.n	800510e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	3308      	adds	r3, #8
 8005146:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	e853 3f00 	ldrex	r3, [r3]
 800514e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005156:	f023 0301 	bic.w	r3, r3, #1
 800515a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	3308      	adds	r3, #8
 8005162:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005164:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005166:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005168:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800516a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800516c:	e841 2300 	strex	r3, r2, [r1]
 8005170:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	2b00      	cmp	r3, #0
 8005176:	d1e3      	bne.n	8005140 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800517c:	2b01      	cmp	r3, #1
 800517e:	d118      	bne.n	80051b2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	e853 3f00 	ldrex	r3, [r3]
 800518c:	60bb      	str	r3, [r7, #8]
   return(result);
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f023 0310 	bic.w	r3, r3, #16
 8005194:	647b      	str	r3, [r7, #68]	@ 0x44
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	461a      	mov	r2, r3
 800519c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800519e:	61bb      	str	r3, [r7, #24]
 80051a0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a2:	6979      	ldr	r1, [r7, #20]
 80051a4:	69ba      	ldr	r2, [r7, #24]
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	613b      	str	r3, [r7, #16]
   return(result);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e6      	bne.n	8005180 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2200      	movs	r2, #0
 80051be:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2200      	movs	r2, #0
 80051c4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80051c6:	bf00      	nop
 80051c8:	3754      	adds	r7, #84	@ 0x54
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80051d2:	b480      	push	{r7}
 80051d4:	b085      	sub	sp, #20
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80051e0:	2b01      	cmp	r3, #1
 80051e2:	d101      	bne.n	80051e8 <HAL_UARTEx_DisableFifoMode+0x16>
 80051e4:	2302      	movs	r3, #2
 80051e6:	e027      	b.n	8005238 <HAL_UARTEx_DisableFifoMode+0x66>
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2201      	movs	r2, #1
 80051ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2224      	movs	r2, #36	@ 0x24
 80051f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f022 0201 	bic.w	r2, r2, #1
 800520e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005216:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	68fa      	ldr	r2, [r7, #12]
 8005224:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	2220      	movs	r2, #32
 800522a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3714      	adds	r7, #20
 800523c:	46bd      	mov	sp, r7
 800523e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005242:	4770      	bx	lr

08005244 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b084      	sub	sp, #16
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8005254:	2b01      	cmp	r3, #1
 8005256:	d101      	bne.n	800525c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005258:	2302      	movs	r3, #2
 800525a:	e02d      	b.n	80052b8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	2201      	movs	r2, #1
 8005260:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2224      	movs	r2, #36	@ 0x24
 8005268:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	681a      	ldr	r2, [r3, #0]
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f022 0201 	bic.w	r2, r2, #1
 8005282:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	689b      	ldr	r3, [r3, #8]
 800528a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	683a      	ldr	r2, [r7, #0]
 8005294:	430a      	orrs	r2, r1
 8005296:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005298:	6878      	ldr	r0, [r7, #4]
 800529a:	f000 f84f 	bl	800533c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68fa      	ldr	r2, [r7, #12]
 80052a4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80052b6:	2300      	movs	r3, #0
}
 80052b8:	4618      	mov	r0, r3
 80052ba:	3710      	adds	r7, #16
 80052bc:	46bd      	mov	sp, r7
 80052be:	bd80      	pop	{r7, pc}

080052c0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b084      	sub	sp, #16
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
 80052c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80052d0:	2b01      	cmp	r3, #1
 80052d2:	d101      	bne.n	80052d8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80052d4:	2302      	movs	r3, #2
 80052d6:	e02d      	b.n	8005334 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	2224      	movs	r2, #36	@ 0x24
 80052e4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	681a      	ldr	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f022 0201 	bic.w	r2, r2, #1
 80052fe:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	689b      	ldr	r3, [r3, #8]
 8005306:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	683a      	ldr	r2, [r7, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005314:	6878      	ldr	r0, [r7, #4]
 8005316:	f000 f811 	bl	800533c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68fa      	ldr	r2, [r7, #12]
 8005320:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2220      	movs	r2, #32
 8005326:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	2200      	movs	r2, #0
 800532e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3710      	adds	r7, #16
 8005338:	46bd      	mov	sp, r7
 800533a:	bd80      	pop	{r7, pc}

0800533c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800533c:	b480      	push	{r7}
 800533e:	b085      	sub	sp, #20
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005348:	2b00      	cmp	r3, #0
 800534a:	d108      	bne.n	800535e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2201      	movs	r2, #1
 8005350:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2201      	movs	r2, #1
 8005358:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800535c:	e031      	b.n	80053c2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800535e:	2308      	movs	r3, #8
 8005360:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005362:	2308      	movs	r3, #8
 8005364:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	0e5b      	lsrs	r3, r3, #25
 800536e:	b2db      	uxtb	r3, r3
 8005370:	f003 0307 	and.w	r3, r3, #7
 8005374:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	689b      	ldr	r3, [r3, #8]
 800537c:	0f5b      	lsrs	r3, r3, #29
 800537e:	b2db      	uxtb	r3, r3
 8005380:	f003 0307 	and.w	r3, r3, #7
 8005384:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005386:	7bbb      	ldrb	r3, [r7, #14]
 8005388:	7b3a      	ldrb	r2, [r7, #12]
 800538a:	4911      	ldr	r1, [pc, #68]	@ (80053d0 <UARTEx_SetNbDataToProcess+0x94>)
 800538c:	5c8a      	ldrb	r2, [r1, r2]
 800538e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005392:	7b3a      	ldrb	r2, [r7, #12]
 8005394:	490f      	ldr	r1, [pc, #60]	@ (80053d4 <UARTEx_SetNbDataToProcess+0x98>)
 8005396:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005398:	fb93 f3f2 	sdiv	r3, r3, r2
 800539c:	b29a      	uxth	r2, r3
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053a4:	7bfb      	ldrb	r3, [r7, #15]
 80053a6:	7b7a      	ldrb	r2, [r7, #13]
 80053a8:	4909      	ldr	r1, [pc, #36]	@ (80053d0 <UARTEx_SetNbDataToProcess+0x94>)
 80053aa:	5c8a      	ldrb	r2, [r1, r2]
 80053ac:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80053b0:	7b7a      	ldrb	r2, [r7, #13]
 80053b2:	4908      	ldr	r1, [pc, #32]	@ (80053d4 <UARTEx_SetNbDataToProcess+0x98>)
 80053b4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80053b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80053ba:	b29a      	uxth	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80053c2:	bf00      	nop
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr
 80053ce:	bf00      	nop
 80053d0:	080090f0 	.word	0x080090f0
 80053d4:	080090f8 	.word	0x080090f8

080053d8 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08e      	sub	sp, #56	@ 0x38
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
 80053e4:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 80053e6:	2234      	movs	r2, #52	@ 0x34
 80053e8:	2100      	movs	r1, #0
 80053ea:	68f8      	ldr	r0, [r7, #12]
 80053ec:	f001 fefb 	bl	80071e6 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f023 0303 	bic.w	r3, r3, #3
 80053f6:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	68ba      	ldr	r2, [r7, #8]
 80053fc:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	687a      	ldr	r2, [r7, #4]
 8005402:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	683a      	ldr	r2, [r7, #0]
 8005408:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	687a      	ldr	r2, [r7, #4]
 800540e:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 8005416:	683b      	ldr	r3, [r7, #0]
 8005418:	f1a3 0208 	sub.w	r2, r3, #8
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2202      	movs	r2, #2
 8005424:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800542a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	4413      	add	r3, r2
 8005430:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 8005432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005434:	3b04      	subs	r3, #4
 8005436:	637b      	str	r3, [r7, #52]	@ 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800543c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800543e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  temp_ptr;
 8005440:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005442:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005444:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 8005446:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005448:	3b04      	subs	r3, #4
 800544a:	637b      	str	r3, [r7, #52]	@ 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800544c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800544e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005450:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005452:	687a      	ldr	r2, [r7, #4]
 8005454:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	633b      	str	r3, [r7, #48]	@ 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800545a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800545c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *block_indirect_ptr =  block_ptr;
 800545e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005460:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005462:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	637b      	str	r3, [r7, #52]	@ 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 8005468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800546a:	3304      	adds	r3, #4
 800546c:	637b      	str	r3, [r7, #52]	@ 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800546e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005470:	62bb      	str	r3, [r7, #40]	@ 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 8005472:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005474:	4a1f      	ldr	r2, [pc, #124]	@ (80054f4 <_tx_byte_pool_create+0x11c>)
 8005476:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	621a      	str	r2, [r3, #32]
{
unsigned int posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800547e:	f3ef 8310 	mrs	r3, PRIMASK
 8005482:	61bb      	str	r3, [r7, #24]
#endif
    return(posture);
 8005484:	69bb      	ldr	r3, [r7, #24]

__attribute__( ( always_inline ) ) static inline unsigned int __disable_interrupts(void)
{
unsigned int int_posture;

    int_posture = __get_interrupt_posture();
 8005486:	617b      	str	r3, [r7, #20]

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 8005488:	b672      	cpsid	i
#endif
    return(int_posture);
 800548a:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800548c:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	4a19      	ldr	r2, [pc, #100]	@ (80054f8 <_tx_byte_pool_create+0x120>)
 8005492:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 8005494:	4b19      	ldr	r3, [pc, #100]	@ (80054fc <_tx_byte_pool_create+0x124>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d109      	bne.n	80054b0 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800549c:	4a18      	ldr	r2, [pc, #96]	@ (8005500 <_tx_byte_pool_create+0x128>)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	68fa      	ldr	r2, [r7, #12]
 80054a6:	62da      	str	r2, [r3, #44]	@ 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	68fa      	ldr	r2, [r7, #12]
 80054ac:	631a      	str	r2, [r3, #48]	@ 0x30
 80054ae:	e011      	b.n	80054d4 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 80054b0:	4b13      	ldr	r3, [pc, #76]	@ (8005500 <_tx_byte_pool_create+0x128>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 80054b6:	6a3b      	ldr	r3, [r7, #32]
 80054b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80054ba:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 80054bc:	6a3b      	ldr	r3, [r7, #32]
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	631a      	str	r2, [r3, #48]	@ 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	68fa      	ldr	r2, [r7, #12]
 80054c6:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	69fa      	ldr	r2, [r7, #28]
 80054cc:	631a      	str	r2, [r3, #48]	@ 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	6a3a      	ldr	r2, [r7, #32]
 80054d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 80054d4:	4b09      	ldr	r3, [pc, #36]	@ (80054fc <_tx_byte_pool_create+0x124>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	3301      	adds	r3, #1
 80054da:	4a08      	ldr	r2, [pc, #32]	@ (80054fc <_tx_byte_pool_create+0x124>)
 80054dc:	6013      	str	r3, [r2, #0]
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	f383 8810 	msr	PRIMASK, r3
}
 80054e8:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 80054ea:	2300      	movs	r3, #0
}
 80054ec:	4618      	mov	r0, r3
 80054ee:	3738      	adds	r7, #56	@ 0x38
 80054f0:	46bd      	mov	sp, r7
 80054f2:	bd80      	pop	{r7, pc}
 80054f4:	ffffeeee 	.word	0xffffeeee
 80054f8:	42595445 	.word	0x42595445
 80054fc:	200011b8 	.word	0x200011b8
 8005500:	200011b4 	.word	0x200011b4

08005504 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 8005508:	f000 f960 	bl	80057cc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800550c:	f000 fd68 	bl	8005fe0 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 8005510:	4b12      	ldr	r3, [pc, #72]	@ (800555c <_tx_initialize_high_level+0x58>)
 8005512:	2200      	movs	r2, #0
 8005514:	601a      	str	r2, [r3, #0]
 8005516:	4b12      	ldr	r3, [pc, #72]	@ (8005560 <_tx_initialize_high_level+0x5c>)
 8005518:	2200      	movs	r2, #0
 800551a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800551c:	4b11      	ldr	r3, [pc, #68]	@ (8005564 <_tx_initialize_high_level+0x60>)
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]
 8005522:	4b11      	ldr	r3, [pc, #68]	@ (8005568 <_tx_initialize_high_level+0x64>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 8005528:	4b10      	ldr	r3, [pc, #64]	@ (800556c <_tx_initialize_high_level+0x68>)
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]
 800552e:	4b10      	ldr	r3, [pc, #64]	@ (8005570 <_tx_initialize_high_level+0x6c>)
 8005530:	2200      	movs	r2, #0
 8005532:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 8005534:	4b0f      	ldr	r3, [pc, #60]	@ (8005574 <_tx_initialize_high_level+0x70>)
 8005536:	2200      	movs	r2, #0
 8005538:	601a      	str	r2, [r3, #0]
 800553a:	4b0f      	ldr	r3, [pc, #60]	@ (8005578 <_tx_initialize_high_level+0x74>)
 800553c:	2200      	movs	r2, #0
 800553e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 8005540:	4b0e      	ldr	r3, [pc, #56]	@ (800557c <_tx_initialize_high_level+0x78>)
 8005542:	2200      	movs	r2, #0
 8005544:	601a      	str	r2, [r3, #0]
 8005546:	4b0e      	ldr	r3, [pc, #56]	@ (8005580 <_tx_initialize_high_level+0x7c>)
 8005548:	2200      	movs	r2, #0
 800554a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800554c:	4b0d      	ldr	r3, [pc, #52]	@ (8005584 <_tx_initialize_high_level+0x80>)
 800554e:	2200      	movs	r2, #0
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	4b0d      	ldr	r3, [pc, #52]	@ (8005588 <_tx_initialize_high_level+0x84>)
 8005554:	2200      	movs	r2, #0
 8005556:	601a      	str	r2, [r3, #0]
#endif
}
 8005558:	bf00      	nop
 800555a:	bd80      	pop	{r7, pc}
 800555c:	2000118c 	.word	0x2000118c
 8005560:	20001190 	.word	0x20001190
 8005564:	20001194 	.word	0x20001194
 8005568:	20001198 	.word	0x20001198
 800556c:	2000119c 	.word	0x2000119c
 8005570:	200011a0 	.word	0x200011a0
 8005574:	200011ac 	.word	0x200011ac
 8005578:	200011b0 	.word	0x200011b0
 800557c:	200011b4 	.word	0x200011b4
 8005580:	200011b8 	.word	0x200011b8
 8005584:	200011a4 	.word	0x200011a4
 8005588:	200011a8 	.word	0x200011a8

0800558c <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 8005590:	4b10      	ldr	r3, [pc, #64]	@ (80055d4 <_tx_initialize_kernel_enter+0x48>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f113 3f0f 	cmn.w	r3, #252645135	@ 0xf0f0f0f
 8005598:	d00c      	beq.n	80055b4 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800559a:	4b0e      	ldr	r3, [pc, #56]	@ (80055d4 <_tx_initialize_kernel_enter+0x48>)
 800559c:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 80055a0:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 80055a2:	f7fa fe3d 	bl	8000220 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 80055a6:	f7ff ffad 	bl	8005504 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 80055aa:	4b0b      	ldr	r3, [pc, #44]	@ (80055d8 <_tx_initialize_kernel_enter+0x4c>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	3301      	adds	r3, #1
 80055b0:	4a09      	ldr	r2, [pc, #36]	@ (80055d8 <_tx_initialize_kernel_enter+0x4c>)
 80055b2:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 80055b4:	4b07      	ldr	r3, [pc, #28]	@ (80055d4 <_tx_initialize_kernel_enter+0x48>)
 80055b6:	f04f 32f0 	mov.w	r2, #4042322160	@ 0xf0f0f0f0
 80055ba:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 80055bc:	4b07      	ldr	r3, [pc, #28]	@ (80055dc <_tx_initialize_kernel_enter+0x50>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4618      	mov	r0, r3
 80055c2:	f7fb fdb1 	bl	8001128 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 80055c6:	4b03      	ldr	r3, [pc, #12]	@ (80055d4 <_tx_initialize_kernel_enter+0x48>)
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 80055cc:	f7fa fe68 	bl	80002a0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80055d0:	bf00      	nop
 80055d2:	bd80      	pop	{r7, pc}
 80055d4:	2000000c 	.word	0x2000000c
 80055d8:	2000125c 	.word	0x2000125c
 80055dc:	200011bc 	.word	0x200011bc

080055e0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b092      	sub	sp, #72	@ 0x48
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
 80055ec:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 80055ee:	2300      	movs	r3, #0
 80055f0:	643b      	str	r3, [r7, #64]	@ 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 80055f2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80055f4:	21ef      	movs	r1, #239	@ 0xef
 80055f6:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80055f8:	f001 fdf5 	bl	80071e6 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 80055fc:	22b0      	movs	r2, #176	@ 0xb0
 80055fe:	2100      	movs	r1, #0
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f001 fdf0 	bl	80071e6 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	68ba      	ldr	r2, [r7, #8]
 800560a:	629a      	str	r2, [r3, #40]	@ 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	645a      	str	r2, [r3, #68]	@ 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	649a      	str	r2, [r3, #72]	@ 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800561c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005622:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005628:	62da      	str	r2, [r3, #44]	@ 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800562e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005636:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800563c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 8005646:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005648:	63fb      	str	r3, [r7, #60]	@ 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800564a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800564c:	3b01      	subs	r3, #1
 800564e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005650:	4413      	add	r3, r2
 8005652:	63fb      	str	r3, [r7, #60]	@ 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005658:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800565a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800565c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800565e:	429a      	cmp	r2, r3
 8005660:	d007      	beq.n	8005672 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	2200      	movs	r2, #0
 8005666:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2200      	movs	r2, #0
 800566c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 8005670:	e006      	b.n	8005680 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005676:	63da      	str	r2, [r3, #60]	@ 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800567c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2203      	movs	r2, #3
 8005684:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	4a48      	ldr	r2, [pc, #288]	@ (80057ac <_tx_thread_create+0x1cc>)
 800568a:	655a      	str	r2, [r3, #84]	@ 0x54
 800568c:	68fa      	ldr	r2, [r7, #12]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	659a      	str	r2, [r3, #88]	@ 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 8005692:	4947      	ldr	r1, [pc, #284]	@ (80057b0 <_tx_thread_create+0x1d0>)
 8005694:	68f8      	ldr	r0, [r7, #12]
 8005696:	f7fa fe63 	bl	8000360 <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800569a:	f3ef 8310 	mrs	r3, PRIMASK
 800569e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 80056a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 80056a2:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 80056a4:	b672      	cpsid	i
    return(int_posture);
 80056a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 80056a8:	63bb      	str	r3, [r7, #56]	@ 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4a41      	ldr	r2, [pc, #260]	@ (80057b4 <_tx_thread_create+0x1d4>)
 80056ae:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 80056b0:	4b41      	ldr	r3, [pc, #260]	@ (80057b8 <_tx_thread_create+0x1d8>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10b      	bne.n	80056d0 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 80056b8:	4a40      	ldr	r2, [pc, #256]	@ (80057bc <_tx_thread_create+0x1dc>)
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
 80056ce:	e016      	b.n	80056fe <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 80056d0:	4b3a      	ldr	r3, [pc, #232]	@ (80057bc <_tx_thread_create+0x1dc>)
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	637b      	str	r3, [r7, #52]	@ 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 80056d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80056dc:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 80056de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056e0:	68fa      	ldr	r2, [r7, #12]
 80056e2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 80056e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056e8:	68fa      	ldr	r2, [r7, #12]
 80056ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80056f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80056fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 80056fe:	4b2e      	ldr	r3, [pc, #184]	@ (80057b8 <_tx_thread_create+0x1d8>)
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	3301      	adds	r3, #1
 8005704:	4a2c      	ldr	r2, [pc, #176]	@ (80057b8 <_tx_thread_create+0x1d8>)
 8005706:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 8005708:	4b2d      	ldr	r3, [pc, #180]	@ (80057c0 <_tx_thread_create+0x1e0>)
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	3301      	adds	r3, #1
 800570e:	4a2c      	ldr	r2, [pc, #176]	@ (80057c0 <_tx_thread_create+0x1e0>)
 8005710:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 8005712:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005714:	2b01      	cmp	r3, #1
 8005716:	d129      	bne.n	800576c <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005718:	f3ef 8305 	mrs	r3, IPSR
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
    return(ipsr_value);
 800571e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 8005720:	4b28      	ldr	r3, [pc, #160]	@ (80057c4 <_tx_thread_create+0x1e4>)
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	4313      	orrs	r3, r2
 8005726:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800572a:	d30d      	bcc.n	8005748 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800572c:	4b26      	ldr	r3, [pc, #152]	@ (80057c8 <_tx_thread_create+0x1e8>)
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	647b      	str	r3, [r7, #68]	@ 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 8005732:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005734:	2b00      	cmp	r3, #0
 8005736:	d009      	beq.n	800574c <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 8005738:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800573a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800573c:	643b      	str	r3, [r7, #64]	@ 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800573e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005742:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005744:	63da      	str	r2, [r3, #60]	@ 0x3c
 8005746:	e001      	b.n	800574c <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 8005748:	2300      	movs	r3, #0
 800574a:	647b      	str	r3, [r7, #68]	@ 0x44
 800574c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005750:	6a3b      	ldr	r3, [r7, #32]
 8005752:	f383 8810 	msr	PRIMASK, r3
}
 8005756:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 8005758:	68f8      	ldr	r0, [r7, #12]
 800575a:	f000 f979 	bl	8005a50 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800575e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005760:	2b00      	cmp	r3, #0
 8005762:	d01e      	beq.n	80057a2 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 8005764:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005766:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005768:	63da      	str	r2, [r3, #60]	@ 0x3c
 800576a:	e01a      	b.n	80057a2 <_tx_thread_create+0x1c2>
 800576c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800576e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	f383 8810 	msr	PRIMASK, r3
}
 8005776:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005778:	f3ef 8310 	mrs	r3, PRIMASK
 800577c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800577e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 8005780:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005782:	b672      	cpsid	i
    return(int_posture);
 8005784:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 8005786:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 8005788:	4b0d      	ldr	r3, [pc, #52]	@ (80057c0 <_tx_thread_create+0x1e0>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3b01      	subs	r3, #1
 800578e:	4a0c      	ldr	r2, [pc, #48]	@ (80057c0 <_tx_thread_create+0x1e0>)
 8005790:	6013      	str	r3, [r2, #0]
 8005792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005794:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005796:	69fb      	ldr	r3, [r7, #28]
 8005798:	f383 8810 	msr	PRIMASK, r3
}
 800579c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800579e:	f000 f91d 	bl	80059dc <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 80057a2:	2300      	movs	r3, #0
}
 80057a4:	4618      	mov	r0, r3
 80057a6:	3748      	adds	r7, #72	@ 0x48
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}
 80057ac:	08005f25 	.word	0x08005f25
 80057b0:	08005845 	.word	0x08005845
 80057b4:	54485244 	.word	0x54485244
 80057b8:	200011d0 	.word	0x200011d0
 80057bc:	200011cc 	.word	0x200011cc
 80057c0:	2000125c 	.word	0x2000125c
 80057c4:	2000000c 	.word	0x2000000c
 80057c8:	200011c8 	.word	0x200011c8

080057cc <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 80057d0:	4b12      	ldr	r3, [pc, #72]	@ (800581c <_tx_thread_initialize+0x50>)
 80057d2:	2200      	movs	r2, #0
 80057d4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 80057d6:	4b12      	ldr	r3, [pc, #72]	@ (8005820 <_tx_thread_initialize+0x54>)
 80057d8:	2200      	movs	r2, #0
 80057da:	601a      	str	r2, [r3, #0]

    /* Initialize the priority information.  */
    TX_MEMSET(&_tx_thread_priority_maps[0], 0, (sizeof(_tx_thread_priority_maps)));
 80057dc:	4b11      	ldr	r3, [pc, #68]	@ (8005824 <_tx_thread_initialize+0x58>)
 80057de:	2200      	movs	r2, #0
 80057e0:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 80057e2:	4b11      	ldr	r3, [pc, #68]	@ (8005828 <_tx_thread_initialize+0x5c>)
 80057e4:	2220      	movs	r2, #32
 80057e6:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 80057e8:	2280      	movs	r2, #128	@ 0x80
 80057ea:	2100      	movs	r1, #0
 80057ec:	480f      	ldr	r0, [pc, #60]	@ (800582c <_tx_thread_initialize+0x60>)
 80057ee:	f001 fcfa 	bl	80071e6 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 80057f2:	4b0f      	ldr	r3, [pc, #60]	@ (8005830 <_tx_thread_initialize+0x64>)
 80057f4:	2200      	movs	r2, #0
 80057f6:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 80057f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005834 <_tx_thread_initialize+0x68>)
 80057fa:	2200      	movs	r2, #0
 80057fc:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 80057fe:	4b0e      	ldr	r3, [pc, #56]	@ (8005838 <_tx_thread_initialize+0x6c>)
 8005800:	2200      	movs	r2, #0
 8005802:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 8005804:	4b0d      	ldr	r3, [pc, #52]	@ (800583c <_tx_thread_initialize+0x70>)
 8005806:	2200      	movs	r2, #0
 8005808:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800580a:	4b0d      	ldr	r3, [pc, #52]	@ (8005840 <_tx_thread_initialize+0x74>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f043 7385 	orr.w	r3, r3, #17432576	@ 0x10a0000
    _tx_build_options =  _tx_build_options 
 8005812:	4a0b      	ldr	r2, [pc, #44]	@ (8005840 <_tx_thread_initialize+0x74>)
 8005814:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 8005816:	bf00      	nop
 8005818:	bd80      	pop	{r7, pc}
 800581a:	bf00      	nop
 800581c:	200011c4 	.word	0x200011c4
 8005820:	200011c8 	.word	0x200011c8
 8005824:	200011d4 	.word	0x200011d4
 8005828:	200011d8 	.word	0x200011d8
 800582c:	200011dc 	.word	0x200011dc
 8005830:	200011cc 	.word	0x200011cc
 8005834:	200011d0 	.word	0x200011d0
 8005838:	2000125c 	.word	0x2000125c
 800583c:	20001260 	.word	0x20001260
 8005840:	20001264 	.word	0x20001264

08005844 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 8005844:	b580      	push	{r7, lr}
 8005846:	b088      	sub	sp, #32
 8005848:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800584a:	4b21      	ldr	r3, [pc, #132]	@ (80058d0 <_tx_thread_shell_entry+0x8c>)
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 8005850:	69fb      	ldr	r3, [r7, #28]
 8005852:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005854:	69fa      	ldr	r2, [r7, #28]
 8005856:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8005858:	4610      	mov	r0, r2
 800585a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800585c:	4b1d      	ldr	r3, [pc, #116]	@ (80058d4 <_tx_thread_shell_entry+0x90>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d003      	beq.n	800586c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 8005864:	4b1b      	ldr	r3, [pc, #108]	@ (80058d4 <_tx_thread_shell_entry+0x90>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	69f8      	ldr	r0, [r7, #28]
 800586a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800586c:	f3ef 8310 	mrs	r3, PRIMASK
 8005870:	607b      	str	r3, [r7, #4]
    return(posture);
 8005872:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8005874:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005876:	b672      	cpsid	i
    return(int_posture);
 8005878:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800587a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800587c:	69fb      	ldr	r3, [r7, #28]
 800587e:	2201      	movs	r2, #1
 8005880:	631a      	str	r2, [r3, #48]	@ 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005882:	69fb      	ldr	r3, [r7, #28]
 8005884:	2201      	movs	r2, #1
 8005886:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8005888:	69fb      	ldr	r3, [r7, #28]
 800588a:	2200      	movs	r2, #0
 800588c:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800588e:	4b12      	ldr	r3, [pc, #72]	@ (80058d8 <_tx_thread_shell_entry+0x94>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	3301      	adds	r3, #1
 8005894:	4a10      	ldr	r2, [pc, #64]	@ (80058d8 <_tx_thread_shell_entry+0x94>)
 8005896:	6013      	str	r3, [r2, #0]
 8005898:	69bb      	ldr	r3, [r7, #24]
 800589a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f383 8810 	msr	PRIMASK, r3
}
 80058a2:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 80058a4:	f3ef 8314 	mrs	r3, CONTROL
 80058a8:	60fb      	str	r3, [r7, #12]
    return(control_value);
 80058aa:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 80058ac:	617b      	str	r3, [r7, #20]
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	f023 0304 	bic.w	r3, r3, #4
 80058b4:	617b      	str	r3, [r7, #20]
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 80058ba:	693b      	ldr	r3, [r7, #16]
 80058bc:	f383 8814 	msr	CONTROL, r3
}
 80058c0:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 80058c2:	69f8      	ldr	r0, [r7, #28]
 80058c4:	f000 f9c4 	bl	8005c50 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 80058c8:	bf00      	nop
 80058ca:	3720      	adds	r7, #32
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}
 80058d0:	200011c4 	.word	0x200011c4
 80058d4:	20001260 	.word	0x20001260
 80058d8:	2000125c 	.word	0x2000125c

080058dc <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b08e      	sub	sp, #56	@ 0x38
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 80058e4:	f3ef 8310 	mrs	r3, PRIMASK
 80058e8:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 80058ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 80058ec:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 80058ee:	b672      	cpsid	i
    return(int_posture);
 80058f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 80058f2:	633b      	str	r3, [r7, #48]	@ 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 80058f4:	4b35      	ldr	r3, [pc, #212]	@ (80059cc <_tx_thread_sleep+0xf0>)
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 80058fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d108      	bne.n	8005912 <_tx_thread_sleep+0x36>
 8005900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005902:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005904:	6a3b      	ldr	r3, [r7, #32]
 8005906:	f383 8810 	msr	PRIMASK, r3
}
 800590a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800590c:	2313      	movs	r3, #19
 800590e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005910:	e056      	b.n	80059c0 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005912:	f3ef 8305 	mrs	r3, IPSR
 8005916:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 8005918:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800591a:	4b2d      	ldr	r3, [pc, #180]	@ (80059d0 <_tx_thread_sleep+0xf4>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	4313      	orrs	r3, r2
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <_tx_thread_sleep+0x5a>
 8005924:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005926:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	f383 8810 	msr	PRIMASK, r3
}
 800592e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 8005930:	2313      	movs	r3, #19
 8005932:	637b      	str	r3, [r7, #52]	@ 0x34
 8005934:	e044      	b.n	80059c0 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 8005936:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005938:	4a26      	ldr	r2, [pc, #152]	@ (80059d4 <_tx_thread_sleep+0xf8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d108      	bne.n	8005950 <_tx_thread_sleep+0x74>
 800593e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005940:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f383 8810 	msr	PRIMASK, r3
}
 8005948:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800594a:	2313      	movs	r3, #19
 800594c:	637b      	str	r3, [r7, #52]	@ 0x34
 800594e:	e037      	b.n	80059c0 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d108      	bne.n	8005968 <_tx_thread_sleep+0x8c>
 8005956:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005958:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f383 8810 	msr	PRIMASK, r3
}
 8005960:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 8005962:	2300      	movs	r3, #0
 8005964:	637b      	str	r3, [r7, #52]	@ 0x34
 8005966:	e02b      	b.n	80059c0 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 8005968:	4b1b      	ldr	r3, [pc, #108]	@ (80059d8 <_tx_thread_sleep+0xfc>)
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2b00      	cmp	r3, #0
 800596e:	d008      	beq.n	8005982 <_tx_thread_sleep+0xa6>
 8005970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005972:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	f383 8810 	msr	PRIMASK, r3
}
 800597a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800597c:	2313      	movs	r3, #19
 800597e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005980:	e01e      	b.n	80059c0 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 8005982:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005984:	2204      	movs	r2, #4
 8005986:	631a      	str	r2, [r3, #48]	@ 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 8005988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800598a:	2201      	movs	r2, #1
 800598c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800598e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005990:	2200      	movs	r2, #0
 8005992:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 8005996:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005998:	687a      	ldr	r2, [r7, #4]
 800599a:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800599c:	4b0e      	ldr	r3, [pc, #56]	@ (80059d8 <_tx_thread_sleep+0xfc>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	4a0d      	ldr	r2, [pc, #52]	@ (80059d8 <_tx_thread_sleep+0xfc>)
 80059a4:	6013      	str	r3, [r2, #0]
 80059a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	f383 8810 	msr	PRIMASK, r3
}
 80059b0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 80059b2:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80059b4:	f000 f94c 	bl	8005c50 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 80059b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80059be:	637b      	str	r3, [r7, #52]	@ 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 80059c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80059c2:	4618      	mov	r0, r3
 80059c4:	3738      	adds	r7, #56	@ 0x38
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}
 80059ca:	bf00      	nop
 80059cc:	200011c4 	.word	0x200011c4
 80059d0:	2000000c 	.word	0x2000000c
 80059d4:	2000130c 	.word	0x2000130c
 80059d8:	2000125c 	.word	0x2000125c

080059dc <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 80059dc:	b480      	push	{r7}
 80059de:	b089      	sub	sp, #36	@ 0x24
 80059e0:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 80059e2:	4b17      	ldr	r3, [pc, #92]	@ (8005a40 <_tx_thread_system_preempt_check+0x64>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d121      	bne.n	8005a32 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 80059ee:	4b15      	ldr	r3, [pc, #84]	@ (8005a44 <_tx_thread_system_preempt_check+0x68>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 80059f4:	4b14      	ldr	r3, [pc, #80]	@ (8005a48 <_tx_thread_system_preempt_check+0x6c>)
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 80059fa:	69ba      	ldr	r2, [r7, #24]
 80059fc:	697b      	ldr	r3, [r7, #20]
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d017      	beq.n	8005a32 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
unsigned int interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005a02:	4b12      	ldr	r3, [pc, #72]	@ (8005a4c <_tx_thread_system_preempt_check+0x70>)
 8005a04:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a08:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005a0a:	f3ef 8305 	mrs	r3, IPSR
 8005a0e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 8005a10:	693b      	ldr	r3, [r7, #16]
    if (__get_ipsr_value() == 0)
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d10c      	bne.n	8005a30 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005a16:	f3ef 8310 	mrs	r3, PRIMASK
 8005a1a:	60fb      	str	r3, [r7, #12]
    return(posture);
 8005a1c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 8005a1e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005a20:	b662      	cpsie	i
}
 8005a22:	bf00      	nop
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f383 8810 	msr	PRIMASK, r3
}
 8005a2e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 8005a30:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 8005a32:	bf00      	nop
 8005a34:	3724      	adds	r7, #36	@ 0x24
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	2000125c 	.word	0x2000125c
 8005a44:	200011c4 	.word	0x200011c4
 8005a48:	200011c8 	.word	0x200011c8
 8005a4c:	e000ed04 	.word	0xe000ed04

08005a50 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8005a50:	b580      	push	{r7, lr}
 8005a52:	b096      	sub	sp, #88	@ 0x58
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005a58:	f3ef 8310 	mrs	r3, PRIMASK
 8005a5c:	637b      	str	r3, [r7, #52]	@ 0x34
    return(posture);
 8005a5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    int_posture = __get_interrupt_posture();
 8005a60:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 8005a62:	b672      	cpsid	i
    return(int_posture);
 8005a64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 8005a66:	657b      	str	r3, [r7, #84]	@ 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d005      	beq.n	8005a7c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	334c      	adds	r3, #76	@ 0x4c
 8005a74:	4618      	mov	r0, r3
 8005a76:	f000 fb91 	bl	800619c <_tx_timer_system_deactivate>
 8005a7a:	e002      	b.n	8005a82 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	64da      	str	r2, [r3, #76]	@ 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8005a82:	4b6c      	ldr	r3, [pc, #432]	@ (8005c34 <_tx_thread_system_resume+0x1e4>)
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	3b01      	subs	r3, #1
 8005a88:	4a6a      	ldr	r2, [pc, #424]	@ (8005c34 <_tx_thread_system_resume+0x1e4>)
 8005a8a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	f040 8083 	bne.w	8005b9c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	f000 8097 	beq.w	8005bce <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d172      	bne.n	8005b8e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	631a      	str	r2, [r3, #48]	@ 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ab2:	653b      	str	r3, [r7, #80]	@ 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 8005ab4:	4a60      	ldr	r2, [pc, #384]	@ (8005c38 <_tx_thread_system_resume+0x1e8>)
 8005ab6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005abc:	64fb      	str	r3, [r7, #76]	@ 0x4c
                if (head_ptr == TX_NULL)
 8005abe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d154      	bne.n	8005b6e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 8005ac4:	495c      	ldr	r1, [pc, #368]	@ (8005c38 <_tx_thread_system_resume+0x1e8>)
 8005ac6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	687a      	ldr	r2, [r7, #4]
 8005ad2:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	687a      	ldr	r2, [r7, #4]
 8005ad8:	625a      	str	r2, [r3, #36]	@ 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 8005ada:	2201      	movs	r2, #1
 8005adc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ade:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae2:	647b      	str	r3, [r7, #68]	@ 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 8005ae4:	4b55      	ldr	r3, [pc, #340]	@ (8005c3c <_tx_thread_system_resume+0x1ec>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005aea:	4313      	orrs	r3, r2
 8005aec:	4a53      	ldr	r2, [pc, #332]	@ (8005c3c <_tx_thread_system_resume+0x1ec>)
 8005aee:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 8005af0:	4b53      	ldr	r3, [pc, #332]	@ (8005c40 <_tx_thread_system_resume+0x1f0>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005af6:	429a      	cmp	r2, r3
 8005af8:	d269      	bcs.n	8005bce <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 8005afa:	4a51      	ldr	r2, [pc, #324]	@ (8005c40 <_tx_thread_system_resume+0x1f0>)
 8005afc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005afe:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 8005b00:	4b50      	ldr	r3, [pc, #320]	@ (8005c44 <_tx_thread_system_resume+0x1f4>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	643b      	str	r3, [r7, #64]	@ 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 8005b06:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d103      	bne.n	8005b14 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 8005b0c:	4a4d      	ldr	r2, [pc, #308]	@ (8005c44 <_tx_thread_system_resume+0x1f4>)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	6013      	str	r3, [r2, #0]
 8005b12:	e05c      	b.n	8005bce <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 8005b14:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005b16:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b18:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	d257      	bcs.n	8005bce <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 8005b1e:	4a49      	ldr	r2, [pc, #292]	@ (8005c44 <_tx_thread_system_resume+0x1f4>)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005b26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b2a:	f383 8810 	msr	PRIMASK, r3
}
 8005b2e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005b30:	4b40      	ldr	r3, [pc, #256]	@ (8005c34 <_tx_thread_system_resume+0x1e4>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	63fb      	str	r3, [r7, #60]	@ 0x3c
                                if (combined_flags == ((ULONG) 0))
 8005b36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d174      	bne.n	8005c26 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005b3c:	4b42      	ldr	r3, [pc, #264]	@ (8005c48 <_tx_thread_system_resume+0x1f8>)
 8005b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b42:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005b44:	f3ef 8305 	mrs	r3, IPSR
 8005b48:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(ipsr_value);
 8005b4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    if (__get_ipsr_value() == 0)
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10c      	bne.n	8005b6a <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005b50:	f3ef 8310 	mrs	r3, PRIMASK
 8005b54:	627b      	str	r3, [r7, #36]	@ 0x24
    return(posture);
 8005b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        interrupt_save = __get_interrupt_posture();
 8005b58:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005b5a:	b662      	cpsie	i
}
 8005b5c:	bf00      	nop
 8005b5e:	6a3b      	ldr	r3, [r7, #32]
 8005b60:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005b62:	69fb      	ldr	r3, [r7, #28]
 8005b64:	f383 8810 	msr	PRIMASK, r3
}
 8005b68:	bf00      	nop
}
 8005b6a:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 8005b6c:	e05b      	b.n	8005c26 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 8005b6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b72:	64bb      	str	r3, [r7, #72]	@ 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 8005b74:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 8005b7a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005b7c:	687a      	ldr	r2, [r7, #4]
 8005b7e:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b84:	625a      	str	r2, [r3, #36]	@ 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b8a:	621a      	str	r2, [r3, #32]
 8005b8c:	e01f      	b.n	8005bce <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	2200      	movs	r2, #0
 8005b92:	635a      	str	r2, [r3, #52]	@ 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2203      	movs	r2, #3
 8005b98:	631a      	str	r2, [r3, #48]	@ 0x30
 8005b9a:	e018      	b.n	8005bce <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba0:	2b01      	cmp	r3, #1
 8005ba2:	d014      	beq.n	8005bce <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ba8:	2b02      	cmp	r3, #2
 8005baa:	d010      	beq.n	8005bce <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d106      	bne.n	8005bc2 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	639a      	str	r2, [r3, #56]	@ 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	631a      	str	r2, [r3, #48]	@ 0x30
 8005bc0:	e005      	b.n	8005bce <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	635a      	str	r2, [r3, #52]	@ 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2203      	movs	r2, #3
 8005bcc:	631a      	str	r2, [r3, #48]	@ 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8005bce:	4b1f      	ldr	r3, [pc, #124]	@ (8005c4c <_tx_thread_system_resume+0x1fc>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005bd4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005bd6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	f383 8810 	msr	PRIMASK, r3
}
 8005bde:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8005be0:	4b18      	ldr	r3, [pc, #96]	@ (8005c44 <_tx_thread_system_resume+0x1f4>)
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d020      	beq.n	8005c2c <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005bea:	4b12      	ldr	r3, [pc, #72]	@ (8005c34 <_tx_thread_system_resume+0x1e4>)
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	63fb      	str	r3, [r7, #60]	@ 0x3c
        if (combined_flags == ((ULONG) 0))
 8005bf0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d11a      	bne.n	8005c2c <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005bf6:	4b14      	ldr	r3, [pc, #80]	@ (8005c48 <_tx_thread_system_resume+0x1f8>)
 8005bf8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005bfc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005bfe:	f3ef 8305 	mrs	r3, IPSR
 8005c02:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8005c04:	697b      	ldr	r3, [r7, #20]
    if (__get_ipsr_value() == 0)
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d10f      	bne.n	8005c2a <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005c0a:	f3ef 8310 	mrs	r3, PRIMASK
 8005c0e:	613b      	str	r3, [r7, #16]
    return(posture);
 8005c10:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 8005c12:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005c14:	b662      	cpsie	i
}
 8005c16:	bf00      	nop
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	f383 8810 	msr	PRIMASK, r3
}
 8005c22:	bf00      	nop
}
 8005c24:	e001      	b.n	8005c2a <_tx_thread_system_resume+0x1da>
                                return;
 8005c26:	bf00      	nop
 8005c28:	e000      	b.n	8005c2c <_tx_thread_system_resume+0x1dc>
 8005c2a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 8005c2c:	3758      	adds	r7, #88	@ 0x58
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	2000125c 	.word	0x2000125c
 8005c38:	200011dc 	.word	0x200011dc
 8005c3c:	200011d4 	.word	0x200011d4
 8005c40:	200011d8 	.word	0x200011d8
 8005c44:	200011c8 	.word	0x200011c8
 8005c48:	e000ed04 	.word	0xe000ed04
 8005c4c:	200011c4 	.word	0x200011c4

08005c50 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b09e      	sub	sp, #120	@ 0x78
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 8005c58:	4b81      	ldr	r3, [pc, #516]	@ (8005e60 <_tx_thread_system_suspend+0x210>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	677b      	str	r3, [r7, #116]	@ 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005c5e:	f3ef 8310 	mrs	r3, PRIMASK
 8005c62:	64fb      	str	r3, [r7, #76]	@ 0x4c
    return(posture);
 8005c64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    int_posture = __get_interrupt_posture();
 8005c66:	64bb      	str	r3, [r7, #72]	@ 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 8005c68:	b672      	cpsid	i
    return(int_posture);
 8005c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 8005c6c:	673b      	str	r3, [r7, #112]	@ 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 8005c6e:	687a      	ldr	r2, [r7, #4]
 8005c70:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d112      	bne.n	8005c9c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005c7a:	66fb      	str	r3, [r7, #108]	@ 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 8005c7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d008      	beq.n	8005c94 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 8005c82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d004      	beq.n	8005c94 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	334c      	adds	r3, #76	@ 0x4c
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f000 fa22 	bl	80060d8 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	69db      	ldr	r3, [r3, #28]
 8005c98:	4a72      	ldr	r2, [pc, #456]	@ (8005e64 <_tx_thread_system_suspend+0x214>)
 8005c9a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 8005c9c:	4b72      	ldr	r3, [pc, #456]	@ (8005e68 <_tx_thread_system_suspend+0x218>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	3b01      	subs	r3, #1
 8005ca2:	4a71      	ldr	r2, [pc, #452]	@ (8005e68 <_tx_thread_system_suspend+0x218>)
 8005ca4:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005caa:	2b01      	cmp	r3, #1
 8005cac:	f040 80a6 	bne.w	8005dfc <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cba:	66bb      	str	r3, [r7, #104]	@ 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6a1b      	ldr	r3, [r3, #32]
 8005cc0:	667b      	str	r3, [r7, #100]	@ 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 8005cc2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	429a      	cmp	r2, r3
 8005cc8:	d015      	beq.n	8005cf6 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cce:	653b      	str	r3, [r7, #80]	@ 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 8005cd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005cd2:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8005cd4:	625a      	str	r2, [r3, #36]	@ 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 8005cd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005cd8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005cda:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 8005cdc:	4a63      	ldr	r2, [pc, #396]	@ (8005e6c <_tx_thread_system_suspend+0x21c>)
 8005cde:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005ce0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	d157      	bne.n	8005d9a <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 8005cea:	4960      	ldr	r1, [pc, #384]	@ (8005e6c <_tx_thread_system_suspend+0x21c>)
 8005cec:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005cf0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005cf4:	e051      	b.n	8005d9a <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 8005cf6:	4a5d      	ldr	r2, [pc, #372]	@ (8005e6c <_tx_thread_system_suspend+0x21c>)
 8005cf8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005cfa:	2100      	movs	r1, #0
 8005cfc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 8005d00:	2201      	movs	r2, #1
 8005d02:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005d04:	fa02 f303 	lsl.w	r3, r2, r3
 8005d08:	663b      	str	r3, [r7, #96]	@ 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 8005d0a:	4b59      	ldr	r3, [pc, #356]	@ (8005e70 <_tx_thread_system_suspend+0x220>)
 8005d0c:	681a      	ldr	r2, [r3, #0]
 8005d0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d10:	43db      	mvns	r3, r3
 8005d12:	4013      	ands	r3, r2
 8005d14:	4a56      	ldr	r2, [pc, #344]	@ (8005e70 <_tx_thread_system_suspend+0x220>)
 8005d16:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 8005d18:	2300      	movs	r3, #0
 8005d1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 8005d1c:	4b54      	ldr	r3, [pc, #336]	@ (8005e70 <_tx_thread_system_suspend+0x220>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	65bb      	str	r3, [r7, #88]	@ 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 8005d22:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d12b      	bne.n	8005d80 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 8005d28:	4b52      	ldr	r3, [pc, #328]	@ (8005e74 <_tx_thread_system_suspend+0x224>)
 8005d2a:	2220      	movs	r2, #32
 8005d2c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 8005d2e:	4b52      	ldr	r3, [pc, #328]	@ (8005e78 <_tx_thread_system_suspend+0x228>)
 8005d30:	2200      	movs	r2, #0
 8005d32:	601a      	str	r2, [r3, #0]
 8005d34:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005d36:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005d38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d3a:	f383 8810 	msr	PRIMASK, r3
}
 8005d3e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005d40:	4b49      	ldr	r3, [pc, #292]	@ (8005e68 <_tx_thread_system_suspend+0x218>)
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	657b      	str	r3, [r7, #84]	@ 0x54
                if (combined_flags == ((ULONG) 0))
 8005d46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	f040 8081 	bne.w	8005e50 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005d4e:	4b4b      	ldr	r3, [pc, #300]	@ (8005e7c <_tx_thread_system_suspend+0x22c>)
 8005d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d54:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005d56:	f3ef 8305 	mrs	r3, IPSR
 8005d5a:	643b      	str	r3, [r7, #64]	@ 0x40
    return(ipsr_value);
 8005d5c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    if (__get_ipsr_value() == 0)
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d10c      	bne.n	8005d7c <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005d62:	f3ef 8310 	mrs	r3, PRIMASK
 8005d66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    return(posture);
 8005d68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        interrupt_save = __get_interrupt_posture();
 8005d6a:	63bb      	str	r3, [r7, #56]	@ 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005d6c:	b662      	cpsie	i
}
 8005d6e:	bf00      	nop
 8005d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d72:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d76:	f383 8810 	msr	PRIMASK, r3
}
 8005d7a:	bf00      	nop
}
 8005d7c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 8005d7e:	e067      	b.n	8005e50 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 8005d80:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d82:	fa93 f3a3 	rbit	r3, r3
 8005d86:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005d88:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8005d8a:	fab3 f383 	clz	r3, r3
 8005d8e:	663b      	str	r3, [r7, #96]	@ 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 8005d90:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005d92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005d94:	4413      	add	r3, r2
 8005d96:	4a37      	ldr	r2, [pc, #220]	@ (8005e74 <_tx_thread_system_suspend+0x224>)
 8005d98:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 8005d9a:	4b37      	ldr	r3, [pc, #220]	@ (8005e78 <_tx_thread_system_suspend+0x228>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d12b      	bne.n	8005dfc <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005da4:	4b33      	ldr	r3, [pc, #204]	@ (8005e74 <_tx_thread_system_suspend+0x224>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4a30      	ldr	r2, [pc, #192]	@ (8005e6c <_tx_thread_system_suspend+0x21c>)
 8005daa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005dae:	4a32      	ldr	r2, [pc, #200]	@ (8005e78 <_tx_thread_system_suspend+0x228>)
 8005db0:	6013      	str	r3, [r2, #0]
 8005db2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005db4:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005db6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db8:	f383 8810 	msr	PRIMASK, r3
}
 8005dbc:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8005e68 <_tx_thread_system_suspend+0x218>)
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	657b      	str	r3, [r7, #84]	@ 0x54
            if (combined_flags == ((ULONG) 0))
 8005dc4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d144      	bne.n	8005e54 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005dca:	4b2c      	ldr	r3, [pc, #176]	@ (8005e7c <_tx_thread_system_suspend+0x22c>)
 8005dcc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dd0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005dd2:	f3ef 8305 	mrs	r3, IPSR
 8005dd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(ipsr_value);
 8005dd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    if (__get_ipsr_value() == 0)
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d10c      	bne.n	8005df8 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005dde:	f3ef 8310 	mrs	r3, PRIMASK
 8005de2:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8005de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        interrupt_save = __get_interrupt_posture();
 8005de6:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005de8:	b662      	cpsie	i
}
 8005dea:	bf00      	nop
 8005dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005df0:	6a3b      	ldr	r3, [r7, #32]
 8005df2:	f383 8810 	msr	PRIMASK, r3
}
 8005df6:	bf00      	nop
}
 8005df8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 8005dfa:	e02b      	b.n	8005e54 <_tx_thread_system_suspend+0x204>
 8005dfc:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005dfe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005e00:	69fb      	ldr	r3, [r7, #28]
 8005e02:	f383 8810 	msr	PRIMASK, r3
}
 8005e06:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 8005e08:	4b1b      	ldr	r3, [pc, #108]	@ (8005e78 <_tx_thread_system_suspend+0x228>)
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d022      	beq.n	8005e58 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 8005e12:	4b15      	ldr	r3, [pc, #84]	@ (8005e68 <_tx_thread_system_suspend+0x218>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	657b      	str	r3, [r7, #84]	@ 0x54
        if (combined_flags == ((ULONG) 0))
 8005e18:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d11c      	bne.n	8005e58 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 8005e1e:	4b17      	ldr	r3, [pc, #92]	@ (8005e7c <_tx_thread_system_suspend+0x22c>)
 8005e20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e24:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 8005e26:	f3ef 8305 	mrs	r3, IPSR
 8005e2a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 8005e2c:	69bb      	ldr	r3, [r7, #24]
    if (__get_ipsr_value() == 0)
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10c      	bne.n	8005e4c <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005e32:	f3ef 8310 	mrs	r3, PRIMASK
 8005e36:	617b      	str	r3, [r7, #20]
    return(posture);
 8005e38:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 8005e3a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 8005e3c:	b662      	cpsie	i
}
 8005e3e:	bf00      	nop
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f383 8810 	msr	PRIMASK, r3
}
 8005e4a:	bf00      	nop
}
 8005e4c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 8005e4e:	e003      	b.n	8005e58 <_tx_thread_system_suspend+0x208>
                return;
 8005e50:	bf00      	nop
 8005e52:	e002      	b.n	8005e5a <_tx_thread_system_suspend+0x20a>
            return;
 8005e54:	bf00      	nop
 8005e56:	e000      	b.n	8005e5a <_tx_thread_system_suspend+0x20a>
    return;
 8005e58:	bf00      	nop
}
 8005e5a:	3778      	adds	r7, #120	@ 0x78
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}
 8005e60:	200011c4 	.word	0x200011c4
 8005e64:	200017c8 	.word	0x200017c8
 8005e68:	2000125c 	.word	0x2000125c
 8005e6c:	200011dc 	.word	0x200011dc
 8005e70:	200011d4 	.word	0x200011d4
 8005e74:	200011d8 	.word	0x200011d8
 8005e78:	200011c8 	.word	0x200011c8
 8005e7c:	e000ed04 	.word	0xe000ed04

08005e80 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 8005e86:	4b21      	ldr	r3, [pc, #132]	@ (8005f0c <_tx_thread_time_slice+0x8c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005e8c:	f3ef 8310 	mrs	r3, PRIMASK
 8005e90:	60fb      	str	r3, [r7, #12]
    return(posture);
 8005e92:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 8005e94:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005e96:	b672      	cpsid	i
    return(int_posture);
 8005e98:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 8005e9a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005e9c:	4b1c      	ldr	r3, [pc, #112]	@ (8005f10 <_tx_thread_time_slice+0x90>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 8005ea2:	697b      	ldr	r3, [r7, #20]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d024      	beq.n	8005ef2 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d120      	bne.n	8005ef2 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 8005eb0:	697b      	ldr	r3, [r7, #20]
 8005eb2:	69da      	ldr	r2, [r3, #28]
 8005eb4:	697b      	ldr	r3, [r7, #20]
 8005eb6:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	699b      	ldr	r3, [r3, #24]
 8005ebc:	4a15      	ldr	r2, [pc, #84]	@ (8005f14 <_tx_thread_time_slice+0x94>)
 8005ebe:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	6a1b      	ldr	r3, [r3, #32]
 8005ec4:	697a      	ldr	r2, [r7, #20]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d013      	beq.n	8005ef2 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ed2:	429a      	cmp	r2, r3
 8005ed4:	d10d      	bne.n	8005ef2 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 8005ed6:	697b      	ldr	r3, [r7, #20]
 8005ed8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	6a12      	ldr	r2, [r2, #32]
 8005ede:	490e      	ldr	r1, [pc, #56]	@ (8005f18 <_tx_thread_time_slice+0x98>)
 8005ee0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 8005ee4:	4b0d      	ldr	r3, [pc, #52]	@ (8005f1c <_tx_thread_time_slice+0x9c>)
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4a0b      	ldr	r2, [pc, #44]	@ (8005f18 <_tx_thread_time_slice+0x98>)
 8005eea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005eee:	4a0c      	ldr	r2, [pc, #48]	@ (8005f20 <_tx_thread_time_slice+0xa0>)
 8005ef0:	6013      	str	r3, [r2, #0]
 8005ef2:	693b      	ldr	r3, [r7, #16]
 8005ef4:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f383 8810 	msr	PRIMASK, r3
}
 8005efc:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 8005efe:	bf00      	nop
 8005f00:	371c      	adds	r7, #28
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	200011c4 	.word	0x200011c4
 8005f10:	2000126c 	.word	0x2000126c
 8005f14:	200017c8 	.word	0x200017c8
 8005f18:	200011dc 	.word	0x200011dc
 8005f1c:	200011d8 	.word	0x200011d8
 8005f20:	200011c8 	.word	0x200011c8

08005f24 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b08a      	sub	sp, #40	@ 0x28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005f30:	f3ef 8310 	mrs	r3, PRIMASK
 8005f34:	617b      	str	r3, [r7, #20]
    return(posture);
 8005f36:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 8005f38:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005f3a:	b672      	cpsid	i
    return(int_posture);
 8005f3c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 8005f3e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 8005f40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f44:	2b04      	cmp	r3, #4
 8005f46:	d10e      	bne.n	8005f66 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 8005f48:	4b13      	ldr	r3, [pc, #76]	@ (8005f98 <_tx_thread_timeout+0x74>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	4a12      	ldr	r2, [pc, #72]	@ (8005f98 <_tx_thread_timeout+0x74>)
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	6a3b      	ldr	r3, [r7, #32]
 8005f54:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f383 8810 	msr	PRIMASK, r3
}
 8005f5c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 8005f5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f60:	f7ff fd76 	bl	8005a50 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 8005f64:	e013      	b.n	8005f8e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 8005f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f68:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005f6a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 8005f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f6e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8005f72:	61bb      	str	r3, [r7, #24]
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	f383 8810 	msr	PRIMASK, r3
}
 8005f7e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 8005f86:	69fb      	ldr	r3, [r7, #28]
 8005f88:	69b9      	ldr	r1, [r7, #24]
 8005f8a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005f8c:	4798      	blx	r3
}
 8005f8e:	bf00      	nop
 8005f90:	3728      	adds	r7, #40	@ 0x28
 8005f92:	46bd      	mov	sp, r7
 8005f94:	bd80      	pop	{r7, pc}
 8005f96:	bf00      	nop
 8005f98:	2000125c 	.word	0x2000125c

08005f9c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b084      	sub	sp, #16
 8005fa0:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8005fa2:	f3ef 8310 	mrs	r3, PRIMASK
 8005fa6:	607b      	str	r3, [r7, #4]
    return(posture);
 8005fa8:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 8005faa:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 8005fac:	b672      	cpsid	i
    return(int_posture);
 8005fae:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 8005fb0:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 8005fb2:	4b09      	ldr	r3, [pc, #36]	@ (8005fd8 <_tx_timer_expiration_process+0x3c>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	4a07      	ldr	r2, [pc, #28]	@ (8005fd8 <_tx_timer_expiration_process+0x3c>)
 8005fba:	6013      	str	r3, [r2, #0]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8005fc0:	68bb      	ldr	r3, [r7, #8]
 8005fc2:	f383 8810 	msr	PRIMASK, r3
}
 8005fc6:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 8005fc8:	4804      	ldr	r0, [pc, #16]	@ (8005fdc <_tx_timer_expiration_process+0x40>)
 8005fca:	f7ff fd41 	bl	8005a50 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 8005fce:	bf00      	nop
 8005fd0:	3710      	adds	r7, #16
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	2000125c 	.word	0x2000125c
 8005fdc:	2000130c 	.word	0x2000130c

08005fe0 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 8005fe0:	b590      	push	{r4, r7, lr}
 8005fe2:	b089      	sub	sp, #36	@ 0x24
 8005fe4:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 8005fe6:	4b28      	ldr	r3, [pc, #160]	@ (8006088 <_tx_timer_initialize+0xa8>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 8005fec:	4b27      	ldr	r3, [pc, #156]	@ (800608c <_tx_timer_initialize+0xac>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 8005ff2:	4b27      	ldr	r3, [pc, #156]	@ (8006090 <_tx_timer_initialize+0xb0>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 8005ff8:	4b26      	ldr	r3, [pc, #152]	@ (8006094 <_tx_timer_initialize+0xb4>)
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 8005ffe:	4b26      	ldr	r3, [pc, #152]	@ (8006098 <_tx_timer_initialize+0xb8>)
 8006000:	2200      	movs	r2, #0
 8006002:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 8006004:	2280      	movs	r2, #128	@ 0x80
 8006006:	2100      	movs	r1, #0
 8006008:	4824      	ldr	r0, [pc, #144]	@ (800609c <_tx_timer_initialize+0xbc>)
 800600a:	f001 f8ec 	bl	80071e6 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800600e:	4b24      	ldr	r3, [pc, #144]	@ (80060a0 <_tx_timer_initialize+0xc0>)
 8006010:	4a22      	ldr	r2, [pc, #136]	@ (800609c <_tx_timer_initialize+0xbc>)
 8006012:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 8006014:	4b23      	ldr	r3, [pc, #140]	@ (80060a4 <_tx_timer_initialize+0xc4>)
 8006016:	4a21      	ldr	r2, [pc, #132]	@ (800609c <_tx_timer_initialize+0xbc>)
 8006018:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800601a:	4b23      	ldr	r3, [pc, #140]	@ (80060a8 <_tx_timer_initialize+0xc8>)
 800601c:	4a23      	ldr	r2, [pc, #140]	@ (80060ac <_tx_timer_initialize+0xcc>)
 800601e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 8006020:	4b21      	ldr	r3, [pc, #132]	@ (80060a8 <_tx_timer_initialize+0xc8>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	3304      	adds	r3, #4
 8006026:	4a20      	ldr	r2, [pc, #128]	@ (80060a8 <_tx_timer_initialize+0xc8>)
 8006028:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800602a:	4b21      	ldr	r3, [pc, #132]	@ (80060b0 <_tx_timer_initialize+0xd0>)
 800602c:	4a21      	ldr	r2, [pc, #132]	@ (80060b4 <_tx_timer_initialize+0xd4>)
 800602e:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 8006030:	4b21      	ldr	r3, [pc, #132]	@ (80060b8 <_tx_timer_initialize+0xd8>)
 8006032:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006036:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 8006038:	4b20      	ldr	r3, [pc, #128]	@ (80060bc <_tx_timer_initialize+0xdc>)
 800603a:	2200      	movs	r2, #0
 800603c:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800603e:	4b1c      	ldr	r3, [pc, #112]	@ (80060b0 <_tx_timer_initialize+0xd0>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	4a1d      	ldr	r2, [pc, #116]	@ (80060b8 <_tx_timer_initialize+0xd8>)
 8006044:	6812      	ldr	r2, [r2, #0]
 8006046:	491d      	ldr	r1, [pc, #116]	@ (80060bc <_tx_timer_initialize+0xdc>)
 8006048:	6809      	ldr	r1, [r1, #0]
 800604a:	481c      	ldr	r0, [pc, #112]	@ (80060bc <_tx_timer_initialize+0xdc>)
 800604c:	6800      	ldr	r0, [r0, #0]
 800604e:	2400      	movs	r4, #0
 8006050:	9405      	str	r4, [sp, #20]
 8006052:	2400      	movs	r4, #0
 8006054:	9404      	str	r4, [sp, #16]
 8006056:	9003      	str	r0, [sp, #12]
 8006058:	9102      	str	r1, [sp, #8]
 800605a:	9201      	str	r2, [sp, #4]
 800605c:	9300      	str	r3, [sp, #0]
 800605e:	4b18      	ldr	r3, [pc, #96]	@ (80060c0 <_tx_timer_initialize+0xe0>)
 8006060:	4a18      	ldr	r2, [pc, #96]	@ (80060c4 <_tx_timer_initialize+0xe4>)
 8006062:	4919      	ldr	r1, [pc, #100]	@ (80060c8 <_tx_timer_initialize+0xe8>)
 8006064:	4819      	ldr	r0, [pc, #100]	@ (80060cc <_tx_timer_initialize+0xec>)
 8006066:	f7ff fabb 	bl	80055e0 <_tx_thread_create>
 800606a:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d1e5      	bne.n	800603e <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 8006072:	4b17      	ldr	r3, [pc, #92]	@ (80060d0 <_tx_timer_initialize+0xf0>)
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 8006078:	4b16      	ldr	r3, [pc, #88]	@ (80060d4 <_tx_timer_initialize+0xf4>)
 800607a:	2200      	movs	r2, #0
 800607c:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800607e:	bf00      	nop
 8006080:	370c      	adds	r7, #12
 8006082:	46bd      	mov	sp, r7
 8006084:	bd90      	pop	{r4, r7, pc}
 8006086:	bf00      	nop
 8006088:	20001268 	.word	0x20001268
 800608c:	200017c8 	.word	0x200017c8
 8006090:	2000126c 	.word	0x2000126c
 8006094:	200012fc 	.word	0x200012fc
 8006098:	20001308 	.word	0x20001308
 800609c:	20001270 	.word	0x20001270
 80060a0:	200012f0 	.word	0x200012f0
 80060a4:	200012f8 	.word	0x200012f8
 80060a8:	200012f4 	.word	0x200012f4
 80060ac:	200012ec 	.word	0x200012ec
 80060b0:	200013bc 	.word	0x200013bc
 80060b4:	200013c8 	.word	0x200013c8
 80060b8:	200013c0 	.word	0x200013c0
 80060bc:	200013c4 	.word	0x200013c4
 80060c0:	4154494d 	.word	0x4154494d
 80060c4:	0800620d 	.word	0x0800620d
 80060c8:	080090ac 	.word	0x080090ac
 80060cc:	2000130c 	.word	0x2000130c
 80060d0:	20001300 	.word	0x20001300
 80060d4:	20001304 	.word	0x20001304

080060d8 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 80060d8:	b480      	push	{r7}
 80060da:	b089      	sub	sp, #36	@ 0x24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d04a      	beq.n	8006182 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060f2:	d046      	beq.n	8006182 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d142      	bne.n	8006182 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 80060fc:	697b      	ldr	r3, [r7, #20]
 80060fe:	2b20      	cmp	r3, #32
 8006100:	d902      	bls.n	8006108 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 8006102:	231f      	movs	r3, #31
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	e002      	b.n	800610e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 8006108:	697b      	ldr	r3, [r7, #20]
 800610a:	3b01      	subs	r3, #1
 800610c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800610e:	4b20      	ldr	r3, [pc, #128]	@ (8006190 <_tx_timer_system_activate+0xb8>)
 8006110:	681a      	ldr	r2, [r3, #0]
 8006112:	69bb      	ldr	r3, [r7, #24]
 8006114:	009b      	lsls	r3, r3, #2
 8006116:	4413      	add	r3, r2
 8006118:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800611a:	4b1e      	ldr	r3, [pc, #120]	@ (8006194 <_tx_timer_system_activate+0xbc>)
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69fa      	ldr	r2, [r7, #28]
 8006120:	429a      	cmp	r2, r3
 8006122:	d30b      	bcc.n	800613c <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 8006124:	4b1b      	ldr	r3, [pc, #108]	@ (8006194 <_tx_timer_system_activate+0xbc>)
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	69fa      	ldr	r2, [r7, #28]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	109b      	asrs	r3, r3, #2
 800612e:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 8006130:	4b19      	ldr	r3, [pc, #100]	@ (8006198 <_tx_timer_system_activate+0xc0>)
 8006132:	681a      	ldr	r2, [r3, #0]
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d109      	bne.n	8006158 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	687a      	ldr	r2, [r7, #4]
 8006148:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 8006150:	69fb      	ldr	r3, [r7, #28]
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	e011      	b.n	800617c <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 8006164:	68bb      	ldr	r3, [r7, #8]
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800616a:	68fb      	ldr	r3, [r7, #12]
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	68ba      	ldr	r2, [r7, #8]
 800617a:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	69fa      	ldr	r2, [r7, #28]
 8006180:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 8006182:	bf00      	nop
 8006184:	3724      	adds	r7, #36	@ 0x24
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
 800618e:	bf00      	nop
 8006190:	200012f8 	.word	0x200012f8
 8006194:	200012f4 	.word	0x200012f4
 8006198:	200012f0 	.word	0x200012f0

0800619c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800619c:	b480      	push	{r7}
 800619e:	b087      	sub	sp, #28
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	699b      	ldr	r3, [r3, #24]
 80061a8:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d026      	beq.n	80061fe <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	691b      	ldr	r3, [r3, #16]
 80061b4:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 80061b6:	687a      	ldr	r2, [r7, #4]
 80061b8:	693b      	ldr	r3, [r7, #16]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d108      	bne.n	80061d0 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80061be:	697b      	ldr	r3, [r7, #20]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	429a      	cmp	r2, r3
 80061c6:	d117      	bne.n	80061f8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	2200      	movs	r2, #0
 80061cc:	601a      	str	r2, [r3, #0]
 80061ce:	e013      	b.n	80061f8 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	695b      	ldr	r3, [r3, #20]
 80061d4:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80061d6:	693b      	ldr	r3, [r7, #16]
 80061d8:	68fa      	ldr	r2, [r7, #12]
 80061da:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	693a      	ldr	r2, [r7, #16]
 80061e0:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	687a      	ldr	r2, [r7, #4]
 80061e8:	429a      	cmp	r2, r3
 80061ea:	d105      	bne.n	80061f8 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 80061ec:	693b      	ldr	r3, [r7, #16]
 80061ee:	697a      	ldr	r2, [r7, #20]
 80061f0:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2200      	movs	r2, #0
 80061fc:	619a      	str	r2, [r3, #24]
    }
}
 80061fe:	bf00      	nop
 8006200:	371c      	adds	r7, #28
 8006202:	46bd      	mov	sp, r7
 8006204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006208:	4770      	bx	lr
	...

0800620c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b098      	sub	sp, #96	@ 0x60
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 8006214:	2300      	movs	r3, #0
 8006216:	657b      	str	r3, [r7, #84]	@ 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a73      	ldr	r2, [pc, #460]	@ (80063e8 <_tx_timer_thread_entry+0x1dc>)
 800621c:	4293      	cmp	r3, r2
 800621e:	f040 80de 	bne.w	80063de <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006222:	f3ef 8310 	mrs	r3, PRIMASK
 8006226:	643b      	str	r3, [r7, #64]	@ 0x40
    return(posture);
 8006228:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    int_posture = __get_interrupt_posture();
 800622a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800622c:	b672      	cpsid	i
    return(int_posture);
 800622e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 8006230:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 8006232:	4b6e      	ldr	r3, [pc, #440]	@ (80063ec <_tx_timer_thread_entry+0x1e0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d003      	beq.n	8006248 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	f107 020c 	add.w	r2, r7, #12
 8006246:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 8006248:	4b68      	ldr	r3, [pc, #416]	@ (80063ec <_tx_timer_thread_entry+0x1e0>)
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	2200      	movs	r2, #0
 800624e:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 8006250:	4b66      	ldr	r3, [pc, #408]	@ (80063ec <_tx_timer_thread_entry+0x1e0>)
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3304      	adds	r3, #4
 8006256:	4a65      	ldr	r2, [pc, #404]	@ (80063ec <_tx_timer_thread_entry+0x1e0>)
 8006258:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800625a:	4b64      	ldr	r3, [pc, #400]	@ (80063ec <_tx_timer_thread_entry+0x1e0>)
 800625c:	681a      	ldr	r2, [r3, #0]
 800625e:	4b64      	ldr	r3, [pc, #400]	@ (80063f0 <_tx_timer_thread_entry+0x1e4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	429a      	cmp	r2, r3
 8006264:	d103      	bne.n	800626e <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 8006266:	4b63      	ldr	r3, [pc, #396]	@ (80063f4 <_tx_timer_thread_entry+0x1e8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4a60      	ldr	r2, [pc, #384]	@ (80063ec <_tx_timer_thread_entry+0x1e0>)
 800626c:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800626e:	4b62      	ldr	r3, [pc, #392]	@ (80063f8 <_tx_timer_thread_entry+0x1ec>)
 8006270:	2200      	movs	r2, #0
 8006272:	601a      	str	r2, [r3, #0]
 8006274:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006276:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006278:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800627a:	f383 8810 	msr	PRIMASK, r3
}
 800627e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006280:	f3ef 8310 	mrs	r3, PRIMASK
 8006284:	63bb      	str	r3, [r7, #56]	@ 0x38
    return(posture);
 8006286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    int_posture = __get_interrupt_posture();
 8006288:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800628a:	b672      	cpsid	i
    return(int_posture);
 800628c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800628e:	65fb      	str	r3, [r7, #92]	@ 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 8006290:	e07f      	b.n	8006392 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	64fb      	str	r3, [r7, #76]	@ 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	691b      	ldr	r3, [r3, #16]
 800629a:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800629c:	2300      	movs	r3, #0
 800629e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 80062a0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062a4:	429a      	cmp	r2, r3
 80062a6:	d102      	bne.n	80062ae <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 80062a8:	2300      	movs	r3, #0
 80062aa:	60fb      	str	r3, [r7, #12]
 80062ac:	e00e      	b.n	80062cc <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 80062ae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062b0:	695b      	ldr	r3, [r3, #20]
 80062b2:	647b      	str	r3, [r7, #68]	@ 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 80062b4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062b6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80062b8:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 80062ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80062bc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80062be:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 80062c0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062c2:	f107 020c 	add.w	r2, r7, #12
 80062c6:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 80062c8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80062ca:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 80062cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b20      	cmp	r3, #32
 80062d2:	d911      	bls.n	80062f8 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 80062d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 80062dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062de:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 80062e0:	2300      	movs	r3, #0
 80062e2:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 80062e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062e6:	f107 0208 	add.w	r2, r7, #8
 80062ea:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 80062ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80062f0:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 80062f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062f4:	60bb      	str	r3, [r7, #8]
 80062f6:	e01a      	b.n	800632e <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 80062f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	65bb      	str	r3, [r7, #88]	@ 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 80062fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	657b      	str	r3, [r7, #84]	@ 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 8006304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006306:	685a      	ldr	r2, [r3, #4]
 8006308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800630a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800630c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d009      	beq.n	8006328 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 8006314:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006316:	f107 0208 	add.w	r2, r7, #8
 800631a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800631c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800631e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006320:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 8006322:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006324:	60bb      	str	r3, [r7, #8]
 8006326:	e002      	b.n	800632e <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 8006328:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800632a:	2200      	movs	r2, #0
 800632c:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800632e:	4a33      	ldr	r2, [pc, #204]	@ (80063fc <_tx_timer_thread_entry+0x1f0>)
 8006330:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006332:	6013      	str	r3, [r2, #0]
 8006334:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006336:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006338:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800633a:	f383 8810 	msr	PRIMASK, r3
}
 800633e:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 8006340:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006342:	2b00      	cmp	r3, #0
 8006344:	d002      	beq.n	800634c <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 8006346:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006348:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800634a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800634c:	f3ef 8310 	mrs	r3, PRIMASK
 8006350:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8006352:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 8006354:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 8006356:	b672      	cpsid	i
    return(int_posture);
 8006358:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800635a:	65fb      	str	r3, [r7, #92]	@ 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800635c:	4b27      	ldr	r3, [pc, #156]	@ (80063fc <_tx_timer_thread_entry+0x1f0>)
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006366:	429a      	cmp	r2, r3
 8006368:	d105      	bne.n	8006376 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800636a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800636c:	2200      	movs	r2, #0
 800636e:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 8006370:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006372:	f7ff feb1 	bl	80060d8 <_tx_timer_system_activate>
 8006376:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006378:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800637a:	69bb      	ldr	r3, [r7, #24]
 800637c:	f383 8810 	msr	PRIMASK, r3
}
 8006380:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006382:	f3ef 8310 	mrs	r3, PRIMASK
 8006386:	623b      	str	r3, [r7, #32]
    return(posture);
 8006388:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800638a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800638c:	b672      	cpsid	i
    return(int_posture);
 800638e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 8006390:	65fb      	str	r3, [r7, #92]	@ 0x5c
            while (expired_timers != TX_NULL)
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2b00      	cmp	r3, #0
 8006396:	f47f af7c 	bne.w	8006292 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800639a:	4b17      	ldr	r3, [pc, #92]	@ (80063f8 <_tx_timer_thread_entry+0x1ec>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d116      	bne.n	80063d0 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 80063a2:	4b17      	ldr	r3, [pc, #92]	@ (8006400 <_tx_timer_thread_entry+0x1f4>)
 80063a4:	653b      	str	r3, [r7, #80]	@ 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 80063a6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063a8:	2203      	movs	r2, #3
 80063aa:	631a      	str	r2, [r3, #48]	@ 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 80063ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80063ae:	2201      	movs	r2, #1
 80063b0:	639a      	str	r2, [r3, #56]	@ 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 80063b2:	4b14      	ldr	r3, [pc, #80]	@ (8006404 <_tx_timer_thread_entry+0x1f8>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	3301      	adds	r3, #1
 80063b8:	4a12      	ldr	r2, [pc, #72]	@ (8006404 <_tx_timer_thread_entry+0x1f8>)
 80063ba:	6013      	str	r3, [r2, #0]
 80063bc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063be:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80063c0:	697b      	ldr	r3, [r7, #20]
 80063c2:	f383 8810 	msr	PRIMASK, r3
}
 80063c6:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 80063c8:	6d38      	ldr	r0, [r7, #80]	@ 0x50
 80063ca:	f7ff fc41 	bl	8005c50 <_tx_thread_system_suspend>
 80063ce:	e728      	b.n	8006222 <_tx_timer_thread_entry+0x16>
 80063d0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80063d2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	f383 8810 	msr	PRIMASK, r3
}
 80063da:	bf00      	nop
            TX_DISABLE
 80063dc:	e721      	b.n	8006222 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 80063de:	bf00      	nop
 80063e0:	3760      	adds	r7, #96	@ 0x60
 80063e2:	46bd      	mov	sp, r7
 80063e4:	bd80      	pop	{r7, pc}
 80063e6:	bf00      	nop
 80063e8:	4154494d 	.word	0x4154494d
 80063ec:	200012f8 	.word	0x200012f8
 80063f0:	200012f4 	.word	0x200012f4
 80063f4:	200012f0 	.word	0x200012f0
 80063f8:	200012fc 	.word	0x200012fc
 80063fc:	20001308 	.word	0x20001308
 8006400:	2000130c 	.word	0x2000130c
 8006404:	2000125c 	.word	0x2000125c

08006408 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b092      	sub	sp, #72	@ 0x48
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
 8006414:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8006416:	2300      	movs	r3, #0
 8006418:	647b      	str	r3, [r7, #68]	@ 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d102      	bne.n	8006426 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 8006420:	2302      	movs	r3, #2
 8006422:	647b      	str	r3, [r7, #68]	@ 0x44
 8006424:	e075      	b.n	8006512 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 8006426:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006428:	2b34      	cmp	r3, #52	@ 0x34
 800642a:	d002      	beq.n	8006432 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800642c:	2302      	movs	r3, #2
 800642e:	647b      	str	r3, [r7, #68]	@ 0x44
 8006430:	e06f      	b.n	8006512 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006432:	f3ef 8310 	mrs	r3, PRIMASK
 8006436:	62fb      	str	r3, [r7, #44]	@ 0x2c
    return(posture);
 8006438:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    int_posture = __get_interrupt_posture();
 800643a:	62bb      	str	r3, [r7, #40]	@ 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800643c:	b672      	cpsid	i
    return(int_posture);
 800643e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8006440:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8006442:	4b3b      	ldr	r3, [pc, #236]	@ (8006530 <_txe_byte_pool_create+0x128>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	3301      	adds	r3, #1
 8006448:	4a39      	ldr	r2, [pc, #228]	@ (8006530 <_txe_byte_pool_create+0x128>)
 800644a:	6013      	str	r3, [r2, #0]
 800644c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644e:	633b      	str	r3, [r7, #48]	@ 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006450:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006452:	f383 8810 	msr	PRIMASK, r3
}
 8006456:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 8006458:	4b36      	ldr	r3, [pc, #216]	@ (8006534 <_txe_byte_pool_create+0x12c>)
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800645e:	2300      	movs	r3, #0
 8006460:	643b      	str	r3, [r7, #64]	@ 0x40
 8006462:	e009      	b.n	8006478 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006468:	429a      	cmp	r2, r3
 800646a:	d00b      	beq.n	8006484 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800646c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800646e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006470:	63fb      	str	r3, [r7, #60]	@ 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 8006472:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006474:	3301      	adds	r3, #1
 8006476:	643b      	str	r3, [r7, #64]	@ 0x40
 8006478:	4b2f      	ldr	r3, [pc, #188]	@ (8006538 <_txe_byte_pool_create+0x130>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800647e:	429a      	cmp	r2, r3
 8006480:	d3f0      	bcc.n	8006464 <_txe_byte_pool_create+0x5c>
 8006482:	e000      	b.n	8006486 <_txe_byte_pool_create+0x7e>
                break;
 8006484:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006486:	f3ef 8310 	mrs	r3, PRIMASK
 800648a:	623b      	str	r3, [r7, #32]
    return(posture);
 800648c:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800648e:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 8006490:	b672      	cpsid	i
    return(int_posture);
 8006492:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 8006494:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8006496:	4b26      	ldr	r3, [pc, #152]	@ (8006530 <_txe_byte_pool_create+0x128>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	3b01      	subs	r3, #1
 800649c:	4a24      	ldr	r2, [pc, #144]	@ (8006530 <_txe_byte_pool_create+0x128>)
 800649e:	6013      	str	r3, [r2, #0]
 80064a0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064a2:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 80064a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a6:	f383 8810 	msr	PRIMASK, r3
}
 80064aa:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 80064ac:	f7ff fa96 	bl	80059dc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 80064b0:	68fa      	ldr	r2, [r7, #12]
 80064b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80064b4:	429a      	cmp	r2, r3
 80064b6:	d102      	bne.n	80064be <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 80064b8:	2302      	movs	r3, #2
 80064ba:	647b      	str	r3, [r7, #68]	@ 0x44
 80064bc:	e029      	b.n	8006512 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d102      	bne.n	80064ca <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 80064c4:	2303      	movs	r3, #3
 80064c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80064c8:	e023      	b.n	8006512 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	2b63      	cmp	r3, #99	@ 0x63
 80064ce:	d802      	bhi.n	80064d6 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 80064d0:	2305      	movs	r3, #5
 80064d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80064d4:	e01d      	b.n	8006512 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 80064d6:	4b19      	ldr	r3, [pc, #100]	@ (800653c <_txe_byte_pool_create+0x134>)
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 80064dc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064de:	4a18      	ldr	r2, [pc, #96]	@ (8006540 <_txe_byte_pool_create+0x138>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d101      	bne.n	80064e8 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80064e4:	2313      	movs	r3, #19
 80064e6:	647b      	str	r3, [r7, #68]	@ 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80064e8:	f3ef 8305 	mrs	r3, IPSR
 80064ec:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 80064ee:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80064f0:	4b14      	ldr	r3, [pc, #80]	@ (8006544 <_txe_byte_pool_create+0x13c>)
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	4313      	orrs	r3, r2
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80064fa:	f3ef 8305 	mrs	r3, IPSR
 80064fe:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 8006500:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 8006502:	4b10      	ldr	r3, [pc, #64]	@ (8006544 <_txe_byte_pool_create+0x13c>)
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	4313      	orrs	r3, r2
 8006508:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 800650c:	d201      	bcs.n	8006512 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800650e:	2313      	movs	r3, #19
 8006510:	647b      	str	r3, [r7, #68]	@ 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 8006512:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006514:	2b00      	cmp	r3, #0
 8006516:	d106      	bne.n	8006526 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 8006518:	683b      	ldr	r3, [r7, #0]
 800651a:	687a      	ldr	r2, [r7, #4]
 800651c:	68b9      	ldr	r1, [r7, #8]
 800651e:	68f8      	ldr	r0, [r7, #12]
 8006520:	f7fe ff5a 	bl	80053d8 <_tx_byte_pool_create>
 8006524:	6478      	str	r0, [r7, #68]	@ 0x44
    }

    /* Return completion status.  */
    return(status);
 8006526:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 8006528:	4618      	mov	r0, r3
 800652a:	3748      	adds	r7, #72	@ 0x48
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}
 8006530:	2000125c 	.word	0x2000125c
 8006534:	200011b4 	.word	0x200011b4
 8006538:	200011b8 	.word	0x200011b8
 800653c:	200011c4 	.word	0x200011c4
 8006540:	2000130c 	.word	0x2000130c
 8006544:	2000000c 	.word	0x2000000c

08006548 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	b09a      	sub	sp, #104	@ 0x68
 800654c:	af06      	add	r7, sp, #24
 800654e:	60f8      	str	r0, [r7, #12]
 8006550:	60b9      	str	r1, [r7, #8]
 8006552:	607a      	str	r2, [r7, #4]
 8006554:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 8006556:	2300      	movs	r3, #0
 8006558:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800655a:	68fb      	ldr	r3, [r7, #12]
 800655c:	2b00      	cmp	r3, #0
 800655e:	d102      	bne.n	8006566 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 8006560:	230e      	movs	r3, #14
 8006562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006564:	e0bb      	b.n	80066de <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 8006566:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006568:	2bb0      	cmp	r3, #176	@ 0xb0
 800656a:	d002      	beq.n	8006572 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800656c:	230e      	movs	r3, #14
 800656e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006570:	e0b5      	b.n	80066de <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006572:	f3ef 8310 	mrs	r3, PRIMASK
 8006576:	62bb      	str	r3, [r7, #40]	@ 0x28
    return(posture);
 8006578:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    int_posture = __get_interrupt_posture();
 800657a:	627b      	str	r3, [r7, #36]	@ 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800657c:	b672      	cpsid	i
    return(int_posture);
 800657e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 8006580:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 8006582:	4b64      	ldr	r3, [pc, #400]	@ (8006714 <_txe_thread_create+0x1cc>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	3301      	adds	r3, #1
 8006588:	4a62      	ldr	r2, [pc, #392]	@ (8006714 <_txe_thread_create+0x1cc>)
 800658a:	6013      	str	r3, [r2, #0]
 800658c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800658e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 8006590:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006592:	f383 8810 	msr	PRIMASK, r3
}
 8006596:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 8006598:	2300      	movs	r3, #0
 800659a:	64bb      	str	r3, [r7, #72]	@ 0x48
        next_thread =  _tx_thread_created_ptr;
 800659c:	4b5e      	ldr	r3, [pc, #376]	@ (8006718 <_txe_thread_create+0x1d0>)
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	643b      	str	r3, [r7, #64]	@ 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 80065a2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80065a4:	63bb      	str	r3, [r7, #56]	@ 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 80065a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80065a8:	3b01      	subs	r3, #1
 80065aa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80065ac:	4413      	add	r3, r2
 80065ae:	63bb      	str	r3, [r7, #56]	@ 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 80065b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b2:	637b      	str	r3, [r7, #52]	@ 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 80065b4:	2300      	movs	r3, #0
 80065b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80065b8:	e02b      	b.n	8006612 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 80065ba:	68fa      	ldr	r2, [r7, #12]
 80065bc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065be:	429a      	cmp	r2, r3
 80065c0:	d101      	bne.n	80065c6 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 80065c2:	2301      	movs	r3, #1
 80065c4:	64bb      	str	r3, [r7, #72]	@ 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 80065c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d028      	beq.n	800661e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 80065cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ce:	68db      	ldr	r3, [r3, #12]
 80065d0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d308      	bcc.n	80065e8 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 80065d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80065dc:	429a      	cmp	r2, r3
 80065de:	d203      	bcs.n	80065e8 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80065e0:	2300      	movs	r3, #0
 80065e2:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 80065e4:	2301      	movs	r3, #1
 80065e6:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 80065e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065ea:	68db      	ldr	r3, [r3, #12]
 80065ec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d308      	bcc.n	8006604 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 80065f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80065f4:	691b      	ldr	r3, [r3, #16]
 80065f6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80065f8:	429a      	cmp	r2, r3
 80065fa:	d203      	bcs.n	8006604 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 80065fc:	2300      	movs	r3, #0
 80065fe:	65bb      	str	r3, [r7, #88]	@ 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 8006600:	2301      	movs	r3, #1
 8006602:	64bb      	str	r3, [r7, #72]	@ 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 8006604:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006606:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660a:	643b      	str	r3, [r7, #64]	@ 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800660c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800660e:	3301      	adds	r3, #1
 8006610:	647b      	str	r3, [r7, #68]	@ 0x44
 8006612:	4b42      	ldr	r3, [pc, #264]	@ (800671c <_txe_thread_create+0x1d4>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006618:	429a      	cmp	r2, r3
 800661a:	d3ce      	bcc.n	80065ba <_txe_thread_create+0x72>
 800661c:	e000      	b.n	8006620 <_txe_thread_create+0xd8>
                break;
 800661e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 8006620:	f3ef 8310 	mrs	r3, PRIMASK
 8006624:	61fb      	str	r3, [r7, #28]
    return(posture);
 8006626:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 8006628:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800662a:	b672      	cpsid	i
    return(int_posture);
 800662c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800662e:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 8006630:	4b38      	ldr	r3, [pc, #224]	@ (8006714 <_txe_thread_create+0x1cc>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	3b01      	subs	r3, #1
 8006636:	4a37      	ldr	r2, [pc, #220]	@ (8006714 <_txe_thread_create+0x1cc>)
 8006638:	6013      	str	r3, [r2, #0]
 800663a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800663c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	f383 8810 	msr	PRIMASK, r3
}
 8006644:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 8006646:	f7ff f9c9 	bl	80059dc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800664a:	68fa      	ldr	r2, [r7, #12]
 800664c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800664e:	429a      	cmp	r2, r3
 8006650:	d102      	bne.n	8006658 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 8006652:	230e      	movs	r3, #14
 8006654:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006656:	e042      	b.n	80066de <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 8006658:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800665a:	2b00      	cmp	r3, #0
 800665c:	d102      	bne.n	8006664 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800665e:	2303      	movs	r3, #3
 8006660:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006662:	e03c      	b.n	80066de <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	2b00      	cmp	r3, #0
 8006668:	d102      	bne.n	8006670 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800666a:	2303      	movs	r3, #3
 800666c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800666e:	e036      	b.n	80066de <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 8006670:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006672:	2bc7      	cmp	r3, #199	@ 0xc7
 8006674:	d802      	bhi.n	800667c <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 8006676:	2305      	movs	r3, #5
 8006678:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800667a:	e030      	b.n	80066de <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800667c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800667e:	2b1f      	cmp	r3, #31
 8006680:	d902      	bls.n	8006688 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 8006682:	230f      	movs	r3, #15
 8006684:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006686:	e02a      	b.n	80066de <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 8006688:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 800668a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800668c:	429a      	cmp	r2, r3
 800668e:	d902      	bls.n	8006696 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 8006690:	2318      	movs	r3, #24
 8006692:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006694:	e023      	b.n	80066de <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 8006696:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006698:	2b01      	cmp	r3, #1
 800669a:	d902      	bls.n	80066a2 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800669c:	2310      	movs	r3, #16
 800669e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066a0:	e01d      	b.n	80066de <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 80066a2:	4b1f      	ldr	r3, [pc, #124]	@ (8006720 <_txe_thread_create+0x1d8>)
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	633b      	str	r3, [r7, #48]	@ 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 80066a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066aa:	4a1e      	ldr	r2, [pc, #120]	@ (8006724 <_txe_thread_create+0x1dc>)
 80066ac:	4293      	cmp	r3, r2
 80066ae:	d101      	bne.n	80066b4 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 80066b0:	2313      	movs	r3, #19
 80066b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80066b4:	f3ef 8305 	mrs	r3, IPSR
 80066b8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 80066ba:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 80066bc:	4b1a      	ldr	r3, [pc, #104]	@ (8006728 <_txe_thread_create+0x1e0>)
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d00b      	beq.n	80066de <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 80066c6:	f3ef 8305 	mrs	r3, IPSR
 80066ca:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 80066cc:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 80066ce:	4b16      	ldr	r3, [pc, #88]	@ (8006728 <_txe_thread_create+0x1e0>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	f1b3 3ff0 	cmp.w	r3, #4042322160	@ 0xf0f0f0f0
 80066d8:	d201      	bcs.n	80066de <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 80066da:	2313      	movs	r3, #19
 80066dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 80066de:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d112      	bne.n	800670a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 80066e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80066e6:	9305      	str	r3, [sp, #20]
 80066e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80066ea:	9304      	str	r3, [sp, #16]
 80066ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80066ee:	9303      	str	r3, [sp, #12]
 80066f0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80066f2:	9302      	str	r3, [sp, #8]
 80066f4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80066f6:	9301      	str	r3, [sp, #4]
 80066f8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80066fa:	9300      	str	r3, [sp, #0]
 80066fc:	683b      	ldr	r3, [r7, #0]
 80066fe:	687a      	ldr	r2, [r7, #4]
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f7fe ff6c 	bl	80055e0 <_tx_thread_create>
 8006708:	64f8      	str	r0, [r7, #76]	@ 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800670a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800670c:	4618      	mov	r0, r3
 800670e:	3750      	adds	r7, #80	@ 0x50
 8006710:	46bd      	mov	sp, r7
 8006712:	bd80      	pop	{r7, pc}
 8006714:	2000125c 	.word	0x2000125c
 8006718:	200011cc 	.word	0x200011cc
 800671c:	200011d0 	.word	0x200011d0
 8006720:	200011c4 	.word	0x200011c4
 8006724:	2000130c 	.word	0x2000130c
 8006728:	2000000c 	.word	0x2000000c

0800672c <__cvt>:
 800672c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006730:	ec57 6b10 	vmov	r6, r7, d0
 8006734:	2f00      	cmp	r7, #0
 8006736:	460c      	mov	r4, r1
 8006738:	4619      	mov	r1, r3
 800673a:	463b      	mov	r3, r7
 800673c:	bfbb      	ittet	lt
 800673e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006742:	461f      	movlt	r7, r3
 8006744:	2300      	movge	r3, #0
 8006746:	232d      	movlt	r3, #45	@ 0x2d
 8006748:	700b      	strb	r3, [r1, #0]
 800674a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800674c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006750:	4691      	mov	r9, r2
 8006752:	f023 0820 	bic.w	r8, r3, #32
 8006756:	bfbc      	itt	lt
 8006758:	4632      	movlt	r2, r6
 800675a:	4616      	movlt	r6, r2
 800675c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006760:	d005      	beq.n	800676e <__cvt+0x42>
 8006762:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006766:	d100      	bne.n	800676a <__cvt+0x3e>
 8006768:	3401      	adds	r4, #1
 800676a:	2102      	movs	r1, #2
 800676c:	e000      	b.n	8006770 <__cvt+0x44>
 800676e:	2103      	movs	r1, #3
 8006770:	ab03      	add	r3, sp, #12
 8006772:	9301      	str	r3, [sp, #4]
 8006774:	ab02      	add	r3, sp, #8
 8006776:	9300      	str	r3, [sp, #0]
 8006778:	ec47 6b10 	vmov	d0, r6, r7
 800677c:	4653      	mov	r3, sl
 800677e:	4622      	mov	r2, r4
 8006780:	f000 fe4e 	bl	8007420 <_dtoa_r>
 8006784:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006788:	4605      	mov	r5, r0
 800678a:	d119      	bne.n	80067c0 <__cvt+0x94>
 800678c:	f019 0f01 	tst.w	r9, #1
 8006790:	d00e      	beq.n	80067b0 <__cvt+0x84>
 8006792:	eb00 0904 	add.w	r9, r0, r4
 8006796:	2200      	movs	r2, #0
 8006798:	2300      	movs	r3, #0
 800679a:	4630      	mov	r0, r6
 800679c:	4639      	mov	r1, r7
 800679e:	f7fa fadb 	bl	8000d58 <__aeabi_dcmpeq>
 80067a2:	b108      	cbz	r0, 80067a8 <__cvt+0x7c>
 80067a4:	f8cd 900c 	str.w	r9, [sp, #12]
 80067a8:	2230      	movs	r2, #48	@ 0x30
 80067aa:	9b03      	ldr	r3, [sp, #12]
 80067ac:	454b      	cmp	r3, r9
 80067ae:	d31e      	bcc.n	80067ee <__cvt+0xc2>
 80067b0:	9b03      	ldr	r3, [sp, #12]
 80067b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80067b4:	1b5b      	subs	r3, r3, r5
 80067b6:	4628      	mov	r0, r5
 80067b8:	6013      	str	r3, [r2, #0]
 80067ba:	b004      	add	sp, #16
 80067bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80067c4:	eb00 0904 	add.w	r9, r0, r4
 80067c8:	d1e5      	bne.n	8006796 <__cvt+0x6a>
 80067ca:	7803      	ldrb	r3, [r0, #0]
 80067cc:	2b30      	cmp	r3, #48	@ 0x30
 80067ce:	d10a      	bne.n	80067e6 <__cvt+0xba>
 80067d0:	2200      	movs	r2, #0
 80067d2:	2300      	movs	r3, #0
 80067d4:	4630      	mov	r0, r6
 80067d6:	4639      	mov	r1, r7
 80067d8:	f7fa fabe 	bl	8000d58 <__aeabi_dcmpeq>
 80067dc:	b918      	cbnz	r0, 80067e6 <__cvt+0xba>
 80067de:	f1c4 0401 	rsb	r4, r4, #1
 80067e2:	f8ca 4000 	str.w	r4, [sl]
 80067e6:	f8da 3000 	ldr.w	r3, [sl]
 80067ea:	4499      	add	r9, r3
 80067ec:	e7d3      	b.n	8006796 <__cvt+0x6a>
 80067ee:	1c59      	adds	r1, r3, #1
 80067f0:	9103      	str	r1, [sp, #12]
 80067f2:	701a      	strb	r2, [r3, #0]
 80067f4:	e7d9      	b.n	80067aa <__cvt+0x7e>

080067f6 <__exponent>:
 80067f6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80067f8:	2900      	cmp	r1, #0
 80067fa:	bfba      	itte	lt
 80067fc:	4249      	neglt	r1, r1
 80067fe:	232d      	movlt	r3, #45	@ 0x2d
 8006800:	232b      	movge	r3, #43	@ 0x2b
 8006802:	2909      	cmp	r1, #9
 8006804:	7002      	strb	r2, [r0, #0]
 8006806:	7043      	strb	r3, [r0, #1]
 8006808:	dd29      	ble.n	800685e <__exponent+0x68>
 800680a:	f10d 0307 	add.w	r3, sp, #7
 800680e:	461d      	mov	r5, r3
 8006810:	270a      	movs	r7, #10
 8006812:	461a      	mov	r2, r3
 8006814:	fbb1 f6f7 	udiv	r6, r1, r7
 8006818:	fb07 1416 	mls	r4, r7, r6, r1
 800681c:	3430      	adds	r4, #48	@ 0x30
 800681e:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006822:	460c      	mov	r4, r1
 8006824:	2c63      	cmp	r4, #99	@ 0x63
 8006826:	f103 33ff 	add.w	r3, r3, #4294967295
 800682a:	4631      	mov	r1, r6
 800682c:	dcf1      	bgt.n	8006812 <__exponent+0x1c>
 800682e:	3130      	adds	r1, #48	@ 0x30
 8006830:	1e94      	subs	r4, r2, #2
 8006832:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006836:	1c41      	adds	r1, r0, #1
 8006838:	4623      	mov	r3, r4
 800683a:	42ab      	cmp	r3, r5
 800683c:	d30a      	bcc.n	8006854 <__exponent+0x5e>
 800683e:	f10d 0309 	add.w	r3, sp, #9
 8006842:	1a9b      	subs	r3, r3, r2
 8006844:	42ac      	cmp	r4, r5
 8006846:	bf88      	it	hi
 8006848:	2300      	movhi	r3, #0
 800684a:	3302      	adds	r3, #2
 800684c:	4403      	add	r3, r0
 800684e:	1a18      	subs	r0, r3, r0
 8006850:	b003      	add	sp, #12
 8006852:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006854:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006858:	f801 6f01 	strb.w	r6, [r1, #1]!
 800685c:	e7ed      	b.n	800683a <__exponent+0x44>
 800685e:	2330      	movs	r3, #48	@ 0x30
 8006860:	3130      	adds	r1, #48	@ 0x30
 8006862:	7083      	strb	r3, [r0, #2]
 8006864:	70c1      	strb	r1, [r0, #3]
 8006866:	1d03      	adds	r3, r0, #4
 8006868:	e7f1      	b.n	800684e <__exponent+0x58>
	...

0800686c <_printf_float>:
 800686c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006870:	b08d      	sub	sp, #52	@ 0x34
 8006872:	460c      	mov	r4, r1
 8006874:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006878:	4616      	mov	r6, r2
 800687a:	461f      	mov	r7, r3
 800687c:	4605      	mov	r5, r0
 800687e:	f000 fccd 	bl	800721c <_localeconv_r>
 8006882:	6803      	ldr	r3, [r0, #0]
 8006884:	9304      	str	r3, [sp, #16]
 8006886:	4618      	mov	r0, r3
 8006888:	f7f9 fe3a 	bl	8000500 <strlen>
 800688c:	2300      	movs	r3, #0
 800688e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006890:	f8d8 3000 	ldr.w	r3, [r8]
 8006894:	9005      	str	r0, [sp, #20]
 8006896:	3307      	adds	r3, #7
 8006898:	f023 0307 	bic.w	r3, r3, #7
 800689c:	f103 0208 	add.w	r2, r3, #8
 80068a0:	f894 a018 	ldrb.w	sl, [r4, #24]
 80068a4:	f8d4 b000 	ldr.w	fp, [r4]
 80068a8:	f8c8 2000 	str.w	r2, [r8]
 80068ac:	e9d3 8900 	ldrd	r8, r9, [r3]
 80068b0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80068b4:	9307      	str	r3, [sp, #28]
 80068b6:	f8cd 8018 	str.w	r8, [sp, #24]
 80068ba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80068be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068c2:	4b9c      	ldr	r3, [pc, #624]	@ (8006b34 <_printf_float+0x2c8>)
 80068c4:	f04f 32ff 	mov.w	r2, #4294967295
 80068c8:	f7fa fa78 	bl	8000dbc <__aeabi_dcmpun>
 80068cc:	bb70      	cbnz	r0, 800692c <_printf_float+0xc0>
 80068ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80068d2:	4b98      	ldr	r3, [pc, #608]	@ (8006b34 <_printf_float+0x2c8>)
 80068d4:	f04f 32ff 	mov.w	r2, #4294967295
 80068d8:	f7fa fa52 	bl	8000d80 <__aeabi_dcmple>
 80068dc:	bb30      	cbnz	r0, 800692c <_printf_float+0xc0>
 80068de:	2200      	movs	r2, #0
 80068e0:	2300      	movs	r3, #0
 80068e2:	4640      	mov	r0, r8
 80068e4:	4649      	mov	r1, r9
 80068e6:	f7fa fa41 	bl	8000d6c <__aeabi_dcmplt>
 80068ea:	b110      	cbz	r0, 80068f2 <_printf_float+0x86>
 80068ec:	232d      	movs	r3, #45	@ 0x2d
 80068ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068f2:	4a91      	ldr	r2, [pc, #580]	@ (8006b38 <_printf_float+0x2cc>)
 80068f4:	4b91      	ldr	r3, [pc, #580]	@ (8006b3c <_printf_float+0x2d0>)
 80068f6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80068fa:	bf94      	ite	ls
 80068fc:	4690      	movls	r8, r2
 80068fe:	4698      	movhi	r8, r3
 8006900:	2303      	movs	r3, #3
 8006902:	6123      	str	r3, [r4, #16]
 8006904:	f02b 0304 	bic.w	r3, fp, #4
 8006908:	6023      	str	r3, [r4, #0]
 800690a:	f04f 0900 	mov.w	r9, #0
 800690e:	9700      	str	r7, [sp, #0]
 8006910:	4633      	mov	r3, r6
 8006912:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006914:	4621      	mov	r1, r4
 8006916:	4628      	mov	r0, r5
 8006918:	f000 f9d2 	bl	8006cc0 <_printf_common>
 800691c:	3001      	adds	r0, #1
 800691e:	f040 808d 	bne.w	8006a3c <_printf_float+0x1d0>
 8006922:	f04f 30ff 	mov.w	r0, #4294967295
 8006926:	b00d      	add	sp, #52	@ 0x34
 8006928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800692c:	4642      	mov	r2, r8
 800692e:	464b      	mov	r3, r9
 8006930:	4640      	mov	r0, r8
 8006932:	4649      	mov	r1, r9
 8006934:	f7fa fa42 	bl	8000dbc <__aeabi_dcmpun>
 8006938:	b140      	cbz	r0, 800694c <_printf_float+0xe0>
 800693a:	464b      	mov	r3, r9
 800693c:	2b00      	cmp	r3, #0
 800693e:	bfbc      	itt	lt
 8006940:	232d      	movlt	r3, #45	@ 0x2d
 8006942:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006946:	4a7e      	ldr	r2, [pc, #504]	@ (8006b40 <_printf_float+0x2d4>)
 8006948:	4b7e      	ldr	r3, [pc, #504]	@ (8006b44 <_printf_float+0x2d8>)
 800694a:	e7d4      	b.n	80068f6 <_printf_float+0x8a>
 800694c:	6863      	ldr	r3, [r4, #4]
 800694e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006952:	9206      	str	r2, [sp, #24]
 8006954:	1c5a      	adds	r2, r3, #1
 8006956:	d13b      	bne.n	80069d0 <_printf_float+0x164>
 8006958:	2306      	movs	r3, #6
 800695a:	6063      	str	r3, [r4, #4]
 800695c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006960:	2300      	movs	r3, #0
 8006962:	6022      	str	r2, [r4, #0]
 8006964:	9303      	str	r3, [sp, #12]
 8006966:	ab0a      	add	r3, sp, #40	@ 0x28
 8006968:	e9cd a301 	strd	sl, r3, [sp, #4]
 800696c:	ab09      	add	r3, sp, #36	@ 0x24
 800696e:	9300      	str	r3, [sp, #0]
 8006970:	6861      	ldr	r1, [r4, #4]
 8006972:	ec49 8b10 	vmov	d0, r8, r9
 8006976:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800697a:	4628      	mov	r0, r5
 800697c:	f7ff fed6 	bl	800672c <__cvt>
 8006980:	9b06      	ldr	r3, [sp, #24]
 8006982:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006984:	2b47      	cmp	r3, #71	@ 0x47
 8006986:	4680      	mov	r8, r0
 8006988:	d129      	bne.n	80069de <_printf_float+0x172>
 800698a:	1cc8      	adds	r0, r1, #3
 800698c:	db02      	blt.n	8006994 <_printf_float+0x128>
 800698e:	6863      	ldr	r3, [r4, #4]
 8006990:	4299      	cmp	r1, r3
 8006992:	dd41      	ble.n	8006a18 <_printf_float+0x1ac>
 8006994:	f1aa 0a02 	sub.w	sl, sl, #2
 8006998:	fa5f fa8a 	uxtb.w	sl, sl
 800699c:	3901      	subs	r1, #1
 800699e:	4652      	mov	r2, sl
 80069a0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80069a4:	9109      	str	r1, [sp, #36]	@ 0x24
 80069a6:	f7ff ff26 	bl	80067f6 <__exponent>
 80069aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069ac:	1813      	adds	r3, r2, r0
 80069ae:	2a01      	cmp	r2, #1
 80069b0:	4681      	mov	r9, r0
 80069b2:	6123      	str	r3, [r4, #16]
 80069b4:	dc02      	bgt.n	80069bc <_printf_float+0x150>
 80069b6:	6822      	ldr	r2, [r4, #0]
 80069b8:	07d2      	lsls	r2, r2, #31
 80069ba:	d501      	bpl.n	80069c0 <_printf_float+0x154>
 80069bc:	3301      	adds	r3, #1
 80069be:	6123      	str	r3, [r4, #16]
 80069c0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d0a2      	beq.n	800690e <_printf_float+0xa2>
 80069c8:	232d      	movs	r3, #45	@ 0x2d
 80069ca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80069ce:	e79e      	b.n	800690e <_printf_float+0xa2>
 80069d0:	9a06      	ldr	r2, [sp, #24]
 80069d2:	2a47      	cmp	r2, #71	@ 0x47
 80069d4:	d1c2      	bne.n	800695c <_printf_float+0xf0>
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d1c0      	bne.n	800695c <_printf_float+0xf0>
 80069da:	2301      	movs	r3, #1
 80069dc:	e7bd      	b.n	800695a <_printf_float+0xee>
 80069de:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80069e2:	d9db      	bls.n	800699c <_printf_float+0x130>
 80069e4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80069e8:	d118      	bne.n	8006a1c <_printf_float+0x1b0>
 80069ea:	2900      	cmp	r1, #0
 80069ec:	6863      	ldr	r3, [r4, #4]
 80069ee:	dd0b      	ble.n	8006a08 <_printf_float+0x19c>
 80069f0:	6121      	str	r1, [r4, #16]
 80069f2:	b913      	cbnz	r3, 80069fa <_printf_float+0x18e>
 80069f4:	6822      	ldr	r2, [r4, #0]
 80069f6:	07d0      	lsls	r0, r2, #31
 80069f8:	d502      	bpl.n	8006a00 <_printf_float+0x194>
 80069fa:	3301      	adds	r3, #1
 80069fc:	440b      	add	r3, r1
 80069fe:	6123      	str	r3, [r4, #16]
 8006a00:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006a02:	f04f 0900 	mov.w	r9, #0
 8006a06:	e7db      	b.n	80069c0 <_printf_float+0x154>
 8006a08:	b913      	cbnz	r3, 8006a10 <_printf_float+0x1a4>
 8006a0a:	6822      	ldr	r2, [r4, #0]
 8006a0c:	07d2      	lsls	r2, r2, #31
 8006a0e:	d501      	bpl.n	8006a14 <_printf_float+0x1a8>
 8006a10:	3302      	adds	r3, #2
 8006a12:	e7f4      	b.n	80069fe <_printf_float+0x192>
 8006a14:	2301      	movs	r3, #1
 8006a16:	e7f2      	b.n	80069fe <_printf_float+0x192>
 8006a18:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006a1c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a1e:	4299      	cmp	r1, r3
 8006a20:	db05      	blt.n	8006a2e <_printf_float+0x1c2>
 8006a22:	6823      	ldr	r3, [r4, #0]
 8006a24:	6121      	str	r1, [r4, #16]
 8006a26:	07d8      	lsls	r0, r3, #31
 8006a28:	d5ea      	bpl.n	8006a00 <_printf_float+0x194>
 8006a2a:	1c4b      	adds	r3, r1, #1
 8006a2c:	e7e7      	b.n	80069fe <_printf_float+0x192>
 8006a2e:	2900      	cmp	r1, #0
 8006a30:	bfd4      	ite	le
 8006a32:	f1c1 0202 	rsble	r2, r1, #2
 8006a36:	2201      	movgt	r2, #1
 8006a38:	4413      	add	r3, r2
 8006a3a:	e7e0      	b.n	80069fe <_printf_float+0x192>
 8006a3c:	6823      	ldr	r3, [r4, #0]
 8006a3e:	055a      	lsls	r2, r3, #21
 8006a40:	d407      	bmi.n	8006a52 <_printf_float+0x1e6>
 8006a42:	6923      	ldr	r3, [r4, #16]
 8006a44:	4642      	mov	r2, r8
 8006a46:	4631      	mov	r1, r6
 8006a48:	4628      	mov	r0, r5
 8006a4a:	47b8      	blx	r7
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d12b      	bne.n	8006aa8 <_printf_float+0x23c>
 8006a50:	e767      	b.n	8006922 <_printf_float+0xb6>
 8006a52:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006a56:	f240 80dd 	bls.w	8006c14 <_printf_float+0x3a8>
 8006a5a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a5e:	2200      	movs	r2, #0
 8006a60:	2300      	movs	r3, #0
 8006a62:	f7fa f979 	bl	8000d58 <__aeabi_dcmpeq>
 8006a66:	2800      	cmp	r0, #0
 8006a68:	d033      	beq.n	8006ad2 <_printf_float+0x266>
 8006a6a:	4a37      	ldr	r2, [pc, #220]	@ (8006b48 <_printf_float+0x2dc>)
 8006a6c:	2301      	movs	r3, #1
 8006a6e:	4631      	mov	r1, r6
 8006a70:	4628      	mov	r0, r5
 8006a72:	47b8      	blx	r7
 8006a74:	3001      	adds	r0, #1
 8006a76:	f43f af54 	beq.w	8006922 <_printf_float+0xb6>
 8006a7a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006a7e:	4543      	cmp	r3, r8
 8006a80:	db02      	blt.n	8006a88 <_printf_float+0x21c>
 8006a82:	6823      	ldr	r3, [r4, #0]
 8006a84:	07d8      	lsls	r0, r3, #31
 8006a86:	d50f      	bpl.n	8006aa8 <_printf_float+0x23c>
 8006a88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a8c:	4631      	mov	r1, r6
 8006a8e:	4628      	mov	r0, r5
 8006a90:	47b8      	blx	r7
 8006a92:	3001      	adds	r0, #1
 8006a94:	f43f af45 	beq.w	8006922 <_printf_float+0xb6>
 8006a98:	f04f 0900 	mov.w	r9, #0
 8006a9c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006aa0:	f104 0a1a 	add.w	sl, r4, #26
 8006aa4:	45c8      	cmp	r8, r9
 8006aa6:	dc09      	bgt.n	8006abc <_printf_float+0x250>
 8006aa8:	6823      	ldr	r3, [r4, #0]
 8006aaa:	079b      	lsls	r3, r3, #30
 8006aac:	f100 8103 	bmi.w	8006cb6 <_printf_float+0x44a>
 8006ab0:	68e0      	ldr	r0, [r4, #12]
 8006ab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ab4:	4298      	cmp	r0, r3
 8006ab6:	bfb8      	it	lt
 8006ab8:	4618      	movlt	r0, r3
 8006aba:	e734      	b.n	8006926 <_printf_float+0xba>
 8006abc:	2301      	movs	r3, #1
 8006abe:	4652      	mov	r2, sl
 8006ac0:	4631      	mov	r1, r6
 8006ac2:	4628      	mov	r0, r5
 8006ac4:	47b8      	blx	r7
 8006ac6:	3001      	adds	r0, #1
 8006ac8:	f43f af2b 	beq.w	8006922 <_printf_float+0xb6>
 8006acc:	f109 0901 	add.w	r9, r9, #1
 8006ad0:	e7e8      	b.n	8006aa4 <_printf_float+0x238>
 8006ad2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	dc39      	bgt.n	8006b4c <_printf_float+0x2e0>
 8006ad8:	4a1b      	ldr	r2, [pc, #108]	@ (8006b48 <_printf_float+0x2dc>)
 8006ada:	2301      	movs	r3, #1
 8006adc:	4631      	mov	r1, r6
 8006ade:	4628      	mov	r0, r5
 8006ae0:	47b8      	blx	r7
 8006ae2:	3001      	adds	r0, #1
 8006ae4:	f43f af1d 	beq.w	8006922 <_printf_float+0xb6>
 8006ae8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006aec:	ea59 0303 	orrs.w	r3, r9, r3
 8006af0:	d102      	bne.n	8006af8 <_printf_float+0x28c>
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	07d9      	lsls	r1, r3, #31
 8006af6:	d5d7      	bpl.n	8006aa8 <_printf_float+0x23c>
 8006af8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006afc:	4631      	mov	r1, r6
 8006afe:	4628      	mov	r0, r5
 8006b00:	47b8      	blx	r7
 8006b02:	3001      	adds	r0, #1
 8006b04:	f43f af0d 	beq.w	8006922 <_printf_float+0xb6>
 8006b08:	f04f 0a00 	mov.w	sl, #0
 8006b0c:	f104 0b1a 	add.w	fp, r4, #26
 8006b10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b12:	425b      	negs	r3, r3
 8006b14:	4553      	cmp	r3, sl
 8006b16:	dc01      	bgt.n	8006b1c <_printf_float+0x2b0>
 8006b18:	464b      	mov	r3, r9
 8006b1a:	e793      	b.n	8006a44 <_printf_float+0x1d8>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	465a      	mov	r2, fp
 8006b20:	4631      	mov	r1, r6
 8006b22:	4628      	mov	r0, r5
 8006b24:	47b8      	blx	r7
 8006b26:	3001      	adds	r0, #1
 8006b28:	f43f aefb 	beq.w	8006922 <_printf_float+0xb6>
 8006b2c:	f10a 0a01 	add.w	sl, sl, #1
 8006b30:	e7ee      	b.n	8006b10 <_printf_float+0x2a4>
 8006b32:	bf00      	nop
 8006b34:	7fefffff 	.word	0x7fefffff
 8006b38:	08009100 	.word	0x08009100
 8006b3c:	08009104 	.word	0x08009104
 8006b40:	08009108 	.word	0x08009108
 8006b44:	0800910c 	.word	0x0800910c
 8006b48:	08009110 	.word	0x08009110
 8006b4c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b4e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006b52:	4553      	cmp	r3, sl
 8006b54:	bfa8      	it	ge
 8006b56:	4653      	movge	r3, sl
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	4699      	mov	r9, r3
 8006b5c:	dc36      	bgt.n	8006bcc <_printf_float+0x360>
 8006b5e:	f04f 0b00 	mov.w	fp, #0
 8006b62:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006b66:	f104 021a 	add.w	r2, r4, #26
 8006b6a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006b6c:	9306      	str	r3, [sp, #24]
 8006b6e:	eba3 0309 	sub.w	r3, r3, r9
 8006b72:	455b      	cmp	r3, fp
 8006b74:	dc31      	bgt.n	8006bda <_printf_float+0x36e>
 8006b76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b78:	459a      	cmp	sl, r3
 8006b7a:	dc3a      	bgt.n	8006bf2 <_printf_float+0x386>
 8006b7c:	6823      	ldr	r3, [r4, #0]
 8006b7e:	07da      	lsls	r2, r3, #31
 8006b80:	d437      	bmi.n	8006bf2 <_printf_float+0x386>
 8006b82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b84:	ebaa 0903 	sub.w	r9, sl, r3
 8006b88:	9b06      	ldr	r3, [sp, #24]
 8006b8a:	ebaa 0303 	sub.w	r3, sl, r3
 8006b8e:	4599      	cmp	r9, r3
 8006b90:	bfa8      	it	ge
 8006b92:	4699      	movge	r9, r3
 8006b94:	f1b9 0f00 	cmp.w	r9, #0
 8006b98:	dc33      	bgt.n	8006c02 <_printf_float+0x396>
 8006b9a:	f04f 0800 	mov.w	r8, #0
 8006b9e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006ba2:	f104 0b1a 	add.w	fp, r4, #26
 8006ba6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ba8:	ebaa 0303 	sub.w	r3, sl, r3
 8006bac:	eba3 0309 	sub.w	r3, r3, r9
 8006bb0:	4543      	cmp	r3, r8
 8006bb2:	f77f af79 	ble.w	8006aa8 <_printf_float+0x23c>
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	465a      	mov	r2, fp
 8006bba:	4631      	mov	r1, r6
 8006bbc:	4628      	mov	r0, r5
 8006bbe:	47b8      	blx	r7
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	f43f aeae 	beq.w	8006922 <_printf_float+0xb6>
 8006bc6:	f108 0801 	add.w	r8, r8, #1
 8006bca:	e7ec      	b.n	8006ba6 <_printf_float+0x33a>
 8006bcc:	4642      	mov	r2, r8
 8006bce:	4631      	mov	r1, r6
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	47b8      	blx	r7
 8006bd4:	3001      	adds	r0, #1
 8006bd6:	d1c2      	bne.n	8006b5e <_printf_float+0x2f2>
 8006bd8:	e6a3      	b.n	8006922 <_printf_float+0xb6>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	4631      	mov	r1, r6
 8006bde:	4628      	mov	r0, r5
 8006be0:	9206      	str	r2, [sp, #24]
 8006be2:	47b8      	blx	r7
 8006be4:	3001      	adds	r0, #1
 8006be6:	f43f ae9c 	beq.w	8006922 <_printf_float+0xb6>
 8006bea:	9a06      	ldr	r2, [sp, #24]
 8006bec:	f10b 0b01 	add.w	fp, fp, #1
 8006bf0:	e7bb      	b.n	8006b6a <_printf_float+0x2fe>
 8006bf2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006bf6:	4631      	mov	r1, r6
 8006bf8:	4628      	mov	r0, r5
 8006bfa:	47b8      	blx	r7
 8006bfc:	3001      	adds	r0, #1
 8006bfe:	d1c0      	bne.n	8006b82 <_printf_float+0x316>
 8006c00:	e68f      	b.n	8006922 <_printf_float+0xb6>
 8006c02:	9a06      	ldr	r2, [sp, #24]
 8006c04:	464b      	mov	r3, r9
 8006c06:	4442      	add	r2, r8
 8006c08:	4631      	mov	r1, r6
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	47b8      	blx	r7
 8006c0e:	3001      	adds	r0, #1
 8006c10:	d1c3      	bne.n	8006b9a <_printf_float+0x32e>
 8006c12:	e686      	b.n	8006922 <_printf_float+0xb6>
 8006c14:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006c18:	f1ba 0f01 	cmp.w	sl, #1
 8006c1c:	dc01      	bgt.n	8006c22 <_printf_float+0x3b6>
 8006c1e:	07db      	lsls	r3, r3, #31
 8006c20:	d536      	bpl.n	8006c90 <_printf_float+0x424>
 8006c22:	2301      	movs	r3, #1
 8006c24:	4642      	mov	r2, r8
 8006c26:	4631      	mov	r1, r6
 8006c28:	4628      	mov	r0, r5
 8006c2a:	47b8      	blx	r7
 8006c2c:	3001      	adds	r0, #1
 8006c2e:	f43f ae78 	beq.w	8006922 <_printf_float+0xb6>
 8006c32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006c36:	4631      	mov	r1, r6
 8006c38:	4628      	mov	r0, r5
 8006c3a:	47b8      	blx	r7
 8006c3c:	3001      	adds	r0, #1
 8006c3e:	f43f ae70 	beq.w	8006922 <_printf_float+0xb6>
 8006c42:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006c46:	2200      	movs	r2, #0
 8006c48:	2300      	movs	r3, #0
 8006c4a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006c4e:	f7fa f883 	bl	8000d58 <__aeabi_dcmpeq>
 8006c52:	b9c0      	cbnz	r0, 8006c86 <_printf_float+0x41a>
 8006c54:	4653      	mov	r3, sl
 8006c56:	f108 0201 	add.w	r2, r8, #1
 8006c5a:	4631      	mov	r1, r6
 8006c5c:	4628      	mov	r0, r5
 8006c5e:	47b8      	blx	r7
 8006c60:	3001      	adds	r0, #1
 8006c62:	d10c      	bne.n	8006c7e <_printf_float+0x412>
 8006c64:	e65d      	b.n	8006922 <_printf_float+0xb6>
 8006c66:	2301      	movs	r3, #1
 8006c68:	465a      	mov	r2, fp
 8006c6a:	4631      	mov	r1, r6
 8006c6c:	4628      	mov	r0, r5
 8006c6e:	47b8      	blx	r7
 8006c70:	3001      	adds	r0, #1
 8006c72:	f43f ae56 	beq.w	8006922 <_printf_float+0xb6>
 8006c76:	f108 0801 	add.w	r8, r8, #1
 8006c7a:	45d0      	cmp	r8, sl
 8006c7c:	dbf3      	blt.n	8006c66 <_printf_float+0x3fa>
 8006c7e:	464b      	mov	r3, r9
 8006c80:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006c84:	e6df      	b.n	8006a46 <_printf_float+0x1da>
 8006c86:	f04f 0800 	mov.w	r8, #0
 8006c8a:	f104 0b1a 	add.w	fp, r4, #26
 8006c8e:	e7f4      	b.n	8006c7a <_printf_float+0x40e>
 8006c90:	2301      	movs	r3, #1
 8006c92:	4642      	mov	r2, r8
 8006c94:	e7e1      	b.n	8006c5a <_printf_float+0x3ee>
 8006c96:	2301      	movs	r3, #1
 8006c98:	464a      	mov	r2, r9
 8006c9a:	4631      	mov	r1, r6
 8006c9c:	4628      	mov	r0, r5
 8006c9e:	47b8      	blx	r7
 8006ca0:	3001      	adds	r0, #1
 8006ca2:	f43f ae3e 	beq.w	8006922 <_printf_float+0xb6>
 8006ca6:	f108 0801 	add.w	r8, r8, #1
 8006caa:	68e3      	ldr	r3, [r4, #12]
 8006cac:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006cae:	1a5b      	subs	r3, r3, r1
 8006cb0:	4543      	cmp	r3, r8
 8006cb2:	dcf0      	bgt.n	8006c96 <_printf_float+0x42a>
 8006cb4:	e6fc      	b.n	8006ab0 <_printf_float+0x244>
 8006cb6:	f04f 0800 	mov.w	r8, #0
 8006cba:	f104 0919 	add.w	r9, r4, #25
 8006cbe:	e7f4      	b.n	8006caa <_printf_float+0x43e>

08006cc0 <_printf_common>:
 8006cc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006cc4:	4616      	mov	r6, r2
 8006cc6:	4698      	mov	r8, r3
 8006cc8:	688a      	ldr	r2, [r1, #8]
 8006cca:	690b      	ldr	r3, [r1, #16]
 8006ccc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006cd0:	4293      	cmp	r3, r2
 8006cd2:	bfb8      	it	lt
 8006cd4:	4613      	movlt	r3, r2
 8006cd6:	6033      	str	r3, [r6, #0]
 8006cd8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006cdc:	4607      	mov	r7, r0
 8006cde:	460c      	mov	r4, r1
 8006ce0:	b10a      	cbz	r2, 8006ce6 <_printf_common+0x26>
 8006ce2:	3301      	adds	r3, #1
 8006ce4:	6033      	str	r3, [r6, #0]
 8006ce6:	6823      	ldr	r3, [r4, #0]
 8006ce8:	0699      	lsls	r1, r3, #26
 8006cea:	bf42      	ittt	mi
 8006cec:	6833      	ldrmi	r3, [r6, #0]
 8006cee:	3302      	addmi	r3, #2
 8006cf0:	6033      	strmi	r3, [r6, #0]
 8006cf2:	6825      	ldr	r5, [r4, #0]
 8006cf4:	f015 0506 	ands.w	r5, r5, #6
 8006cf8:	d106      	bne.n	8006d08 <_printf_common+0x48>
 8006cfa:	f104 0a19 	add.w	sl, r4, #25
 8006cfe:	68e3      	ldr	r3, [r4, #12]
 8006d00:	6832      	ldr	r2, [r6, #0]
 8006d02:	1a9b      	subs	r3, r3, r2
 8006d04:	42ab      	cmp	r3, r5
 8006d06:	dc26      	bgt.n	8006d56 <_printf_common+0x96>
 8006d08:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006d0c:	6822      	ldr	r2, [r4, #0]
 8006d0e:	3b00      	subs	r3, #0
 8006d10:	bf18      	it	ne
 8006d12:	2301      	movne	r3, #1
 8006d14:	0692      	lsls	r2, r2, #26
 8006d16:	d42b      	bmi.n	8006d70 <_printf_common+0xb0>
 8006d18:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006d1c:	4641      	mov	r1, r8
 8006d1e:	4638      	mov	r0, r7
 8006d20:	47c8      	blx	r9
 8006d22:	3001      	adds	r0, #1
 8006d24:	d01e      	beq.n	8006d64 <_printf_common+0xa4>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	6922      	ldr	r2, [r4, #16]
 8006d2a:	f003 0306 	and.w	r3, r3, #6
 8006d2e:	2b04      	cmp	r3, #4
 8006d30:	bf02      	ittt	eq
 8006d32:	68e5      	ldreq	r5, [r4, #12]
 8006d34:	6833      	ldreq	r3, [r6, #0]
 8006d36:	1aed      	subeq	r5, r5, r3
 8006d38:	68a3      	ldr	r3, [r4, #8]
 8006d3a:	bf0c      	ite	eq
 8006d3c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006d40:	2500      	movne	r5, #0
 8006d42:	4293      	cmp	r3, r2
 8006d44:	bfc4      	itt	gt
 8006d46:	1a9b      	subgt	r3, r3, r2
 8006d48:	18ed      	addgt	r5, r5, r3
 8006d4a:	2600      	movs	r6, #0
 8006d4c:	341a      	adds	r4, #26
 8006d4e:	42b5      	cmp	r5, r6
 8006d50:	d11a      	bne.n	8006d88 <_printf_common+0xc8>
 8006d52:	2000      	movs	r0, #0
 8006d54:	e008      	b.n	8006d68 <_printf_common+0xa8>
 8006d56:	2301      	movs	r3, #1
 8006d58:	4652      	mov	r2, sl
 8006d5a:	4641      	mov	r1, r8
 8006d5c:	4638      	mov	r0, r7
 8006d5e:	47c8      	blx	r9
 8006d60:	3001      	adds	r0, #1
 8006d62:	d103      	bne.n	8006d6c <_printf_common+0xac>
 8006d64:	f04f 30ff 	mov.w	r0, #4294967295
 8006d68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d6c:	3501      	adds	r5, #1
 8006d6e:	e7c6      	b.n	8006cfe <_printf_common+0x3e>
 8006d70:	18e1      	adds	r1, r4, r3
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	2030      	movs	r0, #48	@ 0x30
 8006d76:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006d7a:	4422      	add	r2, r4
 8006d7c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006d80:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006d84:	3302      	adds	r3, #2
 8006d86:	e7c7      	b.n	8006d18 <_printf_common+0x58>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	4622      	mov	r2, r4
 8006d8c:	4641      	mov	r1, r8
 8006d8e:	4638      	mov	r0, r7
 8006d90:	47c8      	blx	r9
 8006d92:	3001      	adds	r0, #1
 8006d94:	d0e6      	beq.n	8006d64 <_printf_common+0xa4>
 8006d96:	3601      	adds	r6, #1
 8006d98:	e7d9      	b.n	8006d4e <_printf_common+0x8e>
	...

08006d9c <_printf_i>:
 8006d9c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006da0:	7e0f      	ldrb	r7, [r1, #24]
 8006da2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006da4:	2f78      	cmp	r7, #120	@ 0x78
 8006da6:	4691      	mov	r9, r2
 8006da8:	4680      	mov	r8, r0
 8006daa:	460c      	mov	r4, r1
 8006dac:	469a      	mov	sl, r3
 8006dae:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006db2:	d807      	bhi.n	8006dc4 <_printf_i+0x28>
 8006db4:	2f62      	cmp	r7, #98	@ 0x62
 8006db6:	d80a      	bhi.n	8006dce <_printf_i+0x32>
 8006db8:	2f00      	cmp	r7, #0
 8006dba:	f000 80d2 	beq.w	8006f62 <_printf_i+0x1c6>
 8006dbe:	2f58      	cmp	r7, #88	@ 0x58
 8006dc0:	f000 80b9 	beq.w	8006f36 <_printf_i+0x19a>
 8006dc4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006dc8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006dcc:	e03a      	b.n	8006e44 <_printf_i+0xa8>
 8006dce:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006dd2:	2b15      	cmp	r3, #21
 8006dd4:	d8f6      	bhi.n	8006dc4 <_printf_i+0x28>
 8006dd6:	a101      	add	r1, pc, #4	@ (adr r1, 8006ddc <_printf_i+0x40>)
 8006dd8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006ddc:	08006e35 	.word	0x08006e35
 8006de0:	08006e49 	.word	0x08006e49
 8006de4:	08006dc5 	.word	0x08006dc5
 8006de8:	08006dc5 	.word	0x08006dc5
 8006dec:	08006dc5 	.word	0x08006dc5
 8006df0:	08006dc5 	.word	0x08006dc5
 8006df4:	08006e49 	.word	0x08006e49
 8006df8:	08006dc5 	.word	0x08006dc5
 8006dfc:	08006dc5 	.word	0x08006dc5
 8006e00:	08006dc5 	.word	0x08006dc5
 8006e04:	08006dc5 	.word	0x08006dc5
 8006e08:	08006f49 	.word	0x08006f49
 8006e0c:	08006e73 	.word	0x08006e73
 8006e10:	08006f03 	.word	0x08006f03
 8006e14:	08006dc5 	.word	0x08006dc5
 8006e18:	08006dc5 	.word	0x08006dc5
 8006e1c:	08006f6b 	.word	0x08006f6b
 8006e20:	08006dc5 	.word	0x08006dc5
 8006e24:	08006e73 	.word	0x08006e73
 8006e28:	08006dc5 	.word	0x08006dc5
 8006e2c:	08006dc5 	.word	0x08006dc5
 8006e30:	08006f0b 	.word	0x08006f0b
 8006e34:	6833      	ldr	r3, [r6, #0]
 8006e36:	1d1a      	adds	r2, r3, #4
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6032      	str	r2, [r6, #0]
 8006e3c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006e40:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006e44:	2301      	movs	r3, #1
 8006e46:	e09d      	b.n	8006f84 <_printf_i+0x1e8>
 8006e48:	6833      	ldr	r3, [r6, #0]
 8006e4a:	6820      	ldr	r0, [r4, #0]
 8006e4c:	1d19      	adds	r1, r3, #4
 8006e4e:	6031      	str	r1, [r6, #0]
 8006e50:	0606      	lsls	r6, r0, #24
 8006e52:	d501      	bpl.n	8006e58 <_printf_i+0xbc>
 8006e54:	681d      	ldr	r5, [r3, #0]
 8006e56:	e003      	b.n	8006e60 <_printf_i+0xc4>
 8006e58:	0645      	lsls	r5, r0, #25
 8006e5a:	d5fb      	bpl.n	8006e54 <_printf_i+0xb8>
 8006e5c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006e60:	2d00      	cmp	r5, #0
 8006e62:	da03      	bge.n	8006e6c <_printf_i+0xd0>
 8006e64:	232d      	movs	r3, #45	@ 0x2d
 8006e66:	426d      	negs	r5, r5
 8006e68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e6c:	4859      	ldr	r0, [pc, #356]	@ (8006fd4 <_printf_i+0x238>)
 8006e6e:	230a      	movs	r3, #10
 8006e70:	e011      	b.n	8006e96 <_printf_i+0xfa>
 8006e72:	6821      	ldr	r1, [r4, #0]
 8006e74:	6833      	ldr	r3, [r6, #0]
 8006e76:	0608      	lsls	r0, r1, #24
 8006e78:	f853 5b04 	ldr.w	r5, [r3], #4
 8006e7c:	d402      	bmi.n	8006e84 <_printf_i+0xe8>
 8006e7e:	0649      	lsls	r1, r1, #25
 8006e80:	bf48      	it	mi
 8006e82:	b2ad      	uxthmi	r5, r5
 8006e84:	2f6f      	cmp	r7, #111	@ 0x6f
 8006e86:	4853      	ldr	r0, [pc, #332]	@ (8006fd4 <_printf_i+0x238>)
 8006e88:	6033      	str	r3, [r6, #0]
 8006e8a:	bf14      	ite	ne
 8006e8c:	230a      	movne	r3, #10
 8006e8e:	2308      	moveq	r3, #8
 8006e90:	2100      	movs	r1, #0
 8006e92:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006e96:	6866      	ldr	r6, [r4, #4]
 8006e98:	60a6      	str	r6, [r4, #8]
 8006e9a:	2e00      	cmp	r6, #0
 8006e9c:	bfa2      	ittt	ge
 8006e9e:	6821      	ldrge	r1, [r4, #0]
 8006ea0:	f021 0104 	bicge.w	r1, r1, #4
 8006ea4:	6021      	strge	r1, [r4, #0]
 8006ea6:	b90d      	cbnz	r5, 8006eac <_printf_i+0x110>
 8006ea8:	2e00      	cmp	r6, #0
 8006eaa:	d04b      	beq.n	8006f44 <_printf_i+0x1a8>
 8006eac:	4616      	mov	r6, r2
 8006eae:	fbb5 f1f3 	udiv	r1, r5, r3
 8006eb2:	fb03 5711 	mls	r7, r3, r1, r5
 8006eb6:	5dc7      	ldrb	r7, [r0, r7]
 8006eb8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006ebc:	462f      	mov	r7, r5
 8006ebe:	42bb      	cmp	r3, r7
 8006ec0:	460d      	mov	r5, r1
 8006ec2:	d9f4      	bls.n	8006eae <_printf_i+0x112>
 8006ec4:	2b08      	cmp	r3, #8
 8006ec6:	d10b      	bne.n	8006ee0 <_printf_i+0x144>
 8006ec8:	6823      	ldr	r3, [r4, #0]
 8006eca:	07df      	lsls	r7, r3, #31
 8006ecc:	d508      	bpl.n	8006ee0 <_printf_i+0x144>
 8006ece:	6923      	ldr	r3, [r4, #16]
 8006ed0:	6861      	ldr	r1, [r4, #4]
 8006ed2:	4299      	cmp	r1, r3
 8006ed4:	bfde      	ittt	le
 8006ed6:	2330      	movle	r3, #48	@ 0x30
 8006ed8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006edc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006ee0:	1b92      	subs	r2, r2, r6
 8006ee2:	6122      	str	r2, [r4, #16]
 8006ee4:	f8cd a000 	str.w	sl, [sp]
 8006ee8:	464b      	mov	r3, r9
 8006eea:	aa03      	add	r2, sp, #12
 8006eec:	4621      	mov	r1, r4
 8006eee:	4640      	mov	r0, r8
 8006ef0:	f7ff fee6 	bl	8006cc0 <_printf_common>
 8006ef4:	3001      	adds	r0, #1
 8006ef6:	d14a      	bne.n	8006f8e <_printf_i+0x1f2>
 8006ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8006efc:	b004      	add	sp, #16
 8006efe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f02:	6823      	ldr	r3, [r4, #0]
 8006f04:	f043 0320 	orr.w	r3, r3, #32
 8006f08:	6023      	str	r3, [r4, #0]
 8006f0a:	4833      	ldr	r0, [pc, #204]	@ (8006fd8 <_printf_i+0x23c>)
 8006f0c:	2778      	movs	r7, #120	@ 0x78
 8006f0e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006f12:	6823      	ldr	r3, [r4, #0]
 8006f14:	6831      	ldr	r1, [r6, #0]
 8006f16:	061f      	lsls	r7, r3, #24
 8006f18:	f851 5b04 	ldr.w	r5, [r1], #4
 8006f1c:	d402      	bmi.n	8006f24 <_printf_i+0x188>
 8006f1e:	065f      	lsls	r7, r3, #25
 8006f20:	bf48      	it	mi
 8006f22:	b2ad      	uxthmi	r5, r5
 8006f24:	6031      	str	r1, [r6, #0]
 8006f26:	07d9      	lsls	r1, r3, #31
 8006f28:	bf44      	itt	mi
 8006f2a:	f043 0320 	orrmi.w	r3, r3, #32
 8006f2e:	6023      	strmi	r3, [r4, #0]
 8006f30:	b11d      	cbz	r5, 8006f3a <_printf_i+0x19e>
 8006f32:	2310      	movs	r3, #16
 8006f34:	e7ac      	b.n	8006e90 <_printf_i+0xf4>
 8006f36:	4827      	ldr	r0, [pc, #156]	@ (8006fd4 <_printf_i+0x238>)
 8006f38:	e7e9      	b.n	8006f0e <_printf_i+0x172>
 8006f3a:	6823      	ldr	r3, [r4, #0]
 8006f3c:	f023 0320 	bic.w	r3, r3, #32
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	e7f6      	b.n	8006f32 <_printf_i+0x196>
 8006f44:	4616      	mov	r6, r2
 8006f46:	e7bd      	b.n	8006ec4 <_printf_i+0x128>
 8006f48:	6833      	ldr	r3, [r6, #0]
 8006f4a:	6825      	ldr	r5, [r4, #0]
 8006f4c:	6961      	ldr	r1, [r4, #20]
 8006f4e:	1d18      	adds	r0, r3, #4
 8006f50:	6030      	str	r0, [r6, #0]
 8006f52:	062e      	lsls	r6, r5, #24
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	d501      	bpl.n	8006f5c <_printf_i+0x1c0>
 8006f58:	6019      	str	r1, [r3, #0]
 8006f5a:	e002      	b.n	8006f62 <_printf_i+0x1c6>
 8006f5c:	0668      	lsls	r0, r5, #25
 8006f5e:	d5fb      	bpl.n	8006f58 <_printf_i+0x1bc>
 8006f60:	8019      	strh	r1, [r3, #0]
 8006f62:	2300      	movs	r3, #0
 8006f64:	6123      	str	r3, [r4, #16]
 8006f66:	4616      	mov	r6, r2
 8006f68:	e7bc      	b.n	8006ee4 <_printf_i+0x148>
 8006f6a:	6833      	ldr	r3, [r6, #0]
 8006f6c:	1d1a      	adds	r2, r3, #4
 8006f6e:	6032      	str	r2, [r6, #0]
 8006f70:	681e      	ldr	r6, [r3, #0]
 8006f72:	6862      	ldr	r2, [r4, #4]
 8006f74:	2100      	movs	r1, #0
 8006f76:	4630      	mov	r0, r6
 8006f78:	f7f9 fa72 	bl	8000460 <memchr>
 8006f7c:	b108      	cbz	r0, 8006f82 <_printf_i+0x1e6>
 8006f7e:	1b80      	subs	r0, r0, r6
 8006f80:	6060      	str	r0, [r4, #4]
 8006f82:	6863      	ldr	r3, [r4, #4]
 8006f84:	6123      	str	r3, [r4, #16]
 8006f86:	2300      	movs	r3, #0
 8006f88:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006f8c:	e7aa      	b.n	8006ee4 <_printf_i+0x148>
 8006f8e:	6923      	ldr	r3, [r4, #16]
 8006f90:	4632      	mov	r2, r6
 8006f92:	4649      	mov	r1, r9
 8006f94:	4640      	mov	r0, r8
 8006f96:	47d0      	blx	sl
 8006f98:	3001      	adds	r0, #1
 8006f9a:	d0ad      	beq.n	8006ef8 <_printf_i+0x15c>
 8006f9c:	6823      	ldr	r3, [r4, #0]
 8006f9e:	079b      	lsls	r3, r3, #30
 8006fa0:	d413      	bmi.n	8006fca <_printf_i+0x22e>
 8006fa2:	68e0      	ldr	r0, [r4, #12]
 8006fa4:	9b03      	ldr	r3, [sp, #12]
 8006fa6:	4298      	cmp	r0, r3
 8006fa8:	bfb8      	it	lt
 8006faa:	4618      	movlt	r0, r3
 8006fac:	e7a6      	b.n	8006efc <_printf_i+0x160>
 8006fae:	2301      	movs	r3, #1
 8006fb0:	4632      	mov	r2, r6
 8006fb2:	4649      	mov	r1, r9
 8006fb4:	4640      	mov	r0, r8
 8006fb6:	47d0      	blx	sl
 8006fb8:	3001      	adds	r0, #1
 8006fba:	d09d      	beq.n	8006ef8 <_printf_i+0x15c>
 8006fbc:	3501      	adds	r5, #1
 8006fbe:	68e3      	ldr	r3, [r4, #12]
 8006fc0:	9903      	ldr	r1, [sp, #12]
 8006fc2:	1a5b      	subs	r3, r3, r1
 8006fc4:	42ab      	cmp	r3, r5
 8006fc6:	dcf2      	bgt.n	8006fae <_printf_i+0x212>
 8006fc8:	e7eb      	b.n	8006fa2 <_printf_i+0x206>
 8006fca:	2500      	movs	r5, #0
 8006fcc:	f104 0619 	add.w	r6, r4, #25
 8006fd0:	e7f5      	b.n	8006fbe <_printf_i+0x222>
 8006fd2:	bf00      	nop
 8006fd4:	08009112 	.word	0x08009112
 8006fd8:	08009123 	.word	0x08009123

08006fdc <std>:
 8006fdc:	2300      	movs	r3, #0
 8006fde:	b510      	push	{r4, lr}
 8006fe0:	4604      	mov	r4, r0
 8006fe2:	e9c0 3300 	strd	r3, r3, [r0]
 8006fe6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006fea:	6083      	str	r3, [r0, #8]
 8006fec:	8181      	strh	r1, [r0, #12]
 8006fee:	6643      	str	r3, [r0, #100]	@ 0x64
 8006ff0:	81c2      	strh	r2, [r0, #14]
 8006ff2:	6183      	str	r3, [r0, #24]
 8006ff4:	4619      	mov	r1, r3
 8006ff6:	2208      	movs	r2, #8
 8006ff8:	305c      	adds	r0, #92	@ 0x5c
 8006ffa:	f000 f8f4 	bl	80071e6 <memset>
 8006ffe:	4b0d      	ldr	r3, [pc, #52]	@ (8007034 <std+0x58>)
 8007000:	6263      	str	r3, [r4, #36]	@ 0x24
 8007002:	4b0d      	ldr	r3, [pc, #52]	@ (8007038 <std+0x5c>)
 8007004:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007006:	4b0d      	ldr	r3, [pc, #52]	@ (800703c <std+0x60>)
 8007008:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800700a:	4b0d      	ldr	r3, [pc, #52]	@ (8007040 <std+0x64>)
 800700c:	6323      	str	r3, [r4, #48]	@ 0x30
 800700e:	4b0d      	ldr	r3, [pc, #52]	@ (8007044 <std+0x68>)
 8007010:	6224      	str	r4, [r4, #32]
 8007012:	429c      	cmp	r4, r3
 8007014:	d006      	beq.n	8007024 <std+0x48>
 8007016:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800701a:	4294      	cmp	r4, r2
 800701c:	d002      	beq.n	8007024 <std+0x48>
 800701e:	33d0      	adds	r3, #208	@ 0xd0
 8007020:	429c      	cmp	r4, r3
 8007022:	d105      	bne.n	8007030 <std+0x54>
 8007024:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007028:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800702c:	f000 b96a 	b.w	8007304 <__retarget_lock_init_recursive>
 8007030:	bd10      	pop	{r4, pc}
 8007032:	bf00      	nop
 8007034:	08007161 	.word	0x08007161
 8007038:	08007183 	.word	0x08007183
 800703c:	080071bb 	.word	0x080071bb
 8007040:	080071df 	.word	0x080071df
 8007044:	200017cc 	.word	0x200017cc

08007048 <stdio_exit_handler>:
 8007048:	4a02      	ldr	r2, [pc, #8]	@ (8007054 <stdio_exit_handler+0xc>)
 800704a:	4903      	ldr	r1, [pc, #12]	@ (8007058 <stdio_exit_handler+0x10>)
 800704c:	4803      	ldr	r0, [pc, #12]	@ (800705c <stdio_exit_handler+0x14>)
 800704e:	f000 b869 	b.w	8007124 <_fwalk_sglue>
 8007052:	bf00      	nop
 8007054:	20000010 	.word	0x20000010
 8007058:	080089b5 	.word	0x080089b5
 800705c:	20000020 	.word	0x20000020

08007060 <cleanup_stdio>:
 8007060:	6841      	ldr	r1, [r0, #4]
 8007062:	4b0c      	ldr	r3, [pc, #48]	@ (8007094 <cleanup_stdio+0x34>)
 8007064:	4299      	cmp	r1, r3
 8007066:	b510      	push	{r4, lr}
 8007068:	4604      	mov	r4, r0
 800706a:	d001      	beq.n	8007070 <cleanup_stdio+0x10>
 800706c:	f001 fca2 	bl	80089b4 <_fflush_r>
 8007070:	68a1      	ldr	r1, [r4, #8]
 8007072:	4b09      	ldr	r3, [pc, #36]	@ (8007098 <cleanup_stdio+0x38>)
 8007074:	4299      	cmp	r1, r3
 8007076:	d002      	beq.n	800707e <cleanup_stdio+0x1e>
 8007078:	4620      	mov	r0, r4
 800707a:	f001 fc9b 	bl	80089b4 <_fflush_r>
 800707e:	68e1      	ldr	r1, [r4, #12]
 8007080:	4b06      	ldr	r3, [pc, #24]	@ (800709c <cleanup_stdio+0x3c>)
 8007082:	4299      	cmp	r1, r3
 8007084:	d004      	beq.n	8007090 <cleanup_stdio+0x30>
 8007086:	4620      	mov	r0, r4
 8007088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800708c:	f001 bc92 	b.w	80089b4 <_fflush_r>
 8007090:	bd10      	pop	{r4, pc}
 8007092:	bf00      	nop
 8007094:	200017cc 	.word	0x200017cc
 8007098:	20001834 	.word	0x20001834
 800709c:	2000189c 	.word	0x2000189c

080070a0 <global_stdio_init.part.0>:
 80070a0:	b510      	push	{r4, lr}
 80070a2:	4b0b      	ldr	r3, [pc, #44]	@ (80070d0 <global_stdio_init.part.0+0x30>)
 80070a4:	4c0b      	ldr	r4, [pc, #44]	@ (80070d4 <global_stdio_init.part.0+0x34>)
 80070a6:	4a0c      	ldr	r2, [pc, #48]	@ (80070d8 <global_stdio_init.part.0+0x38>)
 80070a8:	601a      	str	r2, [r3, #0]
 80070aa:	4620      	mov	r0, r4
 80070ac:	2200      	movs	r2, #0
 80070ae:	2104      	movs	r1, #4
 80070b0:	f7ff ff94 	bl	8006fdc <std>
 80070b4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80070b8:	2201      	movs	r2, #1
 80070ba:	2109      	movs	r1, #9
 80070bc:	f7ff ff8e 	bl	8006fdc <std>
 80070c0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80070c4:	2202      	movs	r2, #2
 80070c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80070ca:	2112      	movs	r1, #18
 80070cc:	f7ff bf86 	b.w	8006fdc <std>
 80070d0:	20001904 	.word	0x20001904
 80070d4:	200017cc 	.word	0x200017cc
 80070d8:	08007049 	.word	0x08007049

080070dc <__sfp_lock_acquire>:
 80070dc:	4801      	ldr	r0, [pc, #4]	@ (80070e4 <__sfp_lock_acquire+0x8>)
 80070de:	f000 b912 	b.w	8007306 <__retarget_lock_acquire_recursive>
 80070e2:	bf00      	nop
 80070e4:	2000190d 	.word	0x2000190d

080070e8 <__sfp_lock_release>:
 80070e8:	4801      	ldr	r0, [pc, #4]	@ (80070f0 <__sfp_lock_release+0x8>)
 80070ea:	f000 b90d 	b.w	8007308 <__retarget_lock_release_recursive>
 80070ee:	bf00      	nop
 80070f0:	2000190d 	.word	0x2000190d

080070f4 <__sinit>:
 80070f4:	b510      	push	{r4, lr}
 80070f6:	4604      	mov	r4, r0
 80070f8:	f7ff fff0 	bl	80070dc <__sfp_lock_acquire>
 80070fc:	6a23      	ldr	r3, [r4, #32]
 80070fe:	b11b      	cbz	r3, 8007108 <__sinit+0x14>
 8007100:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007104:	f7ff bff0 	b.w	80070e8 <__sfp_lock_release>
 8007108:	4b04      	ldr	r3, [pc, #16]	@ (800711c <__sinit+0x28>)
 800710a:	6223      	str	r3, [r4, #32]
 800710c:	4b04      	ldr	r3, [pc, #16]	@ (8007120 <__sinit+0x2c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b00      	cmp	r3, #0
 8007112:	d1f5      	bne.n	8007100 <__sinit+0xc>
 8007114:	f7ff ffc4 	bl	80070a0 <global_stdio_init.part.0>
 8007118:	e7f2      	b.n	8007100 <__sinit+0xc>
 800711a:	bf00      	nop
 800711c:	08007061 	.word	0x08007061
 8007120:	20001904 	.word	0x20001904

08007124 <_fwalk_sglue>:
 8007124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007128:	4607      	mov	r7, r0
 800712a:	4688      	mov	r8, r1
 800712c:	4614      	mov	r4, r2
 800712e:	2600      	movs	r6, #0
 8007130:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007134:	f1b9 0901 	subs.w	r9, r9, #1
 8007138:	d505      	bpl.n	8007146 <_fwalk_sglue+0x22>
 800713a:	6824      	ldr	r4, [r4, #0]
 800713c:	2c00      	cmp	r4, #0
 800713e:	d1f7      	bne.n	8007130 <_fwalk_sglue+0xc>
 8007140:	4630      	mov	r0, r6
 8007142:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007146:	89ab      	ldrh	r3, [r5, #12]
 8007148:	2b01      	cmp	r3, #1
 800714a:	d907      	bls.n	800715c <_fwalk_sglue+0x38>
 800714c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007150:	3301      	adds	r3, #1
 8007152:	d003      	beq.n	800715c <_fwalk_sglue+0x38>
 8007154:	4629      	mov	r1, r5
 8007156:	4638      	mov	r0, r7
 8007158:	47c0      	blx	r8
 800715a:	4306      	orrs	r6, r0
 800715c:	3568      	adds	r5, #104	@ 0x68
 800715e:	e7e9      	b.n	8007134 <_fwalk_sglue+0x10>

08007160 <__sread>:
 8007160:	b510      	push	{r4, lr}
 8007162:	460c      	mov	r4, r1
 8007164:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007168:	f000 f87e 	bl	8007268 <_read_r>
 800716c:	2800      	cmp	r0, #0
 800716e:	bfab      	itete	ge
 8007170:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007172:	89a3      	ldrhlt	r3, [r4, #12]
 8007174:	181b      	addge	r3, r3, r0
 8007176:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800717a:	bfac      	ite	ge
 800717c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800717e:	81a3      	strhlt	r3, [r4, #12]
 8007180:	bd10      	pop	{r4, pc}

08007182 <__swrite>:
 8007182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007186:	461f      	mov	r7, r3
 8007188:	898b      	ldrh	r3, [r1, #12]
 800718a:	05db      	lsls	r3, r3, #23
 800718c:	4605      	mov	r5, r0
 800718e:	460c      	mov	r4, r1
 8007190:	4616      	mov	r6, r2
 8007192:	d505      	bpl.n	80071a0 <__swrite+0x1e>
 8007194:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007198:	2302      	movs	r3, #2
 800719a:	2200      	movs	r2, #0
 800719c:	f000 f852 	bl	8007244 <_lseek_r>
 80071a0:	89a3      	ldrh	r3, [r4, #12]
 80071a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80071a6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80071aa:	81a3      	strh	r3, [r4, #12]
 80071ac:	4632      	mov	r2, r6
 80071ae:	463b      	mov	r3, r7
 80071b0:	4628      	mov	r0, r5
 80071b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80071b6:	f000 b869 	b.w	800728c <_write_r>

080071ba <__sseek>:
 80071ba:	b510      	push	{r4, lr}
 80071bc:	460c      	mov	r4, r1
 80071be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071c2:	f000 f83f 	bl	8007244 <_lseek_r>
 80071c6:	1c43      	adds	r3, r0, #1
 80071c8:	89a3      	ldrh	r3, [r4, #12]
 80071ca:	bf15      	itete	ne
 80071cc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80071ce:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80071d2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80071d6:	81a3      	strheq	r3, [r4, #12]
 80071d8:	bf18      	it	ne
 80071da:	81a3      	strhne	r3, [r4, #12]
 80071dc:	bd10      	pop	{r4, pc}

080071de <__sclose>:
 80071de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e2:	f000 b81f 	b.w	8007224 <_close_r>

080071e6 <memset>:
 80071e6:	4402      	add	r2, r0
 80071e8:	4603      	mov	r3, r0
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d100      	bne.n	80071f0 <memset+0xa>
 80071ee:	4770      	bx	lr
 80071f0:	f803 1b01 	strb.w	r1, [r3], #1
 80071f4:	e7f9      	b.n	80071ea <memset+0x4>

080071f6 <strncmp>:
 80071f6:	b510      	push	{r4, lr}
 80071f8:	b16a      	cbz	r2, 8007216 <strncmp+0x20>
 80071fa:	3901      	subs	r1, #1
 80071fc:	1884      	adds	r4, r0, r2
 80071fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007202:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8007206:	429a      	cmp	r2, r3
 8007208:	d103      	bne.n	8007212 <strncmp+0x1c>
 800720a:	42a0      	cmp	r0, r4
 800720c:	d001      	beq.n	8007212 <strncmp+0x1c>
 800720e:	2a00      	cmp	r2, #0
 8007210:	d1f5      	bne.n	80071fe <strncmp+0x8>
 8007212:	1ad0      	subs	r0, r2, r3
 8007214:	bd10      	pop	{r4, pc}
 8007216:	4610      	mov	r0, r2
 8007218:	e7fc      	b.n	8007214 <strncmp+0x1e>
	...

0800721c <_localeconv_r>:
 800721c:	4800      	ldr	r0, [pc, #0]	@ (8007220 <_localeconv_r+0x4>)
 800721e:	4770      	bx	lr
 8007220:	2000015c 	.word	0x2000015c

08007224 <_close_r>:
 8007224:	b538      	push	{r3, r4, r5, lr}
 8007226:	4d06      	ldr	r5, [pc, #24]	@ (8007240 <_close_r+0x1c>)
 8007228:	2300      	movs	r3, #0
 800722a:	4604      	mov	r4, r0
 800722c:	4608      	mov	r0, r1
 800722e:	602b      	str	r3, [r5, #0]
 8007230:	f7fa fd3a 	bl	8001ca8 <_close>
 8007234:	1c43      	adds	r3, r0, #1
 8007236:	d102      	bne.n	800723e <_close_r+0x1a>
 8007238:	682b      	ldr	r3, [r5, #0]
 800723a:	b103      	cbz	r3, 800723e <_close_r+0x1a>
 800723c:	6023      	str	r3, [r4, #0]
 800723e:	bd38      	pop	{r3, r4, r5, pc}
 8007240:	20001908 	.word	0x20001908

08007244 <_lseek_r>:
 8007244:	b538      	push	{r3, r4, r5, lr}
 8007246:	4d07      	ldr	r5, [pc, #28]	@ (8007264 <_lseek_r+0x20>)
 8007248:	4604      	mov	r4, r0
 800724a:	4608      	mov	r0, r1
 800724c:	4611      	mov	r1, r2
 800724e:	2200      	movs	r2, #0
 8007250:	602a      	str	r2, [r5, #0]
 8007252:	461a      	mov	r2, r3
 8007254:	f7fa fd4f 	bl	8001cf6 <_lseek>
 8007258:	1c43      	adds	r3, r0, #1
 800725a:	d102      	bne.n	8007262 <_lseek_r+0x1e>
 800725c:	682b      	ldr	r3, [r5, #0]
 800725e:	b103      	cbz	r3, 8007262 <_lseek_r+0x1e>
 8007260:	6023      	str	r3, [r4, #0]
 8007262:	bd38      	pop	{r3, r4, r5, pc}
 8007264:	20001908 	.word	0x20001908

08007268 <_read_r>:
 8007268:	b538      	push	{r3, r4, r5, lr}
 800726a:	4d07      	ldr	r5, [pc, #28]	@ (8007288 <_read_r+0x20>)
 800726c:	4604      	mov	r4, r0
 800726e:	4608      	mov	r0, r1
 8007270:	4611      	mov	r1, r2
 8007272:	2200      	movs	r2, #0
 8007274:	602a      	str	r2, [r5, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	f7fa fcdd 	bl	8001c36 <_read>
 800727c:	1c43      	adds	r3, r0, #1
 800727e:	d102      	bne.n	8007286 <_read_r+0x1e>
 8007280:	682b      	ldr	r3, [r5, #0]
 8007282:	b103      	cbz	r3, 8007286 <_read_r+0x1e>
 8007284:	6023      	str	r3, [r4, #0]
 8007286:	bd38      	pop	{r3, r4, r5, pc}
 8007288:	20001908 	.word	0x20001908

0800728c <_write_r>:
 800728c:	b538      	push	{r3, r4, r5, lr}
 800728e:	4d07      	ldr	r5, [pc, #28]	@ (80072ac <_write_r+0x20>)
 8007290:	4604      	mov	r4, r0
 8007292:	4608      	mov	r0, r1
 8007294:	4611      	mov	r1, r2
 8007296:	2200      	movs	r2, #0
 8007298:	602a      	str	r2, [r5, #0]
 800729a:	461a      	mov	r2, r3
 800729c:	f7fa fce8 	bl	8001c70 <_write>
 80072a0:	1c43      	adds	r3, r0, #1
 80072a2:	d102      	bne.n	80072aa <_write_r+0x1e>
 80072a4:	682b      	ldr	r3, [r5, #0]
 80072a6:	b103      	cbz	r3, 80072aa <_write_r+0x1e>
 80072a8:	6023      	str	r3, [r4, #0]
 80072aa:	bd38      	pop	{r3, r4, r5, pc}
 80072ac:	20001908 	.word	0x20001908

080072b0 <__errno>:
 80072b0:	4b01      	ldr	r3, [pc, #4]	@ (80072b8 <__errno+0x8>)
 80072b2:	6818      	ldr	r0, [r3, #0]
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop
 80072b8:	2000001c 	.word	0x2000001c

080072bc <__libc_init_array>:
 80072bc:	b570      	push	{r4, r5, r6, lr}
 80072be:	4d0d      	ldr	r5, [pc, #52]	@ (80072f4 <__libc_init_array+0x38>)
 80072c0:	4c0d      	ldr	r4, [pc, #52]	@ (80072f8 <__libc_init_array+0x3c>)
 80072c2:	1b64      	subs	r4, r4, r5
 80072c4:	10a4      	asrs	r4, r4, #2
 80072c6:	2600      	movs	r6, #0
 80072c8:	42a6      	cmp	r6, r4
 80072ca:	d109      	bne.n	80072e0 <__libc_init_array+0x24>
 80072cc:	4d0b      	ldr	r5, [pc, #44]	@ (80072fc <__libc_init_array+0x40>)
 80072ce:	4c0c      	ldr	r4, [pc, #48]	@ (8007300 <__libc_init_array+0x44>)
 80072d0:	f001 febe 	bl	8009050 <_init>
 80072d4:	1b64      	subs	r4, r4, r5
 80072d6:	10a4      	asrs	r4, r4, #2
 80072d8:	2600      	movs	r6, #0
 80072da:	42a6      	cmp	r6, r4
 80072dc:	d105      	bne.n	80072ea <__libc_init_array+0x2e>
 80072de:	bd70      	pop	{r4, r5, r6, pc}
 80072e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80072e4:	4798      	blx	r3
 80072e6:	3601      	adds	r6, #1
 80072e8:	e7ee      	b.n	80072c8 <__libc_init_array+0xc>
 80072ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80072ee:	4798      	blx	r3
 80072f0:	3601      	adds	r6, #1
 80072f2:	e7f2      	b.n	80072da <__libc_init_array+0x1e>
 80072f4:	08009478 	.word	0x08009478
 80072f8:	08009478 	.word	0x08009478
 80072fc:	08009478 	.word	0x08009478
 8007300:	0800947c 	.word	0x0800947c

08007304 <__retarget_lock_init_recursive>:
 8007304:	4770      	bx	lr

08007306 <__retarget_lock_acquire_recursive>:
 8007306:	4770      	bx	lr

08007308 <__retarget_lock_release_recursive>:
 8007308:	4770      	bx	lr

0800730a <quorem>:
 800730a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730e:	6903      	ldr	r3, [r0, #16]
 8007310:	690c      	ldr	r4, [r1, #16]
 8007312:	42a3      	cmp	r3, r4
 8007314:	4607      	mov	r7, r0
 8007316:	db7e      	blt.n	8007416 <quorem+0x10c>
 8007318:	3c01      	subs	r4, #1
 800731a:	f101 0814 	add.w	r8, r1, #20
 800731e:	00a3      	lsls	r3, r4, #2
 8007320:	f100 0514 	add.w	r5, r0, #20
 8007324:	9300      	str	r3, [sp, #0]
 8007326:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800732a:	9301      	str	r3, [sp, #4]
 800732c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8007330:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007334:	3301      	adds	r3, #1
 8007336:	429a      	cmp	r2, r3
 8007338:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800733c:	fbb2 f6f3 	udiv	r6, r2, r3
 8007340:	d32e      	bcc.n	80073a0 <quorem+0x96>
 8007342:	f04f 0a00 	mov.w	sl, #0
 8007346:	46c4      	mov	ip, r8
 8007348:	46ae      	mov	lr, r5
 800734a:	46d3      	mov	fp, sl
 800734c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007350:	b298      	uxth	r0, r3
 8007352:	fb06 a000 	mla	r0, r6, r0, sl
 8007356:	0c02      	lsrs	r2, r0, #16
 8007358:	0c1b      	lsrs	r3, r3, #16
 800735a:	fb06 2303 	mla	r3, r6, r3, r2
 800735e:	f8de 2000 	ldr.w	r2, [lr]
 8007362:	b280      	uxth	r0, r0
 8007364:	b292      	uxth	r2, r2
 8007366:	1a12      	subs	r2, r2, r0
 8007368:	445a      	add	r2, fp
 800736a:	f8de 0000 	ldr.w	r0, [lr]
 800736e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007372:	b29b      	uxth	r3, r3
 8007374:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007378:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800737c:	b292      	uxth	r2, r2
 800737e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007382:	45e1      	cmp	r9, ip
 8007384:	f84e 2b04 	str.w	r2, [lr], #4
 8007388:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800738c:	d2de      	bcs.n	800734c <quorem+0x42>
 800738e:	9b00      	ldr	r3, [sp, #0]
 8007390:	58eb      	ldr	r3, [r5, r3]
 8007392:	b92b      	cbnz	r3, 80073a0 <quorem+0x96>
 8007394:	9b01      	ldr	r3, [sp, #4]
 8007396:	3b04      	subs	r3, #4
 8007398:	429d      	cmp	r5, r3
 800739a:	461a      	mov	r2, r3
 800739c:	d32f      	bcc.n	80073fe <quorem+0xf4>
 800739e:	613c      	str	r4, [r7, #16]
 80073a0:	4638      	mov	r0, r7
 80073a2:	f001 f97b 	bl	800869c <__mcmp>
 80073a6:	2800      	cmp	r0, #0
 80073a8:	db25      	blt.n	80073f6 <quorem+0xec>
 80073aa:	4629      	mov	r1, r5
 80073ac:	2000      	movs	r0, #0
 80073ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80073b2:	f8d1 c000 	ldr.w	ip, [r1]
 80073b6:	fa1f fe82 	uxth.w	lr, r2
 80073ba:	fa1f f38c 	uxth.w	r3, ip
 80073be:	eba3 030e 	sub.w	r3, r3, lr
 80073c2:	4403      	add	r3, r0
 80073c4:	0c12      	lsrs	r2, r2, #16
 80073c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80073ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80073ce:	b29b      	uxth	r3, r3
 80073d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80073d4:	45c1      	cmp	r9, r8
 80073d6:	f841 3b04 	str.w	r3, [r1], #4
 80073da:	ea4f 4022 	mov.w	r0, r2, asr #16
 80073de:	d2e6      	bcs.n	80073ae <quorem+0xa4>
 80073e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80073e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80073e8:	b922      	cbnz	r2, 80073f4 <quorem+0xea>
 80073ea:	3b04      	subs	r3, #4
 80073ec:	429d      	cmp	r5, r3
 80073ee:	461a      	mov	r2, r3
 80073f0:	d30b      	bcc.n	800740a <quorem+0x100>
 80073f2:	613c      	str	r4, [r7, #16]
 80073f4:	3601      	adds	r6, #1
 80073f6:	4630      	mov	r0, r6
 80073f8:	b003      	add	sp, #12
 80073fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073fe:	6812      	ldr	r2, [r2, #0]
 8007400:	3b04      	subs	r3, #4
 8007402:	2a00      	cmp	r2, #0
 8007404:	d1cb      	bne.n	800739e <quorem+0x94>
 8007406:	3c01      	subs	r4, #1
 8007408:	e7c6      	b.n	8007398 <quorem+0x8e>
 800740a:	6812      	ldr	r2, [r2, #0]
 800740c:	3b04      	subs	r3, #4
 800740e:	2a00      	cmp	r2, #0
 8007410:	d1ef      	bne.n	80073f2 <quorem+0xe8>
 8007412:	3c01      	subs	r4, #1
 8007414:	e7ea      	b.n	80073ec <quorem+0xe2>
 8007416:	2000      	movs	r0, #0
 8007418:	e7ee      	b.n	80073f8 <quorem+0xee>
 800741a:	0000      	movs	r0, r0
 800741c:	0000      	movs	r0, r0
	...

08007420 <_dtoa_r>:
 8007420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007424:	69c7      	ldr	r7, [r0, #28]
 8007426:	b099      	sub	sp, #100	@ 0x64
 8007428:	ed8d 0b02 	vstr	d0, [sp, #8]
 800742c:	ec55 4b10 	vmov	r4, r5, d0
 8007430:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8007432:	9109      	str	r1, [sp, #36]	@ 0x24
 8007434:	4683      	mov	fp, r0
 8007436:	920e      	str	r2, [sp, #56]	@ 0x38
 8007438:	9313      	str	r3, [sp, #76]	@ 0x4c
 800743a:	b97f      	cbnz	r7, 800745c <_dtoa_r+0x3c>
 800743c:	2010      	movs	r0, #16
 800743e:	f000 fdfd 	bl	800803c <malloc>
 8007442:	4602      	mov	r2, r0
 8007444:	f8cb 001c 	str.w	r0, [fp, #28]
 8007448:	b920      	cbnz	r0, 8007454 <_dtoa_r+0x34>
 800744a:	4ba7      	ldr	r3, [pc, #668]	@ (80076e8 <_dtoa_r+0x2c8>)
 800744c:	21ef      	movs	r1, #239	@ 0xef
 800744e:	48a7      	ldr	r0, [pc, #668]	@ (80076ec <_dtoa_r+0x2cc>)
 8007450:	f001 faf6 	bl	8008a40 <__assert_func>
 8007454:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007458:	6007      	str	r7, [r0, #0]
 800745a:	60c7      	str	r7, [r0, #12]
 800745c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007460:	6819      	ldr	r1, [r3, #0]
 8007462:	b159      	cbz	r1, 800747c <_dtoa_r+0x5c>
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	604a      	str	r2, [r1, #4]
 8007468:	2301      	movs	r3, #1
 800746a:	4093      	lsls	r3, r2
 800746c:	608b      	str	r3, [r1, #8]
 800746e:	4658      	mov	r0, fp
 8007470:	f000 feda 	bl	8008228 <_Bfree>
 8007474:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]
 800747c:	1e2b      	subs	r3, r5, #0
 800747e:	bfb9      	ittee	lt
 8007480:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007484:	9303      	strlt	r3, [sp, #12]
 8007486:	2300      	movge	r3, #0
 8007488:	6033      	strge	r3, [r6, #0]
 800748a:	9f03      	ldr	r7, [sp, #12]
 800748c:	4b98      	ldr	r3, [pc, #608]	@ (80076f0 <_dtoa_r+0x2d0>)
 800748e:	bfbc      	itt	lt
 8007490:	2201      	movlt	r2, #1
 8007492:	6032      	strlt	r2, [r6, #0]
 8007494:	43bb      	bics	r3, r7
 8007496:	d112      	bne.n	80074be <_dtoa_r+0x9e>
 8007498:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800749a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800749e:	6013      	str	r3, [r2, #0]
 80074a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80074a4:	4323      	orrs	r3, r4
 80074a6:	f000 854d 	beq.w	8007f44 <_dtoa_r+0xb24>
 80074aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007704 <_dtoa_r+0x2e4>
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	f000 854f 	beq.w	8007f54 <_dtoa_r+0xb34>
 80074b6:	f10a 0303 	add.w	r3, sl, #3
 80074ba:	f000 bd49 	b.w	8007f50 <_dtoa_r+0xb30>
 80074be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074c2:	2200      	movs	r2, #0
 80074c4:	ec51 0b17 	vmov	r0, r1, d7
 80074c8:	2300      	movs	r3, #0
 80074ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80074ce:	f7f9 fc43 	bl	8000d58 <__aeabi_dcmpeq>
 80074d2:	4680      	mov	r8, r0
 80074d4:	b158      	cbz	r0, 80074ee <_dtoa_r+0xce>
 80074d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80074d8:	2301      	movs	r3, #1
 80074da:	6013      	str	r3, [r2, #0]
 80074dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80074de:	b113      	cbz	r3, 80074e6 <_dtoa_r+0xc6>
 80074e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80074e2:	4b84      	ldr	r3, [pc, #528]	@ (80076f4 <_dtoa_r+0x2d4>)
 80074e4:	6013      	str	r3, [r2, #0]
 80074e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007708 <_dtoa_r+0x2e8>
 80074ea:	f000 bd33 	b.w	8007f54 <_dtoa_r+0xb34>
 80074ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80074f2:	aa16      	add	r2, sp, #88	@ 0x58
 80074f4:	a917      	add	r1, sp, #92	@ 0x5c
 80074f6:	4658      	mov	r0, fp
 80074f8:	f001 f980 	bl	80087fc <__d2b>
 80074fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007500:	4681      	mov	r9, r0
 8007502:	2e00      	cmp	r6, #0
 8007504:	d077      	beq.n	80075f6 <_dtoa_r+0x1d6>
 8007506:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007508:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800750c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007510:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007514:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007518:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800751c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8007520:	4619      	mov	r1, r3
 8007522:	2200      	movs	r2, #0
 8007524:	4b74      	ldr	r3, [pc, #464]	@ (80076f8 <_dtoa_r+0x2d8>)
 8007526:	f7f8 fff7 	bl	8000518 <__aeabi_dsub>
 800752a:	a369      	add	r3, pc, #420	@ (adr r3, 80076d0 <_dtoa_r+0x2b0>)
 800752c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007530:	f7f9 f9aa 	bl	8000888 <__aeabi_dmul>
 8007534:	a368      	add	r3, pc, #416	@ (adr r3, 80076d8 <_dtoa_r+0x2b8>)
 8007536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800753a:	f7f8 ffef 	bl	800051c <__adddf3>
 800753e:	4604      	mov	r4, r0
 8007540:	4630      	mov	r0, r6
 8007542:	460d      	mov	r5, r1
 8007544:	f7f9 f936 	bl	80007b4 <__aeabi_i2d>
 8007548:	a365      	add	r3, pc, #404	@ (adr r3, 80076e0 <_dtoa_r+0x2c0>)
 800754a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800754e:	f7f9 f99b 	bl	8000888 <__aeabi_dmul>
 8007552:	4602      	mov	r2, r0
 8007554:	460b      	mov	r3, r1
 8007556:	4620      	mov	r0, r4
 8007558:	4629      	mov	r1, r5
 800755a:	f7f8 ffdf 	bl	800051c <__adddf3>
 800755e:	4604      	mov	r4, r0
 8007560:	460d      	mov	r5, r1
 8007562:	f7f9 fc41 	bl	8000de8 <__aeabi_d2iz>
 8007566:	2200      	movs	r2, #0
 8007568:	4607      	mov	r7, r0
 800756a:	2300      	movs	r3, #0
 800756c:	4620      	mov	r0, r4
 800756e:	4629      	mov	r1, r5
 8007570:	f7f9 fbfc 	bl	8000d6c <__aeabi_dcmplt>
 8007574:	b140      	cbz	r0, 8007588 <_dtoa_r+0x168>
 8007576:	4638      	mov	r0, r7
 8007578:	f7f9 f91c 	bl	80007b4 <__aeabi_i2d>
 800757c:	4622      	mov	r2, r4
 800757e:	462b      	mov	r3, r5
 8007580:	f7f9 fbea 	bl	8000d58 <__aeabi_dcmpeq>
 8007584:	b900      	cbnz	r0, 8007588 <_dtoa_r+0x168>
 8007586:	3f01      	subs	r7, #1
 8007588:	2f16      	cmp	r7, #22
 800758a:	d851      	bhi.n	8007630 <_dtoa_r+0x210>
 800758c:	4b5b      	ldr	r3, [pc, #364]	@ (80076fc <_dtoa_r+0x2dc>)
 800758e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007596:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800759a:	f7f9 fbe7 	bl	8000d6c <__aeabi_dcmplt>
 800759e:	2800      	cmp	r0, #0
 80075a0:	d048      	beq.n	8007634 <_dtoa_r+0x214>
 80075a2:	3f01      	subs	r7, #1
 80075a4:	2300      	movs	r3, #0
 80075a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80075a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80075aa:	1b9b      	subs	r3, r3, r6
 80075ac:	1e5a      	subs	r2, r3, #1
 80075ae:	bf44      	itt	mi
 80075b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80075b4:	2300      	movmi	r3, #0
 80075b6:	9208      	str	r2, [sp, #32]
 80075b8:	bf54      	ite	pl
 80075ba:	f04f 0800 	movpl.w	r8, #0
 80075be:	9308      	strmi	r3, [sp, #32]
 80075c0:	2f00      	cmp	r7, #0
 80075c2:	db39      	blt.n	8007638 <_dtoa_r+0x218>
 80075c4:	9b08      	ldr	r3, [sp, #32]
 80075c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80075c8:	443b      	add	r3, r7
 80075ca:	9308      	str	r3, [sp, #32]
 80075cc:	2300      	movs	r3, #0
 80075ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80075d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075d2:	2b09      	cmp	r3, #9
 80075d4:	d864      	bhi.n	80076a0 <_dtoa_r+0x280>
 80075d6:	2b05      	cmp	r3, #5
 80075d8:	bfc4      	itt	gt
 80075da:	3b04      	subgt	r3, #4
 80075dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80075de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075e0:	f1a3 0302 	sub.w	r3, r3, #2
 80075e4:	bfcc      	ite	gt
 80075e6:	2400      	movgt	r4, #0
 80075e8:	2401      	movle	r4, #1
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d863      	bhi.n	80076b6 <_dtoa_r+0x296>
 80075ee:	e8df f003 	tbb	[pc, r3]
 80075f2:	372a      	.short	0x372a
 80075f4:	5535      	.short	0x5535
 80075f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80075fa:	441e      	add	r6, r3
 80075fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007600:	2b20      	cmp	r3, #32
 8007602:	bfc1      	itttt	gt
 8007604:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007608:	409f      	lslgt	r7, r3
 800760a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800760e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007612:	bfd6      	itet	le
 8007614:	f1c3 0320 	rsble	r3, r3, #32
 8007618:	ea47 0003 	orrgt.w	r0, r7, r3
 800761c:	fa04 f003 	lslle.w	r0, r4, r3
 8007620:	f7f9 f8b8 	bl	8000794 <__aeabi_ui2d>
 8007624:	2201      	movs	r2, #1
 8007626:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800762a:	3e01      	subs	r6, #1
 800762c:	9214      	str	r2, [sp, #80]	@ 0x50
 800762e:	e777      	b.n	8007520 <_dtoa_r+0x100>
 8007630:	2301      	movs	r3, #1
 8007632:	e7b8      	b.n	80075a6 <_dtoa_r+0x186>
 8007634:	9012      	str	r0, [sp, #72]	@ 0x48
 8007636:	e7b7      	b.n	80075a8 <_dtoa_r+0x188>
 8007638:	427b      	negs	r3, r7
 800763a:	930a      	str	r3, [sp, #40]	@ 0x28
 800763c:	2300      	movs	r3, #0
 800763e:	eba8 0807 	sub.w	r8, r8, r7
 8007642:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007644:	e7c4      	b.n	80075d0 <_dtoa_r+0x1b0>
 8007646:	2300      	movs	r3, #0
 8007648:	930b      	str	r3, [sp, #44]	@ 0x2c
 800764a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800764c:	2b00      	cmp	r3, #0
 800764e:	dc35      	bgt.n	80076bc <_dtoa_r+0x29c>
 8007650:	2301      	movs	r3, #1
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	9307      	str	r3, [sp, #28]
 8007656:	461a      	mov	r2, r3
 8007658:	920e      	str	r2, [sp, #56]	@ 0x38
 800765a:	e00b      	b.n	8007674 <_dtoa_r+0x254>
 800765c:	2301      	movs	r3, #1
 800765e:	e7f3      	b.n	8007648 <_dtoa_r+0x228>
 8007660:	2300      	movs	r3, #0
 8007662:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007664:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007666:	18fb      	adds	r3, r7, r3
 8007668:	9300      	str	r3, [sp, #0]
 800766a:	3301      	adds	r3, #1
 800766c:	2b01      	cmp	r3, #1
 800766e:	9307      	str	r3, [sp, #28]
 8007670:	bfb8      	it	lt
 8007672:	2301      	movlt	r3, #1
 8007674:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007678:	2100      	movs	r1, #0
 800767a:	2204      	movs	r2, #4
 800767c:	f102 0514 	add.w	r5, r2, #20
 8007680:	429d      	cmp	r5, r3
 8007682:	d91f      	bls.n	80076c4 <_dtoa_r+0x2a4>
 8007684:	6041      	str	r1, [r0, #4]
 8007686:	4658      	mov	r0, fp
 8007688:	f000 fd8e 	bl	80081a8 <_Balloc>
 800768c:	4682      	mov	sl, r0
 800768e:	2800      	cmp	r0, #0
 8007690:	d13c      	bne.n	800770c <_dtoa_r+0x2ec>
 8007692:	4b1b      	ldr	r3, [pc, #108]	@ (8007700 <_dtoa_r+0x2e0>)
 8007694:	4602      	mov	r2, r0
 8007696:	f240 11af 	movw	r1, #431	@ 0x1af
 800769a:	e6d8      	b.n	800744e <_dtoa_r+0x2e>
 800769c:	2301      	movs	r3, #1
 800769e:	e7e0      	b.n	8007662 <_dtoa_r+0x242>
 80076a0:	2401      	movs	r4, #1
 80076a2:	2300      	movs	r3, #0
 80076a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80076a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80076a8:	f04f 33ff 	mov.w	r3, #4294967295
 80076ac:	9300      	str	r3, [sp, #0]
 80076ae:	9307      	str	r3, [sp, #28]
 80076b0:	2200      	movs	r2, #0
 80076b2:	2312      	movs	r3, #18
 80076b4:	e7d0      	b.n	8007658 <_dtoa_r+0x238>
 80076b6:	2301      	movs	r3, #1
 80076b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80076ba:	e7f5      	b.n	80076a8 <_dtoa_r+0x288>
 80076bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	9307      	str	r3, [sp, #28]
 80076c2:	e7d7      	b.n	8007674 <_dtoa_r+0x254>
 80076c4:	3101      	adds	r1, #1
 80076c6:	0052      	lsls	r2, r2, #1
 80076c8:	e7d8      	b.n	800767c <_dtoa_r+0x25c>
 80076ca:	bf00      	nop
 80076cc:	f3af 8000 	nop.w
 80076d0:	636f4361 	.word	0x636f4361
 80076d4:	3fd287a7 	.word	0x3fd287a7
 80076d8:	8b60c8b3 	.word	0x8b60c8b3
 80076dc:	3fc68a28 	.word	0x3fc68a28
 80076e0:	509f79fb 	.word	0x509f79fb
 80076e4:	3fd34413 	.word	0x3fd34413
 80076e8:	08009141 	.word	0x08009141
 80076ec:	08009158 	.word	0x08009158
 80076f0:	7ff00000 	.word	0x7ff00000
 80076f4:	08009111 	.word	0x08009111
 80076f8:	3ff80000 	.word	0x3ff80000
 80076fc:	08009250 	.word	0x08009250
 8007700:	080091b0 	.word	0x080091b0
 8007704:	0800913d 	.word	0x0800913d
 8007708:	08009110 	.word	0x08009110
 800770c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007710:	6018      	str	r0, [r3, #0]
 8007712:	9b07      	ldr	r3, [sp, #28]
 8007714:	2b0e      	cmp	r3, #14
 8007716:	f200 80a4 	bhi.w	8007862 <_dtoa_r+0x442>
 800771a:	2c00      	cmp	r4, #0
 800771c:	f000 80a1 	beq.w	8007862 <_dtoa_r+0x442>
 8007720:	2f00      	cmp	r7, #0
 8007722:	dd33      	ble.n	800778c <_dtoa_r+0x36c>
 8007724:	4bad      	ldr	r3, [pc, #692]	@ (80079dc <_dtoa_r+0x5bc>)
 8007726:	f007 020f 	and.w	r2, r7, #15
 800772a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800772e:	ed93 7b00 	vldr	d7, [r3]
 8007732:	05f8      	lsls	r0, r7, #23
 8007734:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007738:	ea4f 1427 	mov.w	r4, r7, asr #4
 800773c:	d516      	bpl.n	800776c <_dtoa_r+0x34c>
 800773e:	4ba8      	ldr	r3, [pc, #672]	@ (80079e0 <_dtoa_r+0x5c0>)
 8007740:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007744:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007748:	f7f9 f9c8 	bl	8000adc <__aeabi_ddiv>
 800774c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007750:	f004 040f 	and.w	r4, r4, #15
 8007754:	2603      	movs	r6, #3
 8007756:	4da2      	ldr	r5, [pc, #648]	@ (80079e0 <_dtoa_r+0x5c0>)
 8007758:	b954      	cbnz	r4, 8007770 <_dtoa_r+0x350>
 800775a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800775e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007762:	f7f9 f9bb 	bl	8000adc <__aeabi_ddiv>
 8007766:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800776a:	e028      	b.n	80077be <_dtoa_r+0x39e>
 800776c:	2602      	movs	r6, #2
 800776e:	e7f2      	b.n	8007756 <_dtoa_r+0x336>
 8007770:	07e1      	lsls	r1, r4, #31
 8007772:	d508      	bpl.n	8007786 <_dtoa_r+0x366>
 8007774:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007778:	e9d5 2300 	ldrd	r2, r3, [r5]
 800777c:	f7f9 f884 	bl	8000888 <__aeabi_dmul>
 8007780:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007784:	3601      	adds	r6, #1
 8007786:	1064      	asrs	r4, r4, #1
 8007788:	3508      	adds	r5, #8
 800778a:	e7e5      	b.n	8007758 <_dtoa_r+0x338>
 800778c:	f000 80d2 	beq.w	8007934 <_dtoa_r+0x514>
 8007790:	427c      	negs	r4, r7
 8007792:	4b92      	ldr	r3, [pc, #584]	@ (80079dc <_dtoa_r+0x5bc>)
 8007794:	4d92      	ldr	r5, [pc, #584]	@ (80079e0 <_dtoa_r+0x5c0>)
 8007796:	f004 020f 	and.w	r2, r4, #15
 800779a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800779e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80077a6:	f7f9 f86f 	bl	8000888 <__aeabi_dmul>
 80077aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077ae:	1124      	asrs	r4, r4, #4
 80077b0:	2300      	movs	r3, #0
 80077b2:	2602      	movs	r6, #2
 80077b4:	2c00      	cmp	r4, #0
 80077b6:	f040 80b2 	bne.w	800791e <_dtoa_r+0x4fe>
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d1d3      	bne.n	8007766 <_dtoa_r+0x346>
 80077be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80077c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	f000 80b7 	beq.w	8007938 <_dtoa_r+0x518>
 80077ca:	4b86      	ldr	r3, [pc, #536]	@ (80079e4 <_dtoa_r+0x5c4>)
 80077cc:	2200      	movs	r2, #0
 80077ce:	4620      	mov	r0, r4
 80077d0:	4629      	mov	r1, r5
 80077d2:	f7f9 facb 	bl	8000d6c <__aeabi_dcmplt>
 80077d6:	2800      	cmp	r0, #0
 80077d8:	f000 80ae 	beq.w	8007938 <_dtoa_r+0x518>
 80077dc:	9b07      	ldr	r3, [sp, #28]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 80aa 	beq.w	8007938 <_dtoa_r+0x518>
 80077e4:	9b00      	ldr	r3, [sp, #0]
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	dd37      	ble.n	800785a <_dtoa_r+0x43a>
 80077ea:	1e7b      	subs	r3, r7, #1
 80077ec:	9304      	str	r3, [sp, #16]
 80077ee:	4620      	mov	r0, r4
 80077f0:	4b7d      	ldr	r3, [pc, #500]	@ (80079e8 <_dtoa_r+0x5c8>)
 80077f2:	2200      	movs	r2, #0
 80077f4:	4629      	mov	r1, r5
 80077f6:	f7f9 f847 	bl	8000888 <__aeabi_dmul>
 80077fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80077fe:	9c00      	ldr	r4, [sp, #0]
 8007800:	3601      	adds	r6, #1
 8007802:	4630      	mov	r0, r6
 8007804:	f7f8 ffd6 	bl	80007b4 <__aeabi_i2d>
 8007808:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800780c:	f7f9 f83c 	bl	8000888 <__aeabi_dmul>
 8007810:	4b76      	ldr	r3, [pc, #472]	@ (80079ec <_dtoa_r+0x5cc>)
 8007812:	2200      	movs	r2, #0
 8007814:	f7f8 fe82 	bl	800051c <__adddf3>
 8007818:	4605      	mov	r5, r0
 800781a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800781e:	2c00      	cmp	r4, #0
 8007820:	f040 808d 	bne.w	800793e <_dtoa_r+0x51e>
 8007824:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007828:	4b71      	ldr	r3, [pc, #452]	@ (80079f0 <_dtoa_r+0x5d0>)
 800782a:	2200      	movs	r2, #0
 800782c:	f7f8 fe74 	bl	8000518 <__aeabi_dsub>
 8007830:	4602      	mov	r2, r0
 8007832:	460b      	mov	r3, r1
 8007834:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007838:	462a      	mov	r2, r5
 800783a:	4633      	mov	r3, r6
 800783c:	f7f9 fab4 	bl	8000da8 <__aeabi_dcmpgt>
 8007840:	2800      	cmp	r0, #0
 8007842:	f040 828b 	bne.w	8007d5c <_dtoa_r+0x93c>
 8007846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800784a:	462a      	mov	r2, r5
 800784c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007850:	f7f9 fa8c 	bl	8000d6c <__aeabi_dcmplt>
 8007854:	2800      	cmp	r0, #0
 8007856:	f040 8128 	bne.w	8007aaa <_dtoa_r+0x68a>
 800785a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800785e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007862:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007864:	2b00      	cmp	r3, #0
 8007866:	f2c0 815a 	blt.w	8007b1e <_dtoa_r+0x6fe>
 800786a:	2f0e      	cmp	r7, #14
 800786c:	f300 8157 	bgt.w	8007b1e <_dtoa_r+0x6fe>
 8007870:	4b5a      	ldr	r3, [pc, #360]	@ (80079dc <_dtoa_r+0x5bc>)
 8007872:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007876:	ed93 7b00 	vldr	d7, [r3]
 800787a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800787c:	2b00      	cmp	r3, #0
 800787e:	ed8d 7b00 	vstr	d7, [sp]
 8007882:	da03      	bge.n	800788c <_dtoa_r+0x46c>
 8007884:	9b07      	ldr	r3, [sp, #28]
 8007886:	2b00      	cmp	r3, #0
 8007888:	f340 8101 	ble.w	8007a8e <_dtoa_r+0x66e>
 800788c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007890:	4656      	mov	r6, sl
 8007892:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007896:	4620      	mov	r0, r4
 8007898:	4629      	mov	r1, r5
 800789a:	f7f9 f91f 	bl	8000adc <__aeabi_ddiv>
 800789e:	f7f9 faa3 	bl	8000de8 <__aeabi_d2iz>
 80078a2:	4680      	mov	r8, r0
 80078a4:	f7f8 ff86 	bl	80007b4 <__aeabi_i2d>
 80078a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078ac:	f7f8 ffec 	bl	8000888 <__aeabi_dmul>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4620      	mov	r0, r4
 80078b6:	4629      	mov	r1, r5
 80078b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80078bc:	f7f8 fe2c 	bl	8000518 <__aeabi_dsub>
 80078c0:	f806 4b01 	strb.w	r4, [r6], #1
 80078c4:	9d07      	ldr	r5, [sp, #28]
 80078c6:	eba6 040a 	sub.w	r4, r6, sl
 80078ca:	42a5      	cmp	r5, r4
 80078cc:	4602      	mov	r2, r0
 80078ce:	460b      	mov	r3, r1
 80078d0:	f040 8117 	bne.w	8007b02 <_dtoa_r+0x6e2>
 80078d4:	f7f8 fe22 	bl	800051c <__adddf3>
 80078d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078dc:	4604      	mov	r4, r0
 80078de:	460d      	mov	r5, r1
 80078e0:	f7f9 fa62 	bl	8000da8 <__aeabi_dcmpgt>
 80078e4:	2800      	cmp	r0, #0
 80078e6:	f040 80f9 	bne.w	8007adc <_dtoa_r+0x6bc>
 80078ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80078ee:	4620      	mov	r0, r4
 80078f0:	4629      	mov	r1, r5
 80078f2:	f7f9 fa31 	bl	8000d58 <__aeabi_dcmpeq>
 80078f6:	b118      	cbz	r0, 8007900 <_dtoa_r+0x4e0>
 80078f8:	f018 0f01 	tst.w	r8, #1
 80078fc:	f040 80ee 	bne.w	8007adc <_dtoa_r+0x6bc>
 8007900:	4649      	mov	r1, r9
 8007902:	4658      	mov	r0, fp
 8007904:	f000 fc90 	bl	8008228 <_Bfree>
 8007908:	2300      	movs	r3, #0
 800790a:	7033      	strb	r3, [r6, #0]
 800790c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800790e:	3701      	adds	r7, #1
 8007910:	601f      	str	r7, [r3, #0]
 8007912:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 831d 	beq.w	8007f54 <_dtoa_r+0xb34>
 800791a:	601e      	str	r6, [r3, #0]
 800791c:	e31a      	b.n	8007f54 <_dtoa_r+0xb34>
 800791e:	07e2      	lsls	r2, r4, #31
 8007920:	d505      	bpl.n	800792e <_dtoa_r+0x50e>
 8007922:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007926:	f7f8 ffaf 	bl	8000888 <__aeabi_dmul>
 800792a:	3601      	adds	r6, #1
 800792c:	2301      	movs	r3, #1
 800792e:	1064      	asrs	r4, r4, #1
 8007930:	3508      	adds	r5, #8
 8007932:	e73f      	b.n	80077b4 <_dtoa_r+0x394>
 8007934:	2602      	movs	r6, #2
 8007936:	e742      	b.n	80077be <_dtoa_r+0x39e>
 8007938:	9c07      	ldr	r4, [sp, #28]
 800793a:	9704      	str	r7, [sp, #16]
 800793c:	e761      	b.n	8007802 <_dtoa_r+0x3e2>
 800793e:	4b27      	ldr	r3, [pc, #156]	@ (80079dc <_dtoa_r+0x5bc>)
 8007940:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007942:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007946:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800794a:	4454      	add	r4, sl
 800794c:	2900      	cmp	r1, #0
 800794e:	d053      	beq.n	80079f8 <_dtoa_r+0x5d8>
 8007950:	4928      	ldr	r1, [pc, #160]	@ (80079f4 <_dtoa_r+0x5d4>)
 8007952:	2000      	movs	r0, #0
 8007954:	f7f9 f8c2 	bl	8000adc <__aeabi_ddiv>
 8007958:	4633      	mov	r3, r6
 800795a:	462a      	mov	r2, r5
 800795c:	f7f8 fddc 	bl	8000518 <__aeabi_dsub>
 8007960:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007964:	4656      	mov	r6, sl
 8007966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800796a:	f7f9 fa3d 	bl	8000de8 <__aeabi_d2iz>
 800796e:	4605      	mov	r5, r0
 8007970:	f7f8 ff20 	bl	80007b4 <__aeabi_i2d>
 8007974:	4602      	mov	r2, r0
 8007976:	460b      	mov	r3, r1
 8007978:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800797c:	f7f8 fdcc 	bl	8000518 <__aeabi_dsub>
 8007980:	3530      	adds	r5, #48	@ 0x30
 8007982:	4602      	mov	r2, r0
 8007984:	460b      	mov	r3, r1
 8007986:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800798a:	f806 5b01 	strb.w	r5, [r6], #1
 800798e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007992:	f7f9 f9eb 	bl	8000d6c <__aeabi_dcmplt>
 8007996:	2800      	cmp	r0, #0
 8007998:	d171      	bne.n	8007a7e <_dtoa_r+0x65e>
 800799a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800799e:	4911      	ldr	r1, [pc, #68]	@ (80079e4 <_dtoa_r+0x5c4>)
 80079a0:	2000      	movs	r0, #0
 80079a2:	f7f8 fdb9 	bl	8000518 <__aeabi_dsub>
 80079a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80079aa:	f7f9 f9df 	bl	8000d6c <__aeabi_dcmplt>
 80079ae:	2800      	cmp	r0, #0
 80079b0:	f040 8095 	bne.w	8007ade <_dtoa_r+0x6be>
 80079b4:	42a6      	cmp	r6, r4
 80079b6:	f43f af50 	beq.w	800785a <_dtoa_r+0x43a>
 80079ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80079be:	4b0a      	ldr	r3, [pc, #40]	@ (80079e8 <_dtoa_r+0x5c8>)
 80079c0:	2200      	movs	r2, #0
 80079c2:	f7f8 ff61 	bl	8000888 <__aeabi_dmul>
 80079c6:	4b08      	ldr	r3, [pc, #32]	@ (80079e8 <_dtoa_r+0x5c8>)
 80079c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80079cc:	2200      	movs	r2, #0
 80079ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80079d2:	f7f8 ff59 	bl	8000888 <__aeabi_dmul>
 80079d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80079da:	e7c4      	b.n	8007966 <_dtoa_r+0x546>
 80079dc:	08009250 	.word	0x08009250
 80079e0:	08009228 	.word	0x08009228
 80079e4:	3ff00000 	.word	0x3ff00000
 80079e8:	40240000 	.word	0x40240000
 80079ec:	401c0000 	.word	0x401c0000
 80079f0:	40140000 	.word	0x40140000
 80079f4:	3fe00000 	.word	0x3fe00000
 80079f8:	4631      	mov	r1, r6
 80079fa:	4628      	mov	r0, r5
 80079fc:	f7f8 ff44 	bl	8000888 <__aeabi_dmul>
 8007a00:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007a04:	9415      	str	r4, [sp, #84]	@ 0x54
 8007a06:	4656      	mov	r6, sl
 8007a08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a0c:	f7f9 f9ec 	bl	8000de8 <__aeabi_d2iz>
 8007a10:	4605      	mov	r5, r0
 8007a12:	f7f8 fecf 	bl	80007b4 <__aeabi_i2d>
 8007a16:	4602      	mov	r2, r0
 8007a18:	460b      	mov	r3, r1
 8007a1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a1e:	f7f8 fd7b 	bl	8000518 <__aeabi_dsub>
 8007a22:	3530      	adds	r5, #48	@ 0x30
 8007a24:	f806 5b01 	strb.w	r5, [r6], #1
 8007a28:	4602      	mov	r2, r0
 8007a2a:	460b      	mov	r3, r1
 8007a2c:	42a6      	cmp	r6, r4
 8007a2e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007a32:	f04f 0200 	mov.w	r2, #0
 8007a36:	d124      	bne.n	8007a82 <_dtoa_r+0x662>
 8007a38:	4bac      	ldr	r3, [pc, #688]	@ (8007cec <_dtoa_r+0x8cc>)
 8007a3a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007a3e:	f7f8 fd6d 	bl	800051c <__adddf3>
 8007a42:	4602      	mov	r2, r0
 8007a44:	460b      	mov	r3, r1
 8007a46:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a4a:	f7f9 f9ad 	bl	8000da8 <__aeabi_dcmpgt>
 8007a4e:	2800      	cmp	r0, #0
 8007a50:	d145      	bne.n	8007ade <_dtoa_r+0x6be>
 8007a52:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007a56:	49a5      	ldr	r1, [pc, #660]	@ (8007cec <_dtoa_r+0x8cc>)
 8007a58:	2000      	movs	r0, #0
 8007a5a:	f7f8 fd5d 	bl	8000518 <__aeabi_dsub>
 8007a5e:	4602      	mov	r2, r0
 8007a60:	460b      	mov	r3, r1
 8007a62:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007a66:	f7f9 f981 	bl	8000d6c <__aeabi_dcmplt>
 8007a6a:	2800      	cmp	r0, #0
 8007a6c:	f43f aef5 	beq.w	800785a <_dtoa_r+0x43a>
 8007a70:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007a72:	1e73      	subs	r3, r6, #1
 8007a74:	9315      	str	r3, [sp, #84]	@ 0x54
 8007a76:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007a7a:	2b30      	cmp	r3, #48	@ 0x30
 8007a7c:	d0f8      	beq.n	8007a70 <_dtoa_r+0x650>
 8007a7e:	9f04      	ldr	r7, [sp, #16]
 8007a80:	e73e      	b.n	8007900 <_dtoa_r+0x4e0>
 8007a82:	4b9b      	ldr	r3, [pc, #620]	@ (8007cf0 <_dtoa_r+0x8d0>)
 8007a84:	f7f8 ff00 	bl	8000888 <__aeabi_dmul>
 8007a88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007a8c:	e7bc      	b.n	8007a08 <_dtoa_r+0x5e8>
 8007a8e:	d10c      	bne.n	8007aaa <_dtoa_r+0x68a>
 8007a90:	4b98      	ldr	r3, [pc, #608]	@ (8007cf4 <_dtoa_r+0x8d4>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007a98:	f7f8 fef6 	bl	8000888 <__aeabi_dmul>
 8007a9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007aa0:	f7f9 f978 	bl	8000d94 <__aeabi_dcmpge>
 8007aa4:	2800      	cmp	r0, #0
 8007aa6:	f000 8157 	beq.w	8007d58 <_dtoa_r+0x938>
 8007aaa:	2400      	movs	r4, #0
 8007aac:	4625      	mov	r5, r4
 8007aae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ab0:	43db      	mvns	r3, r3
 8007ab2:	9304      	str	r3, [sp, #16]
 8007ab4:	4656      	mov	r6, sl
 8007ab6:	2700      	movs	r7, #0
 8007ab8:	4621      	mov	r1, r4
 8007aba:	4658      	mov	r0, fp
 8007abc:	f000 fbb4 	bl	8008228 <_Bfree>
 8007ac0:	2d00      	cmp	r5, #0
 8007ac2:	d0dc      	beq.n	8007a7e <_dtoa_r+0x65e>
 8007ac4:	b12f      	cbz	r7, 8007ad2 <_dtoa_r+0x6b2>
 8007ac6:	42af      	cmp	r7, r5
 8007ac8:	d003      	beq.n	8007ad2 <_dtoa_r+0x6b2>
 8007aca:	4639      	mov	r1, r7
 8007acc:	4658      	mov	r0, fp
 8007ace:	f000 fbab 	bl	8008228 <_Bfree>
 8007ad2:	4629      	mov	r1, r5
 8007ad4:	4658      	mov	r0, fp
 8007ad6:	f000 fba7 	bl	8008228 <_Bfree>
 8007ada:	e7d0      	b.n	8007a7e <_dtoa_r+0x65e>
 8007adc:	9704      	str	r7, [sp, #16]
 8007ade:	4633      	mov	r3, r6
 8007ae0:	461e      	mov	r6, r3
 8007ae2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007ae6:	2a39      	cmp	r2, #57	@ 0x39
 8007ae8:	d107      	bne.n	8007afa <_dtoa_r+0x6da>
 8007aea:	459a      	cmp	sl, r3
 8007aec:	d1f8      	bne.n	8007ae0 <_dtoa_r+0x6c0>
 8007aee:	9a04      	ldr	r2, [sp, #16]
 8007af0:	3201      	adds	r2, #1
 8007af2:	9204      	str	r2, [sp, #16]
 8007af4:	2230      	movs	r2, #48	@ 0x30
 8007af6:	f88a 2000 	strb.w	r2, [sl]
 8007afa:	781a      	ldrb	r2, [r3, #0]
 8007afc:	3201      	adds	r2, #1
 8007afe:	701a      	strb	r2, [r3, #0]
 8007b00:	e7bd      	b.n	8007a7e <_dtoa_r+0x65e>
 8007b02:	4b7b      	ldr	r3, [pc, #492]	@ (8007cf0 <_dtoa_r+0x8d0>)
 8007b04:	2200      	movs	r2, #0
 8007b06:	f7f8 febf 	bl	8000888 <__aeabi_dmul>
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	4604      	mov	r4, r0
 8007b10:	460d      	mov	r5, r1
 8007b12:	f7f9 f921 	bl	8000d58 <__aeabi_dcmpeq>
 8007b16:	2800      	cmp	r0, #0
 8007b18:	f43f aebb 	beq.w	8007892 <_dtoa_r+0x472>
 8007b1c:	e6f0      	b.n	8007900 <_dtoa_r+0x4e0>
 8007b1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007b20:	2a00      	cmp	r2, #0
 8007b22:	f000 80db 	beq.w	8007cdc <_dtoa_r+0x8bc>
 8007b26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007b28:	2a01      	cmp	r2, #1
 8007b2a:	f300 80bf 	bgt.w	8007cac <_dtoa_r+0x88c>
 8007b2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007b30:	2a00      	cmp	r2, #0
 8007b32:	f000 80b7 	beq.w	8007ca4 <_dtoa_r+0x884>
 8007b36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007b3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007b3c:	4646      	mov	r6, r8
 8007b3e:	9a08      	ldr	r2, [sp, #32]
 8007b40:	2101      	movs	r1, #1
 8007b42:	441a      	add	r2, r3
 8007b44:	4658      	mov	r0, fp
 8007b46:	4498      	add	r8, r3
 8007b48:	9208      	str	r2, [sp, #32]
 8007b4a:	f000 fc21 	bl	8008390 <__i2b>
 8007b4e:	4605      	mov	r5, r0
 8007b50:	b15e      	cbz	r6, 8007b6a <_dtoa_r+0x74a>
 8007b52:	9b08      	ldr	r3, [sp, #32]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	dd08      	ble.n	8007b6a <_dtoa_r+0x74a>
 8007b58:	42b3      	cmp	r3, r6
 8007b5a:	9a08      	ldr	r2, [sp, #32]
 8007b5c:	bfa8      	it	ge
 8007b5e:	4633      	movge	r3, r6
 8007b60:	eba8 0803 	sub.w	r8, r8, r3
 8007b64:	1af6      	subs	r6, r6, r3
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	9308      	str	r3, [sp, #32]
 8007b6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b6c:	b1f3      	cbz	r3, 8007bac <_dtoa_r+0x78c>
 8007b6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007b70:	2b00      	cmp	r3, #0
 8007b72:	f000 80b7 	beq.w	8007ce4 <_dtoa_r+0x8c4>
 8007b76:	b18c      	cbz	r4, 8007b9c <_dtoa_r+0x77c>
 8007b78:	4629      	mov	r1, r5
 8007b7a:	4622      	mov	r2, r4
 8007b7c:	4658      	mov	r0, fp
 8007b7e:	f000 fcc7 	bl	8008510 <__pow5mult>
 8007b82:	464a      	mov	r2, r9
 8007b84:	4601      	mov	r1, r0
 8007b86:	4605      	mov	r5, r0
 8007b88:	4658      	mov	r0, fp
 8007b8a:	f000 fc17 	bl	80083bc <__multiply>
 8007b8e:	4649      	mov	r1, r9
 8007b90:	9004      	str	r0, [sp, #16]
 8007b92:	4658      	mov	r0, fp
 8007b94:	f000 fb48 	bl	8008228 <_Bfree>
 8007b98:	9b04      	ldr	r3, [sp, #16]
 8007b9a:	4699      	mov	r9, r3
 8007b9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b9e:	1b1a      	subs	r2, r3, r4
 8007ba0:	d004      	beq.n	8007bac <_dtoa_r+0x78c>
 8007ba2:	4649      	mov	r1, r9
 8007ba4:	4658      	mov	r0, fp
 8007ba6:	f000 fcb3 	bl	8008510 <__pow5mult>
 8007baa:	4681      	mov	r9, r0
 8007bac:	2101      	movs	r1, #1
 8007bae:	4658      	mov	r0, fp
 8007bb0:	f000 fbee 	bl	8008390 <__i2b>
 8007bb4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bb6:	4604      	mov	r4, r0
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	f000 81cf 	beq.w	8007f5c <_dtoa_r+0xb3c>
 8007bbe:	461a      	mov	r2, r3
 8007bc0:	4601      	mov	r1, r0
 8007bc2:	4658      	mov	r0, fp
 8007bc4:	f000 fca4 	bl	8008510 <__pow5mult>
 8007bc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	4604      	mov	r4, r0
 8007bce:	f300 8095 	bgt.w	8007cfc <_dtoa_r+0x8dc>
 8007bd2:	9b02      	ldr	r3, [sp, #8]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	f040 8087 	bne.w	8007ce8 <_dtoa_r+0x8c8>
 8007bda:	9b03      	ldr	r3, [sp, #12]
 8007bdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	f040 8089 	bne.w	8007cf8 <_dtoa_r+0x8d8>
 8007be6:	9b03      	ldr	r3, [sp, #12]
 8007be8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007bec:	0d1b      	lsrs	r3, r3, #20
 8007bee:	051b      	lsls	r3, r3, #20
 8007bf0:	b12b      	cbz	r3, 8007bfe <_dtoa_r+0x7de>
 8007bf2:	9b08      	ldr	r3, [sp, #32]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	9308      	str	r3, [sp, #32]
 8007bf8:	f108 0801 	add.w	r8, r8, #1
 8007bfc:	2301      	movs	r3, #1
 8007bfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007c00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	f000 81b0 	beq.w	8007f68 <_dtoa_r+0xb48>
 8007c08:	6923      	ldr	r3, [r4, #16]
 8007c0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007c0e:	6918      	ldr	r0, [r3, #16]
 8007c10:	f000 fb72 	bl	80082f8 <__hi0bits>
 8007c14:	f1c0 0020 	rsb	r0, r0, #32
 8007c18:	9b08      	ldr	r3, [sp, #32]
 8007c1a:	4418      	add	r0, r3
 8007c1c:	f010 001f 	ands.w	r0, r0, #31
 8007c20:	d077      	beq.n	8007d12 <_dtoa_r+0x8f2>
 8007c22:	f1c0 0320 	rsb	r3, r0, #32
 8007c26:	2b04      	cmp	r3, #4
 8007c28:	dd6b      	ble.n	8007d02 <_dtoa_r+0x8e2>
 8007c2a:	9b08      	ldr	r3, [sp, #32]
 8007c2c:	f1c0 001c 	rsb	r0, r0, #28
 8007c30:	4403      	add	r3, r0
 8007c32:	4480      	add	r8, r0
 8007c34:	4406      	add	r6, r0
 8007c36:	9308      	str	r3, [sp, #32]
 8007c38:	f1b8 0f00 	cmp.w	r8, #0
 8007c3c:	dd05      	ble.n	8007c4a <_dtoa_r+0x82a>
 8007c3e:	4649      	mov	r1, r9
 8007c40:	4642      	mov	r2, r8
 8007c42:	4658      	mov	r0, fp
 8007c44:	f000 fcbe 	bl	80085c4 <__lshift>
 8007c48:	4681      	mov	r9, r0
 8007c4a:	9b08      	ldr	r3, [sp, #32]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	dd05      	ble.n	8007c5c <_dtoa_r+0x83c>
 8007c50:	4621      	mov	r1, r4
 8007c52:	461a      	mov	r2, r3
 8007c54:	4658      	mov	r0, fp
 8007c56:	f000 fcb5 	bl	80085c4 <__lshift>
 8007c5a:	4604      	mov	r4, r0
 8007c5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d059      	beq.n	8007d16 <_dtoa_r+0x8f6>
 8007c62:	4621      	mov	r1, r4
 8007c64:	4648      	mov	r0, r9
 8007c66:	f000 fd19 	bl	800869c <__mcmp>
 8007c6a:	2800      	cmp	r0, #0
 8007c6c:	da53      	bge.n	8007d16 <_dtoa_r+0x8f6>
 8007c6e:	1e7b      	subs	r3, r7, #1
 8007c70:	9304      	str	r3, [sp, #16]
 8007c72:	4649      	mov	r1, r9
 8007c74:	2300      	movs	r3, #0
 8007c76:	220a      	movs	r2, #10
 8007c78:	4658      	mov	r0, fp
 8007c7a:	f000 faf7 	bl	800826c <__multadd>
 8007c7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007c80:	4681      	mov	r9, r0
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	f000 8172 	beq.w	8007f6c <_dtoa_r+0xb4c>
 8007c88:	2300      	movs	r3, #0
 8007c8a:	4629      	mov	r1, r5
 8007c8c:	220a      	movs	r2, #10
 8007c8e:	4658      	mov	r0, fp
 8007c90:	f000 faec 	bl	800826c <__multadd>
 8007c94:	9b00      	ldr	r3, [sp, #0]
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	4605      	mov	r5, r0
 8007c9a:	dc67      	bgt.n	8007d6c <_dtoa_r+0x94c>
 8007c9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c9e:	2b02      	cmp	r3, #2
 8007ca0:	dc41      	bgt.n	8007d26 <_dtoa_r+0x906>
 8007ca2:	e063      	b.n	8007d6c <_dtoa_r+0x94c>
 8007ca4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007ca6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007caa:	e746      	b.n	8007b3a <_dtoa_r+0x71a>
 8007cac:	9b07      	ldr	r3, [sp, #28]
 8007cae:	1e5c      	subs	r4, r3, #1
 8007cb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007cb2:	42a3      	cmp	r3, r4
 8007cb4:	bfbf      	itttt	lt
 8007cb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007cb8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8007cba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8007cbc:	1ae3      	sublt	r3, r4, r3
 8007cbe:	bfb4      	ite	lt
 8007cc0:	18d2      	addlt	r2, r2, r3
 8007cc2:	1b1c      	subge	r4, r3, r4
 8007cc4:	9b07      	ldr	r3, [sp, #28]
 8007cc6:	bfbc      	itt	lt
 8007cc8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8007cca:	2400      	movlt	r4, #0
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	bfb5      	itete	lt
 8007cd0:	eba8 0603 	sublt.w	r6, r8, r3
 8007cd4:	9b07      	ldrge	r3, [sp, #28]
 8007cd6:	2300      	movlt	r3, #0
 8007cd8:	4646      	movge	r6, r8
 8007cda:	e730      	b.n	8007b3e <_dtoa_r+0x71e>
 8007cdc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8007cde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007ce0:	4646      	mov	r6, r8
 8007ce2:	e735      	b.n	8007b50 <_dtoa_r+0x730>
 8007ce4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ce6:	e75c      	b.n	8007ba2 <_dtoa_r+0x782>
 8007ce8:	2300      	movs	r3, #0
 8007cea:	e788      	b.n	8007bfe <_dtoa_r+0x7de>
 8007cec:	3fe00000 	.word	0x3fe00000
 8007cf0:	40240000 	.word	0x40240000
 8007cf4:	40140000 	.word	0x40140000
 8007cf8:	9b02      	ldr	r3, [sp, #8]
 8007cfa:	e780      	b.n	8007bfe <_dtoa_r+0x7de>
 8007cfc:	2300      	movs	r3, #0
 8007cfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8007d00:	e782      	b.n	8007c08 <_dtoa_r+0x7e8>
 8007d02:	d099      	beq.n	8007c38 <_dtoa_r+0x818>
 8007d04:	9a08      	ldr	r2, [sp, #32]
 8007d06:	331c      	adds	r3, #28
 8007d08:	441a      	add	r2, r3
 8007d0a:	4498      	add	r8, r3
 8007d0c:	441e      	add	r6, r3
 8007d0e:	9208      	str	r2, [sp, #32]
 8007d10:	e792      	b.n	8007c38 <_dtoa_r+0x818>
 8007d12:	4603      	mov	r3, r0
 8007d14:	e7f6      	b.n	8007d04 <_dtoa_r+0x8e4>
 8007d16:	9b07      	ldr	r3, [sp, #28]
 8007d18:	9704      	str	r7, [sp, #16]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	dc20      	bgt.n	8007d60 <_dtoa_r+0x940>
 8007d1e:	9300      	str	r3, [sp, #0]
 8007d20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d22:	2b02      	cmp	r3, #2
 8007d24:	dd1e      	ble.n	8007d64 <_dtoa_r+0x944>
 8007d26:	9b00      	ldr	r3, [sp, #0]
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	f47f aec0 	bne.w	8007aae <_dtoa_r+0x68e>
 8007d2e:	4621      	mov	r1, r4
 8007d30:	2205      	movs	r2, #5
 8007d32:	4658      	mov	r0, fp
 8007d34:	f000 fa9a 	bl	800826c <__multadd>
 8007d38:	4601      	mov	r1, r0
 8007d3a:	4604      	mov	r4, r0
 8007d3c:	4648      	mov	r0, r9
 8007d3e:	f000 fcad 	bl	800869c <__mcmp>
 8007d42:	2800      	cmp	r0, #0
 8007d44:	f77f aeb3 	ble.w	8007aae <_dtoa_r+0x68e>
 8007d48:	4656      	mov	r6, sl
 8007d4a:	2331      	movs	r3, #49	@ 0x31
 8007d4c:	f806 3b01 	strb.w	r3, [r6], #1
 8007d50:	9b04      	ldr	r3, [sp, #16]
 8007d52:	3301      	adds	r3, #1
 8007d54:	9304      	str	r3, [sp, #16]
 8007d56:	e6ae      	b.n	8007ab6 <_dtoa_r+0x696>
 8007d58:	9c07      	ldr	r4, [sp, #28]
 8007d5a:	9704      	str	r7, [sp, #16]
 8007d5c:	4625      	mov	r5, r4
 8007d5e:	e7f3      	b.n	8007d48 <_dtoa_r+0x928>
 8007d60:	9b07      	ldr	r3, [sp, #28]
 8007d62:	9300      	str	r3, [sp, #0]
 8007d64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 8104 	beq.w	8007f74 <_dtoa_r+0xb54>
 8007d6c:	2e00      	cmp	r6, #0
 8007d6e:	dd05      	ble.n	8007d7c <_dtoa_r+0x95c>
 8007d70:	4629      	mov	r1, r5
 8007d72:	4632      	mov	r2, r6
 8007d74:	4658      	mov	r0, fp
 8007d76:	f000 fc25 	bl	80085c4 <__lshift>
 8007d7a:	4605      	mov	r5, r0
 8007d7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d05a      	beq.n	8007e38 <_dtoa_r+0xa18>
 8007d82:	6869      	ldr	r1, [r5, #4]
 8007d84:	4658      	mov	r0, fp
 8007d86:	f000 fa0f 	bl	80081a8 <_Balloc>
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	b928      	cbnz	r0, 8007d9a <_dtoa_r+0x97a>
 8007d8e:	4b84      	ldr	r3, [pc, #528]	@ (8007fa0 <_dtoa_r+0xb80>)
 8007d90:	4602      	mov	r2, r0
 8007d92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007d96:	f7ff bb5a 	b.w	800744e <_dtoa_r+0x2e>
 8007d9a:	692a      	ldr	r2, [r5, #16]
 8007d9c:	3202      	adds	r2, #2
 8007d9e:	0092      	lsls	r2, r2, #2
 8007da0:	f105 010c 	add.w	r1, r5, #12
 8007da4:	300c      	adds	r0, #12
 8007da6:	f000 fe3d 	bl	8008a24 <memcpy>
 8007daa:	2201      	movs	r2, #1
 8007dac:	4631      	mov	r1, r6
 8007dae:	4658      	mov	r0, fp
 8007db0:	f000 fc08 	bl	80085c4 <__lshift>
 8007db4:	f10a 0301 	add.w	r3, sl, #1
 8007db8:	9307      	str	r3, [sp, #28]
 8007dba:	9b00      	ldr	r3, [sp, #0]
 8007dbc:	4453      	add	r3, sl
 8007dbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007dc0:	9b02      	ldr	r3, [sp, #8]
 8007dc2:	f003 0301 	and.w	r3, r3, #1
 8007dc6:	462f      	mov	r7, r5
 8007dc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8007dca:	4605      	mov	r5, r0
 8007dcc:	9b07      	ldr	r3, [sp, #28]
 8007dce:	4621      	mov	r1, r4
 8007dd0:	3b01      	subs	r3, #1
 8007dd2:	4648      	mov	r0, r9
 8007dd4:	9300      	str	r3, [sp, #0]
 8007dd6:	f7ff fa98 	bl	800730a <quorem>
 8007dda:	4639      	mov	r1, r7
 8007ddc:	9002      	str	r0, [sp, #8]
 8007dde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007de2:	4648      	mov	r0, r9
 8007de4:	f000 fc5a 	bl	800869c <__mcmp>
 8007de8:	462a      	mov	r2, r5
 8007dea:	9008      	str	r0, [sp, #32]
 8007dec:	4621      	mov	r1, r4
 8007dee:	4658      	mov	r0, fp
 8007df0:	f000 fc70 	bl	80086d4 <__mdiff>
 8007df4:	68c2      	ldr	r2, [r0, #12]
 8007df6:	4606      	mov	r6, r0
 8007df8:	bb02      	cbnz	r2, 8007e3c <_dtoa_r+0xa1c>
 8007dfa:	4601      	mov	r1, r0
 8007dfc:	4648      	mov	r0, r9
 8007dfe:	f000 fc4d 	bl	800869c <__mcmp>
 8007e02:	4602      	mov	r2, r0
 8007e04:	4631      	mov	r1, r6
 8007e06:	4658      	mov	r0, fp
 8007e08:	920e      	str	r2, [sp, #56]	@ 0x38
 8007e0a:	f000 fa0d 	bl	8008228 <_Bfree>
 8007e0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007e12:	9e07      	ldr	r6, [sp, #28]
 8007e14:	ea43 0102 	orr.w	r1, r3, r2
 8007e18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e1a:	4319      	orrs	r1, r3
 8007e1c:	d110      	bne.n	8007e40 <_dtoa_r+0xa20>
 8007e1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e22:	d029      	beq.n	8007e78 <_dtoa_r+0xa58>
 8007e24:	9b08      	ldr	r3, [sp, #32]
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	dd02      	ble.n	8007e30 <_dtoa_r+0xa10>
 8007e2a:	9b02      	ldr	r3, [sp, #8]
 8007e2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007e30:	9b00      	ldr	r3, [sp, #0]
 8007e32:	f883 8000 	strb.w	r8, [r3]
 8007e36:	e63f      	b.n	8007ab8 <_dtoa_r+0x698>
 8007e38:	4628      	mov	r0, r5
 8007e3a:	e7bb      	b.n	8007db4 <_dtoa_r+0x994>
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	e7e1      	b.n	8007e04 <_dtoa_r+0x9e4>
 8007e40:	9b08      	ldr	r3, [sp, #32]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	db04      	blt.n	8007e50 <_dtoa_r+0xa30>
 8007e46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007e48:	430b      	orrs	r3, r1
 8007e4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007e4c:	430b      	orrs	r3, r1
 8007e4e:	d120      	bne.n	8007e92 <_dtoa_r+0xa72>
 8007e50:	2a00      	cmp	r2, #0
 8007e52:	dded      	ble.n	8007e30 <_dtoa_r+0xa10>
 8007e54:	4649      	mov	r1, r9
 8007e56:	2201      	movs	r2, #1
 8007e58:	4658      	mov	r0, fp
 8007e5a:	f000 fbb3 	bl	80085c4 <__lshift>
 8007e5e:	4621      	mov	r1, r4
 8007e60:	4681      	mov	r9, r0
 8007e62:	f000 fc1b 	bl	800869c <__mcmp>
 8007e66:	2800      	cmp	r0, #0
 8007e68:	dc03      	bgt.n	8007e72 <_dtoa_r+0xa52>
 8007e6a:	d1e1      	bne.n	8007e30 <_dtoa_r+0xa10>
 8007e6c:	f018 0f01 	tst.w	r8, #1
 8007e70:	d0de      	beq.n	8007e30 <_dtoa_r+0xa10>
 8007e72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e76:	d1d8      	bne.n	8007e2a <_dtoa_r+0xa0a>
 8007e78:	9a00      	ldr	r2, [sp, #0]
 8007e7a:	2339      	movs	r3, #57	@ 0x39
 8007e7c:	7013      	strb	r3, [r2, #0]
 8007e7e:	4633      	mov	r3, r6
 8007e80:	461e      	mov	r6, r3
 8007e82:	3b01      	subs	r3, #1
 8007e84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007e88:	2a39      	cmp	r2, #57	@ 0x39
 8007e8a:	d052      	beq.n	8007f32 <_dtoa_r+0xb12>
 8007e8c:	3201      	adds	r2, #1
 8007e8e:	701a      	strb	r2, [r3, #0]
 8007e90:	e612      	b.n	8007ab8 <_dtoa_r+0x698>
 8007e92:	2a00      	cmp	r2, #0
 8007e94:	dd07      	ble.n	8007ea6 <_dtoa_r+0xa86>
 8007e96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007e9a:	d0ed      	beq.n	8007e78 <_dtoa_r+0xa58>
 8007e9c:	9a00      	ldr	r2, [sp, #0]
 8007e9e:	f108 0301 	add.w	r3, r8, #1
 8007ea2:	7013      	strb	r3, [r2, #0]
 8007ea4:	e608      	b.n	8007ab8 <_dtoa_r+0x698>
 8007ea6:	9b07      	ldr	r3, [sp, #28]
 8007ea8:	9a07      	ldr	r2, [sp, #28]
 8007eaa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8007eae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007eb0:	4293      	cmp	r3, r2
 8007eb2:	d028      	beq.n	8007f06 <_dtoa_r+0xae6>
 8007eb4:	4649      	mov	r1, r9
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	220a      	movs	r2, #10
 8007eba:	4658      	mov	r0, fp
 8007ebc:	f000 f9d6 	bl	800826c <__multadd>
 8007ec0:	42af      	cmp	r7, r5
 8007ec2:	4681      	mov	r9, r0
 8007ec4:	f04f 0300 	mov.w	r3, #0
 8007ec8:	f04f 020a 	mov.w	r2, #10
 8007ecc:	4639      	mov	r1, r7
 8007ece:	4658      	mov	r0, fp
 8007ed0:	d107      	bne.n	8007ee2 <_dtoa_r+0xac2>
 8007ed2:	f000 f9cb 	bl	800826c <__multadd>
 8007ed6:	4607      	mov	r7, r0
 8007ed8:	4605      	mov	r5, r0
 8007eda:	9b07      	ldr	r3, [sp, #28]
 8007edc:	3301      	adds	r3, #1
 8007ede:	9307      	str	r3, [sp, #28]
 8007ee0:	e774      	b.n	8007dcc <_dtoa_r+0x9ac>
 8007ee2:	f000 f9c3 	bl	800826c <__multadd>
 8007ee6:	4629      	mov	r1, r5
 8007ee8:	4607      	mov	r7, r0
 8007eea:	2300      	movs	r3, #0
 8007eec:	220a      	movs	r2, #10
 8007eee:	4658      	mov	r0, fp
 8007ef0:	f000 f9bc 	bl	800826c <__multadd>
 8007ef4:	4605      	mov	r5, r0
 8007ef6:	e7f0      	b.n	8007eda <_dtoa_r+0xaba>
 8007ef8:	9b00      	ldr	r3, [sp, #0]
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	bfcc      	ite	gt
 8007efe:	461e      	movgt	r6, r3
 8007f00:	2601      	movle	r6, #1
 8007f02:	4456      	add	r6, sl
 8007f04:	2700      	movs	r7, #0
 8007f06:	4649      	mov	r1, r9
 8007f08:	2201      	movs	r2, #1
 8007f0a:	4658      	mov	r0, fp
 8007f0c:	f000 fb5a 	bl	80085c4 <__lshift>
 8007f10:	4621      	mov	r1, r4
 8007f12:	4681      	mov	r9, r0
 8007f14:	f000 fbc2 	bl	800869c <__mcmp>
 8007f18:	2800      	cmp	r0, #0
 8007f1a:	dcb0      	bgt.n	8007e7e <_dtoa_r+0xa5e>
 8007f1c:	d102      	bne.n	8007f24 <_dtoa_r+0xb04>
 8007f1e:	f018 0f01 	tst.w	r8, #1
 8007f22:	d1ac      	bne.n	8007e7e <_dtoa_r+0xa5e>
 8007f24:	4633      	mov	r3, r6
 8007f26:	461e      	mov	r6, r3
 8007f28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f2c:	2a30      	cmp	r2, #48	@ 0x30
 8007f2e:	d0fa      	beq.n	8007f26 <_dtoa_r+0xb06>
 8007f30:	e5c2      	b.n	8007ab8 <_dtoa_r+0x698>
 8007f32:	459a      	cmp	sl, r3
 8007f34:	d1a4      	bne.n	8007e80 <_dtoa_r+0xa60>
 8007f36:	9b04      	ldr	r3, [sp, #16]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	9304      	str	r3, [sp, #16]
 8007f3c:	2331      	movs	r3, #49	@ 0x31
 8007f3e:	f88a 3000 	strb.w	r3, [sl]
 8007f42:	e5b9      	b.n	8007ab8 <_dtoa_r+0x698>
 8007f44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007f46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007fa4 <_dtoa_r+0xb84>
 8007f4a:	b11b      	cbz	r3, 8007f54 <_dtoa_r+0xb34>
 8007f4c:	f10a 0308 	add.w	r3, sl, #8
 8007f50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007f52:	6013      	str	r3, [r2, #0]
 8007f54:	4650      	mov	r0, sl
 8007f56:	b019      	add	sp, #100	@ 0x64
 8007f58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f5e:	2b01      	cmp	r3, #1
 8007f60:	f77f ae37 	ble.w	8007bd2 <_dtoa_r+0x7b2>
 8007f64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f66:	930a      	str	r3, [sp, #40]	@ 0x28
 8007f68:	2001      	movs	r0, #1
 8007f6a:	e655      	b.n	8007c18 <_dtoa_r+0x7f8>
 8007f6c:	9b00      	ldr	r3, [sp, #0]
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	f77f aed6 	ble.w	8007d20 <_dtoa_r+0x900>
 8007f74:	4656      	mov	r6, sl
 8007f76:	4621      	mov	r1, r4
 8007f78:	4648      	mov	r0, r9
 8007f7a:	f7ff f9c6 	bl	800730a <quorem>
 8007f7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007f82:	f806 8b01 	strb.w	r8, [r6], #1
 8007f86:	9b00      	ldr	r3, [sp, #0]
 8007f88:	eba6 020a 	sub.w	r2, r6, sl
 8007f8c:	4293      	cmp	r3, r2
 8007f8e:	ddb3      	ble.n	8007ef8 <_dtoa_r+0xad8>
 8007f90:	4649      	mov	r1, r9
 8007f92:	2300      	movs	r3, #0
 8007f94:	220a      	movs	r2, #10
 8007f96:	4658      	mov	r0, fp
 8007f98:	f000 f968 	bl	800826c <__multadd>
 8007f9c:	4681      	mov	r9, r0
 8007f9e:	e7ea      	b.n	8007f76 <_dtoa_r+0xb56>
 8007fa0:	080091b0 	.word	0x080091b0
 8007fa4:	08009134 	.word	0x08009134

08007fa8 <_free_r>:
 8007fa8:	b538      	push	{r3, r4, r5, lr}
 8007faa:	4605      	mov	r5, r0
 8007fac:	2900      	cmp	r1, #0
 8007fae:	d041      	beq.n	8008034 <_free_r+0x8c>
 8007fb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007fb4:	1f0c      	subs	r4, r1, #4
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	bfb8      	it	lt
 8007fba:	18e4      	addlt	r4, r4, r3
 8007fbc:	f000 f8e8 	bl	8008190 <__malloc_lock>
 8007fc0:	4a1d      	ldr	r2, [pc, #116]	@ (8008038 <_free_r+0x90>)
 8007fc2:	6813      	ldr	r3, [r2, #0]
 8007fc4:	b933      	cbnz	r3, 8007fd4 <_free_r+0x2c>
 8007fc6:	6063      	str	r3, [r4, #4]
 8007fc8:	6014      	str	r4, [r2, #0]
 8007fca:	4628      	mov	r0, r5
 8007fcc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007fd0:	f000 b8e4 	b.w	800819c <__malloc_unlock>
 8007fd4:	42a3      	cmp	r3, r4
 8007fd6:	d908      	bls.n	8007fea <_free_r+0x42>
 8007fd8:	6820      	ldr	r0, [r4, #0]
 8007fda:	1821      	adds	r1, r4, r0
 8007fdc:	428b      	cmp	r3, r1
 8007fde:	bf01      	itttt	eq
 8007fe0:	6819      	ldreq	r1, [r3, #0]
 8007fe2:	685b      	ldreq	r3, [r3, #4]
 8007fe4:	1809      	addeq	r1, r1, r0
 8007fe6:	6021      	streq	r1, [r4, #0]
 8007fe8:	e7ed      	b.n	8007fc6 <_free_r+0x1e>
 8007fea:	461a      	mov	r2, r3
 8007fec:	685b      	ldr	r3, [r3, #4]
 8007fee:	b10b      	cbz	r3, 8007ff4 <_free_r+0x4c>
 8007ff0:	42a3      	cmp	r3, r4
 8007ff2:	d9fa      	bls.n	8007fea <_free_r+0x42>
 8007ff4:	6811      	ldr	r1, [r2, #0]
 8007ff6:	1850      	adds	r0, r2, r1
 8007ff8:	42a0      	cmp	r0, r4
 8007ffa:	d10b      	bne.n	8008014 <_free_r+0x6c>
 8007ffc:	6820      	ldr	r0, [r4, #0]
 8007ffe:	4401      	add	r1, r0
 8008000:	1850      	adds	r0, r2, r1
 8008002:	4283      	cmp	r3, r0
 8008004:	6011      	str	r1, [r2, #0]
 8008006:	d1e0      	bne.n	8007fca <_free_r+0x22>
 8008008:	6818      	ldr	r0, [r3, #0]
 800800a:	685b      	ldr	r3, [r3, #4]
 800800c:	6053      	str	r3, [r2, #4]
 800800e:	4408      	add	r0, r1
 8008010:	6010      	str	r0, [r2, #0]
 8008012:	e7da      	b.n	8007fca <_free_r+0x22>
 8008014:	d902      	bls.n	800801c <_free_r+0x74>
 8008016:	230c      	movs	r3, #12
 8008018:	602b      	str	r3, [r5, #0]
 800801a:	e7d6      	b.n	8007fca <_free_r+0x22>
 800801c:	6820      	ldr	r0, [r4, #0]
 800801e:	1821      	adds	r1, r4, r0
 8008020:	428b      	cmp	r3, r1
 8008022:	bf04      	itt	eq
 8008024:	6819      	ldreq	r1, [r3, #0]
 8008026:	685b      	ldreq	r3, [r3, #4]
 8008028:	6063      	str	r3, [r4, #4]
 800802a:	bf04      	itt	eq
 800802c:	1809      	addeq	r1, r1, r0
 800802e:	6021      	streq	r1, [r4, #0]
 8008030:	6054      	str	r4, [r2, #4]
 8008032:	e7ca      	b.n	8007fca <_free_r+0x22>
 8008034:	bd38      	pop	{r3, r4, r5, pc}
 8008036:	bf00      	nop
 8008038:	20001914 	.word	0x20001914

0800803c <malloc>:
 800803c:	4b02      	ldr	r3, [pc, #8]	@ (8008048 <malloc+0xc>)
 800803e:	4601      	mov	r1, r0
 8008040:	6818      	ldr	r0, [r3, #0]
 8008042:	f000 b825 	b.w	8008090 <_malloc_r>
 8008046:	bf00      	nop
 8008048:	2000001c 	.word	0x2000001c

0800804c <sbrk_aligned>:
 800804c:	b570      	push	{r4, r5, r6, lr}
 800804e:	4e0f      	ldr	r6, [pc, #60]	@ (800808c <sbrk_aligned+0x40>)
 8008050:	460c      	mov	r4, r1
 8008052:	6831      	ldr	r1, [r6, #0]
 8008054:	4605      	mov	r5, r0
 8008056:	b911      	cbnz	r1, 800805e <sbrk_aligned+0x12>
 8008058:	f000 fcd4 	bl	8008a04 <_sbrk_r>
 800805c:	6030      	str	r0, [r6, #0]
 800805e:	4621      	mov	r1, r4
 8008060:	4628      	mov	r0, r5
 8008062:	f000 fccf 	bl	8008a04 <_sbrk_r>
 8008066:	1c43      	adds	r3, r0, #1
 8008068:	d103      	bne.n	8008072 <sbrk_aligned+0x26>
 800806a:	f04f 34ff 	mov.w	r4, #4294967295
 800806e:	4620      	mov	r0, r4
 8008070:	bd70      	pop	{r4, r5, r6, pc}
 8008072:	1cc4      	adds	r4, r0, #3
 8008074:	f024 0403 	bic.w	r4, r4, #3
 8008078:	42a0      	cmp	r0, r4
 800807a:	d0f8      	beq.n	800806e <sbrk_aligned+0x22>
 800807c:	1a21      	subs	r1, r4, r0
 800807e:	4628      	mov	r0, r5
 8008080:	f000 fcc0 	bl	8008a04 <_sbrk_r>
 8008084:	3001      	adds	r0, #1
 8008086:	d1f2      	bne.n	800806e <sbrk_aligned+0x22>
 8008088:	e7ef      	b.n	800806a <sbrk_aligned+0x1e>
 800808a:	bf00      	nop
 800808c:	20001910 	.word	0x20001910

08008090 <_malloc_r>:
 8008090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008094:	1ccd      	adds	r5, r1, #3
 8008096:	f025 0503 	bic.w	r5, r5, #3
 800809a:	3508      	adds	r5, #8
 800809c:	2d0c      	cmp	r5, #12
 800809e:	bf38      	it	cc
 80080a0:	250c      	movcc	r5, #12
 80080a2:	2d00      	cmp	r5, #0
 80080a4:	4606      	mov	r6, r0
 80080a6:	db01      	blt.n	80080ac <_malloc_r+0x1c>
 80080a8:	42a9      	cmp	r1, r5
 80080aa:	d904      	bls.n	80080b6 <_malloc_r+0x26>
 80080ac:	230c      	movs	r3, #12
 80080ae:	6033      	str	r3, [r6, #0]
 80080b0:	2000      	movs	r0, #0
 80080b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800818c <_malloc_r+0xfc>
 80080ba:	f000 f869 	bl	8008190 <__malloc_lock>
 80080be:	f8d8 3000 	ldr.w	r3, [r8]
 80080c2:	461c      	mov	r4, r3
 80080c4:	bb44      	cbnz	r4, 8008118 <_malloc_r+0x88>
 80080c6:	4629      	mov	r1, r5
 80080c8:	4630      	mov	r0, r6
 80080ca:	f7ff ffbf 	bl	800804c <sbrk_aligned>
 80080ce:	1c43      	adds	r3, r0, #1
 80080d0:	4604      	mov	r4, r0
 80080d2:	d158      	bne.n	8008186 <_malloc_r+0xf6>
 80080d4:	f8d8 4000 	ldr.w	r4, [r8]
 80080d8:	4627      	mov	r7, r4
 80080da:	2f00      	cmp	r7, #0
 80080dc:	d143      	bne.n	8008166 <_malloc_r+0xd6>
 80080de:	2c00      	cmp	r4, #0
 80080e0:	d04b      	beq.n	800817a <_malloc_r+0xea>
 80080e2:	6823      	ldr	r3, [r4, #0]
 80080e4:	4639      	mov	r1, r7
 80080e6:	4630      	mov	r0, r6
 80080e8:	eb04 0903 	add.w	r9, r4, r3
 80080ec:	f000 fc8a 	bl	8008a04 <_sbrk_r>
 80080f0:	4581      	cmp	r9, r0
 80080f2:	d142      	bne.n	800817a <_malloc_r+0xea>
 80080f4:	6821      	ldr	r1, [r4, #0]
 80080f6:	1a6d      	subs	r5, r5, r1
 80080f8:	4629      	mov	r1, r5
 80080fa:	4630      	mov	r0, r6
 80080fc:	f7ff ffa6 	bl	800804c <sbrk_aligned>
 8008100:	3001      	adds	r0, #1
 8008102:	d03a      	beq.n	800817a <_malloc_r+0xea>
 8008104:	6823      	ldr	r3, [r4, #0]
 8008106:	442b      	add	r3, r5
 8008108:	6023      	str	r3, [r4, #0]
 800810a:	f8d8 3000 	ldr.w	r3, [r8]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	bb62      	cbnz	r2, 800816c <_malloc_r+0xdc>
 8008112:	f8c8 7000 	str.w	r7, [r8]
 8008116:	e00f      	b.n	8008138 <_malloc_r+0xa8>
 8008118:	6822      	ldr	r2, [r4, #0]
 800811a:	1b52      	subs	r2, r2, r5
 800811c:	d420      	bmi.n	8008160 <_malloc_r+0xd0>
 800811e:	2a0b      	cmp	r2, #11
 8008120:	d917      	bls.n	8008152 <_malloc_r+0xc2>
 8008122:	1961      	adds	r1, r4, r5
 8008124:	42a3      	cmp	r3, r4
 8008126:	6025      	str	r5, [r4, #0]
 8008128:	bf18      	it	ne
 800812a:	6059      	strne	r1, [r3, #4]
 800812c:	6863      	ldr	r3, [r4, #4]
 800812e:	bf08      	it	eq
 8008130:	f8c8 1000 	streq.w	r1, [r8]
 8008134:	5162      	str	r2, [r4, r5]
 8008136:	604b      	str	r3, [r1, #4]
 8008138:	4630      	mov	r0, r6
 800813a:	f000 f82f 	bl	800819c <__malloc_unlock>
 800813e:	f104 000b 	add.w	r0, r4, #11
 8008142:	1d23      	adds	r3, r4, #4
 8008144:	f020 0007 	bic.w	r0, r0, #7
 8008148:	1ac2      	subs	r2, r0, r3
 800814a:	bf1c      	itt	ne
 800814c:	1a1b      	subne	r3, r3, r0
 800814e:	50a3      	strne	r3, [r4, r2]
 8008150:	e7af      	b.n	80080b2 <_malloc_r+0x22>
 8008152:	6862      	ldr	r2, [r4, #4]
 8008154:	42a3      	cmp	r3, r4
 8008156:	bf0c      	ite	eq
 8008158:	f8c8 2000 	streq.w	r2, [r8]
 800815c:	605a      	strne	r2, [r3, #4]
 800815e:	e7eb      	b.n	8008138 <_malloc_r+0xa8>
 8008160:	4623      	mov	r3, r4
 8008162:	6864      	ldr	r4, [r4, #4]
 8008164:	e7ae      	b.n	80080c4 <_malloc_r+0x34>
 8008166:	463c      	mov	r4, r7
 8008168:	687f      	ldr	r7, [r7, #4]
 800816a:	e7b6      	b.n	80080da <_malloc_r+0x4a>
 800816c:	461a      	mov	r2, r3
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	42a3      	cmp	r3, r4
 8008172:	d1fb      	bne.n	800816c <_malloc_r+0xdc>
 8008174:	2300      	movs	r3, #0
 8008176:	6053      	str	r3, [r2, #4]
 8008178:	e7de      	b.n	8008138 <_malloc_r+0xa8>
 800817a:	230c      	movs	r3, #12
 800817c:	6033      	str	r3, [r6, #0]
 800817e:	4630      	mov	r0, r6
 8008180:	f000 f80c 	bl	800819c <__malloc_unlock>
 8008184:	e794      	b.n	80080b0 <_malloc_r+0x20>
 8008186:	6005      	str	r5, [r0, #0]
 8008188:	e7d6      	b.n	8008138 <_malloc_r+0xa8>
 800818a:	bf00      	nop
 800818c:	20001914 	.word	0x20001914

08008190 <__malloc_lock>:
 8008190:	4801      	ldr	r0, [pc, #4]	@ (8008198 <__malloc_lock+0x8>)
 8008192:	f7ff b8b8 	b.w	8007306 <__retarget_lock_acquire_recursive>
 8008196:	bf00      	nop
 8008198:	2000190c 	.word	0x2000190c

0800819c <__malloc_unlock>:
 800819c:	4801      	ldr	r0, [pc, #4]	@ (80081a4 <__malloc_unlock+0x8>)
 800819e:	f7ff b8b3 	b.w	8007308 <__retarget_lock_release_recursive>
 80081a2:	bf00      	nop
 80081a4:	2000190c 	.word	0x2000190c

080081a8 <_Balloc>:
 80081a8:	b570      	push	{r4, r5, r6, lr}
 80081aa:	69c6      	ldr	r6, [r0, #28]
 80081ac:	4604      	mov	r4, r0
 80081ae:	460d      	mov	r5, r1
 80081b0:	b976      	cbnz	r6, 80081d0 <_Balloc+0x28>
 80081b2:	2010      	movs	r0, #16
 80081b4:	f7ff ff42 	bl	800803c <malloc>
 80081b8:	4602      	mov	r2, r0
 80081ba:	61e0      	str	r0, [r4, #28]
 80081bc:	b920      	cbnz	r0, 80081c8 <_Balloc+0x20>
 80081be:	4b18      	ldr	r3, [pc, #96]	@ (8008220 <_Balloc+0x78>)
 80081c0:	4818      	ldr	r0, [pc, #96]	@ (8008224 <_Balloc+0x7c>)
 80081c2:	216b      	movs	r1, #107	@ 0x6b
 80081c4:	f000 fc3c 	bl	8008a40 <__assert_func>
 80081c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80081cc:	6006      	str	r6, [r0, #0]
 80081ce:	60c6      	str	r6, [r0, #12]
 80081d0:	69e6      	ldr	r6, [r4, #28]
 80081d2:	68f3      	ldr	r3, [r6, #12]
 80081d4:	b183      	cbz	r3, 80081f8 <_Balloc+0x50>
 80081d6:	69e3      	ldr	r3, [r4, #28]
 80081d8:	68db      	ldr	r3, [r3, #12]
 80081da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80081de:	b9b8      	cbnz	r0, 8008210 <_Balloc+0x68>
 80081e0:	2101      	movs	r1, #1
 80081e2:	fa01 f605 	lsl.w	r6, r1, r5
 80081e6:	1d72      	adds	r2, r6, #5
 80081e8:	0092      	lsls	r2, r2, #2
 80081ea:	4620      	mov	r0, r4
 80081ec:	f000 fc46 	bl	8008a7c <_calloc_r>
 80081f0:	b160      	cbz	r0, 800820c <_Balloc+0x64>
 80081f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80081f6:	e00e      	b.n	8008216 <_Balloc+0x6e>
 80081f8:	2221      	movs	r2, #33	@ 0x21
 80081fa:	2104      	movs	r1, #4
 80081fc:	4620      	mov	r0, r4
 80081fe:	f000 fc3d 	bl	8008a7c <_calloc_r>
 8008202:	69e3      	ldr	r3, [r4, #28]
 8008204:	60f0      	str	r0, [r6, #12]
 8008206:	68db      	ldr	r3, [r3, #12]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d1e4      	bne.n	80081d6 <_Balloc+0x2e>
 800820c:	2000      	movs	r0, #0
 800820e:	bd70      	pop	{r4, r5, r6, pc}
 8008210:	6802      	ldr	r2, [r0, #0]
 8008212:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008216:	2300      	movs	r3, #0
 8008218:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800821c:	e7f7      	b.n	800820e <_Balloc+0x66>
 800821e:	bf00      	nop
 8008220:	08009141 	.word	0x08009141
 8008224:	080091c1 	.word	0x080091c1

08008228 <_Bfree>:
 8008228:	b570      	push	{r4, r5, r6, lr}
 800822a:	69c6      	ldr	r6, [r0, #28]
 800822c:	4605      	mov	r5, r0
 800822e:	460c      	mov	r4, r1
 8008230:	b976      	cbnz	r6, 8008250 <_Bfree+0x28>
 8008232:	2010      	movs	r0, #16
 8008234:	f7ff ff02 	bl	800803c <malloc>
 8008238:	4602      	mov	r2, r0
 800823a:	61e8      	str	r0, [r5, #28]
 800823c:	b920      	cbnz	r0, 8008248 <_Bfree+0x20>
 800823e:	4b09      	ldr	r3, [pc, #36]	@ (8008264 <_Bfree+0x3c>)
 8008240:	4809      	ldr	r0, [pc, #36]	@ (8008268 <_Bfree+0x40>)
 8008242:	218f      	movs	r1, #143	@ 0x8f
 8008244:	f000 fbfc 	bl	8008a40 <__assert_func>
 8008248:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800824c:	6006      	str	r6, [r0, #0]
 800824e:	60c6      	str	r6, [r0, #12]
 8008250:	b13c      	cbz	r4, 8008262 <_Bfree+0x3a>
 8008252:	69eb      	ldr	r3, [r5, #28]
 8008254:	6862      	ldr	r2, [r4, #4]
 8008256:	68db      	ldr	r3, [r3, #12]
 8008258:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800825c:	6021      	str	r1, [r4, #0]
 800825e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008262:	bd70      	pop	{r4, r5, r6, pc}
 8008264:	08009141 	.word	0x08009141
 8008268:	080091c1 	.word	0x080091c1

0800826c <__multadd>:
 800826c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008270:	690d      	ldr	r5, [r1, #16]
 8008272:	4607      	mov	r7, r0
 8008274:	460c      	mov	r4, r1
 8008276:	461e      	mov	r6, r3
 8008278:	f101 0c14 	add.w	ip, r1, #20
 800827c:	2000      	movs	r0, #0
 800827e:	f8dc 3000 	ldr.w	r3, [ip]
 8008282:	b299      	uxth	r1, r3
 8008284:	fb02 6101 	mla	r1, r2, r1, r6
 8008288:	0c1e      	lsrs	r6, r3, #16
 800828a:	0c0b      	lsrs	r3, r1, #16
 800828c:	fb02 3306 	mla	r3, r2, r6, r3
 8008290:	b289      	uxth	r1, r1
 8008292:	3001      	adds	r0, #1
 8008294:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008298:	4285      	cmp	r5, r0
 800829a:	f84c 1b04 	str.w	r1, [ip], #4
 800829e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80082a2:	dcec      	bgt.n	800827e <__multadd+0x12>
 80082a4:	b30e      	cbz	r6, 80082ea <__multadd+0x7e>
 80082a6:	68a3      	ldr	r3, [r4, #8]
 80082a8:	42ab      	cmp	r3, r5
 80082aa:	dc19      	bgt.n	80082e0 <__multadd+0x74>
 80082ac:	6861      	ldr	r1, [r4, #4]
 80082ae:	4638      	mov	r0, r7
 80082b0:	3101      	adds	r1, #1
 80082b2:	f7ff ff79 	bl	80081a8 <_Balloc>
 80082b6:	4680      	mov	r8, r0
 80082b8:	b928      	cbnz	r0, 80082c6 <__multadd+0x5a>
 80082ba:	4602      	mov	r2, r0
 80082bc:	4b0c      	ldr	r3, [pc, #48]	@ (80082f0 <__multadd+0x84>)
 80082be:	480d      	ldr	r0, [pc, #52]	@ (80082f4 <__multadd+0x88>)
 80082c0:	21ba      	movs	r1, #186	@ 0xba
 80082c2:	f000 fbbd 	bl	8008a40 <__assert_func>
 80082c6:	6922      	ldr	r2, [r4, #16]
 80082c8:	3202      	adds	r2, #2
 80082ca:	f104 010c 	add.w	r1, r4, #12
 80082ce:	0092      	lsls	r2, r2, #2
 80082d0:	300c      	adds	r0, #12
 80082d2:	f000 fba7 	bl	8008a24 <memcpy>
 80082d6:	4621      	mov	r1, r4
 80082d8:	4638      	mov	r0, r7
 80082da:	f7ff ffa5 	bl	8008228 <_Bfree>
 80082de:	4644      	mov	r4, r8
 80082e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80082e4:	3501      	adds	r5, #1
 80082e6:	615e      	str	r6, [r3, #20]
 80082e8:	6125      	str	r5, [r4, #16]
 80082ea:	4620      	mov	r0, r4
 80082ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082f0:	080091b0 	.word	0x080091b0
 80082f4:	080091c1 	.word	0x080091c1

080082f8 <__hi0bits>:
 80082f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80082fc:	4603      	mov	r3, r0
 80082fe:	bf36      	itet	cc
 8008300:	0403      	lslcc	r3, r0, #16
 8008302:	2000      	movcs	r0, #0
 8008304:	2010      	movcc	r0, #16
 8008306:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800830a:	bf3c      	itt	cc
 800830c:	021b      	lslcc	r3, r3, #8
 800830e:	3008      	addcc	r0, #8
 8008310:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008314:	bf3c      	itt	cc
 8008316:	011b      	lslcc	r3, r3, #4
 8008318:	3004      	addcc	r0, #4
 800831a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800831e:	bf3c      	itt	cc
 8008320:	009b      	lslcc	r3, r3, #2
 8008322:	3002      	addcc	r0, #2
 8008324:	2b00      	cmp	r3, #0
 8008326:	db05      	blt.n	8008334 <__hi0bits+0x3c>
 8008328:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800832c:	f100 0001 	add.w	r0, r0, #1
 8008330:	bf08      	it	eq
 8008332:	2020      	moveq	r0, #32
 8008334:	4770      	bx	lr

08008336 <__lo0bits>:
 8008336:	6803      	ldr	r3, [r0, #0]
 8008338:	4602      	mov	r2, r0
 800833a:	f013 0007 	ands.w	r0, r3, #7
 800833e:	d00b      	beq.n	8008358 <__lo0bits+0x22>
 8008340:	07d9      	lsls	r1, r3, #31
 8008342:	d421      	bmi.n	8008388 <__lo0bits+0x52>
 8008344:	0798      	lsls	r0, r3, #30
 8008346:	bf49      	itett	mi
 8008348:	085b      	lsrmi	r3, r3, #1
 800834a:	089b      	lsrpl	r3, r3, #2
 800834c:	2001      	movmi	r0, #1
 800834e:	6013      	strmi	r3, [r2, #0]
 8008350:	bf5c      	itt	pl
 8008352:	6013      	strpl	r3, [r2, #0]
 8008354:	2002      	movpl	r0, #2
 8008356:	4770      	bx	lr
 8008358:	b299      	uxth	r1, r3
 800835a:	b909      	cbnz	r1, 8008360 <__lo0bits+0x2a>
 800835c:	0c1b      	lsrs	r3, r3, #16
 800835e:	2010      	movs	r0, #16
 8008360:	b2d9      	uxtb	r1, r3
 8008362:	b909      	cbnz	r1, 8008368 <__lo0bits+0x32>
 8008364:	3008      	adds	r0, #8
 8008366:	0a1b      	lsrs	r3, r3, #8
 8008368:	0719      	lsls	r1, r3, #28
 800836a:	bf04      	itt	eq
 800836c:	091b      	lsreq	r3, r3, #4
 800836e:	3004      	addeq	r0, #4
 8008370:	0799      	lsls	r1, r3, #30
 8008372:	bf04      	itt	eq
 8008374:	089b      	lsreq	r3, r3, #2
 8008376:	3002      	addeq	r0, #2
 8008378:	07d9      	lsls	r1, r3, #31
 800837a:	d403      	bmi.n	8008384 <__lo0bits+0x4e>
 800837c:	085b      	lsrs	r3, r3, #1
 800837e:	f100 0001 	add.w	r0, r0, #1
 8008382:	d003      	beq.n	800838c <__lo0bits+0x56>
 8008384:	6013      	str	r3, [r2, #0]
 8008386:	4770      	bx	lr
 8008388:	2000      	movs	r0, #0
 800838a:	4770      	bx	lr
 800838c:	2020      	movs	r0, #32
 800838e:	4770      	bx	lr

08008390 <__i2b>:
 8008390:	b510      	push	{r4, lr}
 8008392:	460c      	mov	r4, r1
 8008394:	2101      	movs	r1, #1
 8008396:	f7ff ff07 	bl	80081a8 <_Balloc>
 800839a:	4602      	mov	r2, r0
 800839c:	b928      	cbnz	r0, 80083aa <__i2b+0x1a>
 800839e:	4b05      	ldr	r3, [pc, #20]	@ (80083b4 <__i2b+0x24>)
 80083a0:	4805      	ldr	r0, [pc, #20]	@ (80083b8 <__i2b+0x28>)
 80083a2:	f240 1145 	movw	r1, #325	@ 0x145
 80083a6:	f000 fb4b 	bl	8008a40 <__assert_func>
 80083aa:	2301      	movs	r3, #1
 80083ac:	6144      	str	r4, [r0, #20]
 80083ae:	6103      	str	r3, [r0, #16]
 80083b0:	bd10      	pop	{r4, pc}
 80083b2:	bf00      	nop
 80083b4:	080091b0 	.word	0x080091b0
 80083b8:	080091c1 	.word	0x080091c1

080083bc <__multiply>:
 80083bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083c0:	4614      	mov	r4, r2
 80083c2:	690a      	ldr	r2, [r1, #16]
 80083c4:	6923      	ldr	r3, [r4, #16]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	bfa8      	it	ge
 80083ca:	4623      	movge	r3, r4
 80083cc:	460f      	mov	r7, r1
 80083ce:	bfa4      	itt	ge
 80083d0:	460c      	movge	r4, r1
 80083d2:	461f      	movge	r7, r3
 80083d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80083d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80083dc:	68a3      	ldr	r3, [r4, #8]
 80083de:	6861      	ldr	r1, [r4, #4]
 80083e0:	eb0a 0609 	add.w	r6, sl, r9
 80083e4:	42b3      	cmp	r3, r6
 80083e6:	b085      	sub	sp, #20
 80083e8:	bfb8      	it	lt
 80083ea:	3101      	addlt	r1, #1
 80083ec:	f7ff fedc 	bl	80081a8 <_Balloc>
 80083f0:	b930      	cbnz	r0, 8008400 <__multiply+0x44>
 80083f2:	4602      	mov	r2, r0
 80083f4:	4b44      	ldr	r3, [pc, #272]	@ (8008508 <__multiply+0x14c>)
 80083f6:	4845      	ldr	r0, [pc, #276]	@ (800850c <__multiply+0x150>)
 80083f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80083fc:	f000 fb20 	bl	8008a40 <__assert_func>
 8008400:	f100 0514 	add.w	r5, r0, #20
 8008404:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008408:	462b      	mov	r3, r5
 800840a:	2200      	movs	r2, #0
 800840c:	4543      	cmp	r3, r8
 800840e:	d321      	bcc.n	8008454 <__multiply+0x98>
 8008410:	f107 0114 	add.w	r1, r7, #20
 8008414:	f104 0214 	add.w	r2, r4, #20
 8008418:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800841c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8008420:	9302      	str	r3, [sp, #8]
 8008422:	1b13      	subs	r3, r2, r4
 8008424:	3b15      	subs	r3, #21
 8008426:	f023 0303 	bic.w	r3, r3, #3
 800842a:	3304      	adds	r3, #4
 800842c:	f104 0715 	add.w	r7, r4, #21
 8008430:	42ba      	cmp	r2, r7
 8008432:	bf38      	it	cc
 8008434:	2304      	movcc	r3, #4
 8008436:	9301      	str	r3, [sp, #4]
 8008438:	9b02      	ldr	r3, [sp, #8]
 800843a:	9103      	str	r1, [sp, #12]
 800843c:	428b      	cmp	r3, r1
 800843e:	d80c      	bhi.n	800845a <__multiply+0x9e>
 8008440:	2e00      	cmp	r6, #0
 8008442:	dd03      	ble.n	800844c <__multiply+0x90>
 8008444:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8008448:	2b00      	cmp	r3, #0
 800844a:	d05b      	beq.n	8008504 <__multiply+0x148>
 800844c:	6106      	str	r6, [r0, #16]
 800844e:	b005      	add	sp, #20
 8008450:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008454:	f843 2b04 	str.w	r2, [r3], #4
 8008458:	e7d8      	b.n	800840c <__multiply+0x50>
 800845a:	f8b1 a000 	ldrh.w	sl, [r1]
 800845e:	f1ba 0f00 	cmp.w	sl, #0
 8008462:	d024      	beq.n	80084ae <__multiply+0xf2>
 8008464:	f104 0e14 	add.w	lr, r4, #20
 8008468:	46a9      	mov	r9, r5
 800846a:	f04f 0c00 	mov.w	ip, #0
 800846e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008472:	f8d9 3000 	ldr.w	r3, [r9]
 8008476:	fa1f fb87 	uxth.w	fp, r7
 800847a:	b29b      	uxth	r3, r3
 800847c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008480:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8008484:	f8d9 7000 	ldr.w	r7, [r9]
 8008488:	4463      	add	r3, ip
 800848a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800848e:	fb0a c70b 	mla	r7, sl, fp, ip
 8008492:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8008496:	b29b      	uxth	r3, r3
 8008498:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800849c:	4572      	cmp	r2, lr
 800849e:	f849 3b04 	str.w	r3, [r9], #4
 80084a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80084a6:	d8e2      	bhi.n	800846e <__multiply+0xb2>
 80084a8:	9b01      	ldr	r3, [sp, #4]
 80084aa:	f845 c003 	str.w	ip, [r5, r3]
 80084ae:	9b03      	ldr	r3, [sp, #12]
 80084b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80084b4:	3104      	adds	r1, #4
 80084b6:	f1b9 0f00 	cmp.w	r9, #0
 80084ba:	d021      	beq.n	8008500 <__multiply+0x144>
 80084bc:	682b      	ldr	r3, [r5, #0]
 80084be:	f104 0c14 	add.w	ip, r4, #20
 80084c2:	46ae      	mov	lr, r5
 80084c4:	f04f 0a00 	mov.w	sl, #0
 80084c8:	f8bc b000 	ldrh.w	fp, [ip]
 80084cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80084d0:	fb09 770b 	mla	r7, r9, fp, r7
 80084d4:	4457      	add	r7, sl
 80084d6:	b29b      	uxth	r3, r3
 80084d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80084dc:	f84e 3b04 	str.w	r3, [lr], #4
 80084e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80084e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084e8:	f8be 3000 	ldrh.w	r3, [lr]
 80084ec:	fb09 330a 	mla	r3, r9, sl, r3
 80084f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80084f4:	4562      	cmp	r2, ip
 80084f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80084fa:	d8e5      	bhi.n	80084c8 <__multiply+0x10c>
 80084fc:	9f01      	ldr	r7, [sp, #4]
 80084fe:	51eb      	str	r3, [r5, r7]
 8008500:	3504      	adds	r5, #4
 8008502:	e799      	b.n	8008438 <__multiply+0x7c>
 8008504:	3e01      	subs	r6, #1
 8008506:	e79b      	b.n	8008440 <__multiply+0x84>
 8008508:	080091b0 	.word	0x080091b0
 800850c:	080091c1 	.word	0x080091c1

08008510 <__pow5mult>:
 8008510:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008514:	4615      	mov	r5, r2
 8008516:	f012 0203 	ands.w	r2, r2, #3
 800851a:	4607      	mov	r7, r0
 800851c:	460e      	mov	r6, r1
 800851e:	d007      	beq.n	8008530 <__pow5mult+0x20>
 8008520:	4c25      	ldr	r4, [pc, #148]	@ (80085b8 <__pow5mult+0xa8>)
 8008522:	3a01      	subs	r2, #1
 8008524:	2300      	movs	r3, #0
 8008526:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800852a:	f7ff fe9f 	bl	800826c <__multadd>
 800852e:	4606      	mov	r6, r0
 8008530:	10ad      	asrs	r5, r5, #2
 8008532:	d03d      	beq.n	80085b0 <__pow5mult+0xa0>
 8008534:	69fc      	ldr	r4, [r7, #28]
 8008536:	b97c      	cbnz	r4, 8008558 <__pow5mult+0x48>
 8008538:	2010      	movs	r0, #16
 800853a:	f7ff fd7f 	bl	800803c <malloc>
 800853e:	4602      	mov	r2, r0
 8008540:	61f8      	str	r0, [r7, #28]
 8008542:	b928      	cbnz	r0, 8008550 <__pow5mult+0x40>
 8008544:	4b1d      	ldr	r3, [pc, #116]	@ (80085bc <__pow5mult+0xac>)
 8008546:	481e      	ldr	r0, [pc, #120]	@ (80085c0 <__pow5mult+0xb0>)
 8008548:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800854c:	f000 fa78 	bl	8008a40 <__assert_func>
 8008550:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008554:	6004      	str	r4, [r0, #0]
 8008556:	60c4      	str	r4, [r0, #12]
 8008558:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800855c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008560:	b94c      	cbnz	r4, 8008576 <__pow5mult+0x66>
 8008562:	f240 2171 	movw	r1, #625	@ 0x271
 8008566:	4638      	mov	r0, r7
 8008568:	f7ff ff12 	bl	8008390 <__i2b>
 800856c:	2300      	movs	r3, #0
 800856e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008572:	4604      	mov	r4, r0
 8008574:	6003      	str	r3, [r0, #0]
 8008576:	f04f 0900 	mov.w	r9, #0
 800857a:	07eb      	lsls	r3, r5, #31
 800857c:	d50a      	bpl.n	8008594 <__pow5mult+0x84>
 800857e:	4631      	mov	r1, r6
 8008580:	4622      	mov	r2, r4
 8008582:	4638      	mov	r0, r7
 8008584:	f7ff ff1a 	bl	80083bc <__multiply>
 8008588:	4631      	mov	r1, r6
 800858a:	4680      	mov	r8, r0
 800858c:	4638      	mov	r0, r7
 800858e:	f7ff fe4b 	bl	8008228 <_Bfree>
 8008592:	4646      	mov	r6, r8
 8008594:	106d      	asrs	r5, r5, #1
 8008596:	d00b      	beq.n	80085b0 <__pow5mult+0xa0>
 8008598:	6820      	ldr	r0, [r4, #0]
 800859a:	b938      	cbnz	r0, 80085ac <__pow5mult+0x9c>
 800859c:	4622      	mov	r2, r4
 800859e:	4621      	mov	r1, r4
 80085a0:	4638      	mov	r0, r7
 80085a2:	f7ff ff0b 	bl	80083bc <__multiply>
 80085a6:	6020      	str	r0, [r4, #0]
 80085a8:	f8c0 9000 	str.w	r9, [r0]
 80085ac:	4604      	mov	r4, r0
 80085ae:	e7e4      	b.n	800857a <__pow5mult+0x6a>
 80085b0:	4630      	mov	r0, r6
 80085b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80085b6:	bf00      	nop
 80085b8:	0800921c 	.word	0x0800921c
 80085bc:	08009141 	.word	0x08009141
 80085c0:	080091c1 	.word	0x080091c1

080085c4 <__lshift>:
 80085c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085c8:	460c      	mov	r4, r1
 80085ca:	6849      	ldr	r1, [r1, #4]
 80085cc:	6923      	ldr	r3, [r4, #16]
 80085ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80085d2:	68a3      	ldr	r3, [r4, #8]
 80085d4:	4607      	mov	r7, r0
 80085d6:	4691      	mov	r9, r2
 80085d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80085dc:	f108 0601 	add.w	r6, r8, #1
 80085e0:	42b3      	cmp	r3, r6
 80085e2:	db0b      	blt.n	80085fc <__lshift+0x38>
 80085e4:	4638      	mov	r0, r7
 80085e6:	f7ff fddf 	bl	80081a8 <_Balloc>
 80085ea:	4605      	mov	r5, r0
 80085ec:	b948      	cbnz	r0, 8008602 <__lshift+0x3e>
 80085ee:	4602      	mov	r2, r0
 80085f0:	4b28      	ldr	r3, [pc, #160]	@ (8008694 <__lshift+0xd0>)
 80085f2:	4829      	ldr	r0, [pc, #164]	@ (8008698 <__lshift+0xd4>)
 80085f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80085f8:	f000 fa22 	bl	8008a40 <__assert_func>
 80085fc:	3101      	adds	r1, #1
 80085fe:	005b      	lsls	r3, r3, #1
 8008600:	e7ee      	b.n	80085e0 <__lshift+0x1c>
 8008602:	2300      	movs	r3, #0
 8008604:	f100 0114 	add.w	r1, r0, #20
 8008608:	f100 0210 	add.w	r2, r0, #16
 800860c:	4618      	mov	r0, r3
 800860e:	4553      	cmp	r3, sl
 8008610:	db33      	blt.n	800867a <__lshift+0xb6>
 8008612:	6920      	ldr	r0, [r4, #16]
 8008614:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008618:	f104 0314 	add.w	r3, r4, #20
 800861c:	f019 091f 	ands.w	r9, r9, #31
 8008620:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008624:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008628:	d02b      	beq.n	8008682 <__lshift+0xbe>
 800862a:	f1c9 0e20 	rsb	lr, r9, #32
 800862e:	468a      	mov	sl, r1
 8008630:	2200      	movs	r2, #0
 8008632:	6818      	ldr	r0, [r3, #0]
 8008634:	fa00 f009 	lsl.w	r0, r0, r9
 8008638:	4310      	orrs	r0, r2
 800863a:	f84a 0b04 	str.w	r0, [sl], #4
 800863e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008642:	459c      	cmp	ip, r3
 8008644:	fa22 f20e 	lsr.w	r2, r2, lr
 8008648:	d8f3      	bhi.n	8008632 <__lshift+0x6e>
 800864a:	ebac 0304 	sub.w	r3, ip, r4
 800864e:	3b15      	subs	r3, #21
 8008650:	f023 0303 	bic.w	r3, r3, #3
 8008654:	3304      	adds	r3, #4
 8008656:	f104 0015 	add.w	r0, r4, #21
 800865a:	4584      	cmp	ip, r0
 800865c:	bf38      	it	cc
 800865e:	2304      	movcc	r3, #4
 8008660:	50ca      	str	r2, [r1, r3]
 8008662:	b10a      	cbz	r2, 8008668 <__lshift+0xa4>
 8008664:	f108 0602 	add.w	r6, r8, #2
 8008668:	3e01      	subs	r6, #1
 800866a:	4638      	mov	r0, r7
 800866c:	612e      	str	r6, [r5, #16]
 800866e:	4621      	mov	r1, r4
 8008670:	f7ff fdda 	bl	8008228 <_Bfree>
 8008674:	4628      	mov	r0, r5
 8008676:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800867a:	f842 0f04 	str.w	r0, [r2, #4]!
 800867e:	3301      	adds	r3, #1
 8008680:	e7c5      	b.n	800860e <__lshift+0x4a>
 8008682:	3904      	subs	r1, #4
 8008684:	f853 2b04 	ldr.w	r2, [r3], #4
 8008688:	f841 2f04 	str.w	r2, [r1, #4]!
 800868c:	459c      	cmp	ip, r3
 800868e:	d8f9      	bhi.n	8008684 <__lshift+0xc0>
 8008690:	e7ea      	b.n	8008668 <__lshift+0xa4>
 8008692:	bf00      	nop
 8008694:	080091b0 	.word	0x080091b0
 8008698:	080091c1 	.word	0x080091c1

0800869c <__mcmp>:
 800869c:	690a      	ldr	r2, [r1, #16]
 800869e:	4603      	mov	r3, r0
 80086a0:	6900      	ldr	r0, [r0, #16]
 80086a2:	1a80      	subs	r0, r0, r2
 80086a4:	b530      	push	{r4, r5, lr}
 80086a6:	d10e      	bne.n	80086c6 <__mcmp+0x2a>
 80086a8:	3314      	adds	r3, #20
 80086aa:	3114      	adds	r1, #20
 80086ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80086b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80086b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80086b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80086bc:	4295      	cmp	r5, r2
 80086be:	d003      	beq.n	80086c8 <__mcmp+0x2c>
 80086c0:	d205      	bcs.n	80086ce <__mcmp+0x32>
 80086c2:	f04f 30ff 	mov.w	r0, #4294967295
 80086c6:	bd30      	pop	{r4, r5, pc}
 80086c8:	42a3      	cmp	r3, r4
 80086ca:	d3f3      	bcc.n	80086b4 <__mcmp+0x18>
 80086cc:	e7fb      	b.n	80086c6 <__mcmp+0x2a>
 80086ce:	2001      	movs	r0, #1
 80086d0:	e7f9      	b.n	80086c6 <__mcmp+0x2a>
	...

080086d4 <__mdiff>:
 80086d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d8:	4689      	mov	r9, r1
 80086da:	4606      	mov	r6, r0
 80086dc:	4611      	mov	r1, r2
 80086de:	4648      	mov	r0, r9
 80086e0:	4614      	mov	r4, r2
 80086e2:	f7ff ffdb 	bl	800869c <__mcmp>
 80086e6:	1e05      	subs	r5, r0, #0
 80086e8:	d112      	bne.n	8008710 <__mdiff+0x3c>
 80086ea:	4629      	mov	r1, r5
 80086ec:	4630      	mov	r0, r6
 80086ee:	f7ff fd5b 	bl	80081a8 <_Balloc>
 80086f2:	4602      	mov	r2, r0
 80086f4:	b928      	cbnz	r0, 8008702 <__mdiff+0x2e>
 80086f6:	4b3f      	ldr	r3, [pc, #252]	@ (80087f4 <__mdiff+0x120>)
 80086f8:	f240 2137 	movw	r1, #567	@ 0x237
 80086fc:	483e      	ldr	r0, [pc, #248]	@ (80087f8 <__mdiff+0x124>)
 80086fe:	f000 f99f 	bl	8008a40 <__assert_func>
 8008702:	2301      	movs	r3, #1
 8008704:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008708:	4610      	mov	r0, r2
 800870a:	b003      	add	sp, #12
 800870c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008710:	bfbc      	itt	lt
 8008712:	464b      	movlt	r3, r9
 8008714:	46a1      	movlt	r9, r4
 8008716:	4630      	mov	r0, r6
 8008718:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800871c:	bfba      	itte	lt
 800871e:	461c      	movlt	r4, r3
 8008720:	2501      	movlt	r5, #1
 8008722:	2500      	movge	r5, #0
 8008724:	f7ff fd40 	bl	80081a8 <_Balloc>
 8008728:	4602      	mov	r2, r0
 800872a:	b918      	cbnz	r0, 8008734 <__mdiff+0x60>
 800872c:	4b31      	ldr	r3, [pc, #196]	@ (80087f4 <__mdiff+0x120>)
 800872e:	f240 2145 	movw	r1, #581	@ 0x245
 8008732:	e7e3      	b.n	80086fc <__mdiff+0x28>
 8008734:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008738:	6926      	ldr	r6, [r4, #16]
 800873a:	60c5      	str	r5, [r0, #12]
 800873c:	f109 0310 	add.w	r3, r9, #16
 8008740:	f109 0514 	add.w	r5, r9, #20
 8008744:	f104 0e14 	add.w	lr, r4, #20
 8008748:	f100 0b14 	add.w	fp, r0, #20
 800874c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008750:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008754:	9301      	str	r3, [sp, #4]
 8008756:	46d9      	mov	r9, fp
 8008758:	f04f 0c00 	mov.w	ip, #0
 800875c:	9b01      	ldr	r3, [sp, #4]
 800875e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008762:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008766:	9301      	str	r3, [sp, #4]
 8008768:	fa1f f38a 	uxth.w	r3, sl
 800876c:	4619      	mov	r1, r3
 800876e:	b283      	uxth	r3, r0
 8008770:	1acb      	subs	r3, r1, r3
 8008772:	0c00      	lsrs	r0, r0, #16
 8008774:	4463      	add	r3, ip
 8008776:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800877a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800877e:	b29b      	uxth	r3, r3
 8008780:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008784:	4576      	cmp	r6, lr
 8008786:	f849 3b04 	str.w	r3, [r9], #4
 800878a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800878e:	d8e5      	bhi.n	800875c <__mdiff+0x88>
 8008790:	1b33      	subs	r3, r6, r4
 8008792:	3b15      	subs	r3, #21
 8008794:	f023 0303 	bic.w	r3, r3, #3
 8008798:	3415      	adds	r4, #21
 800879a:	3304      	adds	r3, #4
 800879c:	42a6      	cmp	r6, r4
 800879e:	bf38      	it	cc
 80087a0:	2304      	movcc	r3, #4
 80087a2:	441d      	add	r5, r3
 80087a4:	445b      	add	r3, fp
 80087a6:	461e      	mov	r6, r3
 80087a8:	462c      	mov	r4, r5
 80087aa:	4544      	cmp	r4, r8
 80087ac:	d30e      	bcc.n	80087cc <__mdiff+0xf8>
 80087ae:	f108 0103 	add.w	r1, r8, #3
 80087b2:	1b49      	subs	r1, r1, r5
 80087b4:	f021 0103 	bic.w	r1, r1, #3
 80087b8:	3d03      	subs	r5, #3
 80087ba:	45a8      	cmp	r8, r5
 80087bc:	bf38      	it	cc
 80087be:	2100      	movcc	r1, #0
 80087c0:	440b      	add	r3, r1
 80087c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80087c6:	b191      	cbz	r1, 80087ee <__mdiff+0x11a>
 80087c8:	6117      	str	r7, [r2, #16]
 80087ca:	e79d      	b.n	8008708 <__mdiff+0x34>
 80087cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80087d0:	46e6      	mov	lr, ip
 80087d2:	0c08      	lsrs	r0, r1, #16
 80087d4:	fa1c fc81 	uxtah	ip, ip, r1
 80087d8:	4471      	add	r1, lr
 80087da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80087de:	b289      	uxth	r1, r1
 80087e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80087e4:	f846 1b04 	str.w	r1, [r6], #4
 80087e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80087ec:	e7dd      	b.n	80087aa <__mdiff+0xd6>
 80087ee:	3f01      	subs	r7, #1
 80087f0:	e7e7      	b.n	80087c2 <__mdiff+0xee>
 80087f2:	bf00      	nop
 80087f4:	080091b0 	.word	0x080091b0
 80087f8:	080091c1 	.word	0x080091c1

080087fc <__d2b>:
 80087fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008800:	460f      	mov	r7, r1
 8008802:	2101      	movs	r1, #1
 8008804:	ec59 8b10 	vmov	r8, r9, d0
 8008808:	4616      	mov	r6, r2
 800880a:	f7ff fccd 	bl	80081a8 <_Balloc>
 800880e:	4604      	mov	r4, r0
 8008810:	b930      	cbnz	r0, 8008820 <__d2b+0x24>
 8008812:	4602      	mov	r2, r0
 8008814:	4b23      	ldr	r3, [pc, #140]	@ (80088a4 <__d2b+0xa8>)
 8008816:	4824      	ldr	r0, [pc, #144]	@ (80088a8 <__d2b+0xac>)
 8008818:	f240 310f 	movw	r1, #783	@ 0x30f
 800881c:	f000 f910 	bl	8008a40 <__assert_func>
 8008820:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008824:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008828:	b10d      	cbz	r5, 800882e <__d2b+0x32>
 800882a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800882e:	9301      	str	r3, [sp, #4]
 8008830:	f1b8 0300 	subs.w	r3, r8, #0
 8008834:	d023      	beq.n	800887e <__d2b+0x82>
 8008836:	4668      	mov	r0, sp
 8008838:	9300      	str	r3, [sp, #0]
 800883a:	f7ff fd7c 	bl	8008336 <__lo0bits>
 800883e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008842:	b1d0      	cbz	r0, 800887a <__d2b+0x7e>
 8008844:	f1c0 0320 	rsb	r3, r0, #32
 8008848:	fa02 f303 	lsl.w	r3, r2, r3
 800884c:	430b      	orrs	r3, r1
 800884e:	40c2      	lsrs	r2, r0
 8008850:	6163      	str	r3, [r4, #20]
 8008852:	9201      	str	r2, [sp, #4]
 8008854:	9b01      	ldr	r3, [sp, #4]
 8008856:	61a3      	str	r3, [r4, #24]
 8008858:	2b00      	cmp	r3, #0
 800885a:	bf0c      	ite	eq
 800885c:	2201      	moveq	r2, #1
 800885e:	2202      	movne	r2, #2
 8008860:	6122      	str	r2, [r4, #16]
 8008862:	b1a5      	cbz	r5, 800888e <__d2b+0x92>
 8008864:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008868:	4405      	add	r5, r0
 800886a:	603d      	str	r5, [r7, #0]
 800886c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008870:	6030      	str	r0, [r6, #0]
 8008872:	4620      	mov	r0, r4
 8008874:	b003      	add	sp, #12
 8008876:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800887a:	6161      	str	r1, [r4, #20]
 800887c:	e7ea      	b.n	8008854 <__d2b+0x58>
 800887e:	a801      	add	r0, sp, #4
 8008880:	f7ff fd59 	bl	8008336 <__lo0bits>
 8008884:	9b01      	ldr	r3, [sp, #4]
 8008886:	6163      	str	r3, [r4, #20]
 8008888:	3020      	adds	r0, #32
 800888a:	2201      	movs	r2, #1
 800888c:	e7e8      	b.n	8008860 <__d2b+0x64>
 800888e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008892:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008896:	6038      	str	r0, [r7, #0]
 8008898:	6918      	ldr	r0, [r3, #16]
 800889a:	f7ff fd2d 	bl	80082f8 <__hi0bits>
 800889e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80088a2:	e7e5      	b.n	8008870 <__d2b+0x74>
 80088a4:	080091b0 	.word	0x080091b0
 80088a8:	080091c1 	.word	0x080091c1

080088ac <__sflush_r>:
 80088ac:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80088b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088b4:	0716      	lsls	r6, r2, #28
 80088b6:	4605      	mov	r5, r0
 80088b8:	460c      	mov	r4, r1
 80088ba:	d454      	bmi.n	8008966 <__sflush_r+0xba>
 80088bc:	684b      	ldr	r3, [r1, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	dc02      	bgt.n	80088c8 <__sflush_r+0x1c>
 80088c2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	dd48      	ble.n	800895a <__sflush_r+0xae>
 80088c8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088ca:	2e00      	cmp	r6, #0
 80088cc:	d045      	beq.n	800895a <__sflush_r+0xae>
 80088ce:	2300      	movs	r3, #0
 80088d0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80088d4:	682f      	ldr	r7, [r5, #0]
 80088d6:	6a21      	ldr	r1, [r4, #32]
 80088d8:	602b      	str	r3, [r5, #0]
 80088da:	d030      	beq.n	800893e <__sflush_r+0x92>
 80088dc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80088de:	89a3      	ldrh	r3, [r4, #12]
 80088e0:	0759      	lsls	r1, r3, #29
 80088e2:	d505      	bpl.n	80088f0 <__sflush_r+0x44>
 80088e4:	6863      	ldr	r3, [r4, #4]
 80088e6:	1ad2      	subs	r2, r2, r3
 80088e8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80088ea:	b10b      	cbz	r3, 80088f0 <__sflush_r+0x44>
 80088ec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80088ee:	1ad2      	subs	r2, r2, r3
 80088f0:	2300      	movs	r3, #0
 80088f2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80088f4:	6a21      	ldr	r1, [r4, #32]
 80088f6:	4628      	mov	r0, r5
 80088f8:	47b0      	blx	r6
 80088fa:	1c43      	adds	r3, r0, #1
 80088fc:	89a3      	ldrh	r3, [r4, #12]
 80088fe:	d106      	bne.n	800890e <__sflush_r+0x62>
 8008900:	6829      	ldr	r1, [r5, #0]
 8008902:	291d      	cmp	r1, #29
 8008904:	d82b      	bhi.n	800895e <__sflush_r+0xb2>
 8008906:	4a2a      	ldr	r2, [pc, #168]	@ (80089b0 <__sflush_r+0x104>)
 8008908:	410a      	asrs	r2, r1
 800890a:	07d6      	lsls	r6, r2, #31
 800890c:	d427      	bmi.n	800895e <__sflush_r+0xb2>
 800890e:	2200      	movs	r2, #0
 8008910:	6062      	str	r2, [r4, #4]
 8008912:	04d9      	lsls	r1, r3, #19
 8008914:	6922      	ldr	r2, [r4, #16]
 8008916:	6022      	str	r2, [r4, #0]
 8008918:	d504      	bpl.n	8008924 <__sflush_r+0x78>
 800891a:	1c42      	adds	r2, r0, #1
 800891c:	d101      	bne.n	8008922 <__sflush_r+0x76>
 800891e:	682b      	ldr	r3, [r5, #0]
 8008920:	b903      	cbnz	r3, 8008924 <__sflush_r+0x78>
 8008922:	6560      	str	r0, [r4, #84]	@ 0x54
 8008924:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008926:	602f      	str	r7, [r5, #0]
 8008928:	b1b9      	cbz	r1, 800895a <__sflush_r+0xae>
 800892a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800892e:	4299      	cmp	r1, r3
 8008930:	d002      	beq.n	8008938 <__sflush_r+0x8c>
 8008932:	4628      	mov	r0, r5
 8008934:	f7ff fb38 	bl	8007fa8 <_free_r>
 8008938:	2300      	movs	r3, #0
 800893a:	6363      	str	r3, [r4, #52]	@ 0x34
 800893c:	e00d      	b.n	800895a <__sflush_r+0xae>
 800893e:	2301      	movs	r3, #1
 8008940:	4628      	mov	r0, r5
 8008942:	47b0      	blx	r6
 8008944:	4602      	mov	r2, r0
 8008946:	1c50      	adds	r0, r2, #1
 8008948:	d1c9      	bne.n	80088de <__sflush_r+0x32>
 800894a:	682b      	ldr	r3, [r5, #0]
 800894c:	2b00      	cmp	r3, #0
 800894e:	d0c6      	beq.n	80088de <__sflush_r+0x32>
 8008950:	2b1d      	cmp	r3, #29
 8008952:	d001      	beq.n	8008958 <__sflush_r+0xac>
 8008954:	2b16      	cmp	r3, #22
 8008956:	d11e      	bne.n	8008996 <__sflush_r+0xea>
 8008958:	602f      	str	r7, [r5, #0]
 800895a:	2000      	movs	r0, #0
 800895c:	e022      	b.n	80089a4 <__sflush_r+0xf8>
 800895e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008962:	b21b      	sxth	r3, r3
 8008964:	e01b      	b.n	800899e <__sflush_r+0xf2>
 8008966:	690f      	ldr	r7, [r1, #16]
 8008968:	2f00      	cmp	r7, #0
 800896a:	d0f6      	beq.n	800895a <__sflush_r+0xae>
 800896c:	0793      	lsls	r3, r2, #30
 800896e:	680e      	ldr	r6, [r1, #0]
 8008970:	bf08      	it	eq
 8008972:	694b      	ldreq	r3, [r1, #20]
 8008974:	600f      	str	r7, [r1, #0]
 8008976:	bf18      	it	ne
 8008978:	2300      	movne	r3, #0
 800897a:	eba6 0807 	sub.w	r8, r6, r7
 800897e:	608b      	str	r3, [r1, #8]
 8008980:	f1b8 0f00 	cmp.w	r8, #0
 8008984:	dde9      	ble.n	800895a <__sflush_r+0xae>
 8008986:	6a21      	ldr	r1, [r4, #32]
 8008988:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800898a:	4643      	mov	r3, r8
 800898c:	463a      	mov	r2, r7
 800898e:	4628      	mov	r0, r5
 8008990:	47b0      	blx	r6
 8008992:	2800      	cmp	r0, #0
 8008994:	dc08      	bgt.n	80089a8 <__sflush_r+0xfc>
 8008996:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800899a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800899e:	81a3      	strh	r3, [r4, #12]
 80089a0:	f04f 30ff 	mov.w	r0, #4294967295
 80089a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80089a8:	4407      	add	r7, r0
 80089aa:	eba8 0800 	sub.w	r8, r8, r0
 80089ae:	e7e7      	b.n	8008980 <__sflush_r+0xd4>
 80089b0:	dfbffffe 	.word	0xdfbffffe

080089b4 <_fflush_r>:
 80089b4:	b538      	push	{r3, r4, r5, lr}
 80089b6:	690b      	ldr	r3, [r1, #16]
 80089b8:	4605      	mov	r5, r0
 80089ba:	460c      	mov	r4, r1
 80089bc:	b913      	cbnz	r3, 80089c4 <_fflush_r+0x10>
 80089be:	2500      	movs	r5, #0
 80089c0:	4628      	mov	r0, r5
 80089c2:	bd38      	pop	{r3, r4, r5, pc}
 80089c4:	b118      	cbz	r0, 80089ce <_fflush_r+0x1a>
 80089c6:	6a03      	ldr	r3, [r0, #32]
 80089c8:	b90b      	cbnz	r3, 80089ce <_fflush_r+0x1a>
 80089ca:	f7fe fb93 	bl	80070f4 <__sinit>
 80089ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d0f3      	beq.n	80089be <_fflush_r+0xa>
 80089d6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80089d8:	07d0      	lsls	r0, r2, #31
 80089da:	d404      	bmi.n	80089e6 <_fflush_r+0x32>
 80089dc:	0599      	lsls	r1, r3, #22
 80089de:	d402      	bmi.n	80089e6 <_fflush_r+0x32>
 80089e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089e2:	f7fe fc90 	bl	8007306 <__retarget_lock_acquire_recursive>
 80089e6:	4628      	mov	r0, r5
 80089e8:	4621      	mov	r1, r4
 80089ea:	f7ff ff5f 	bl	80088ac <__sflush_r>
 80089ee:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80089f0:	07da      	lsls	r2, r3, #31
 80089f2:	4605      	mov	r5, r0
 80089f4:	d4e4      	bmi.n	80089c0 <_fflush_r+0xc>
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	059b      	lsls	r3, r3, #22
 80089fa:	d4e1      	bmi.n	80089c0 <_fflush_r+0xc>
 80089fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80089fe:	f7fe fc83 	bl	8007308 <__retarget_lock_release_recursive>
 8008a02:	e7dd      	b.n	80089c0 <_fflush_r+0xc>

08008a04 <_sbrk_r>:
 8008a04:	b538      	push	{r3, r4, r5, lr}
 8008a06:	4d06      	ldr	r5, [pc, #24]	@ (8008a20 <_sbrk_r+0x1c>)
 8008a08:	2300      	movs	r3, #0
 8008a0a:	4604      	mov	r4, r0
 8008a0c:	4608      	mov	r0, r1
 8008a0e:	602b      	str	r3, [r5, #0]
 8008a10:	f7f9 f97e 	bl	8001d10 <_sbrk>
 8008a14:	1c43      	adds	r3, r0, #1
 8008a16:	d102      	bne.n	8008a1e <_sbrk_r+0x1a>
 8008a18:	682b      	ldr	r3, [r5, #0]
 8008a1a:	b103      	cbz	r3, 8008a1e <_sbrk_r+0x1a>
 8008a1c:	6023      	str	r3, [r4, #0]
 8008a1e:	bd38      	pop	{r3, r4, r5, pc}
 8008a20:	20001908 	.word	0x20001908

08008a24 <memcpy>:
 8008a24:	440a      	add	r2, r1
 8008a26:	4291      	cmp	r1, r2
 8008a28:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a2c:	d100      	bne.n	8008a30 <memcpy+0xc>
 8008a2e:	4770      	bx	lr
 8008a30:	b510      	push	{r4, lr}
 8008a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a3a:	4291      	cmp	r1, r2
 8008a3c:	d1f9      	bne.n	8008a32 <memcpy+0xe>
 8008a3e:	bd10      	pop	{r4, pc}

08008a40 <__assert_func>:
 8008a40:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008a42:	4614      	mov	r4, r2
 8008a44:	461a      	mov	r2, r3
 8008a46:	4b09      	ldr	r3, [pc, #36]	@ (8008a6c <__assert_func+0x2c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	4605      	mov	r5, r0
 8008a4c:	68d8      	ldr	r0, [r3, #12]
 8008a4e:	b954      	cbnz	r4, 8008a66 <__assert_func+0x26>
 8008a50:	4b07      	ldr	r3, [pc, #28]	@ (8008a70 <__assert_func+0x30>)
 8008a52:	461c      	mov	r4, r3
 8008a54:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008a58:	9100      	str	r1, [sp, #0]
 8008a5a:	462b      	mov	r3, r5
 8008a5c:	4905      	ldr	r1, [pc, #20]	@ (8008a74 <__assert_func+0x34>)
 8008a5e:	f000 f841 	bl	8008ae4 <fiprintf>
 8008a62:	f000 f851 	bl	8008b08 <abort>
 8008a66:	4b04      	ldr	r3, [pc, #16]	@ (8008a78 <__assert_func+0x38>)
 8008a68:	e7f4      	b.n	8008a54 <__assert_func+0x14>
 8008a6a:	bf00      	nop
 8008a6c:	2000001c 	.word	0x2000001c
 8008a70:	0800935d 	.word	0x0800935d
 8008a74:	0800932f 	.word	0x0800932f
 8008a78:	08009322 	.word	0x08009322

08008a7c <_calloc_r>:
 8008a7c:	b570      	push	{r4, r5, r6, lr}
 8008a7e:	fba1 5402 	umull	r5, r4, r1, r2
 8008a82:	b93c      	cbnz	r4, 8008a94 <_calloc_r+0x18>
 8008a84:	4629      	mov	r1, r5
 8008a86:	f7ff fb03 	bl	8008090 <_malloc_r>
 8008a8a:	4606      	mov	r6, r0
 8008a8c:	b928      	cbnz	r0, 8008a9a <_calloc_r+0x1e>
 8008a8e:	2600      	movs	r6, #0
 8008a90:	4630      	mov	r0, r6
 8008a92:	bd70      	pop	{r4, r5, r6, pc}
 8008a94:	220c      	movs	r2, #12
 8008a96:	6002      	str	r2, [r0, #0]
 8008a98:	e7f9      	b.n	8008a8e <_calloc_r+0x12>
 8008a9a:	462a      	mov	r2, r5
 8008a9c:	4621      	mov	r1, r4
 8008a9e:	f7fe fba2 	bl	80071e6 <memset>
 8008aa2:	e7f5      	b.n	8008a90 <_calloc_r+0x14>

08008aa4 <__ascii_mbtowc>:
 8008aa4:	b082      	sub	sp, #8
 8008aa6:	b901      	cbnz	r1, 8008aaa <__ascii_mbtowc+0x6>
 8008aa8:	a901      	add	r1, sp, #4
 8008aaa:	b142      	cbz	r2, 8008abe <__ascii_mbtowc+0x1a>
 8008aac:	b14b      	cbz	r3, 8008ac2 <__ascii_mbtowc+0x1e>
 8008aae:	7813      	ldrb	r3, [r2, #0]
 8008ab0:	600b      	str	r3, [r1, #0]
 8008ab2:	7812      	ldrb	r2, [r2, #0]
 8008ab4:	1e10      	subs	r0, r2, #0
 8008ab6:	bf18      	it	ne
 8008ab8:	2001      	movne	r0, #1
 8008aba:	b002      	add	sp, #8
 8008abc:	4770      	bx	lr
 8008abe:	4610      	mov	r0, r2
 8008ac0:	e7fb      	b.n	8008aba <__ascii_mbtowc+0x16>
 8008ac2:	f06f 0001 	mvn.w	r0, #1
 8008ac6:	e7f8      	b.n	8008aba <__ascii_mbtowc+0x16>

08008ac8 <__ascii_wctomb>:
 8008ac8:	4603      	mov	r3, r0
 8008aca:	4608      	mov	r0, r1
 8008acc:	b141      	cbz	r1, 8008ae0 <__ascii_wctomb+0x18>
 8008ace:	2aff      	cmp	r2, #255	@ 0xff
 8008ad0:	d904      	bls.n	8008adc <__ascii_wctomb+0x14>
 8008ad2:	228a      	movs	r2, #138	@ 0x8a
 8008ad4:	601a      	str	r2, [r3, #0]
 8008ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8008ada:	4770      	bx	lr
 8008adc:	700a      	strb	r2, [r1, #0]
 8008ade:	2001      	movs	r0, #1
 8008ae0:	4770      	bx	lr
	...

08008ae4 <fiprintf>:
 8008ae4:	b40e      	push	{r1, r2, r3}
 8008ae6:	b503      	push	{r0, r1, lr}
 8008ae8:	4601      	mov	r1, r0
 8008aea:	ab03      	add	r3, sp, #12
 8008aec:	4805      	ldr	r0, [pc, #20]	@ (8008b04 <fiprintf+0x20>)
 8008aee:	f853 2b04 	ldr.w	r2, [r3], #4
 8008af2:	6800      	ldr	r0, [r0, #0]
 8008af4:	9301      	str	r3, [sp, #4]
 8008af6:	f000 f837 	bl	8008b68 <_vfiprintf_r>
 8008afa:	b002      	add	sp, #8
 8008afc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b00:	b003      	add	sp, #12
 8008b02:	4770      	bx	lr
 8008b04:	2000001c 	.word	0x2000001c

08008b08 <abort>:
 8008b08:	b508      	push	{r3, lr}
 8008b0a:	2006      	movs	r0, #6
 8008b0c:	f000 fa00 	bl	8008f10 <raise>
 8008b10:	2001      	movs	r0, #1
 8008b12:	f7f9 f885 	bl	8001c20 <_exit>

08008b16 <__sfputc_r>:
 8008b16:	6893      	ldr	r3, [r2, #8]
 8008b18:	3b01      	subs	r3, #1
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	b410      	push	{r4}
 8008b1e:	6093      	str	r3, [r2, #8]
 8008b20:	da08      	bge.n	8008b34 <__sfputc_r+0x1e>
 8008b22:	6994      	ldr	r4, [r2, #24]
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	db01      	blt.n	8008b2c <__sfputc_r+0x16>
 8008b28:	290a      	cmp	r1, #10
 8008b2a:	d103      	bne.n	8008b34 <__sfputc_r+0x1e>
 8008b2c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b30:	f000 b932 	b.w	8008d98 <__swbuf_r>
 8008b34:	6813      	ldr	r3, [r2, #0]
 8008b36:	1c58      	adds	r0, r3, #1
 8008b38:	6010      	str	r0, [r2, #0]
 8008b3a:	7019      	strb	r1, [r3, #0]
 8008b3c:	4608      	mov	r0, r1
 8008b3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <__sfputs_r>:
 8008b44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b46:	4606      	mov	r6, r0
 8008b48:	460f      	mov	r7, r1
 8008b4a:	4614      	mov	r4, r2
 8008b4c:	18d5      	adds	r5, r2, r3
 8008b4e:	42ac      	cmp	r4, r5
 8008b50:	d101      	bne.n	8008b56 <__sfputs_r+0x12>
 8008b52:	2000      	movs	r0, #0
 8008b54:	e007      	b.n	8008b66 <__sfputs_r+0x22>
 8008b56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b5a:	463a      	mov	r2, r7
 8008b5c:	4630      	mov	r0, r6
 8008b5e:	f7ff ffda 	bl	8008b16 <__sfputc_r>
 8008b62:	1c43      	adds	r3, r0, #1
 8008b64:	d1f3      	bne.n	8008b4e <__sfputs_r+0xa>
 8008b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008b68 <_vfiprintf_r>:
 8008b68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b6c:	460d      	mov	r5, r1
 8008b6e:	b09d      	sub	sp, #116	@ 0x74
 8008b70:	4614      	mov	r4, r2
 8008b72:	4698      	mov	r8, r3
 8008b74:	4606      	mov	r6, r0
 8008b76:	b118      	cbz	r0, 8008b80 <_vfiprintf_r+0x18>
 8008b78:	6a03      	ldr	r3, [r0, #32]
 8008b7a:	b90b      	cbnz	r3, 8008b80 <_vfiprintf_r+0x18>
 8008b7c:	f7fe faba 	bl	80070f4 <__sinit>
 8008b80:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b82:	07d9      	lsls	r1, r3, #31
 8008b84:	d405      	bmi.n	8008b92 <_vfiprintf_r+0x2a>
 8008b86:	89ab      	ldrh	r3, [r5, #12]
 8008b88:	059a      	lsls	r2, r3, #22
 8008b8a:	d402      	bmi.n	8008b92 <_vfiprintf_r+0x2a>
 8008b8c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b8e:	f7fe fbba 	bl	8007306 <__retarget_lock_acquire_recursive>
 8008b92:	89ab      	ldrh	r3, [r5, #12]
 8008b94:	071b      	lsls	r3, r3, #28
 8008b96:	d501      	bpl.n	8008b9c <_vfiprintf_r+0x34>
 8008b98:	692b      	ldr	r3, [r5, #16]
 8008b9a:	b99b      	cbnz	r3, 8008bc4 <_vfiprintf_r+0x5c>
 8008b9c:	4629      	mov	r1, r5
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	f000 f938 	bl	8008e14 <__swsetup_r>
 8008ba4:	b170      	cbz	r0, 8008bc4 <_vfiprintf_r+0x5c>
 8008ba6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ba8:	07dc      	lsls	r4, r3, #31
 8008baa:	d504      	bpl.n	8008bb6 <_vfiprintf_r+0x4e>
 8008bac:	f04f 30ff 	mov.w	r0, #4294967295
 8008bb0:	b01d      	add	sp, #116	@ 0x74
 8008bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bb6:	89ab      	ldrh	r3, [r5, #12]
 8008bb8:	0598      	lsls	r0, r3, #22
 8008bba:	d4f7      	bmi.n	8008bac <_vfiprintf_r+0x44>
 8008bbc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bbe:	f7fe fba3 	bl	8007308 <__retarget_lock_release_recursive>
 8008bc2:	e7f3      	b.n	8008bac <_vfiprintf_r+0x44>
 8008bc4:	2300      	movs	r3, #0
 8008bc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008bc8:	2320      	movs	r3, #32
 8008bca:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008bce:	f8cd 800c 	str.w	r8, [sp, #12]
 8008bd2:	2330      	movs	r3, #48	@ 0x30
 8008bd4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008d84 <_vfiprintf_r+0x21c>
 8008bd8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008bdc:	f04f 0901 	mov.w	r9, #1
 8008be0:	4623      	mov	r3, r4
 8008be2:	469a      	mov	sl, r3
 8008be4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008be8:	b10a      	cbz	r2, 8008bee <_vfiprintf_r+0x86>
 8008bea:	2a25      	cmp	r2, #37	@ 0x25
 8008bec:	d1f9      	bne.n	8008be2 <_vfiprintf_r+0x7a>
 8008bee:	ebba 0b04 	subs.w	fp, sl, r4
 8008bf2:	d00b      	beq.n	8008c0c <_vfiprintf_r+0xa4>
 8008bf4:	465b      	mov	r3, fp
 8008bf6:	4622      	mov	r2, r4
 8008bf8:	4629      	mov	r1, r5
 8008bfa:	4630      	mov	r0, r6
 8008bfc:	f7ff ffa2 	bl	8008b44 <__sfputs_r>
 8008c00:	3001      	adds	r0, #1
 8008c02:	f000 80a7 	beq.w	8008d54 <_vfiprintf_r+0x1ec>
 8008c06:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c08:	445a      	add	r2, fp
 8008c0a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c0c:	f89a 3000 	ldrb.w	r3, [sl]
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	f000 809f 	beq.w	8008d54 <_vfiprintf_r+0x1ec>
 8008c16:	2300      	movs	r3, #0
 8008c18:	f04f 32ff 	mov.w	r2, #4294967295
 8008c1c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c20:	f10a 0a01 	add.w	sl, sl, #1
 8008c24:	9304      	str	r3, [sp, #16]
 8008c26:	9307      	str	r3, [sp, #28]
 8008c28:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008c2c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008c2e:	4654      	mov	r4, sl
 8008c30:	2205      	movs	r2, #5
 8008c32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c36:	4853      	ldr	r0, [pc, #332]	@ (8008d84 <_vfiprintf_r+0x21c>)
 8008c38:	f7f7 fc12 	bl	8000460 <memchr>
 8008c3c:	9a04      	ldr	r2, [sp, #16]
 8008c3e:	b9d8      	cbnz	r0, 8008c78 <_vfiprintf_r+0x110>
 8008c40:	06d1      	lsls	r1, r2, #27
 8008c42:	bf44      	itt	mi
 8008c44:	2320      	movmi	r3, #32
 8008c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c4a:	0713      	lsls	r3, r2, #28
 8008c4c:	bf44      	itt	mi
 8008c4e:	232b      	movmi	r3, #43	@ 0x2b
 8008c50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008c54:	f89a 3000 	ldrb.w	r3, [sl]
 8008c58:	2b2a      	cmp	r3, #42	@ 0x2a
 8008c5a:	d015      	beq.n	8008c88 <_vfiprintf_r+0x120>
 8008c5c:	9a07      	ldr	r2, [sp, #28]
 8008c5e:	4654      	mov	r4, sl
 8008c60:	2000      	movs	r0, #0
 8008c62:	f04f 0c0a 	mov.w	ip, #10
 8008c66:	4621      	mov	r1, r4
 8008c68:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008c6c:	3b30      	subs	r3, #48	@ 0x30
 8008c6e:	2b09      	cmp	r3, #9
 8008c70:	d94b      	bls.n	8008d0a <_vfiprintf_r+0x1a2>
 8008c72:	b1b0      	cbz	r0, 8008ca2 <_vfiprintf_r+0x13a>
 8008c74:	9207      	str	r2, [sp, #28]
 8008c76:	e014      	b.n	8008ca2 <_vfiprintf_r+0x13a>
 8008c78:	eba0 0308 	sub.w	r3, r0, r8
 8008c7c:	fa09 f303 	lsl.w	r3, r9, r3
 8008c80:	4313      	orrs	r3, r2
 8008c82:	9304      	str	r3, [sp, #16]
 8008c84:	46a2      	mov	sl, r4
 8008c86:	e7d2      	b.n	8008c2e <_vfiprintf_r+0xc6>
 8008c88:	9b03      	ldr	r3, [sp, #12]
 8008c8a:	1d19      	adds	r1, r3, #4
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	9103      	str	r1, [sp, #12]
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	bfbb      	ittet	lt
 8008c94:	425b      	neglt	r3, r3
 8008c96:	f042 0202 	orrlt.w	r2, r2, #2
 8008c9a:	9307      	strge	r3, [sp, #28]
 8008c9c:	9307      	strlt	r3, [sp, #28]
 8008c9e:	bfb8      	it	lt
 8008ca0:	9204      	strlt	r2, [sp, #16]
 8008ca2:	7823      	ldrb	r3, [r4, #0]
 8008ca4:	2b2e      	cmp	r3, #46	@ 0x2e
 8008ca6:	d10a      	bne.n	8008cbe <_vfiprintf_r+0x156>
 8008ca8:	7863      	ldrb	r3, [r4, #1]
 8008caa:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cac:	d132      	bne.n	8008d14 <_vfiprintf_r+0x1ac>
 8008cae:	9b03      	ldr	r3, [sp, #12]
 8008cb0:	1d1a      	adds	r2, r3, #4
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	9203      	str	r2, [sp, #12]
 8008cb6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008cba:	3402      	adds	r4, #2
 8008cbc:	9305      	str	r3, [sp, #20]
 8008cbe:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008d94 <_vfiprintf_r+0x22c>
 8008cc2:	7821      	ldrb	r1, [r4, #0]
 8008cc4:	2203      	movs	r2, #3
 8008cc6:	4650      	mov	r0, sl
 8008cc8:	f7f7 fbca 	bl	8000460 <memchr>
 8008ccc:	b138      	cbz	r0, 8008cde <_vfiprintf_r+0x176>
 8008cce:	9b04      	ldr	r3, [sp, #16]
 8008cd0:	eba0 000a 	sub.w	r0, r0, sl
 8008cd4:	2240      	movs	r2, #64	@ 0x40
 8008cd6:	4082      	lsls	r2, r0
 8008cd8:	4313      	orrs	r3, r2
 8008cda:	3401      	adds	r4, #1
 8008cdc:	9304      	str	r3, [sp, #16]
 8008cde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ce2:	4829      	ldr	r0, [pc, #164]	@ (8008d88 <_vfiprintf_r+0x220>)
 8008ce4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008ce8:	2206      	movs	r2, #6
 8008cea:	f7f7 fbb9 	bl	8000460 <memchr>
 8008cee:	2800      	cmp	r0, #0
 8008cf0:	d03f      	beq.n	8008d72 <_vfiprintf_r+0x20a>
 8008cf2:	4b26      	ldr	r3, [pc, #152]	@ (8008d8c <_vfiprintf_r+0x224>)
 8008cf4:	bb1b      	cbnz	r3, 8008d3e <_vfiprintf_r+0x1d6>
 8008cf6:	9b03      	ldr	r3, [sp, #12]
 8008cf8:	3307      	adds	r3, #7
 8008cfa:	f023 0307 	bic.w	r3, r3, #7
 8008cfe:	3308      	adds	r3, #8
 8008d00:	9303      	str	r3, [sp, #12]
 8008d02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d04:	443b      	add	r3, r7
 8008d06:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d08:	e76a      	b.n	8008be0 <_vfiprintf_r+0x78>
 8008d0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d0e:	460c      	mov	r4, r1
 8008d10:	2001      	movs	r0, #1
 8008d12:	e7a8      	b.n	8008c66 <_vfiprintf_r+0xfe>
 8008d14:	2300      	movs	r3, #0
 8008d16:	3401      	adds	r4, #1
 8008d18:	9305      	str	r3, [sp, #20]
 8008d1a:	4619      	mov	r1, r3
 8008d1c:	f04f 0c0a 	mov.w	ip, #10
 8008d20:	4620      	mov	r0, r4
 8008d22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d26:	3a30      	subs	r2, #48	@ 0x30
 8008d28:	2a09      	cmp	r2, #9
 8008d2a:	d903      	bls.n	8008d34 <_vfiprintf_r+0x1cc>
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d0c6      	beq.n	8008cbe <_vfiprintf_r+0x156>
 8008d30:	9105      	str	r1, [sp, #20]
 8008d32:	e7c4      	b.n	8008cbe <_vfiprintf_r+0x156>
 8008d34:	fb0c 2101 	mla	r1, ip, r1, r2
 8008d38:	4604      	mov	r4, r0
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e7f0      	b.n	8008d20 <_vfiprintf_r+0x1b8>
 8008d3e:	ab03      	add	r3, sp, #12
 8008d40:	9300      	str	r3, [sp, #0]
 8008d42:	462a      	mov	r2, r5
 8008d44:	4b12      	ldr	r3, [pc, #72]	@ (8008d90 <_vfiprintf_r+0x228>)
 8008d46:	a904      	add	r1, sp, #16
 8008d48:	4630      	mov	r0, r6
 8008d4a:	f7fd fd8f 	bl	800686c <_printf_float>
 8008d4e:	4607      	mov	r7, r0
 8008d50:	1c78      	adds	r0, r7, #1
 8008d52:	d1d6      	bne.n	8008d02 <_vfiprintf_r+0x19a>
 8008d54:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008d56:	07d9      	lsls	r1, r3, #31
 8008d58:	d405      	bmi.n	8008d66 <_vfiprintf_r+0x1fe>
 8008d5a:	89ab      	ldrh	r3, [r5, #12]
 8008d5c:	059a      	lsls	r2, r3, #22
 8008d5e:	d402      	bmi.n	8008d66 <_vfiprintf_r+0x1fe>
 8008d60:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008d62:	f7fe fad1 	bl	8007308 <__retarget_lock_release_recursive>
 8008d66:	89ab      	ldrh	r3, [r5, #12]
 8008d68:	065b      	lsls	r3, r3, #25
 8008d6a:	f53f af1f 	bmi.w	8008bac <_vfiprintf_r+0x44>
 8008d6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008d70:	e71e      	b.n	8008bb0 <_vfiprintf_r+0x48>
 8008d72:	ab03      	add	r3, sp, #12
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	462a      	mov	r2, r5
 8008d78:	4b05      	ldr	r3, [pc, #20]	@ (8008d90 <_vfiprintf_r+0x228>)
 8008d7a:	a904      	add	r1, sp, #16
 8008d7c:	4630      	mov	r0, r6
 8008d7e:	f7fe f80d 	bl	8006d9c <_printf_i>
 8008d82:	e7e4      	b.n	8008d4e <_vfiprintf_r+0x1e6>
 8008d84:	0800945f 	.word	0x0800945f
 8008d88:	08009469 	.word	0x08009469
 8008d8c:	0800686d 	.word	0x0800686d
 8008d90:	08008b45 	.word	0x08008b45
 8008d94:	08009465 	.word	0x08009465

08008d98 <__swbuf_r>:
 8008d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9a:	460e      	mov	r6, r1
 8008d9c:	4614      	mov	r4, r2
 8008d9e:	4605      	mov	r5, r0
 8008da0:	b118      	cbz	r0, 8008daa <__swbuf_r+0x12>
 8008da2:	6a03      	ldr	r3, [r0, #32]
 8008da4:	b90b      	cbnz	r3, 8008daa <__swbuf_r+0x12>
 8008da6:	f7fe f9a5 	bl	80070f4 <__sinit>
 8008daa:	69a3      	ldr	r3, [r4, #24]
 8008dac:	60a3      	str	r3, [r4, #8]
 8008dae:	89a3      	ldrh	r3, [r4, #12]
 8008db0:	071a      	lsls	r2, r3, #28
 8008db2:	d501      	bpl.n	8008db8 <__swbuf_r+0x20>
 8008db4:	6923      	ldr	r3, [r4, #16]
 8008db6:	b943      	cbnz	r3, 8008dca <__swbuf_r+0x32>
 8008db8:	4621      	mov	r1, r4
 8008dba:	4628      	mov	r0, r5
 8008dbc:	f000 f82a 	bl	8008e14 <__swsetup_r>
 8008dc0:	b118      	cbz	r0, 8008dca <__swbuf_r+0x32>
 8008dc2:	f04f 37ff 	mov.w	r7, #4294967295
 8008dc6:	4638      	mov	r0, r7
 8008dc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dca:	6823      	ldr	r3, [r4, #0]
 8008dcc:	6922      	ldr	r2, [r4, #16]
 8008dce:	1a98      	subs	r0, r3, r2
 8008dd0:	6963      	ldr	r3, [r4, #20]
 8008dd2:	b2f6      	uxtb	r6, r6
 8008dd4:	4283      	cmp	r3, r0
 8008dd6:	4637      	mov	r7, r6
 8008dd8:	dc05      	bgt.n	8008de6 <__swbuf_r+0x4e>
 8008dda:	4621      	mov	r1, r4
 8008ddc:	4628      	mov	r0, r5
 8008dde:	f7ff fde9 	bl	80089b4 <_fflush_r>
 8008de2:	2800      	cmp	r0, #0
 8008de4:	d1ed      	bne.n	8008dc2 <__swbuf_r+0x2a>
 8008de6:	68a3      	ldr	r3, [r4, #8]
 8008de8:	3b01      	subs	r3, #1
 8008dea:	60a3      	str	r3, [r4, #8]
 8008dec:	6823      	ldr	r3, [r4, #0]
 8008dee:	1c5a      	adds	r2, r3, #1
 8008df0:	6022      	str	r2, [r4, #0]
 8008df2:	701e      	strb	r6, [r3, #0]
 8008df4:	6962      	ldr	r2, [r4, #20]
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d004      	beq.n	8008e06 <__swbuf_r+0x6e>
 8008dfc:	89a3      	ldrh	r3, [r4, #12]
 8008dfe:	07db      	lsls	r3, r3, #31
 8008e00:	d5e1      	bpl.n	8008dc6 <__swbuf_r+0x2e>
 8008e02:	2e0a      	cmp	r6, #10
 8008e04:	d1df      	bne.n	8008dc6 <__swbuf_r+0x2e>
 8008e06:	4621      	mov	r1, r4
 8008e08:	4628      	mov	r0, r5
 8008e0a:	f7ff fdd3 	bl	80089b4 <_fflush_r>
 8008e0e:	2800      	cmp	r0, #0
 8008e10:	d0d9      	beq.n	8008dc6 <__swbuf_r+0x2e>
 8008e12:	e7d6      	b.n	8008dc2 <__swbuf_r+0x2a>

08008e14 <__swsetup_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	4b29      	ldr	r3, [pc, #164]	@ (8008ebc <__swsetup_r+0xa8>)
 8008e18:	4605      	mov	r5, r0
 8008e1a:	6818      	ldr	r0, [r3, #0]
 8008e1c:	460c      	mov	r4, r1
 8008e1e:	b118      	cbz	r0, 8008e28 <__swsetup_r+0x14>
 8008e20:	6a03      	ldr	r3, [r0, #32]
 8008e22:	b90b      	cbnz	r3, 8008e28 <__swsetup_r+0x14>
 8008e24:	f7fe f966 	bl	80070f4 <__sinit>
 8008e28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e2c:	0719      	lsls	r1, r3, #28
 8008e2e:	d422      	bmi.n	8008e76 <__swsetup_r+0x62>
 8008e30:	06da      	lsls	r2, r3, #27
 8008e32:	d407      	bmi.n	8008e44 <__swsetup_r+0x30>
 8008e34:	2209      	movs	r2, #9
 8008e36:	602a      	str	r2, [r5, #0]
 8008e38:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e3c:	81a3      	strh	r3, [r4, #12]
 8008e3e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e42:	e033      	b.n	8008eac <__swsetup_r+0x98>
 8008e44:	0758      	lsls	r0, r3, #29
 8008e46:	d512      	bpl.n	8008e6e <__swsetup_r+0x5a>
 8008e48:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e4a:	b141      	cbz	r1, 8008e5e <__swsetup_r+0x4a>
 8008e4c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e50:	4299      	cmp	r1, r3
 8008e52:	d002      	beq.n	8008e5a <__swsetup_r+0x46>
 8008e54:	4628      	mov	r0, r5
 8008e56:	f7ff f8a7 	bl	8007fa8 <_free_r>
 8008e5a:	2300      	movs	r3, #0
 8008e5c:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e5e:	89a3      	ldrh	r3, [r4, #12]
 8008e60:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008e64:	81a3      	strh	r3, [r4, #12]
 8008e66:	2300      	movs	r3, #0
 8008e68:	6063      	str	r3, [r4, #4]
 8008e6a:	6923      	ldr	r3, [r4, #16]
 8008e6c:	6023      	str	r3, [r4, #0]
 8008e6e:	89a3      	ldrh	r3, [r4, #12]
 8008e70:	f043 0308 	orr.w	r3, r3, #8
 8008e74:	81a3      	strh	r3, [r4, #12]
 8008e76:	6923      	ldr	r3, [r4, #16]
 8008e78:	b94b      	cbnz	r3, 8008e8e <__swsetup_r+0x7a>
 8008e7a:	89a3      	ldrh	r3, [r4, #12]
 8008e7c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008e80:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008e84:	d003      	beq.n	8008e8e <__swsetup_r+0x7a>
 8008e86:	4621      	mov	r1, r4
 8008e88:	4628      	mov	r0, r5
 8008e8a:	f000 f883 	bl	8008f94 <__smakebuf_r>
 8008e8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e92:	f013 0201 	ands.w	r2, r3, #1
 8008e96:	d00a      	beq.n	8008eae <__swsetup_r+0x9a>
 8008e98:	2200      	movs	r2, #0
 8008e9a:	60a2      	str	r2, [r4, #8]
 8008e9c:	6962      	ldr	r2, [r4, #20]
 8008e9e:	4252      	negs	r2, r2
 8008ea0:	61a2      	str	r2, [r4, #24]
 8008ea2:	6922      	ldr	r2, [r4, #16]
 8008ea4:	b942      	cbnz	r2, 8008eb8 <__swsetup_r+0xa4>
 8008ea6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008eaa:	d1c5      	bne.n	8008e38 <__swsetup_r+0x24>
 8008eac:	bd38      	pop	{r3, r4, r5, pc}
 8008eae:	0799      	lsls	r1, r3, #30
 8008eb0:	bf58      	it	pl
 8008eb2:	6962      	ldrpl	r2, [r4, #20]
 8008eb4:	60a2      	str	r2, [r4, #8]
 8008eb6:	e7f4      	b.n	8008ea2 <__swsetup_r+0x8e>
 8008eb8:	2000      	movs	r0, #0
 8008eba:	e7f7      	b.n	8008eac <__swsetup_r+0x98>
 8008ebc:	2000001c 	.word	0x2000001c

08008ec0 <_raise_r>:
 8008ec0:	291f      	cmp	r1, #31
 8008ec2:	b538      	push	{r3, r4, r5, lr}
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	460c      	mov	r4, r1
 8008ec8:	d904      	bls.n	8008ed4 <_raise_r+0x14>
 8008eca:	2316      	movs	r3, #22
 8008ecc:	6003      	str	r3, [r0, #0]
 8008ece:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed2:	bd38      	pop	{r3, r4, r5, pc}
 8008ed4:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008ed6:	b112      	cbz	r2, 8008ede <_raise_r+0x1e>
 8008ed8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008edc:	b94b      	cbnz	r3, 8008ef2 <_raise_r+0x32>
 8008ede:	4628      	mov	r0, r5
 8008ee0:	f000 f830 	bl	8008f44 <_getpid_r>
 8008ee4:	4622      	mov	r2, r4
 8008ee6:	4601      	mov	r1, r0
 8008ee8:	4628      	mov	r0, r5
 8008eea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008eee:	f000 b817 	b.w	8008f20 <_kill_r>
 8008ef2:	2b01      	cmp	r3, #1
 8008ef4:	d00a      	beq.n	8008f0c <_raise_r+0x4c>
 8008ef6:	1c59      	adds	r1, r3, #1
 8008ef8:	d103      	bne.n	8008f02 <_raise_r+0x42>
 8008efa:	2316      	movs	r3, #22
 8008efc:	6003      	str	r3, [r0, #0]
 8008efe:	2001      	movs	r0, #1
 8008f00:	e7e7      	b.n	8008ed2 <_raise_r+0x12>
 8008f02:	2100      	movs	r1, #0
 8008f04:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008f08:	4620      	mov	r0, r4
 8008f0a:	4798      	blx	r3
 8008f0c:	2000      	movs	r0, #0
 8008f0e:	e7e0      	b.n	8008ed2 <_raise_r+0x12>

08008f10 <raise>:
 8008f10:	4b02      	ldr	r3, [pc, #8]	@ (8008f1c <raise+0xc>)
 8008f12:	4601      	mov	r1, r0
 8008f14:	6818      	ldr	r0, [r3, #0]
 8008f16:	f7ff bfd3 	b.w	8008ec0 <_raise_r>
 8008f1a:	bf00      	nop
 8008f1c:	2000001c 	.word	0x2000001c

08008f20 <_kill_r>:
 8008f20:	b538      	push	{r3, r4, r5, lr}
 8008f22:	4d07      	ldr	r5, [pc, #28]	@ (8008f40 <_kill_r+0x20>)
 8008f24:	2300      	movs	r3, #0
 8008f26:	4604      	mov	r4, r0
 8008f28:	4608      	mov	r0, r1
 8008f2a:	4611      	mov	r1, r2
 8008f2c:	602b      	str	r3, [r5, #0]
 8008f2e:	f7f8 fe67 	bl	8001c00 <_kill>
 8008f32:	1c43      	adds	r3, r0, #1
 8008f34:	d102      	bne.n	8008f3c <_kill_r+0x1c>
 8008f36:	682b      	ldr	r3, [r5, #0]
 8008f38:	b103      	cbz	r3, 8008f3c <_kill_r+0x1c>
 8008f3a:	6023      	str	r3, [r4, #0]
 8008f3c:	bd38      	pop	{r3, r4, r5, pc}
 8008f3e:	bf00      	nop
 8008f40:	20001908 	.word	0x20001908

08008f44 <_getpid_r>:
 8008f44:	f7f8 be54 	b.w	8001bf0 <_getpid>

08008f48 <__swhatbuf_r>:
 8008f48:	b570      	push	{r4, r5, r6, lr}
 8008f4a:	460c      	mov	r4, r1
 8008f4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f50:	2900      	cmp	r1, #0
 8008f52:	b096      	sub	sp, #88	@ 0x58
 8008f54:	4615      	mov	r5, r2
 8008f56:	461e      	mov	r6, r3
 8008f58:	da0d      	bge.n	8008f76 <__swhatbuf_r+0x2e>
 8008f5a:	89a3      	ldrh	r3, [r4, #12]
 8008f5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f60:	f04f 0100 	mov.w	r1, #0
 8008f64:	bf14      	ite	ne
 8008f66:	2340      	movne	r3, #64	@ 0x40
 8008f68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f6c:	2000      	movs	r0, #0
 8008f6e:	6031      	str	r1, [r6, #0]
 8008f70:	602b      	str	r3, [r5, #0]
 8008f72:	b016      	add	sp, #88	@ 0x58
 8008f74:	bd70      	pop	{r4, r5, r6, pc}
 8008f76:	466a      	mov	r2, sp
 8008f78:	f000 f848 	bl	800900c <_fstat_r>
 8008f7c:	2800      	cmp	r0, #0
 8008f7e:	dbec      	blt.n	8008f5a <__swhatbuf_r+0x12>
 8008f80:	9901      	ldr	r1, [sp, #4]
 8008f82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f8a:	4259      	negs	r1, r3
 8008f8c:	4159      	adcs	r1, r3
 8008f8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f92:	e7eb      	b.n	8008f6c <__swhatbuf_r+0x24>

08008f94 <__smakebuf_r>:
 8008f94:	898b      	ldrh	r3, [r1, #12]
 8008f96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f98:	079d      	lsls	r5, r3, #30
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	460c      	mov	r4, r1
 8008f9e:	d507      	bpl.n	8008fb0 <__smakebuf_r+0x1c>
 8008fa0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008fa4:	6023      	str	r3, [r4, #0]
 8008fa6:	6123      	str	r3, [r4, #16]
 8008fa8:	2301      	movs	r3, #1
 8008faa:	6163      	str	r3, [r4, #20]
 8008fac:	b003      	add	sp, #12
 8008fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fb0:	ab01      	add	r3, sp, #4
 8008fb2:	466a      	mov	r2, sp
 8008fb4:	f7ff ffc8 	bl	8008f48 <__swhatbuf_r>
 8008fb8:	9f00      	ldr	r7, [sp, #0]
 8008fba:	4605      	mov	r5, r0
 8008fbc:	4639      	mov	r1, r7
 8008fbe:	4630      	mov	r0, r6
 8008fc0:	f7ff f866 	bl	8008090 <_malloc_r>
 8008fc4:	b948      	cbnz	r0, 8008fda <__smakebuf_r+0x46>
 8008fc6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fca:	059a      	lsls	r2, r3, #22
 8008fcc:	d4ee      	bmi.n	8008fac <__smakebuf_r+0x18>
 8008fce:	f023 0303 	bic.w	r3, r3, #3
 8008fd2:	f043 0302 	orr.w	r3, r3, #2
 8008fd6:	81a3      	strh	r3, [r4, #12]
 8008fd8:	e7e2      	b.n	8008fa0 <__smakebuf_r+0xc>
 8008fda:	89a3      	ldrh	r3, [r4, #12]
 8008fdc:	6020      	str	r0, [r4, #0]
 8008fde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008fe2:	81a3      	strh	r3, [r4, #12]
 8008fe4:	9b01      	ldr	r3, [sp, #4]
 8008fe6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008fea:	b15b      	cbz	r3, 8009004 <__smakebuf_r+0x70>
 8008fec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ff0:	4630      	mov	r0, r6
 8008ff2:	f000 f81d 	bl	8009030 <_isatty_r>
 8008ff6:	b128      	cbz	r0, 8009004 <__smakebuf_r+0x70>
 8008ff8:	89a3      	ldrh	r3, [r4, #12]
 8008ffa:	f023 0303 	bic.w	r3, r3, #3
 8008ffe:	f043 0301 	orr.w	r3, r3, #1
 8009002:	81a3      	strh	r3, [r4, #12]
 8009004:	89a3      	ldrh	r3, [r4, #12]
 8009006:	431d      	orrs	r5, r3
 8009008:	81a5      	strh	r5, [r4, #12]
 800900a:	e7cf      	b.n	8008fac <__smakebuf_r+0x18>

0800900c <_fstat_r>:
 800900c:	b538      	push	{r3, r4, r5, lr}
 800900e:	4d07      	ldr	r5, [pc, #28]	@ (800902c <_fstat_r+0x20>)
 8009010:	2300      	movs	r3, #0
 8009012:	4604      	mov	r4, r0
 8009014:	4608      	mov	r0, r1
 8009016:	4611      	mov	r1, r2
 8009018:	602b      	str	r3, [r5, #0]
 800901a:	f7f8 fe51 	bl	8001cc0 <_fstat>
 800901e:	1c43      	adds	r3, r0, #1
 8009020:	d102      	bne.n	8009028 <_fstat_r+0x1c>
 8009022:	682b      	ldr	r3, [r5, #0]
 8009024:	b103      	cbz	r3, 8009028 <_fstat_r+0x1c>
 8009026:	6023      	str	r3, [r4, #0]
 8009028:	bd38      	pop	{r3, r4, r5, pc}
 800902a:	bf00      	nop
 800902c:	20001908 	.word	0x20001908

08009030 <_isatty_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4d06      	ldr	r5, [pc, #24]	@ (800904c <_isatty_r+0x1c>)
 8009034:	2300      	movs	r3, #0
 8009036:	4604      	mov	r4, r0
 8009038:	4608      	mov	r0, r1
 800903a:	602b      	str	r3, [r5, #0]
 800903c:	f7f8 fe50 	bl	8001ce0 <_isatty>
 8009040:	1c43      	adds	r3, r0, #1
 8009042:	d102      	bne.n	800904a <_isatty_r+0x1a>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	b103      	cbz	r3, 800904a <_isatty_r+0x1a>
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	20001908 	.word	0x20001908

08009050 <_init>:
 8009050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009052:	bf00      	nop
 8009054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009056:	bc08      	pop	{r3}
 8009058:	469e      	mov	lr, r3
 800905a:	4770      	bx	lr

0800905c <_fini>:
 800905c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800905e:	bf00      	nop
 8009060:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009062:	bc08      	pop	{r3}
 8009064:	469e      	mov	lr, r3
 8009066:	4770      	bx	lr
